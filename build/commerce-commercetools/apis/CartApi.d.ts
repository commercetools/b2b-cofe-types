import { Cart } from '../../../node_modules/@b2bdemo/types/build/cart/Cart';
import { AddressDraft } from '@commercetools/platform-sdk';
import { LineItem, LineItemReturnItemDraft } from '../../../node_modules/@b2bdemo/types/build/cart/LineItem';
import { Cart as CommercetoolsCart } from '@commercetools/platform-sdk';
import { CartUpdate } from '@commercetools/platform-sdk/dist/declarations/src/generated/models/cart';
import { Address } from '../../../node_modules/@b2bdemo/types/build/account/Address';
import { Order } from '../../../node_modules/@b2bdemo/types/build/cart/Order';
import { BaseApi } from './BaseApi';
import { ShippingMethod } from '../../../node_modules/@b2bdemo/types/build/cart/ShippingMethod';
import { Locale } from '../Locale';
import { Payment } from '../../../node_modules/@b2bdemo/types/build/cart/Payment';
import { Account } from '../../../node_modules/@b2bdemo/types/build/account/Account';
import { Discount } from '../../../node_modules/@b2bdemo/types/build/cart/Discount';
import { ActionResult } from '../../../node_modules/@b2bdemo/types/build/result/ActionResult';
import { Organization } from '../../../node_modules/@b2bdemo/types/build/organization/organization';
export declare class CartApi extends BaseApi {
    getForUser: (account: Account, organization: Organization) => Promise<Cart>;
    createCart: (customerId: string, organization: Organization) => Promise<Cart>;
    getById: (cartId: string) => Promise<Cart>;
    addToCart: (cart: Cart, lineItem: LineItem, distributionChannel: string) => Promise<Cart>;
    addItemsToCart: (cart: Cart, lineItems: LineItem[], distributionChannel: string) => Promise<Cart>;
    updateLineItem: (cart: Cart, lineItem: LineItem) => Promise<Cart>;
    removeLineItem: (cart: Cart, lineItem: LineItem) => Promise<Cart>;
    setEmail: (cart: Cart, email: string) => Promise<Cart>;
    setCustomerId: (cart: Cart, customerId: string) => Promise<Cart>;
    setLocale: (cart: Cart, localeCode: string) => Promise<Cart>;
    setShippingAddress: (cart: Cart, address: Address) => Promise<Cart>;
    setBillingAddress: (cart: Cart, address: Address) => Promise<Cart>;
    setShippingMethod: (cart: Cart, shippingMethod: ShippingMethod) => Promise<Cart>;
    order: (cart: Cart) => Promise<Order>;
    getOrders: (account: Account) => Promise<Order[]>;
    getOrder: (orderNumber: string) => Promise<Order>;
    returnItems: (orderNumber: string, returnLineItems: LineItemReturnItemDraft[]) => Promise<Order>;
    getBusinessUnitOrders: (keys: string) => Promise<Order[]>;
    getShippingMethods: (onlyMatching: boolean) => Promise<ShippingMethod[]>;
    getAvailableShippingMethods: (cart: Cart) => Promise<ShippingMethod[]>;
    addPayment: (cart: Cart, payment: Payment) => Promise<Cart>;
    updatePayment: (cart: Cart, payment: Payment) => Promise<Payment>;
    redeemDiscountCode: (cart: Cart, code: string) => Promise<ActionResult<Cart>>;
    removeDiscountCode: (cart: Cart, discount: Discount) => Promise<Cart>;
    protected updateCart(cartId: string, cartUpdate: CartUpdate, locale: Locale): Promise<CommercetoolsCart>;
    protected buildCartWithAvailableShippingMethods: (commercetoolsCart: CommercetoolsCart, locale: Locale) => Promise<Cart>;
    protected assertCorrectLocale: (commercetoolsCart: CommercetoolsCart, locale: Locale) => Promise<Cart>;
    protected recreate: (primaryCommercetoolsCart: CommercetoolsCart, locale: Locale) => Promise<Cart>;
    deleteCart: (primaryCartId: string, cartVersion: number) => Promise<void>;
    replicateCart: (orderId: string) => Promise<Cart>;
    addItemShippingAddress: (originalCart: Cart, address: AddressDraft) => Promise<any>;
    updateLineItemShippingDetails: (cartId: string, lineItemId: string, targets: {
        addressKey: string;
        quantity: number;
    }[]) => Promise<any>;
    protected doesCartNeedLocaleUpdate: (commercetoolsCart: CommercetoolsCart, locale: Locale) => boolean;
}
