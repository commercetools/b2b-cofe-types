(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["extensions"] = factory();
	else
		root["extensions"] = factory();
})(global, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 160);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

var bind = __webpack_require__(47); // utils is a library of generic helper functions non-specific to axios


var toString = Object.prototype.toString; // eslint-disable-next-line func-names

var kindOf = function (cache) {
  // eslint-disable-next-line func-names
  return function (thing) {
    var str = toString.call(thing);
    return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());
  };
}(Object.create(null));

function kindOfTest(type) {
  type = type.toLowerCase();
  return function isKindOf(thing) {
    return kindOf(thing) === type;
  };
}
/**
 * Determine if a value is an Array
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Array, otherwise false
 */


function isArray(val) {
  return Array.isArray(val);
}
/**
 * Determine if a value is undefined
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if the value is undefined, otherwise false
 */


function isUndefined(val) {
  return typeof val === 'undefined';
}
/**
 * Determine if a value is a Buffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Buffer, otherwise false
 */


function isBuffer(val) {
  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor) && typeof val.constructor.isBuffer === 'function' && val.constructor.isBuffer(val);
}
/**
 * Determine if a value is an ArrayBuffer
 *
 * @function
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an ArrayBuffer, otherwise false
 */


var isArrayBuffer = kindOfTest('ArrayBuffer');
/**
 * Determine if a value is a view on an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
 */

function isArrayBufferView(val) {
  var result;

  if (typeof ArrayBuffer !== 'undefined' && ArrayBuffer.isView) {
    result = ArrayBuffer.isView(val);
  } else {
    result = val && val.buffer && isArrayBuffer(val.buffer);
  }

  return result;
}
/**
 * Determine if a value is a String
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a String, otherwise false
 */


function isString(val) {
  return typeof val === 'string';
}
/**
 * Determine if a value is a Number
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Number, otherwise false
 */


function isNumber(val) {
  return typeof val === 'number';
}
/**
 * Determine if a value is an Object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Object, otherwise false
 */


function isObject(val) {
  return val !== null && _typeof(val) === 'object';
}
/**
 * Determine if a value is a plain Object
 *
 * @param {Object} val The value to test
 * @return {boolean} True if value is a plain Object, otherwise false
 */


function isPlainObject(val) {
  if (kindOf(val) !== 'object') {
    return false;
  }

  var prototype = Object.getPrototypeOf(val);
  return prototype === null || prototype === Object.prototype;
}
/**
 * Determine if a value is a Date
 *
 * @function
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Date, otherwise false
 */


var isDate = kindOfTest('Date');
/**
 * Determine if a value is a File
 *
 * @function
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a File, otherwise false
 */

var isFile = kindOfTest('File');
/**
 * Determine if a value is a Blob
 *
 * @function
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Blob, otherwise false
 */

var isBlob = kindOfTest('Blob');
/**
 * Determine if a value is a FileList
 *
 * @function
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a File, otherwise false
 */

var isFileList = kindOfTest('FileList');
/**
 * Determine if a value is a Function
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Function, otherwise false
 */

function isFunction(val) {
  return toString.call(val) === '[object Function]';
}
/**
 * Determine if a value is a Stream
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Stream, otherwise false
 */


function isStream(val) {
  return isObject(val) && isFunction(val.pipe);
}
/**
 * Determine if a value is a FormData
 *
 * @param {Object} thing The value to test
 * @returns {boolean} True if value is an FormData, otherwise false
 */


function isFormData(thing) {
  var pattern = '[object FormData]';
  return thing && (typeof FormData === 'function' && thing instanceof FormData || toString.call(thing) === pattern || isFunction(thing.toString) && thing.toString() === pattern);
}
/**
 * Determine if a value is a URLSearchParams object
 * @function
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a URLSearchParams object, otherwise false
 */


var isURLSearchParams = kindOfTest('URLSearchParams');
/**
 * Trim excess whitespace off the beginning and end of a string
 *
 * @param {String} str The String to trim
 * @returns {String} The String freed of excess whitespace
 */

function trim(str) {
  return str.trim ? str.trim() : str.replace(/^\s+|\s+$/g, '');
}
/**
 * Determine if we're running in a standard browser environment
 *
 * This allows axios to run in a web worker, and react-native.
 * Both environments support XMLHttpRequest, but not fully standard globals.
 *
 * web workers:
 *  typeof window -> undefined
 *  typeof document -> undefined
 *
 * react-native:
 *  navigator.product -> 'ReactNative'
 * nativescript
 *  navigator.product -> 'NativeScript' or 'NS'
 */


function isStandardBrowserEnv() {
  if (typeof navigator !== 'undefined' && (navigator.product === 'ReactNative' || navigator.product === 'NativeScript' || navigator.product === 'NS')) {
    return false;
  }

  return typeof window !== 'undefined' && typeof document !== 'undefined';
}
/**
 * Iterate over an Array or an Object invoking a function for each item.
 *
 * If `obj` is an Array callback will be called passing
 * the value, index, and complete array for each item.
 *
 * If 'obj' is an Object callback will be called passing
 * the value, key, and complete object for each property.
 *
 * @param {Object|Array} obj The object to iterate
 * @param {Function} fn The callback to invoke for each item
 */


function forEach(obj, fn) {
  // Don't bother if no value provided
  if (obj === null || typeof obj === 'undefined') {
    return;
  } // Force an array if not already something iterable


  if (_typeof(obj) !== 'object') {
    /*eslint no-param-reassign:0*/
    obj = [obj];
  }

  if (isArray(obj)) {
    // Iterate over array values
    for (var i = 0, l = obj.length; i < l; i++) {
      fn.call(null, obj[i], i, obj);
    }
  } else {
    // Iterate over object keys
    for (var key in obj) {
      if (Object.prototype.hasOwnProperty.call(obj, key)) {
        fn.call(null, obj[key], key, obj);
      }
    }
  }
}
/**
 * Accepts varargs expecting each argument to be an object, then
 * immutably merges the properties of each object and returns result.
 *
 * When multiple objects contain the same key the later object in
 * the arguments list will take precedence.
 *
 * Example:
 *
 * ```js
 * var result = merge({foo: 123}, {foo: 456});
 * console.log(result.foo); // outputs 456
 * ```
 *
 * @param {Object} obj1 Object to merge
 * @returns {Object} Result of all merge properties
 */


function
  /* obj1, obj2, obj3, ... */
merge() {
  var result = {};

  function assignValue(val, key) {
    if (isPlainObject(result[key]) && isPlainObject(val)) {
      result[key] = merge(result[key], val);
    } else if (isPlainObject(val)) {
      result[key] = merge({}, val);
    } else if (isArray(val)) {
      result[key] = val.slice();
    } else {
      result[key] = val;
    }
  }

  for (var i = 0, l = arguments.length; i < l; i++) {
    forEach(arguments[i], assignValue);
  }

  return result;
}
/**
 * Extends object a by mutably adding to it the properties of object b.
 *
 * @param {Object} a The object to be extended
 * @param {Object} b The object to copy properties from
 * @param {Object} thisArg The object to bind function to
 * @return {Object} The resulting value of object a
 */


function extend(a, b, thisArg) {
  forEach(b, function assignValue(val, key) {
    if (thisArg && typeof val === 'function') {
      a[key] = bind(val, thisArg);
    } else {
      a[key] = val;
    }
  });
  return a;
}
/**
 * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)
 *
 * @param {string} content with BOM
 * @return {string} content value without BOM
 */


function stripBOM(content) {
  if (content.charCodeAt(0) === 0xFEFF) {
    content = content.slice(1);
  }

  return content;
}
/**
 * Inherit the prototype methods from one constructor into another
 * @param {function} constructor
 * @param {function} superConstructor
 * @param {object} [props]
 * @param {object} [descriptors]
 */


function inherits(constructor, superConstructor, props, descriptors) {
  constructor.prototype = Object.create(superConstructor.prototype, descriptors);
  constructor.prototype.constructor = constructor;
  props && Object.assign(constructor.prototype, props);
}
/**
 * Resolve object with deep prototype chain to a flat object
 * @param {Object} sourceObj source object
 * @param {Object} [destObj]
 * @param {Function} [filter]
 * @returns {Object}
 */


function toFlatObject(sourceObj, destObj, filter) {
  var props;
  var i;
  var prop;
  var merged = {};
  destObj = destObj || {};

  do {
    props = Object.getOwnPropertyNames(sourceObj);
    i = props.length;

    while (i-- > 0) {
      prop = props[i];

      if (!merged[prop]) {
        destObj[prop] = sourceObj[prop];
        merged[prop] = true;
      }
    }

    sourceObj = Object.getPrototypeOf(sourceObj);
  } while (sourceObj && (!filter || filter(sourceObj, destObj)) && sourceObj !== Object.prototype);

  return destObj;
}
/*
 * determines whether a string ends with the characters of a specified string
 * @param {String} str
 * @param {String} searchString
 * @param {Number} [position= 0]
 * @returns {boolean}
 */


function endsWith(str, searchString, position) {
  str = String(str);

  if (position === undefined || position > str.length) {
    position = str.length;
  }

  position -= searchString.length;
  var lastIndex = str.indexOf(searchString, position);
  return lastIndex !== -1 && lastIndex === position;
}
/**
 * Returns new array from array like object
 * @param {*} [thing]
 * @returns {Array}
 */


function toArray(thing) {
  if (!thing) return null;
  var i = thing.length;
  if (isUndefined(i)) return null;
  var arr = new Array(i);

  while (i-- > 0) {
    arr[i] = thing[i];
  }

  return arr;
} // eslint-disable-next-line func-names


var isTypedArray = function (TypedArray) {
  // eslint-disable-next-line func-names
  return function (thing) {
    return TypedArray && thing instanceof TypedArray;
  };
}(typeof Uint8Array !== 'undefined' && Object.getPrototypeOf(Uint8Array));

module.exports = {
  isArray: isArray,
  isArrayBuffer: isArrayBuffer,
  isBuffer: isBuffer,
  isFormData: isFormData,
  isArrayBufferView: isArrayBufferView,
  isString: isString,
  isNumber: isNumber,
  isObject: isObject,
  isPlainObject: isPlainObject,
  isUndefined: isUndefined,
  isDate: isDate,
  isFile: isFile,
  isBlob: isBlob,
  isFunction: isFunction,
  isStream: isStream,
  isURLSearchParams: isURLSearchParams,
  isStandardBrowserEnv: isStandardBrowserEnv,
  forEach: forEach,
  merge: merge,
  extend: extend,
  trim: trim,
  stripBOM: stripBOM,
  inherits: inherits,
  toFlatObject: toFlatObject,
  kindOf: kindOf,
  kindOfTest: kindOfTest,
  endsWith: endsWith,
  toArray: toArray,
  isTypedArray: isTypedArray,
  isFileList: isFileList
};

/***/ }),
/* 1 */
/***/ (function(module, exports) {

module.exports = require("stream");

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* eslint no-console: 0 */


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var urllib = __webpack_require__(5);

var util = __webpack_require__(7);

var fs = __webpack_require__(14);

var fetch = __webpack_require__(15);

var dns = __webpack_require__(37);

var net = __webpack_require__(18);

var os = __webpack_require__(19);

var DNS_TTL = 5 * 60 * 1000;
var networkInterfaces = module.exports.networkInterfaces = os.networkInterfaces();

var resolver = function resolver(family, hostname, callback) {
  var familySupported = // crux that replaces Object.values(networkInterfaces) as Object.values is not supported in nodejs v6
  Object.keys(networkInterfaces).map(function (key) {
    return networkInterfaces[key];
  }) // crux that replaces .flat() as it is not supported in older Node versions (v10 and older)
  .reduce(function (acc, val) {
    return acc.concat(val);
  }, []).filter(function (i) {
    return !i.internal;
  }).filter(function (i) {
    return i.family === 'IPv' + family;
  }).length > 0;

  if (!familySupported) {
    return callback(null, []);
  }

  dns['resolve' + family](hostname, function (err, addresses) {
    if (err) {
      switch (err.code) {
        case dns.NODATA:
        case dns.NOTFOUND:
        case dns.NOTIMP:
        case dns.SERVFAIL:
        case dns.CONNREFUSED:
        case 'EAI_AGAIN':
          return callback(null, []);
      }

      return callback(err);
    }

    return callback(null, Array.isArray(addresses) ? addresses : [].concat(addresses || []));
  });
};

var dnsCache = module.exports.dnsCache = new Map();

var formatDNSValue = function formatDNSValue(value, extra) {
  if (!value) {
    return Object.assign({}, extra || {});
  }

  return Object.assign({
    servername: value.servername,
    host: !value.addresses || !value.addresses.length ? null : value.addresses.length === 1 ? value.addresses[0] : value.addresses[Math.floor(Math.random() * value.addresses.length)]
  }, extra || {});
};

module.exports.resolveHostname = function (options, callback) {
  options = options || {};

  if (!options.host && options.servername) {
    options.host = options.servername;
  }

  if (!options.host || net.isIP(options.host)) {
    // nothing to do here
    var value = {
      addresses: [options.host],
      servername: options.servername || false
    };
    return callback(null, formatDNSValue(value, {
      cached: false
    }));
  }

  var cached;

  if (dnsCache.has(options.host)) {
    cached = dnsCache.get(options.host);

    if (!cached.expires || cached.expires >= Date.now()) {
      return callback(null, formatDNSValue(cached.value, {
        cached: true
      }));
    }
  }

  resolver(4, options.host, function (err, addresses) {
    if (err) {
      if (cached) {
        // ignore error, use expired value
        return callback(null, formatDNSValue(cached.value, {
          cached: true,
          error: err
        }));
      }

      return callback(err);
    }

    if (addresses && addresses.length) {
      var _value = {
        addresses: addresses,
        servername: options.servername || options.host
      };
      dnsCache.set(options.host, {
        value: _value,
        expires: Date.now() + DNS_TTL
      });
      return callback(null, formatDNSValue(_value, {
        cached: false
      }));
    }

    resolver(6, options.host, function (err, addresses) {
      if (err) {
        if (cached) {
          // ignore error, use expired value
          return callback(null, formatDNSValue(cached.value, {
            cached: true,
            error: err
          }));
        }

        return callback(err);
      }

      if (addresses && addresses.length) {
        var _value2 = {
          addresses: addresses,
          servername: options.servername || options.host
        };
        dnsCache.set(options.host, {
          value: _value2,
          expires: Date.now() + DNS_TTL
        });
        return callback(null, formatDNSValue(_value2, {
          cached: false
        }));
      }

      try {
        dns.lookup(options.host, {}, function (err, address) {
          if (err) {
            if (cached) {
              // ignore error, use expired value
              return callback(null, formatDNSValue(cached.value, {
                cached: true,
                error: err
              }));
            }

            return callback(err);
          }

          if (!address && cached) {
            // nothing was found, fallback to cached value
            return callback(null, formatDNSValue(cached.value, {
              cached: true
            }));
          }

          var value = {
            addresses: address ? [address] : [options.host],
            servername: options.servername || options.host
          };
          dnsCache.set(options.host, {
            value: value,
            expires: Date.now() + DNS_TTL
          });
          return callback(null, formatDNSValue(value, {
            cached: false
          }));
        });
      } catch (err) {
        if (cached) {
          // ignore error, use expired value
          return callback(null, formatDNSValue(cached.value, {
            cached: true,
            error: err
          }));
        }

        return callback(err);
      }
    });
  });
};
/**
 * Parses connection url to a structured configuration object
 *
 * @param {String} str Connection url
 * @return {Object} Configuration object
 */


module.exports.parseConnectionUrl = function (str) {
  str = str || '';
  var options = {};
  [urllib.parse(str, true)].forEach(function (url) {
    var auth;

    switch (url.protocol) {
      case 'smtp:':
        options.secure = false;
        break;

      case 'smtps:':
        options.secure = true;
        break;

      case 'direct:':
        options.direct = true;
        break;
    }

    if (!isNaN(url.port) && Number(url.port)) {
      options.port = Number(url.port);
    }

    if (url.hostname) {
      options.host = url.hostname;
    }

    if (url.auth) {
      auth = url.auth.split(':');

      if (!options.auth) {
        options.auth = {};
      }

      options.auth.user = auth.shift();
      options.auth.pass = auth.join(':');
    }

    Object.keys(url.query || {}).forEach(function (key) {
      var obj = options;
      var lKey = key;
      var value = url.query[key];

      if (!isNaN(value)) {
        value = Number(value);
      }

      switch (value) {
        case 'true':
          value = true;
          break;

        case 'false':
          value = false;
          break;
      } // tls is nested object


      if (key.indexOf('tls.') === 0) {
        lKey = key.substr(4);

        if (!options.tls) {
          options.tls = {};
        }

        obj = options.tls;
      } else if (key.indexOf('.') >= 0) {
        // ignore nested properties besides tls
        return;
      }

      if (!(lKey in obj)) {
        obj[lKey] = value;
      }
    });
  });
  return options;
};

module.exports._logFunc = function (logger, level, defaults, data, message) {
  var entry = {};
  Object.keys(defaults || {}).forEach(function (key) {
    if (key !== 'level') {
      entry[key] = defaults[key];
    }
  });
  Object.keys(data || {}).forEach(function (key) {
    if (key !== 'level') {
      entry[key] = data[key];
    }
  });

  for (var _len = arguments.length, args = new Array(_len > 5 ? _len - 5 : 0), _key = 5; _key < _len; _key++) {
    args[_key - 5] = arguments[_key];
  }

  logger[level].apply(logger, [entry, message].concat(args));
};
/**
 * Returns a bunyan-compatible logger interface. Uses either provided logger or
 * creates a default console logger
 *
 * @param {Object} [options] Options object that might include 'logger' value
 * @return {Object} bunyan compatible logger
 */


module.exports.getLogger = function (options, defaults) {
  options = options || {};
  var response = {};
  var levels = ['trace', 'debug', 'info', 'warn', 'error', 'fatal'];

  if (!options.logger) {
    // use vanity logger
    levels.forEach(function (level) {
      response[level] = function () {
        return false;
      };
    });
    return response;
  }

  var logger = options.logger;

  if (options.logger === true) {
    // create console logger
    logger = createDefaultLogger(levels);
  }

  levels.forEach(function (level) {
    response[level] = function (data, message) {
      var _module$exports;

      for (var _len2 = arguments.length, args = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
        args[_key2 - 2] = arguments[_key2];
      }

      (_module$exports = module.exports)._logFunc.apply(_module$exports, [logger, level, defaults, data, message].concat(args));
    };
  });
  return response;
};
/**
 * Wrapper for creating a callback that either resolves or rejects a promise
 * based on input
 *
 * @param {Function} resolve Function to run if callback is called
 * @param {Function} reject Function to run if callback ends with an error
 */


module.exports.callbackPromise = function (resolve, reject) {
  return function () {
    var args = Array.from(arguments);
    var err = args.shift();

    if (err) {
      reject(err);
    } else {
      resolve.apply(void 0, _toConsumableArray(args));
    }
  };
};
/**
 * Resolves a String or a Buffer value for content value. Useful if the value
 * is a Stream or a file or an URL. If the value is a Stream, overwrites
 * the stream object with the resolved value (you can't stream a value twice).
 *
 * This is useful when you want to create a plugin that needs a content value,
 * for example the `html` or `text` value as a String or a Buffer but not as
 * a file path or an URL.
 *
 * @param {Object} data An object or an Array you want to resolve an element for
 * @param {String|Number} key Property name or an Array index
 * @param {Function} callback Callback function with (err, value)
 */


module.exports.resolveContent = function (data, key, callback) {
  var promise;

  if (!callback) {
    promise = new Promise(function (resolve, reject) {
      callback = module.exports.callbackPromise(resolve, reject);
    });
  }

  var content = data && data[key] && data[key].content || data[key];
  var contentStream;
  var encoding = (_typeof(data[key]) === 'object' && data[key].encoding || 'utf8').toString().toLowerCase().replace(/[-_\s]/g, '');

  if (!content) {
    return callback(null, content);
  }

  if (_typeof(content) === 'object') {
    if (typeof content.pipe === 'function') {
      return resolveStream(content, function (err, value) {
        if (err) {
          return callback(err);
        } // we can't stream twice the same content, so we need
        // to replace the stream object with the streaming result


        if (data[key].content) {
          data[key].content = value;
        } else {
          data[key] = value;
        }

        callback(null, value);
      });
    } else if (/^https?:\/\//i.test(content.path || content.href)) {
      contentStream = fetch(content.path || content.href);
      return resolveStream(contentStream, callback);
    } else if (/^data:/i.test(content.path || content.href)) {
      var parts = (content.path || content.href).match(/^data:((?:[^;]*;)*(?:[^,]*)),(.*)$/i);

      if (!parts) {
        return callback(null, Buffer.from(0));
      }

      return callback(null, /\bbase64$/i.test(parts[1]) ? Buffer.from(parts[2], 'base64') : Buffer.from(decodeURIComponent(parts[2])));
    } else if (content.path) {
      return resolveStream(fs.createReadStream(content.path), callback);
    }
  }

  if (typeof data[key].content === 'string' && !['utf8', 'usascii', 'ascii'].includes(encoding)) {
    content = Buffer.from(data[key].content, encoding);
  } // default action, return as is


  setImmediate(function () {
    return callback(null, content);
  });
  return promise;
};
/**
 * Copies properties from source objects to target objects
 */


module.exports.assign = function
  /* target, ... sources */
() {
  var args = Array.from(arguments);
  var target = args.shift() || {};
  args.forEach(function (source) {
    Object.keys(source || {}).forEach(function (key) {
      if (['tls', 'auth'].includes(key) && source[key] && _typeof(source[key]) === 'object') {
        // tls and auth are special keys that need to be enumerated separately
        // other objects are passed as is
        if (!target[key]) {
          // ensure that target has this key
          target[key] = {};
        }

        Object.keys(source[key]).forEach(function (subKey) {
          target[key][subKey] = source[key][subKey];
        });
      } else {
        target[key] = source[key];
      }
    });
  });
  return target;
};

module.exports.encodeXText = function (str) {
  // ! 0x21
  // + 0x2B
  // = 0x3D
  // ~ 0x7E
  if (!/[^\x21-\x2A\x2C-\x3C\x3E-\x7E]/.test(str)) {
    return str;
  }

  var buf = Buffer.from(str);
  var result = '';

  for (var i = 0, len = buf.length; i < len; i++) {
    var c = buf[i];

    if (c < 0x21 || c > 0x7e || c === 0x2b || c === 0x3d) {
      result += '+' + (c < 0x10 ? '0' : '') + c.toString(16).toUpperCase();
    } else {
      result += String.fromCharCode(c);
    }
  }

  return result;
};
/**
 * Streams a stream value into a Buffer
 *
 * @param {Object} stream Readable stream
 * @param {Function} callback Callback function with (err, value)
 */


function resolveStream(stream, callback) {
  var responded = false;
  var chunks = [];
  var chunklen = 0;
  stream.on('error', function (err) {
    if (responded) {
      return;
    }

    responded = true;
    callback(err);
  });
  stream.on('readable', function () {
    var chunk;

    while ((chunk = stream.read()) !== null) {
      chunks.push(chunk);
      chunklen += chunk.length;
    }
  });
  stream.on('end', function () {
    if (responded) {
      return;
    }

    responded = true;
    var value;

    try {
      value = Buffer.concat(chunks, chunklen);
    } catch (E) {
      return callback(E);
    }

    callback(null, value);
  });
}
/**
 * Generates a bunyan-like logger that prints to console
 *
 * @returns {Object} Bunyan logger instance
 */


function createDefaultLogger(levels) {
  var levelMaxLen = 0;
  var levelNames = new Map();
  levels.forEach(function (level) {
    if (level.length > levelMaxLen) {
      levelMaxLen = level.length;
    }
  });
  levels.forEach(function (level) {
    var levelName = level.toUpperCase();

    if (levelName.length < levelMaxLen) {
      levelName += ' '.repeat(levelMaxLen - levelName.length);
    }

    levelNames.set(level, levelName);
  });

  var print = function print(level, entry, message) {
    var prefix = '';

    if (entry) {
      if (entry.tnx === 'server') {
        prefix = 'S: ';
      } else if (entry.tnx === 'client') {
        prefix = 'C: ';
      }

      if (entry.sid) {
        prefix = '[' + entry.sid + '] ' + prefix;
      }

      if (entry.cid) {
        prefix = '[#' + entry.cid + '] ' + prefix;
      }
    }

    for (var _len3 = arguments.length, args = new Array(_len3 > 3 ? _len3 - 3 : 0), _key3 = 3; _key3 < _len3; _key3++) {
      args[_key3 - 3] = arguments[_key3];
    }

    message = util.format.apply(util, [message].concat(args));
    message.split(/\r?\n/).forEach(function (line) {
      console.log('[%s] %s %s', new Date().toISOString().substr(0, 19).replace(/T/, ' '), levelNames.get(level), prefix + line);
    });
  };

  var logger = {};
  levels.forEach(function (level) {
    logger[level] = print.bind(null, level);
  });
  return logger;
}

/***/ }),
/* 3 */
/***/ (function(module) {

module.exports = JSON.parse("{\"name\":\"nodemailer\",\"version\":\"6.7.3\",\"description\":\"Easy as cake e-mail sending from your Node.js applications\",\"main\":\"lib/nodemailer.js\",\"scripts\":{\"test\":\"grunt\"},\"repository\":{\"type\":\"git\",\"url\":\"https://github.com/nodemailer/nodemailer.git\"},\"keywords\":[\"Nodemailer\"],\"author\":\"Andris Reinman\",\"license\":\"MIT\",\"bugs\":{\"url\":\"https://github.com/nodemailer/nodemailer/issues\"},\"homepage\":\"https://nodemailer.com/\",\"devDependencies\":{\"@aws-sdk/client-ses\":\"3.54.1\",\"aws-sdk\":\"2.1096.0\",\"bunyan\":\"1.8.15\",\"chai\":\"4.3.6\",\"eslint-config-nodemailer\":\"1.2.0\",\"eslint-config-prettier\":\"8.5.0\",\"grunt\":\"1.4.1\",\"grunt-cli\":\"1.4.3\",\"grunt-eslint\":\"24.0.0\",\"grunt-mocha-test\":\"0.13.3\",\"libbase64\":\"1.2.1\",\"libmime\":\"5.0.0\",\"libqp\":\"1.1.0\",\"mocha\":\"9.2.2\",\"nodemailer-ntlm-auth\":\"1.0.1\",\"proxy\":\"1.0.2\",\"proxy-test-server\":\"1.0.0\",\"sinon\":\"13.0.1\",\"smtp-server\":\"3.10.0\"},\"engines\":{\"node\":\">=6.0.0\"}}");

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createHttpClient = createHttpClient;
exports.createRequestConfig = createRequestConfig;
exports.enforceObjPath = enforceObjPath;
exports.errorHandler = errorHandler;
exports.freezeSys = freezeSys;
exports.getUserAgentHeader = getUserAgentHeader;
exports.toPlainObject = toPlainObject;

var _fastCopy = _interopRequireDefault(__webpack_require__(6));

var _qs = _interopRequireDefault(__webpack_require__(131));

var _lodash = _interopRequireDefault(__webpack_require__(143));

var _pThrottle = _interopRequireDefault(__webpack_require__(144));

var _lodash2 = _interopRequireDefault(__webpack_require__(145));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof2(obj) { "@babel/helpers - typeof"; return _typeof2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof2(obj); }

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }

  return target;
}

function _typeof(obj) {
  "@babel/helpers - typeof";

  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
    return typeof obj;
  } : function (obj) {
    return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
  }, _typeof(obj);
}

function _wrapRegExp() {
  _wrapRegExp = function _wrapRegExp(re, groups) {
    return new BabelRegExp(re, void 0, groups);
  };

  var _super = RegExp.prototype,
      _groups = new WeakMap();

  function BabelRegExp(re, flags, groups) {
    var _this = new RegExp(re, flags);

    return _groups.set(_this, groups || _groups.get(re)), _setPrototypeOf(_this, BabelRegExp.prototype);
  }

  function buildGroups(result, re) {
    var g = _groups.get(re);

    return Object.keys(g).reduce(function (groups, name) {
      return groups[name] = result[g[name]], groups;
    }, Object.create(null));
  }

  return _inherits(BabelRegExp, RegExp), BabelRegExp.prototype.exec = function (str) {
    var result = _super.exec.call(this, str);

    return result && (result.groups = buildGroups(result, this)), result;
  }, BabelRegExp.prototype[Symbol.replace] = function (str, substitution) {
    if ("string" == typeof substitution) {
      var groups = _groups.get(this);

      return _super[Symbol.replace].call(this, str, substitution.replace(/\$<([^>]+)>/g, function (_, name) {
        return "$" + groups[name];
      }));
    }

    if ("function" == typeof substitution) {
      var _this = this;

      return _super[Symbol.replace].call(this, str, function () {
        var args = arguments;
        return "object" != _typeof2(args[args.length - 1]) && (args = [].slice.call(args)).push(buildGroups(args, _this)), substitution.apply(this, args);
      });
    }

    return _super[Symbol.replace].call(this, str, substitution);
  }, _wrapRegExp.apply(this, arguments);
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  Object.defineProperty(subClass, "prototype", {
    writable: false
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

function _iterableToArrayLimit(arr, i) {
  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];

  if (_i == null) return;
  var _arr = [];
  var _n = true;
  var _d = false;

  var _s, _e;

  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }

  return arr2;
}

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function _createForOfIteratorHelper(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];

  if (!it) {
    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
      if (it) o = it;
      var i = 0;

      var F = function F() {};

      return {
        s: F,
        n: function n() {
          if (i >= o.length) return {
            done: true
          };
          return {
            done: false,
            value: o[i++]
          };
        },
        e: function e(_e2) {
          throw _e2;
        },
        f: F
      };
    }

    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  var normalCompletion = true,
      didErr = false,
      err;
  return {
    s: function s() {
      it = it.call(o);
    },
    n: function n() {
      var step = it.next();
      normalCompletion = step.done;
      return step;
    },
    e: function e(_e3) {
      didErr = true;
      err = _e3;
    },
    f: function f() {
      try {
        if (!normalCompletion && it["return"] != null) it["return"]();
      } finally {
        if (didErr) throw err;
      }
    }
  };
}

function isNode() {
  /**
   * Polyfills of 'process' might set process.browser === true
   *
   * See:
   * https://github.com/webpack/node-libs-browser/blob/master/mock/process.js#L8
   * https://github.com/defunctzombie/node-process/blob/master/browser.js#L156
   **/
  return typeof process !== 'undefined' && !process.browser;
}

function isReactNative() {
  return typeof window !== 'undefined' && 'navigator' in window && 'product' in window.navigator && window.navigator.product === 'ReactNative';
}

function getNodeVersion() {
  return process.versions && process.versions.node ? "v".concat(process.versions.node) : process.version;
}

function getWindow() {
  return window;
}

function noop() {
  return undefined;
}

var PERCENTAGE_REGEX = /*#__PURE__*/_wrapRegExp(/(\d+)(%)/, {
  value: 1
});

function calculateLimit(type) {
  var max = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 7;
  var limit = max;

  if (PERCENTAGE_REGEX.test(type)) {
    var _type$match;

    var groups = (_type$match = type.match(PERCENTAGE_REGEX)) === null || _type$match === void 0 ? void 0 : _type$match.groups;

    if (groups && groups.value) {
      var percentage = parseInt(groups.value) / 100;
      limit = Math.round(max * percentage);
    }
  }

  return Math.min(30, Math.max(1, limit));
}

function createThrottle(limit, logger) {
  logger('info', "Throttle request to ".concat(limit, "/s"));
  return (0, _pThrottle["default"])({
    limit: limit,
    interval: 1000,
    strict: false
  });
}

var rateLimitThrottle = function rateLimitThrottle(axiosInstance) {
  var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'auto';
  var _axiosInstance$defaul = axiosInstance.defaults.logHandler,
      logHandler = _axiosInstance$defaul === void 0 ? noop : _axiosInstance$defaul;
  var limit = (0, _lodash["default"])(type) ? calculateLimit(type) : calculateLimit('auto', type);
  var throttle = createThrottle(limit, logHandler);
  var isCalculated = false;
  var requestInterceptorId = axiosInstance.interceptors.request.use(function (config) {
    return throttle(function () {
      return config;
    })();
  }, function (error) {
    return Promise.reject(error);
  });
  var responseInterceptorId = axiosInstance.interceptors.response.use(function (response) {
    if (!isCalculated && (0, _lodash["default"])(type) && (type === 'auto' || PERCENTAGE_REGEX.test(type)) && response.headers && response.headers['x-contentful-ratelimit-second-limit']) {
      var rawLimit = parseInt(response.headers['x-contentful-ratelimit-second-limit']);
      var nextLimit = calculateLimit(type, rawLimit);

      if (nextLimit !== limit) {
        if (requestInterceptorId) {
          axiosInstance.interceptors.request.eject(requestInterceptorId);
        }

        limit = nextLimit;
        throttle = createThrottle(nextLimit, logHandler);
        requestInterceptorId = axiosInstance.interceptors.request.use(function (config) {
          return throttle(function () {
            return config;
          })();
        }, function (error) {
          return Promise.reject(error);
        });
      }

      isCalculated = true;
    }

    return response;
  }, function (error) {
    return Promise.reject(error);
  });
  return function () {
    axiosInstance.interceptors.request.eject(requestInterceptorId);
    axiosInstance.interceptors.response.eject(responseInterceptorId);
  };
};

var delay = function delay(ms) {
  return new Promise(function (resolve) {
    setTimeout(resolve, ms);
  });
};

var defaultWait = function defaultWait(attempts) {
  return Math.pow(Math.SQRT2, attempts);
};

function rateLimit(instance) {
  var maxRetry = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 5;
  var _instance$defaults = instance.defaults,
      _instance$defaults$re = _instance$defaults.responseLogger,
      responseLogger = _instance$defaults$re === void 0 ? noop : _instance$defaults$re,
      _instance$defaults$re2 = _instance$defaults.requestLogger,
      requestLogger = _instance$defaults$re2 === void 0 ? noop : _instance$defaults$re2;
  instance.interceptors.request.use(function (config) {
    requestLogger(config);
    return config;
  }, function (error) {
    requestLogger(error);
    return Promise.reject(error);
  });
  instance.interceptors.response.use(function (response) {
    // we don't need to do anything here
    responseLogger(response);
    return response;
  }, function (error) {
    var response = error.response;
    var config = error.config;
    responseLogger(error); // Do not retry if it is disabled or no request config exists (not an axios error)

    if (!config || !instance.defaults.retryOnError) {
      return Promise.reject(error);
    } // Retried already for max attempts


    var doneAttempts = config.attempts || 1;

    if (doneAttempts > maxRetry) {
      error.attempts = config.attempts;
      return Promise.reject(error);
    }

    var retryErrorType = null;
    var wait = defaultWait(doneAttempts); // Errors without response did not receive anything from the server

    if (!response) {
      retryErrorType = 'Connection';
    } else if (response.status >= 500 && response.status < 600) {
      // 5** errors are server related
      retryErrorType = "Server ".concat(response.status);
    } else if (response.status === 429) {
      // 429 errors are exceeded rate limit exceptions
      retryErrorType = 'Rate limit'; // all headers are lowercased by axios https://github.com/mzabriskie/axios/issues/413

      if (response.headers && error.response.headers['x-contentful-ratelimit-reset']) {
        wait = response.headers['x-contentful-ratelimit-reset'];
      }
    }

    if (retryErrorType) {
      // convert to ms and add jitter
      wait = Math.floor(wait * 1000 + Math.random() * 200 + 500);
      instance.defaults.logHandler('warning', "".concat(retryErrorType, " error occurred. Waiting for ").concat(wait, " ms before retrying...")); // increase attempts counter

      config.attempts = doneAttempts + 1;
      /* Somehow between the interceptor and retrying the request the httpAgent/httpsAgent gets transformed from an Agent-like object
       to a regular object, causing failures on retries after rate limits. Removing these properties here fixes the error, but retry
       requests still use the original http/httpsAgent property */

      delete config.httpAgent;
      delete config.httpsAgent;
      return delay(wait).then(function () {
        return instance(config);
      });
    }

    return Promise.reject(error);
  });
}

function asyncToken(instance, getToken) {
  instance.interceptors.request.use(function (config) {
    return getToken().then(function (accessToken) {
      config.headers = _objectSpread2(_objectSpread2({}, config.headers), {}, {
        Authorization: "Bearer ".concat(accessToken)
      });
      return config;
    });
  });
} // Also enforces toplevel domain specified, no spaces and no protocol


var HOST_REGEX = /^(?!\w+:\/\/)([^\s:]+\.?[^\s:]+)(?::(\d+))?(?!:)$/;
/**
 * Create pre configured axios instance
 * @private
 * @param {AxiosStatic} axios - Axios library
 * @param {CreateHttpClientParams} options - Initialization parameters for the HTTP client
 * @return {ContentfulAxiosInstance} Initialized axios instance
 */

function createHttpClient(axios, options) {
  var defaultConfig = {
    insecure: false,
    retryOnError: true,
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    logHandler: function logHandler(level, data) {
      if (level === 'error' && data) {
        var title = [data.name, data.message].filter(function (a) {
          return a;
        }).join(' - ');
        console.error("[error] ".concat(title));
        console.error(data);
        return;
      }

      console.log("[".concat(level, "] ").concat(data));
    },
    // Passed to axios
    headers: {},
    httpAgent: false,
    httpsAgent: false,
    timeout: 30000,
    throttle: 0,
    proxy: false,
    basePath: '',
    adapter: undefined,
    maxContentLength: 1073741824,
    // 1GB
    maxBodyLength: 1073741824 // 1GB

  };

  var config = _objectSpread2(_objectSpread2({}, defaultConfig), options);

  if (!config.accessToken) {
    var missingAccessTokenError = new TypeError('Expected parameter accessToken');
    config.logHandler('error', missingAccessTokenError);
    throw missingAccessTokenError;
  } // Construct axios baseURL option


  var protocol = config.insecure ? 'http' : 'https';
  var space = config.space ? "".concat(config.space, "/") : '';
  var hostname = config.defaultHostname;
  var port = config.insecure ? 80 : 443;

  if (config.host && HOST_REGEX.test(config.host)) {
    var parsed = config.host.split(':');

    if (parsed.length === 2) {
      var _parsed = _slicedToArray(parsed, 2);

      hostname = _parsed[0];
      port = _parsed[1];
    } else {
      hostname = parsed[0];
    }
  } // Ensure that basePath does start but not end with a slash


  if (config.basePath) {
    config.basePath = "/".concat(config.basePath.split('/').filter(Boolean).join('/'));
  }

  var baseURL = options.baseURL || "".concat(protocol, "://").concat(hostname, ":").concat(port).concat(config.basePath, "/spaces/").concat(space);

  if (!config.headers.Authorization && typeof config.accessToken !== 'function') {
    config.headers.Authorization = 'Bearer ' + config.accessToken;
  } // Set these headers only for node because browsers don't like it when you
  // override user-agent or accept-encoding.
  // The SDKs should set their own X-Contentful-User-Agent.


  if (isNode()) {
    config.headers['user-agent'] = 'node.js/' + getNodeVersion();
    config.headers['Accept-Encoding'] = 'gzip';
  }

  var axiosOptions = {
    // Axios
    baseURL: baseURL,
    headers: config.headers,
    httpAgent: config.httpAgent,
    httpsAgent: config.httpsAgent,
    paramsSerializer: _qs["default"].stringify,
    proxy: config.proxy,
    timeout: config.timeout,
    adapter: config.adapter,
    maxContentLength: config.maxContentLength,
    maxBodyLength: config.maxBodyLength,
    // Contentful
    logHandler: config.logHandler,
    responseLogger: config.responseLogger,
    requestLogger: config.requestLogger,
    retryOnError: config.retryOnError
  };
  var instance = axios.create(axiosOptions);
  instance.httpClientParams = options;
  /**
   * Creates a new axios instance with the same default base parameters as the
   * current one, and with any overrides passed to the newParams object
   * This is useful as the SDKs use dependency injection to get the axios library
   * and the version of the library comes from different places depending
   * on whether it's a browser build or a node.js build.
   * @private
   * @param {CreateHttpClientParams} httpClientParams - Initialization parameters for the HTTP client
   * @return {ContentfulAxiosInstance} Initialized axios instance
   */

  instance.cloneWithNewParams = function (newParams) {
    return createHttpClient(axios, _objectSpread2(_objectSpread2({}, (0, _fastCopy["default"])(options)), newParams));
  };
  /**
   * Apply interceptors.
   * Please note that the order of interceptors is important
   */


  if (config.onBeforeRequest) {
    instance.interceptors.request.use(config.onBeforeRequest);
  }

  if (typeof config.accessToken === 'function') {
    asyncToken(instance, config.accessToken);
  }

  if (config.throttle) {
    rateLimitThrottle(instance, config.throttle);
  }

  rateLimit(instance, config.retryLimit);

  if (config.onError) {
    instance.interceptors.response.use(function (response) {
      return response;
    }, config.onError);
  }

  return instance;
}
/* eslint-disable @typescript-eslint/no-explicit-any */

/**
 * Creates request parameters configuration by parsing an existing query object
 * @private
 * @param {Object} query
 * @return {Object} Config object with `params` property, ready to be used in axios
 */


function createRequestConfig(_ref) {
  var query = _ref.query;
  var config = {};
  delete query.resolveLinks;
  config.params = (0, _fastCopy["default"])(query);
  return config;
} // eslint-disable-next-line @typescript-eslint/no-explicit-any


function enforceObjPath(obj, path) {
  if (!(path in obj)) {
    var err = new Error();
    err.name = 'PropertyMissing';
    err.message = "Required property ".concat(path, " missing from:\n\n").concat(JSON.stringify(obj), "\n\n");
    throw err;
  }

  return true;
} // copied from https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze


function deepFreeze(object) {
  var propNames = Object.getOwnPropertyNames(object);

  var _iterator = _createForOfIteratorHelper(propNames),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var name = _step.value;
      var value = object[name];

      if (value && _typeof(value) === 'object') {
        deepFreeze(value);
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  return Object.freeze(object);
}

function freezeSys(obj) {
  deepFreeze(obj.sys || {});
  return obj;
}

function getBrowserOS() {
  var win = getWindow();

  if (!win) {
    return null;
  }

  var userAgent = win.navigator.userAgent; // TODO: platform is deprecated.

  var platform = win.navigator.platform;
  var macosPlatforms = ['Macintosh', 'MacIntel', 'MacPPC', 'Mac68K'];
  var windowsPlatforms = ['Win32', 'Win64', 'Windows', 'WinCE'];
  var iosPlatforms = ['iPhone', 'iPad', 'iPod'];

  if (macosPlatforms.indexOf(platform) !== -1) {
    return 'macOS';
  } else if (iosPlatforms.indexOf(platform) !== -1) {
    return 'iOS';
  } else if (windowsPlatforms.indexOf(platform) !== -1) {
    return 'Windows';
  } else if (/Android/.test(userAgent)) {
    return 'Android';
  } else if (/Linux/.test(platform)) {
    return 'Linux';
  }

  return null;
}

function getNodeOS() {
  var platform = process.platform || 'linux';
  var version = process.version || '0.0.0';
  var platformMap = {
    android: 'Android',
    aix: 'Linux',
    darwin: 'macOS',
    freebsd: 'Linux',
    linux: 'Linux',
    openbsd: 'Linux',
    sunos: 'Linux',
    win32: 'Windows'
  };

  if (platform in platformMap) {
    return "".concat(platformMap[platform] || 'Linux', "/").concat(version);
  }

  return null;
}

function getUserAgentHeader(sdk, application, integration, feature) {
  var headerParts = [];

  if (application) {
    headerParts.push("app ".concat(application));
  }

  if (integration) {
    headerParts.push("integration ".concat(integration));
  }

  if (feature) {
    headerParts.push('feature ' + feature);
  }

  headerParts.push("sdk ".concat(sdk));
  var platform = null;

  try {
    if (isReactNative()) {
      platform = getBrowserOS();
      headerParts.push('platform ReactNative');
    } else if (isNode()) {
      platform = getNodeOS();
      headerParts.push("platform node.js/".concat(getNodeVersion()));
    } else {
      platform = getBrowserOS();
      headerParts.push('platform browser');
    }
  } catch (e) {
    platform = null;
  }

  if (platform) {
    headerParts.push("os ".concat(platform));
  }

  return "".concat(headerParts.filter(function (item) {
    return item !== '';
  }).join('; '), ";");
}
/**
 * Mixes in a method to return just a plain object with no additional methods
 * @private
 * @param data - Any plain JSON response returned from the API
 * @return Enhanced object with toPlainObject method
 */


function toPlainObject(data) {
  // eslint-disable-next-line @typescript-eslint/ban-ts-comment
  // @ts-expect-error
  return Object.defineProperty(data, 'toPlainObject', {
    enumerable: false,
    configurable: false,
    writable: false,
    value: function value() {
      return (0, _fastCopy["default"])(this);
    }
  });
}
/**
 * Handles errors received from the server. Parses the error into a more useful
 * format, places it in an exception and throws it.
 * See https://www.contentful.com/developers/docs/references/errors/
 * for more details on the data received on the errorResponse.data property
 * and the expected error codes.
 * @private
 */


function errorHandler(errorResponse) {
  var config = errorResponse.config,
      response = errorResponse.response;
  var errorName; // Obscure the Management token

  if (config && config.headers && config.headers['Authorization']) {
    var token = "...".concat(config.headers['Authorization'].toString().substr(-5));
    config.headers['Authorization'] = "Bearer ".concat(token);
  }

  if (!(0, _lodash2["default"])(response) || !(0, _lodash2["default"])(config)) {
    throw errorResponse;
  }

  var data = response === null || response === void 0 ? void 0 : response.data;
  var errorData = {
    status: response === null || response === void 0 ? void 0 : response.status,
    statusText: response === null || response === void 0 ? void 0 : response.statusText,
    message: '',
    details: {}
  };

  if ((0, _lodash2["default"])(config)) {
    errorData.request = {
      url: config.url,
      headers: config.headers,
      method: config.method,
      payloadData: config.data
    };
  }

  if (data && (0, _lodash2["default"])(data)) {
    if ('requestId' in data) {
      errorData.requestId = data.requestId || 'UNKNOWN';
    }

    if ('message' in data) {
      errorData.message = data.message || '';
    }

    if ('details' in data) {
      errorData.details = data.details || {};
    }

    if ('sys' in data) {
      if ('id' in data.sys) {
        errorName = data.sys.id;
      }
    }
  }

  var error = new Error();
  error.name = errorName && errorName !== 'Unknown' ? errorName : "".concat(response === null || response === void 0 ? void 0 : response.status, " ").concat(response === null || response === void 0 ? void 0 : response.statusText);

  try {
    error.message = JSON.stringify(errorData, null, '  ');
  } catch (_unused) {
    var _errorData$message;

    error.message = (_errorData$message = errorData === null || errorData === void 0 ? void 0 : errorData.message) !== null && _errorData$message !== void 0 ? _errorData$message : '';
  }

  throw error;
}

/***/ }),
/* 5 */
/***/ (function(module, exports) {

module.exports = require("url");

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = copy;

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

var toStringFunction = Function.prototype.toString;
var create = Object.create,
    defineProperty = Object.defineProperty,
    getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor,
    getOwnPropertyNames = Object.getOwnPropertyNames,
    getOwnPropertySymbols = Object.getOwnPropertySymbols,
    getPrototypeOf$1 = Object.getPrototypeOf;
var _a = Object.prototype,
    hasOwnProperty = _a.hasOwnProperty,
    propertyIsEnumerable = _a.propertyIsEnumerable;
var SYMBOL_PROPERTIES = typeof getOwnPropertySymbols === 'function';
var WEAK_MAP = typeof WeakMap === 'function';
/**
 * @function createCache
 *
 * @description
 * get a new cache object to prevent circular references
 *
 * @returns the new cache object
 */

var createCache = function () {
  if (WEAK_MAP) {
    return function () {
      return new WeakMap();
    };
  }

  var Cache =
  /** @class */
  function () {
    function Cache() {
      this._keys = [];
      this._values = [];
    }

    Cache.prototype.has = function (key) {
      return !!~this._keys.indexOf(key);
    };

    Cache.prototype.get = function (key) {
      return this._values[this._keys.indexOf(key)];
    };

    Cache.prototype.set = function (key, value) {
      this._keys.push(key);

      this._values.push(value);
    };

    return Cache;
  }();

  return function () {
    return new Cache();
  };
}();
/**
 * @function getCleanClone
 *
 * @description
 * get an empty version of the object with the same prototype it has
 *
 * @param object the object to build a clean clone from
 * @param realm the realm the object resides in
 * @returns the empty cloned object
 */


var getCleanClone = function getCleanClone(object, realm) {
  var prototype = object.__proto__ || getPrototypeOf$1(object);

  if (!prototype) {
    return create(null);
  }

  var Constructor = prototype.constructor;

  if (Constructor === realm.Object) {
    return prototype === realm.Object.prototype ? {} : create(prototype);
  }

  if (~toStringFunction.call(Constructor).indexOf('[native code]')) {
    try {
      return new Constructor();
    } catch (_a) {}
  }

  return create(prototype);
};
/**
 * @function getObjectCloneLoose
 *
 * @description
 * get a copy of the object based on loose rules, meaning all enumerable keys
 * and symbols are copied, but property descriptors are not considered
 *
 * @param object the object to clone
 * @param realm the realm the object resides in
 * @param handleCopy the function that handles copying the object
 * @returns the copied object
 */


var getObjectCloneLoose = function getObjectCloneLoose(object, realm, handleCopy, cache) {
  var clone = getCleanClone(object, realm); // set in the cache immediately to be able to reuse the object recursively

  cache.set(object, clone);

  for (var key in object) {
    if (hasOwnProperty.call(object, key)) {
      clone[key] = handleCopy(object[key], cache);
    }
  }

  if (SYMBOL_PROPERTIES) {
    var symbols = getOwnPropertySymbols(object);

    for (var index = 0, length_1 = symbols.length, symbol = void 0; index < length_1; ++index) {
      symbol = symbols[index];

      if (propertyIsEnumerable.call(object, symbol)) {
        clone[symbol] = handleCopy(object[symbol], cache);
      }
    }
  }

  return clone;
};
/**
 * @function getObjectCloneStrict
 *
 * @description
 * get a copy of the object based on strict rules, meaning all keys and symbols
 * are copied based on the original property descriptors
 *
 * @param object the object to clone
 * @param realm the realm the object resides in
 * @param handleCopy the function that handles copying the object
 * @returns the copied object
 */


var getObjectCloneStrict = function getObjectCloneStrict(object, realm, handleCopy, cache) {
  var clone = getCleanClone(object, realm); // set in the cache immediately to be able to reuse the object recursively

  cache.set(object, clone);
  var properties = SYMBOL_PROPERTIES ? getOwnPropertyNames(object).concat(getOwnPropertySymbols(object)) : getOwnPropertyNames(object);

  for (var index = 0, length_2 = properties.length, property = void 0, descriptor = void 0; index < length_2; ++index) {
    property = properties[index];

    if (property !== 'callee' && property !== 'caller') {
      descriptor = getOwnPropertyDescriptor(object, property);

      if (descriptor) {
        // Only clone the value if actually a value, not a getter / setter.
        if (!descriptor.get && !descriptor.set) {
          descriptor.value = handleCopy(object[property], cache);
        }

        try {
          defineProperty(clone, property, descriptor);
        } catch (error) {
          // Tee above can fail on node in edge cases, so fall back to the loose assignment.
          clone[property] = descriptor.value;
        }
      } else {
        // In extra edge cases where the property descriptor cannot be retrived, fall back to
        // the loose assignment.
        clone[property] = handleCopy(object[property], cache);
      }
    }
  }

  return clone;
};
/**
 * @function getRegExpFlags
 *
 * @description
 * get the flags to apply to the copied regexp
 *
 * @param regExp the regexp to get the flags of
 * @returns the flags for the regexp
 */


var getRegExpFlags = function getRegExpFlags(regExp) {
  var flags = '';

  if (regExp.global) {
    flags += 'g';
  }

  if (regExp.ignoreCase) {
    flags += 'i';
  }

  if (regExp.multiline) {
    flags += 'm';
  }

  if (regExp.unicode) {
    flags += 'u';
  }

  if (regExp.sticky) {
    flags += 'y';
  }

  return flags;
}; // utils


var isArray = Array.isArray;
var getPrototypeOf = Object.getPrototypeOf;

var GLOBAL_THIS = function () {
  if (typeof globalThis !== 'undefined') {
    return globalThis;
  }

  if (typeof self !== 'undefined') {
    return self;
  }

  if (typeof window !== 'undefined') {
    return window;
  }

  if (typeof global !== 'undefined') {
    return global;
  }

  if (console && console.error) {
    console.error('Unable to locate global object, returning "this".');
  }

  return this;
}();
/**
 * @function copy
 *
 * @description
 * copy an value deeply as much as possible
 *
 * If `strict` is applied, then all properties (including non-enumerable ones)
 * are copied with their original property descriptors on both objects and arrays.
 *
 * The value is compared to the global constructors in the `realm` provided,
 * and the native constructor is always used to ensure that extensions of native
 * objects (allows in ES2015+) are maintained.
 *
 * @param value the value to copy
 * @param [options] the options for copying with
 * @param [options.isStrict] should the copy be strict
 * @param [options.realm] the realm (this) value the value is copied from
 * @returns the copied value
 */


function copy(value, options) {
  // manually coalesced instead of default parameters for performance
  var isStrict = !!(options && options.isStrict);
  var realm = options && options.realm || GLOBAL_THIS;
  var getObjectClone = isStrict ? getObjectCloneStrict : getObjectCloneLoose;
  /**
   * @function handleCopy
   *
   * @description
   * copy the value recursively based on its type
   *
   * @param value the value to copy
   * @returns the copied value
   */

  var handleCopy = function handleCopy(value, cache) {
    if (!value || _typeof(value) !== 'object') {
      return value;
    }

    if (cache.has(value)) {
      return cache.get(value);
    }

    var prototype = value.__proto__ || getPrototypeOf(value);
    var Constructor = prototype && prototype.constructor; // plain objects

    if (!Constructor || Constructor === realm.Object) {
      return getObjectClone(value, realm, handleCopy, cache);
    }

    var clone; // arrays

    if (isArray(value)) {
      // if strict, include non-standard properties
      if (isStrict) {
        return getObjectCloneStrict(value, realm, handleCopy, cache);
      }

      clone = new Constructor();
      cache.set(value, clone);

      for (var index = 0, length_1 = value.length; index < length_1; ++index) {
        clone[index] = handleCopy(value[index], cache);
      }

      return clone;
    } // dates


    if (value instanceof realm.Date) {
      return new Constructor(value.getTime());
    } // regexps


    if (value instanceof realm.RegExp) {
      clone = new Constructor(value.source, value.flags || getRegExpFlags(value));
      clone.lastIndex = value.lastIndex;
      return clone;
    } // maps


    if (realm.Map && value instanceof realm.Map) {
      clone = new Constructor();
      cache.set(value, clone);
      value.forEach(function (value, key) {
        clone.set(key, handleCopy(value, cache));
      });
      return clone;
    } // sets


    if (realm.Set && value instanceof realm.Set) {
      clone = new Constructor();
      cache.set(value, clone);
      value.forEach(function (value) {
        clone.add(handleCopy(value, cache));
      });
      return clone;
    } // blobs


    if (realm.Blob && value instanceof realm.Blob) {
      return value.slice(0, value.size, value.type);
    } // buffers (node-only)


    if (realm.Buffer && realm.Buffer.isBuffer(value)) {
      clone = realm.Buffer.allocUnsafe ? realm.Buffer.allocUnsafe(value.length) : new Constructor(value.length);
      cache.set(value, clone);
      value.copy(clone);
      return clone;
    } // arraybuffers / dataviews


    if (realm.ArrayBuffer) {
      // dataviews
      if (realm.ArrayBuffer.isView(value)) {
        clone = new Constructor(value.buffer.slice(0));
        cache.set(value, clone);
        return clone;
      } // arraybuffers


      if (value instanceof realm.ArrayBuffer) {
        clone = value.slice(0);
        cache.set(value, clone);
        return clone;
      }
    } // if the value cannot / should not be cloned, don't


    if ( // promise-like
    typeof value.then === 'function' || // errors
    value instanceof Error || // weakmaps
    realm.WeakMap && value instanceof realm.WeakMap || // weaksets
    realm.WeakSet && value instanceof realm.WeakSet) {
      return value;
    } // assume anything left is a custom constructor


    return getObjectClone(value, realm, handleCopy, cache);
  };

  return handleCopy(value, createCache());
} // Adding reference to allow usage in CommonJS libraries compiled using TSC, which
// expects there to be a default property on the exported value. See
// [#37](https://github.com/planttheidea/fast-copy/issues/37) for details.


copy["default"] = copy;
/**
 * @function strictCopy
 *
 * @description
 * copy the value with `strict` option pre-applied
 *
 * @param value the value to copy
 * @param [options] the options for copying with
 * @param [options.realm] the realm (this) value the value is copied from
 * @returns the copied value
 */

copy.strict = function strictCopy(value, options) {
  return copy(value, {
    isStrict: true,
    realm: options ? options.realm : void 0
  });
};

/***/ }),
/* 7 */
/***/ (function(module, exports) {

module.exports = require("util");

/***/ }),
/* 8 */
/***/ (function(module, exports) {

module.exports = require("crypto");

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(0);
/**
 * Create an Error with the specified message, config, error code, request and response.
 *
 * @param {string} message The error message.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [config] The config.
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The created error.
 */


function AxiosError(message, code, config, request, response) {
  Error.call(this);
  this.message = message;
  this.name = 'AxiosError';
  code && (this.code = code);
  config && (this.config = config);
  request && (this.request = request);
  response && (this.response = response);
}

utils.inherits(AxiosError, Error, {
  toJSON: function toJSON() {
    return {
      // Standard
      message: this.message,
      name: this.name,
      // Microsoft
      description: this.description,
      number: this.number,
      // Mozilla
      fileName: this.fileName,
      lineNumber: this.lineNumber,
      columnNumber: this.columnNumber,
      stack: this.stack,
      // Axios
      config: this.config,
      code: this.code,
      status: this.response && this.response.status ? this.response.status : null
    };
  }
});
var prototype = AxiosError.prototype;
var descriptors = {};
['ERR_BAD_OPTION_VALUE', 'ERR_BAD_OPTION', 'ECONNABORTED', 'ETIMEDOUT', 'ERR_NETWORK', 'ERR_FR_TOO_MANY_REDIRECTS', 'ERR_DEPRECATED', 'ERR_BAD_RESPONSE', 'ERR_BAD_REQUEST', 'ERR_CANCELED' // eslint-disable-next-line func-names
].forEach(function (code) {
  descriptors[code] = {
    value: code
  };
});
Object.defineProperties(AxiosError, descriptors);
Object.defineProperty(prototype, 'isAxiosError', {
  value: true
}); // eslint-disable-next-line func-names

AxiosError.from = function (error, code, config, request, response, customProps) {
  var axiosError = Object.create(prototype);
  utils.toFlatObject(error, axiosError, function filter(obj) {
    return obj !== Error.prototype;
  });
  AxiosError.call(axiosError, error.message, code, config, request, response);
  axiosError.name = error.name;
  customProps && Object.assign(axiosError, customProps);
  return axiosError;
};

module.exports = AxiosError;

/***/ }),
/* 10 */
/***/ (function(module, exports) {

module.exports = require("events");

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// Generated by CoffeeScript 1.12.2
(function () {
  var getNanoSeconds, hrtime, loadTime, moduleLoadTime, nodeLoadTime, upTime;

  if (typeof performance !== "undefined" && performance !== null && performance.now) {
    module.exports = function () {
      return performance.now();
    };
  } else if (typeof process !== "undefined" && process !== null && process.hrtime) {
    module.exports = function () {
      return (getNanoSeconds() - nodeLoadTime) / 1e6;
    };

    hrtime = process.hrtime;

    getNanoSeconds = function getNanoSeconds() {
      var hr;
      hr = hrtime();
      return hr[0] * 1e9 + hr[1];
    };

    moduleLoadTime = getNanoSeconds();
    upTime = process.uptime() * 1e9;
    nodeLoadTime = moduleLoadTime - upTime;
  } else if (Date.now) {
    module.exports = function () {
      return Date.now() - loadTime;
    };

    loadTime = Date.now();
  } else {
    module.exports = function () {
      return new Date().getTime() - loadTime;
    };

    loadTime = new Date().getTime();
  }
}).call(void 0);

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var AxiosError = __webpack_require__(9);

var utils = __webpack_require__(0);
/**
 * A `CanceledError` is an object that is thrown when an operation is canceled.
 *
 * @class
 * @param {string=} message The message.
 */


function CanceledError(message) {
  // eslint-disable-next-line no-eq-null,eqeqeq
  AxiosError.call(this, message == null ? 'canceled' : message, AxiosError.ERR_CANCELED);
  this.name = 'CanceledError';
}

utils.inherits(CanceledError, AxiosError, {
  __CANCEL__: true
});
module.exports = CanceledError;

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = __webpack_require__(67);

/***/ }),
/* 14 */
/***/ (function(module, exports) {

module.exports = require("fs");

/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

var http = __webpack_require__(16);

var https = __webpack_require__(17);

var urllib = __webpack_require__(5);

var zlib = __webpack_require__(36);

var PassThrough = __webpack_require__(1).PassThrough;

var Cookies = __webpack_require__(72);

var packageData = __webpack_require__(3);

var MAX_REDIRECTS = 5;

module.exports = function (url, options) {
  return fetch(url, options);
};

module.exports.Cookies = Cookies;

function fetch(url, options) {
  options = options || {};
  options.fetchRes = options.fetchRes || new PassThrough();
  options.cookies = options.cookies || new Cookies();
  options.redirects = options.redirects || 0;
  options.maxRedirects = isNaN(options.maxRedirects) ? MAX_REDIRECTS : options.maxRedirects;

  if (options.cookie) {
    [].concat(options.cookie || []).forEach(function (cookie) {
      options.cookies.set(cookie, url);
    });
    options.cookie = false;
  }

  var fetchRes = options.fetchRes;
  var parsed = urllib.parse(url);
  var method = (options.method || '').toString().trim().toUpperCase() || 'GET';
  var finished = false;
  var cookies;
  var body;
  var handler = parsed.protocol === 'https:' ? https : http;
  var headers = {
    'accept-encoding': 'gzip,deflate',
    'user-agent': 'nodemailer/' + packageData.version
  };
  Object.keys(options.headers || {}).forEach(function (key) {
    headers[key.toLowerCase().trim()] = options.headers[key];
  });

  if (options.userAgent) {
    headers['user-agent'] = options.userAgent;
  }

  if (parsed.auth) {
    headers.Authorization = 'Basic ' + Buffer.from(parsed.auth).toString('base64');
  }

  if (cookies = options.cookies.get(url)) {
    headers.cookie = cookies;
  }

  if (options.body) {
    if (options.contentType !== false) {
      headers['Content-Type'] = options.contentType || 'application/x-www-form-urlencoded';
    }

    if (typeof options.body.pipe === 'function') {
      // it's a stream
      headers['Transfer-Encoding'] = 'chunked';
      body = options.body;
      body.on('error', function (err) {
        if (finished) {
          return;
        }

        finished = true;
        err.type = 'FETCH';
        err.sourceUrl = url;
        fetchRes.emit('error', err);
      });
    } else {
      if (options.body instanceof Buffer) {
        body = options.body;
      } else if (_typeof(options.body) === 'object') {
        try {
          // encodeURIComponent can fail on invalid input (partial emoji etc.)
          body = Buffer.from(Object.keys(options.body).map(function (key) {
            var value = options.body[key].toString().trim();
            return encodeURIComponent(key) + '=' + encodeURIComponent(value);
          }).join('&'));
        } catch (E) {
          if (finished) {
            return;
          }

          finished = true;
          E.type = 'FETCH';
          E.sourceUrl = url;
          fetchRes.emit('error', E);
          return;
        }
      } else {
        body = Buffer.from(options.body.toString().trim());
      }

      headers['Content-Type'] = options.contentType || 'application/x-www-form-urlencoded';
      headers['Content-Length'] = body.length;
    } // if method is not provided, use POST instead of GET


    method = (options.method || '').toString().trim().toUpperCase() || 'POST';
  }

  var req;
  var reqOptions = {
    method: method,
    host: parsed.hostname,
    path: parsed.path,
    port: parsed.port ? parsed.port : parsed.protocol === 'https:' ? 443 : 80,
    headers: headers,
    rejectUnauthorized: false,
    agent: false
  };

  if (options.tls) {
    Object.keys(options.tls).forEach(function (key) {
      reqOptions[key] = options.tls[key];
    });
  }

  try {
    req = handler.request(reqOptions);
  } catch (E) {
    finished = true;
    setImmediate(function () {
      E.type = 'FETCH';
      E.sourceUrl = url;
      fetchRes.emit('error', E);
    });
    return fetchRes;
  }

  if (options.timeout) {
    req.setTimeout(options.timeout, function () {
      if (finished) {
        return;
      }

      finished = true;
      req.abort();
      var err = new Error('Request Timeout');
      err.type = 'FETCH';
      err.sourceUrl = url;
      fetchRes.emit('error', err);
    });
  }

  req.on('error', function (err) {
    if (finished) {
      return;
    }

    finished = true;
    err.type = 'FETCH';
    err.sourceUrl = url;
    fetchRes.emit('error', err);
  });
  req.on('response', function (res) {
    var inflate;

    if (finished) {
      return;
    }

    switch (res.headers['content-encoding']) {
      case 'gzip':
      case 'deflate':
        inflate = zlib.createUnzip();
        break;
    }

    if (res.headers['set-cookie']) {
      [].concat(res.headers['set-cookie'] || []).forEach(function (cookie) {
        options.cookies.set(cookie, url);
      });
    }

    if ([301, 302, 303, 307, 308].includes(res.statusCode) && res.headers.location) {
      // redirect
      options.redirects++;

      if (options.redirects > options.maxRedirects) {
        finished = true;
        var err = new Error('Maximum redirect count exceeded');
        err.type = 'FETCH';
        err.sourceUrl = url;
        fetchRes.emit('error', err);
        req.abort();
        return;
      } // redirect does not include POST body


      options.method = 'GET';
      options.body = false;
      return fetch(urllib.resolve(url, res.headers.location), options);
    }

    fetchRes.statusCode = res.statusCode;
    fetchRes.headers = res.headers;

    if (res.statusCode >= 300 && !options.allowErrorResponse) {
      finished = true;

      var _err = new Error('Invalid status code ' + res.statusCode);

      _err.type = 'FETCH';
      _err.sourceUrl = url;
      fetchRes.emit('error', _err);
      req.abort();
      return;
    }

    res.on('error', function (err) {
      if (finished) {
        return;
      }

      finished = true;
      err.type = 'FETCH';
      err.sourceUrl = url;
      fetchRes.emit('error', err);
      req.abort();
    });

    if (inflate) {
      res.pipe(inflate).pipe(fetchRes);
      inflate.on('error', function (err) {
        if (finished) {
          return;
        }

        finished = true;
        err.type = 'FETCH';
        err.sourceUrl = url;
        fetchRes.emit('error', err);
        req.abort();
      });
    } else {
      res.pipe(fetchRes);
    }
  });
  setImmediate(function () {
    if (body) {
      try {
        if (typeof body.pipe === 'function') {
          return body.pipe(req);
        } else {
          req.write(body);
        }
      } catch (err) {
        finished = true;
        err.type = 'FETCH';
        err.sourceUrl = url;
        fetchRes.emit('error', err);
        return;
      }
    }

    req.end();
  });
  return fetchRes;
}

/***/ }),
/* 16 */
/***/ (function(module, exports) {

module.exports = require("http");

/***/ }),
/* 17 */
/***/ (function(module, exports) {

module.exports = require("https");

/***/ }),
/* 18 */
/***/ (function(module, exports) {

module.exports = require("net");

/***/ }),
/* 19 */
/***/ (function(module, exports) {

module.exports = require("os");

/***/ }),
/* 20 */
/***/ (function(module, exports) {

module.exports = require("path");

/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* eslint no-control-regex:0 */


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

var base64 = __webpack_require__(41);

var qp = __webpack_require__(42);

var mimeTypes = __webpack_require__(38);

module.exports = {
  /**
   * Checks if a value is plaintext string (uses only printable 7bit chars)
   *
   * @param {String} value String to be tested
   * @returns {Boolean} true if it is a plaintext string
   */
  isPlainText: function isPlainText(value, isParam) {
    var re = isParam ? /[\x00-\x08\x0b\x0c\x0e-\x1f"\u0080-\uFFFF]/ : /[\x00-\x08\x0b\x0c\x0e-\x1f\u0080-\uFFFF]/;

    if (typeof value !== 'string' || re.test(value)) {
      return false;
    } else {
      return true;
    }
  },

  /**
   * Checks if a multi line string containes lines longer than the selected value.
   *
   * Useful when detecting if a mail message needs any processing at all –
   * if only plaintext characters are used and lines are short, then there is
   * no need to encode the values in any way. If the value is plaintext but has
   * longer lines then allowed, then use format=flowed
   *
   * @param {Number} lineLength Max line length to check for
   * @returns {Boolean} Returns true if there is at least one line longer than lineLength chars
   */
  hasLongerLines: function hasLongerLines(str, lineLength) {
    if (str.length > 128 * 1024) {
      // do not test strings longer than 128kB
      return true;
    }

    return new RegExp('^.{' + (lineLength + 1) + ',}', 'm').test(str);
  },

  /**
   * Encodes a string or an Buffer to an UTF-8 MIME Word (rfc2047)
   *
   * @param {String|Buffer} data String to be encoded
   * @param {String} mimeWordEncoding='Q' Encoding for the mime word, either Q or B
   * @param {Number} [maxLength=0] If set, split mime words into several chunks if needed
   * @return {String} Single or several mime words joined together
   */
  encodeWord: function encodeWord(data, mimeWordEncoding, maxLength) {
    mimeWordEncoding = (mimeWordEncoding || 'Q').toString().toUpperCase().trim().charAt(0);
    maxLength = maxLength || 0;
    var encodedStr;
    var toCharset = 'UTF-8';

    if (maxLength && maxLength > 7 + toCharset.length) {
      maxLength -= 7 + toCharset.length;
    }

    if (mimeWordEncoding === 'Q') {
      // https://tools.ietf.org/html/rfc2047#section-5 rule (3)
      encodedStr = qp.encode(data).replace(/[^a-z0-9!*+\-/=]/gi, function (chr) {
        var ord = chr.charCodeAt(0).toString(16).toUpperCase();

        if (chr === ' ') {
          return '_';
        } else {
          return '=' + (ord.length === 1 ? '0' + ord : ord);
        }
      });
    } else if (mimeWordEncoding === 'B') {
      encodedStr = typeof data === 'string' ? data : base64.encode(data);
      maxLength = maxLength ? Math.max(3, (maxLength - maxLength % 4) / 4 * 3) : 0;
    }

    if (maxLength && (mimeWordEncoding !== 'B' ? encodedStr : base64.encode(data)).length > maxLength) {
      if (mimeWordEncoding === 'Q') {
        encodedStr = this.splitMimeEncodedString(encodedStr, maxLength).join('?= =?' + toCharset + '?' + mimeWordEncoding + '?');
      } else {
        // RFC2047 6.3 (2) states that encoded-word must include an integral number of characters, so no chopping unicode sequences
        var parts = [];
        var lpart = '';

        for (var i = 0, len = encodedStr.length; i < len; i++) {
          var chr = encodedStr.charAt(i); // check if we can add this character to the existing string
          // without breaking byte length limit

          if (Buffer.byteLength(lpart + chr) <= maxLength || i === 0) {
            lpart += chr;
          } else {
            // we hit the length limit, so push the existing string and start over
            parts.push(base64.encode(lpart));
            lpart = chr;
          }
        }

        if (lpart) {
          parts.push(base64.encode(lpart));
        }

        if (parts.length > 1) {
          encodedStr = parts.join('?= =?' + toCharset + '?' + mimeWordEncoding + '?');
        } else {
          encodedStr = parts.join('');
        }
      }
    } else if (mimeWordEncoding === 'B') {
      encodedStr = base64.encode(data);
    }

    return '=?' + toCharset + '?' + mimeWordEncoding + '?' + encodedStr + (encodedStr.substr(-2) === '?=' ? '' : '?=');
  },

  /**
   * Finds word sequences with non ascii text and converts these to mime words
   *
   * @param {String} value String to be encoded
   * @param {String} mimeWordEncoding='Q' Encoding for the mime word, either Q or B
   * @param {Number} [maxLength=0] If set, split mime words into several chunks if needed
   * @param {Boolean} [encodeAll=false] If true and the value needs encoding then encodes entire string, not just the smallest match
   * @return {String} String with possible mime words
   */
  encodeWords: function encodeWords(value, mimeWordEncoding, maxLength, encodeAll) {
    maxLength = maxLength || 0;
    var encodedValue; // find first word with a non-printable ascii or special symbol in it

    var firstMatch = value.match(/(?:^|\s)([^\s]*["\u0080-\uFFFF])/);

    if (!firstMatch) {
      return value;
    }

    if (encodeAll) {
      // if it is requested to encode everything or the string contains something that resebles encoded word, then encode everything
      return this.encodeWord(value, mimeWordEncoding, maxLength);
    } // find the last word with a non-printable ascii in it


    var lastMatch = value.match(/(["\u0080-\uFFFF][^\s]*)[^"\u0080-\uFFFF]*$/);

    if (!lastMatch) {
      // should not happen
      return value;
    }

    var startIndex = firstMatch.index + (firstMatch[0].match(/[^\s]/) || {
      index: 0
    }).index;
    var endIndex = lastMatch.index + (lastMatch[1] || '').length;
    encodedValue = (startIndex ? value.substr(0, startIndex) : '') + this.encodeWord(value.substring(startIndex, endIndex), mimeWordEncoding || 'Q', maxLength) + (endIndex < value.length ? value.substr(endIndex) : '');
    return encodedValue;
  },

  /**
   * Joins parsed header value together as 'value; param1=value1; param2=value2'
   * PS: We are following RFC 822 for the list of special characters that we need to keep in quotes.
   *      Refer: https://www.w3.org/Protocols/rfc1341/4_Content-Type.html
   * @param {Object} structured Parsed header value
   * @return {String} joined header value
   */
  buildHeaderValue: function buildHeaderValue(structured) {
    var _this = this;

    var paramsArray = [];
    Object.keys(structured.params || {}).forEach(function (param) {
      // filename might include unicode characters so it is a special case
      // other values probably do not
      var value = structured.params[param];

      if (!_this.isPlainText(value, true) || value.length >= 75) {
        _this.buildHeaderParam(param, value, 50).forEach(function (encodedParam) {
          if (!/[\s"\\;:/=(),<>@[\]?]|^[-']|'$/.test(encodedParam.value) || encodedParam.key.substr(-1) === '*') {
            paramsArray.push(encodedParam.key + '=' + encodedParam.value);
          } else {
            paramsArray.push(encodedParam.key + '=' + JSON.stringify(encodedParam.value));
          }
        });
      } else if (/[\s'"\\;:/=(),<>@[\]?]|^-/.test(value)) {
        paramsArray.push(param + '=' + JSON.stringify(value));
      } else {
        paramsArray.push(param + '=' + value);
      }
    });
    return structured.value + (paramsArray.length ? '; ' + paramsArray.join('; ') : '');
  },

  /**
   * Encodes a string or an Buffer to an UTF-8 Parameter Value Continuation encoding (rfc2231)
   * Useful for splitting long parameter values.
   *
   * For example
   *      title="unicode string"
   * becomes
   *     title*0*=utf-8''unicode
   *     title*1*=%20string
   *
   * @param {String|Buffer} data String to be encoded
   * @param {Number} [maxLength=50] Max length for generated chunks
   * @param {String} [fromCharset='UTF-8'] Source sharacter set
   * @return {Array} A list of encoded keys and headers
   */
  buildHeaderParam: function buildHeaderParam(key, data, maxLength) {
    var list = [];
    var encodedStr = typeof data === 'string' ? data : (data || '').toString();
    var encodedStrArr;
    var chr, ord;
    var line;
    var startPos = 0;
    var i, len;
    maxLength = maxLength || 50; // process ascii only text

    if (this.isPlainText(data, true)) {
      // check if conversion is even needed
      if (encodedStr.length <= maxLength) {
        return [{
          key: key,
          value: encodedStr
        }];
      }

      encodedStr = encodedStr.replace(new RegExp('.{' + maxLength + '}', 'g'), function (str) {
        list.push({
          line: str
        });
        return '';
      });

      if (encodedStr) {
        list.push({
          line: encodedStr
        });
      }
    } else {
      if (/[\uD800-\uDBFF]/.test(encodedStr)) {
        // string containts surrogate pairs, so normalize it to an array of bytes
        encodedStrArr = [];

        for (i = 0, len = encodedStr.length; i < len; i++) {
          chr = encodedStr.charAt(i);
          ord = chr.charCodeAt(0);

          if (ord >= 0xd800 && ord <= 0xdbff && i < len - 1) {
            chr += encodedStr.charAt(i + 1);
            encodedStrArr.push(chr);
            i++;
          } else {
            encodedStrArr.push(chr);
          }
        }

        encodedStr = encodedStrArr;
      } // first line includes the charset and language info and needs to be encoded
      // even if it does not contain any unicode characters


      line = 'utf-8\x27\x27';
      var encoded = true;
      startPos = 0; // process text with unicode or special chars

      for (i = 0, len = encodedStr.length; i < len; i++) {
        chr = encodedStr[i];

        if (encoded) {
          chr = this.safeEncodeURIComponent(chr);
        } else {
          // try to urlencode current char
          chr = chr === ' ' ? chr : this.safeEncodeURIComponent(chr); // By default it is not required to encode a line, the need
          // only appears when the string contains unicode or special chars
          // in this case we start processing the line over and encode all chars

          if (chr !== encodedStr[i]) {
            // Check if it is even possible to add the encoded char to the line
            // If not, there is no reason to use this line, just push it to the list
            // and start a new line with the char that needs encoding
            if ((this.safeEncodeURIComponent(line) + chr).length >= maxLength) {
              list.push({
                line: line,
                encoded: encoded
              });
              line = '';
              startPos = i - 1;
            } else {
              encoded = true;
              i = startPos;
              line = '';
              continue;
            }
          }
        } // if the line is already too long, push it to the list and start a new one


        if ((line + chr).length >= maxLength) {
          list.push({
            line: line,
            encoded: encoded
          });
          line = chr = encodedStr[i] === ' ' ? ' ' : this.safeEncodeURIComponent(encodedStr[i]);

          if (chr === encodedStr[i]) {
            encoded = false;
            startPos = i - 1;
          } else {
            encoded = true;
          }
        } else {
          line += chr;
        }
      }

      if (line) {
        list.push({
          line: line,
          encoded: encoded
        });
      }
    }

    return list.map(function (item, i) {
      return {
        // encoded lines: {name}*{part}*
        // unencoded lines: {name}*{part}
        // if any line needs to be encoded then the first line (part==0) is always encoded
        key: key + '*' + i + (item.encoded ? '*' : ''),
        value: item.line
      };
    });
  },

  /**
   * Parses a header value with key=value arguments into a structured
   * object.
   *
   *   parseHeaderValue('content-type: text/plain; CHARSET='UTF-8'') ->
   *   {
   *     'value': 'text/plain',
   *     'params': {
   *       'charset': 'UTF-8'
   *     }
   *   }
   *
   * @param {String} str Header value
   * @return {Object} Header value as a parsed structure
   */
  parseHeaderValue: function parseHeaderValue(str) {
    var response = {
      value: false,
      params: {}
    };
    var key = false;
    var value = '';
    var type = 'value';
    var quote = false;
    var escaped = false;
    var chr;

    for (var i = 0, len = str.length; i < len; i++) {
      chr = str.charAt(i);

      if (type === 'key') {
        if (chr === '=') {
          key = value.trim().toLowerCase();
          type = 'value';
          value = '';
          continue;
        }

        value += chr;
      } else {
        if (escaped) {
          value += chr;
        } else if (chr === '\\') {
          escaped = true;
          continue;
        } else if (quote && chr === quote) {
          quote = false;
        } else if (!quote && chr === '"') {
          quote = chr;
        } else if (!quote && chr === ';') {
          if (key === false) {
            response.value = value.trim();
          } else {
            response.params[key] = value.trim();
          }

          type = 'key';
          value = '';
        } else {
          value += chr;
        }

        escaped = false;
      }
    }

    if (type === 'value') {
      if (key === false) {
        response.value = value.trim();
      } else {
        response.params[key] = value.trim();
      }
    } else if (value.trim()) {
      response.params[value.trim().toLowerCase()] = '';
    } // handle parameter value continuations
    // https://tools.ietf.org/html/rfc2231#section-3
    // preprocess values


    Object.keys(response.params).forEach(function (key) {
      var actualKey, nr, match, value;

      if (match = key.match(/(\*(\d+)|\*(\d+)\*|\*)$/)) {
        actualKey = key.substr(0, match.index);
        nr = Number(match[2] || match[3]) || 0;

        if (!response.params[actualKey] || _typeof(response.params[actualKey]) !== 'object') {
          response.params[actualKey] = {
            charset: false,
            values: []
          };
        }

        value = response.params[key];

        if (nr === 0 && match[0].substr(-1) === '*' && (match = value.match(/^([^']*)'[^']*'(.*)$/))) {
          response.params[actualKey].charset = match[1] || 'iso-8859-1';
          value = match[2];
        }

        response.params[actualKey].values[nr] = value; // remove the old reference

        delete response.params[key];
      }
    }); // concatenate split rfc2231 strings and convert encoded strings to mime encoded words

    Object.keys(response.params).forEach(function (key) {
      var value;

      if (response.params[key] && Array.isArray(response.params[key].values)) {
        value = response.params[key].values.map(function (val) {
          return val || '';
        }).join('');

        if (response.params[key].charset) {
          // convert "%AB" to "=?charset?Q?=AB?="
          response.params[key] = '=?' + response.params[key].charset + '?Q?' + value // fix invalidly encoded chars
          .replace(/[=?_\s]/g, function (s) {
            var c = s.charCodeAt(0).toString(16);

            if (s === ' ') {
              return '_';
            } else {
              return '%' + (c.length < 2 ? '0' : '') + c;
            }
          }) // change from urlencoding to percent encoding
          .replace(/%/g, '=') + '?=';
        } else {
          response.params[key] = value;
        }
      }
    });
    return response;
  },

  /**
   * Returns file extension for a content type string. If no suitable extensions
   * are found, 'bin' is used as the default extension
   *
   * @param {String} mimeType Content type to be checked for
   * @return {String} File extension
   */
  detectExtension: function detectExtension(mimeType) {
    return mimeTypes.detectExtension(mimeType);
  },

  /**
   * Returns content type for a file extension. If no suitable content types
   * are found, 'application/octet-stream' is used as the default content type
   *
   * @param {String} extension Extension to be checked for
   * @return {String} File extension
   */
  detectMimeType: function detectMimeType(extension) {
    return mimeTypes.detectMimeType(extension);
  },

  /**
   * Folds long lines, useful for folding header lines (afterSpace=false) and
   * flowed text (afterSpace=true)
   *
   * @param {String} str String to be folded
   * @param {Number} [lineLength=76] Maximum length of a line
   * @param {Boolean} afterSpace If true, leave a space in th end of a line
   * @return {String} String with folded lines
   */
  foldLines: function foldLines(str, lineLength, afterSpace) {
    str = (str || '').toString();
    lineLength = lineLength || 76;
    var pos = 0,
        len = str.length,
        result = '',
        line,
        match;

    while (pos < len) {
      line = str.substr(pos, lineLength);

      if (line.length < lineLength) {
        result += line;
        break;
      }

      if (match = line.match(/^[^\n\r]*(\r?\n|\r)/)) {
        line = match[0];
        result += line;
        pos += line.length;
        continue;
      } else if ((match = line.match(/(\s+)[^\s]*$/)) && match[0].length - (afterSpace ? (match[1] || '').length : 0) < line.length) {
        line = line.substr(0, line.length - (match[0].length - (afterSpace ? (match[1] || '').length : 0)));
      } else if (match = str.substr(pos + line.length).match(/^[^\s]+(\s*)/)) {
        line = line + match[0].substr(0, match[0].length - (!afterSpace ? (match[1] || '').length : 0));
      }

      result += line;
      pos += line.length;

      if (pos < len) {
        result += '\r\n';
      }
    }

    return result;
  },

  /**
   * Splits a mime encoded string. Needed for dividing mime words into smaller chunks
   *
   * @param {String} str Mime encoded string to be split up
   * @param {Number} maxlen Maximum length of characters for one part (minimum 12)
   * @return {Array} Split string
   */
  splitMimeEncodedString: function splitMimeEncodedString(str, maxlen) {
    var curLine,
        match,
        chr,
        done,
        lines = []; // require at least 12 symbols to fit possible 4 octet UTF-8 sequences

    maxlen = Math.max(maxlen || 0, 12);

    while (str.length) {
      curLine = str.substr(0, maxlen); // move incomplete escaped char back to main

      if (match = curLine.match(/[=][0-9A-F]?$/i)) {
        curLine = curLine.substr(0, match.index);
      }

      done = false;

      while (!done) {
        done = true; // check if not middle of a unicode char sequence

        if (match = str.substr(curLine.length).match(/^[=]([0-9A-F]{2})/i)) {
          chr = parseInt(match[1], 16); // invalid sequence, move one char back anc recheck

          if (chr < 0xc2 && chr > 0x7f) {
            curLine = curLine.substr(0, curLine.length - 3);
            done = false;
          }
        }
      }

      if (curLine.length) {
        lines.push(curLine);
      }

      str = str.substr(curLine.length);
    }

    return lines;
  },
  encodeURICharComponent: function encodeURICharComponent(chr) {
    var res = '';
    var ord = chr.charCodeAt(0).toString(16).toUpperCase();

    if (ord.length % 2) {
      ord = '0' + ord;
    }

    if (ord.length > 2) {
      for (var i = 0, len = ord.length / 2; i < len; i++) {
        res += '%' + ord.substr(i, 2);
      }
    } else {
      res += '%' + ord;
    }

    return res;
  },
  safeEncodeURIComponent: function safeEncodeURIComponent(str) {
    var _this2 = this;

    str = (str || '').toString();

    try {
      // might throw if we try to encode invalid sequences, eg. partial emoji
      str = encodeURIComponent(str);
    } catch (E) {
      // should never run
      return str.replace(/[^\x00-\x1F *'()<>@,;:\\"[\]?=\u007F-\uFFFF]+/g, '');
    } // ensure chars that are not handled by encodeURICompent are converted as well


    return str.replace(/[\x00-\x1F *'()<>@,;:\\"[\]?=\u007F-\uFFFF]/g, function (chr) {
      return _this2.encodeURICharComponent(chr);
    });
  }
};

/***/ }),
/* 22 */
/***/ (function(module, exports) {

module.exports = require("node-fetch");

/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

var Mailer = __webpack_require__(71);

var shared = __webpack_require__(2);

var SMTPPool = __webpack_require__(83);

var SMTPTransport = __webpack_require__(87);

var SendmailTransport = __webpack_require__(88);

var StreamTransport = __webpack_require__(90);

var JSONTransport = __webpack_require__(91);

var SESTransport = __webpack_require__(92);

var fetch = __webpack_require__(15);

var packageData = __webpack_require__(3);

var ETHEREAL_API = (process.env.ETHEREAL_API || 'https://api.nodemailer.com').replace(/\/+$/, '');
var ETHEREAL_WEB = (process.env.ETHEREAL_WEB || 'https://ethereal.email').replace(/\/+$/, '');
var ETHEREAL_CACHE = ['true', 'yes', 'y', '1'].includes((process.env.ETHEREAL_CACHE || 'yes').toString().trim().toLowerCase());
var testAccount = false;

module.exports.createTransport = function (transporter, defaults) {
  var urlConfig;
  var options;
  var mailer;

  if ( // provided transporter is a configuration object, not transporter plugin
  _typeof(transporter) === 'object' && typeof transporter.send !== 'function' || // provided transporter looks like a connection url
  typeof transporter === 'string' && /^(smtps?|direct):/i.test(transporter)) {
    if (urlConfig = typeof transporter === 'string' ? transporter : transporter.url) {
      // parse a configuration URL into configuration options
      options = shared.parseConnectionUrl(urlConfig);
    } else {
      options = transporter;
    }

    if (options.pool) {
      transporter = new SMTPPool(options);
    } else if (options.sendmail) {
      transporter = new SendmailTransport(options);
    } else if (options.streamTransport) {
      transporter = new StreamTransport(options);
    } else if (options.jsonTransport) {
      transporter = new JSONTransport(options);
    } else if (options.SES) {
      transporter = new SESTransport(options);
    } else {
      transporter = new SMTPTransport(options);
    }
  }

  mailer = new Mailer(transporter, options, defaults);
  return mailer;
};

module.exports.createTestAccount = function (apiUrl, callback) {
  var promise;

  if (!callback && typeof apiUrl === 'function') {
    callback = apiUrl;
    apiUrl = false;
  }

  if (!callback) {
    promise = new Promise(function (resolve, reject) {
      callback = shared.callbackPromise(resolve, reject);
    });
  }

  if (ETHEREAL_CACHE && testAccount) {
    setImmediate(function () {
      return callback(null, testAccount);
    });
    return promise;
  }

  apiUrl = apiUrl || ETHEREAL_API;
  var chunks = [];
  var chunklen = 0;
  var req = fetch(apiUrl + '/user', {
    contentType: 'application/json',
    method: 'POST',
    body: Buffer.from(JSON.stringify({
      requestor: packageData.name,
      version: packageData.version
    }))
  });
  req.on('readable', function () {
    var chunk;

    while ((chunk = req.read()) !== null) {
      chunks.push(chunk);
      chunklen += chunk.length;
    }
  });
  req.once('error', function (err) {
    return callback(err);
  });
  req.once('end', function () {
    var res = Buffer.concat(chunks, chunklen);
    var data;
    var err;

    try {
      data = JSON.parse(res.toString());
    } catch (E) {
      err = E;
    }

    if (err) {
      return callback(err);
    }

    if (data.status !== 'success' || data.error) {
      return callback(new Error(data.error || 'Request failed'));
    }

    delete data.status;
    testAccount = data;
    callback(null, testAccount);
  });
  return promise;
};

module.exports.getTestMessageUrl = function (info) {
  if (!info || !info.response) {
    return false;
  }

  var infoProps = new Map();
  info.response.replace(/\[([^\]]+)\]$/, function (m, props) {
    props.replace(/\b([A-Z0-9]+)=([^\s]+)/g, function (m, key, value) {
      infoProps.set(key, value);
    });
  });

  if (infoProps.has('STATUS') && infoProps.has('MSGID')) {
    return (testAccount.web || ETHEREAL_WEB) + '/message/' + infoProps.get('MSGID');
  }

  return false;
};

/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */

/* eslint-disable no-proto */


function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } Object.defineProperty(subClass, "prototype", { value: Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }), writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

var base64 = __webpack_require__(69);

var ieee754 = __webpack_require__(70);

var customInspectSymbol = typeof Symbol === 'function' && typeof Symbol['for'] === 'function' // eslint-disable-line dot-notation
? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation
: null;
exports.Buffer = Buffer;
exports.SlowBuffer = SlowBuffer;
exports.INSPECT_MAX_BYTES = 50;
var K_MAX_LENGTH = 0x7fffffff;
exports.kMaxLength = K_MAX_LENGTH;
/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */

Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport();

if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' && typeof console.error === 'function') {
  console.error('This browser lacks typed array (Uint8Array) support which is required by ' + '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.');
}

function typedArraySupport() {
  // Can typed array instances can be augmented?
  try {
    var arr = new Uint8Array(1);
    var proto = {
      foo: function foo() {
        return 42;
      }
    };
    Object.setPrototypeOf(proto, Uint8Array.prototype);
    Object.setPrototypeOf(arr, proto);
    return arr.foo() === 42;
  } catch (e) {
    return false;
  }
}

Object.defineProperty(Buffer.prototype, 'parent', {
  enumerable: true,
  get: function get() {
    if (!Buffer.isBuffer(this)) return undefined;
    return this.buffer;
  }
});
Object.defineProperty(Buffer.prototype, 'offset', {
  enumerable: true,
  get: function get() {
    if (!Buffer.isBuffer(this)) return undefined;
    return this.byteOffset;
  }
});

function createBuffer(length) {
  if (length > K_MAX_LENGTH) {
    throw new RangeError('The value "' + length + '" is invalid for option "size"');
  } // Return an augmented `Uint8Array` instance


  var buf = new Uint8Array(length);
  Object.setPrototypeOf(buf, Buffer.prototype);
  return buf;
}
/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */


function Buffer(arg, encodingOrOffset, length) {
  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new TypeError('The "string" argument must be of type string. Received type number');
    }

    return allocUnsafe(arg);
  }

  return from(arg, encodingOrOffset, length);
}

Buffer.poolSize = 8192; // not used by this implementation

function from(value, encodingOrOffset, length) {
  if (typeof value === 'string') {
    return fromString(value, encodingOrOffset);
  }

  if (ArrayBuffer.isView(value)) {
    return fromArrayView(value);
  }

  if (value == null) {
    throw new TypeError('The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' + 'or Array-like Object. Received type ' + _typeof(value));
  }

  if (isInstance(value, ArrayBuffer) || value && isInstance(value.buffer, ArrayBuffer)) {
    return fromArrayBuffer(value, encodingOrOffset, length);
  }

  if (typeof SharedArrayBuffer !== 'undefined' && (isInstance(value, SharedArrayBuffer) || value && isInstance(value.buffer, SharedArrayBuffer))) {
    return fromArrayBuffer(value, encodingOrOffset, length);
  }

  if (typeof value === 'number') {
    throw new TypeError('The "value" argument must not be of type number. Received type number');
  }

  var valueOf = value.valueOf && value.valueOf();

  if (valueOf != null && valueOf !== value) {
    return Buffer.from(valueOf, encodingOrOffset, length);
  }

  var b = fromObject(value);
  if (b) return b;

  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === 'function') {
    return Buffer.from(value[Symbol.toPrimitive]('string'), encodingOrOffset, length);
  }

  throw new TypeError('The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' + 'or Array-like Object. Received type ' + _typeof(value));
}
/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/


Buffer.from = function (value, encodingOrOffset, length) {
  return from(value, encodingOrOffset, length);
}; // Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148


Object.setPrototypeOf(Buffer.prototype, Uint8Array.prototype);
Object.setPrototypeOf(Buffer, Uint8Array);

function assertSize(size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be of type number');
  } else if (size < 0) {
    throw new RangeError('The value "' + size + '" is invalid for option "size"');
  }
}

function alloc(size, fill, encoding) {
  assertSize(size);

  if (size <= 0) {
    return createBuffer(size);
  }

  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpreted as a start offset.
    return typeof encoding === 'string' ? createBuffer(size).fill(fill, encoding) : createBuffer(size).fill(fill);
  }

  return createBuffer(size);
}
/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/


Buffer.alloc = function (size, fill, encoding) {
  return alloc(size, fill, encoding);
};

function allocUnsafe(size) {
  assertSize(size);
  return createBuffer(size < 0 ? 0 : checked(size) | 0);
}
/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */


Buffer.allocUnsafe = function (size) {
  return allocUnsafe(size);
};
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */


Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(size);
};

function fromString(string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8';
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('Unknown encoding: ' + encoding);
  }

  var length = byteLength(string, encoding) | 0;
  var buf = createBuffer(length);
  var actual = buf.write(string, encoding);

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual);
  }

  return buf;
}

function fromArrayLike(array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0;
  var buf = createBuffer(length);

  for (var i = 0; i < length; i += 1) {
    buf[i] = array[i] & 255;
  }

  return buf;
}

function fromArrayView(arrayView) {
  if (isInstance(arrayView, Uint8Array)) {
    var copy = new Uint8Array(arrayView);
    return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength);
  }

  return fromArrayLike(arrayView);
}

function fromArrayBuffer(array, byteOffset, length) {
  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('"offset" is outside of buffer bounds');
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('"length" is outside of buffer bounds');
  }

  var buf;

  if (byteOffset === undefined && length === undefined) {
    buf = new Uint8Array(array);
  } else if (length === undefined) {
    buf = new Uint8Array(array, byteOffset);
  } else {
    buf = new Uint8Array(array, byteOffset, length);
  } // Return an augmented `Uint8Array` instance


  Object.setPrototypeOf(buf, Buffer.prototype);
  return buf;
}

function fromObject(obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0;
    var buf = createBuffer(len);

    if (buf.length === 0) {
      return buf;
    }

    obj.copy(buf, 0, 0, len);
    return buf;
  }

  if (obj.length !== undefined) {
    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
      return createBuffer(0);
    }

    return fromArrayLike(obj);
  }

  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
    return fromArrayLike(obj.data);
  }
}

function checked(length) {
  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= K_MAX_LENGTH) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' + 'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes');
  }

  return length | 0;
}

function SlowBuffer(length) {
  if (+length != length) {
    // eslint-disable-line eqeqeq
    length = 0;
  }

  return Buffer.alloc(+length);
}

Buffer.isBuffer = function isBuffer(b) {
  return b != null && b._isBuffer === true && b !== Buffer.prototype; // so Buffer.isBuffer(Buffer.prototype) will be false
};

Buffer.compare = function compare(a, b) {
  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength);
  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength);

  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');
  }

  if (a === b) return 0;
  var x = a.length;
  var y = b.length;

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i];
      y = b[i];
      break;
    }
  }

  if (x < y) return -1;
  if (y < x) return 1;
  return 0;
};

Buffer.isEncoding = function isEncoding(encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true;

    default:
      return false;
  }
};

Buffer.concat = function concat(list, length) {
  if (!Array.isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers');
  }

  if (list.length === 0) {
    return Buffer.alloc(0);
  }

  var i;

  if (length === undefined) {
    length = 0;

    for (i = 0; i < list.length; ++i) {
      length += list[i].length;
    }
  }

  var buffer = Buffer.allocUnsafe(length);
  var pos = 0;

  for (i = 0; i < list.length; ++i) {
    var buf = list[i];

    if (isInstance(buf, Uint8Array)) {
      if (pos + buf.length > buffer.length) {
        if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf);
        buf.copy(buffer, pos);
      } else {
        Uint8Array.prototype.set.call(buffer, buf, pos);
      }
    } else if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers');
    } else {
      buf.copy(buffer, pos);
    }

    pos += buf.length;
  }

  return buffer;
};

function byteLength(string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length;
  }

  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
    return string.byteLength;
  }

  if (typeof string !== 'string') {
    throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. ' + 'Received type ' + _typeof(string));
  }

  var len = string.length;
  var mustMatch = arguments.length > 2 && arguments[2] === true;
  if (!mustMatch && len === 0) return 0; // Use a for loop to avoid recursion

  var loweredCase = false;

  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len;

      case 'utf8':
      case 'utf-8':
        return utf8ToBytes(string).length;

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2;

      case 'hex':
        return len >>> 1;

      case 'base64':
        return base64ToBytes(string).length;

      default:
        if (loweredCase) {
          return mustMatch ? -1 : utf8ToBytes(string).length; // assume utf8
        }

        encoding = ('' + encoding).toLowerCase();
        loweredCase = true;
    }
  }
}

Buffer.byteLength = byteLength;

function slowToString(encoding, start, end) {
  var loweredCase = false; // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.
  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.

  if (start === undefined || start < 0) {
    start = 0;
  } // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.


  if (start > this.length) {
    return '';
  }

  if (end === undefined || end > this.length) {
    end = this.length;
  }

  if (end <= 0) {
    return '';
  } // Force coercion to uint32. This will also coerce falsey/NaN values to 0.


  end >>>= 0;
  start >>>= 0;

  if (end <= start) {
    return '';
  }

  if (!encoding) encoding = 'utf8';

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end);

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end);

      case 'ascii':
        return asciiSlice(this, start, end);

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end);

      case 'base64':
        return base64Slice(this, start, end);

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end);

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
        encoding = (encoding + '').toLowerCase();
        loweredCase = true;
    }
  }
} // This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154


Buffer.prototype._isBuffer = true;

function swap(b, n, m) {
  var i = b[n];
  b[n] = b[m];
  b[m] = i;
}

Buffer.prototype.swap16 = function swap16() {
  var len = this.length;

  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits');
  }

  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1);
  }

  return this;
};

Buffer.prototype.swap32 = function swap32() {
  var len = this.length;

  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits');
  }

  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3);
    swap(this, i + 1, i + 2);
  }

  return this;
};

Buffer.prototype.swap64 = function swap64() {
  var len = this.length;

  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits');
  }

  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7);
    swap(this, i + 1, i + 6);
    swap(this, i + 2, i + 5);
    swap(this, i + 3, i + 4);
  }

  return this;
};

Buffer.prototype.toString = function toString() {
  var length = this.length;
  if (length === 0) return '';
  if (arguments.length === 0) return utf8Slice(this, 0, length);
  return slowToString.apply(this, arguments);
};

Buffer.prototype.toLocaleString = Buffer.prototype.toString;

Buffer.prototype.equals = function equals(b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer');
  if (this === b) return true;
  return Buffer.compare(this, b) === 0;
};

Buffer.prototype.inspect = function inspect() {
  var str = '';
  var max = exports.INSPECT_MAX_BYTES;
  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim();
  if (this.length > max) str += ' ... ';
  return '<Buffer ' + str + '>';
};

if (customInspectSymbol) {
  Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect;
}

Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
  if (isInstance(target, Uint8Array)) {
    target = Buffer.from(target, target.offset, target.byteLength);
  }

  if (!Buffer.isBuffer(target)) {
    throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. ' + 'Received type ' + _typeof(target));
  }

  if (start === undefined) {
    start = 0;
  }

  if (end === undefined) {
    end = target ? target.length : 0;
  }

  if (thisStart === undefined) {
    thisStart = 0;
  }

  if (thisEnd === undefined) {
    thisEnd = this.length;
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index');
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0;
  }

  if (thisStart >= thisEnd) {
    return -1;
  }

  if (start >= end) {
    return 1;
  }

  start >>>= 0;
  end >>>= 0;
  thisStart >>>= 0;
  thisEnd >>>= 0;
  if (this === target) return 0;
  var x = thisEnd - thisStart;
  var y = end - start;
  var len = Math.min(x, y);
  var thisCopy = this.slice(thisStart, thisEnd);
  var targetCopy = target.slice(start, end);

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i];
      y = targetCopy[i];
      break;
    }
  }

  if (x < y) return -1;
  if (y < x) return 1;
  return 0;
}; // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf


function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1; // Normalize byteOffset

  if (typeof byteOffset === 'string') {
    encoding = byteOffset;
    byteOffset = 0;
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff;
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000;
  }

  byteOffset = +byteOffset; // Coerce to Number.

  if (numberIsNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : buffer.length - 1;
  } // Normalize byteOffset: negative offsets start from the end of the buffer


  if (byteOffset < 0) byteOffset = buffer.length + byteOffset;

  if (byteOffset >= buffer.length) {
    if (dir) return -1;else byteOffset = buffer.length - 1;
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0;else return -1;
  } // Normalize val


  if (typeof val === 'string') {
    val = Buffer.from(val, encoding);
  } // Finally, search either indexOf (if dir is true) or lastIndexOf


  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1;
    }

    return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
  } else if (typeof val === 'number') {
    val = val & 0xFF; // Search for a byte value [0-255]

    if (typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
      }
    }

    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);
  }

  throw new TypeError('val must be string, number or Buffer');
}

function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
  var indexSize = 1;
  var arrLength = arr.length;
  var valLength = val.length;

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase();

    if (encoding === 'ucs2' || encoding === 'ucs-2' || encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1;
      }

      indexSize = 2;
      arrLength /= 2;
      valLength /= 2;
      byteOffset /= 2;
    }
  }

  function read(buf, i) {
    if (indexSize === 1) {
      return buf[i];
    } else {
      return buf.readUInt16BE(i * indexSize);
    }
  }

  var i;

  if (dir) {
    var foundIndex = -1;

    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i;
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;
      } else {
        if (foundIndex !== -1) i -= i - foundIndex;
        foundIndex = -1;
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;

    for (i = byteOffset; i >= 0; i--) {
      var found = true;

      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false;
          break;
        }
      }

      if (found) return i;
    }
  }

  return -1;
}

Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1;
};

Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
};

Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
};

function hexWrite(buf, string, offset, length) {
  offset = Number(offset) || 0;
  var remaining = buf.length - offset;

  if (!length) {
    length = remaining;
  } else {
    length = Number(length);

    if (length > remaining) {
      length = remaining;
    }
  }

  var strLen = string.length;

  if (length > strLen / 2) {
    length = strLen / 2;
  }

  var i;

  for (i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16);
    if (numberIsNaN(parsed)) return i;
    buf[offset + i] = parsed;
  }

  return i;
}

function utf8Write(buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
}

function asciiWrite(buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length);
}

function base64Write(buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length);
}

function ucs2Write(buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
}

Buffer.prototype.write = function write(string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8';
    length = this.length;
    offset = 0; // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset;
    length = this.length;
    offset = 0; // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset >>> 0;

    if (isFinite(length)) {
      length = length >>> 0;
      if (encoding === undefined) encoding = 'utf8';
    } else {
      encoding = length;
      length = undefined;
    }
  } else {
    throw new Error('Buffer.write(string, encoding, offset[, length]) is no longer supported');
  }

  var remaining = this.length - offset;
  if (length === undefined || length > remaining) length = remaining;

  if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds');
  }

  if (!encoding) encoding = 'utf8';
  var loweredCase = false;

  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length);

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length);

      case 'ascii':
      case 'latin1':
      case 'binary':
        return asciiWrite(this, string, offset, length);

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length);

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length);

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
        encoding = ('' + encoding).toLowerCase();
        loweredCase = true;
    }
  }
};

Buffer.prototype.toJSON = function toJSON() {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  };
};

function base64Slice(buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf);
  } else {
    return base64.fromByteArray(buf.slice(start, end));
  }
}

function utf8Slice(buf, start, end) {
  end = Math.min(buf.length, end);
  var res = [];
  var i = start;

  while (i < end) {
    var firstByte = buf[i];
    var codePoint = null;
    var bytesPerSequence = firstByte > 0xEF ? 4 : firstByte > 0xDF ? 3 : firstByte > 0xBF ? 2 : 1;

    if (i + bytesPerSequence <= end) {
      var secondByte = void 0,
          thirdByte = void 0,
          fourthByte = void 0,
          tempCodePoint = void 0;

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte;
          }

          break;

        case 2:
          secondByte = buf[i + 1];

          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | secondByte & 0x3F;

            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint;
            }
          }

          break;

        case 3:
          secondByte = buf[i + 1];
          thirdByte = buf[i + 2];

          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | thirdByte & 0x3F;

            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint;
            }
          }

          break;

        case 4:
          secondByte = buf[i + 1];
          thirdByte = buf[i + 2];
          fourthByte = buf[i + 3];

          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | fourthByte & 0x3F;

            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint;
            }
          }

      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD;
      bytesPerSequence = 1;
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000;
      res.push(codePoint >>> 10 & 0x3FF | 0xD800);
      codePoint = 0xDC00 | codePoint & 0x3FF;
    }

    res.push(codePoint);
    i += bytesPerSequence;
  }

  return decodeCodePointsArray(res);
} // Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety


var MAX_ARGUMENTS_LENGTH = 0x1000;

function decodeCodePointsArray(codePoints) {
  var len = codePoints.length;

  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints); // avoid extra slice()
  } // Decode in chunks to avoid "call stack size exceeded".


  var res = '';
  var i = 0;

  while (i < len) {
    res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));
  }

  return res;
}

function asciiSlice(buf, start, end) {
  var ret = '';
  end = Math.min(buf.length, end);

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F);
  }

  return ret;
}

function latin1Slice(buf, start, end) {
  var ret = '';
  end = Math.min(buf.length, end);

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i]);
  }

  return ret;
}

function hexSlice(buf, start, end) {
  var len = buf.length;
  if (!start || start < 0) start = 0;
  if (!end || end < 0 || end > len) end = len;
  var out = '';

  for (var i = start; i < end; ++i) {
    out += hexSliceLookupTable[buf[i]];
  }

  return out;
}

function utf16leSlice(buf, start, end) {
  var bytes = buf.slice(start, end);
  var res = ''; // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)

  for (var i = 0; i < bytes.length - 1; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
  }

  return res;
}

Buffer.prototype.slice = function slice(start, end) {
  var len = this.length;
  start = ~~start;
  end = end === undefined ? len : ~~end;

  if (start < 0) {
    start += len;
    if (start < 0) start = 0;
  } else if (start > len) {
    start = len;
  }

  if (end < 0) {
    end += len;
    if (end < 0) end = 0;
  } else if (end > len) {
    end = len;
  }

  if (end < start) end = start;
  var newBuf = this.subarray(start, end); // Return an augmented `Uint8Array` instance

  Object.setPrototypeOf(newBuf, Buffer.prototype);
  return newBuf;
};
/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */


function checkOffset(offset, ext, length) {
  if (offset % 1 !== 0 || offset < 0) throw new RangeError('offset is not uint');
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length');
}

Buffer.prototype.readUintLE = Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {
  offset = offset >>> 0;
  byteLength = byteLength >>> 0;
  if (!noAssert) checkOffset(offset, byteLength, this.length);
  var val = this[offset];
  var mul = 1;
  var i = 0;

  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul;
  }

  return val;
};

Buffer.prototype.readUintBE = Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {
  offset = offset >>> 0;
  byteLength = byteLength >>> 0;

  if (!noAssert) {
    checkOffset(offset, byteLength, this.length);
  }

  var val = this[offset + --byteLength];
  var mul = 1;

  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul;
  }

  return val;
};

Buffer.prototype.readUint8 = Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) checkOffset(offset, 1, this.length);
  return this[offset];
};

Buffer.prototype.readUint16LE = Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) checkOffset(offset, 2, this.length);
  return this[offset] | this[offset + 1] << 8;
};

Buffer.prototype.readUint16BE = Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) checkOffset(offset, 2, this.length);
  return this[offset] << 8 | this[offset + 1];
};

Buffer.prototype.readUint32LE = Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) checkOffset(offset, 4, this.length);
  return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 0x1000000;
};

Buffer.prototype.readUint32BE = Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) checkOffset(offset, 4, this.length);
  return this[offset] * 0x1000000 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
};

Buffer.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE(offset) {
  offset = offset >>> 0;
  validateNumber(offset, 'offset');
  var first = this[offset];
  var last = this[offset + 7];

  if (first === undefined || last === undefined) {
    boundsError(offset, this.length - 8);
  }

  var lo = first + this[++offset] * Math.pow(2, 8) + this[++offset] * Math.pow(2, 16) + this[++offset] * Math.pow(2, 24);
  var hi = this[++offset] + this[++offset] * Math.pow(2, 8) + this[++offset] * Math.pow(2, 16) + last * Math.pow(2, 24);
  return BigInt(lo) + (BigInt(hi) << BigInt(32));
});
Buffer.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE(offset) {
  offset = offset >>> 0;
  validateNumber(offset, 'offset');
  var first = this[offset];
  var last = this[offset + 7];

  if (first === undefined || last === undefined) {
    boundsError(offset, this.length - 8);
  }

  var hi = first * Math.pow(2, 24) + this[++offset] * Math.pow(2, 16) + this[++offset] * Math.pow(2, 8) + this[++offset];
  var lo = this[++offset] * Math.pow(2, 24) + this[++offset] * Math.pow(2, 16) + this[++offset] * Math.pow(2, 8) + last;
  return (BigInt(hi) << BigInt(32)) + BigInt(lo);
});

Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {
  offset = offset >>> 0;
  byteLength = byteLength >>> 0;
  if (!noAssert) checkOffset(offset, byteLength, this.length);
  var val = this[offset];
  var mul = 1;
  var i = 0;

  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul;
  }

  mul *= 0x80;
  if (val >= mul) val -= Math.pow(2, 8 * byteLength);
  return val;
};

Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {
  offset = offset >>> 0;
  byteLength = byteLength >>> 0;
  if (!noAssert) checkOffset(offset, byteLength, this.length);
  var i = byteLength;
  var mul = 1;
  var val = this[offset + --i];

  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul;
  }

  mul *= 0x80;
  if (val >= mul) val -= Math.pow(2, 8 * byteLength);
  return val;
};

Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) checkOffset(offset, 1, this.length);
  if (!(this[offset] & 0x80)) return this[offset];
  return (0xff - this[offset] + 1) * -1;
};

Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) checkOffset(offset, 2, this.length);
  var val = this[offset] | this[offset + 1] << 8;
  return val & 0x8000 ? val | 0xFFFF0000 : val;
};

Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) checkOffset(offset, 2, this.length);
  var val = this[offset + 1] | this[offset] << 8;
  return val & 0x8000 ? val | 0xFFFF0000 : val;
};

Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) checkOffset(offset, 4, this.length);
  return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
};

Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) checkOffset(offset, 4, this.length);
  return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
};

Buffer.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE(offset) {
  offset = offset >>> 0;
  validateNumber(offset, 'offset');
  var first = this[offset];
  var last = this[offset + 7];

  if (first === undefined || last === undefined) {
    boundsError(offset, this.length - 8);
  }

  var val = this[offset + 4] + this[offset + 5] * Math.pow(2, 8) + this[offset + 6] * Math.pow(2, 16) + (last << 24); // Overflow

  return (BigInt(val) << BigInt(32)) + BigInt(first + this[++offset] * Math.pow(2, 8) + this[++offset] * Math.pow(2, 16) + this[++offset] * Math.pow(2, 24));
});
Buffer.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE(offset) {
  offset = offset >>> 0;
  validateNumber(offset, 'offset');
  var first = this[offset];
  var last = this[offset + 7];

  if (first === undefined || last === undefined) {
    boundsError(offset, this.length - 8);
  }

  var val = (first << 24) + // Overflow
  this[++offset] * Math.pow(2, 16) + this[++offset] * Math.pow(2, 8) + this[++offset];
  return (BigInt(val) << BigInt(32)) + BigInt(this[++offset] * Math.pow(2, 24) + this[++offset] * Math.pow(2, 16) + this[++offset] * Math.pow(2, 8) + last);
});

Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) checkOffset(offset, 4, this.length);
  return ieee754.read(this, offset, true, 23, 4);
};

Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) checkOffset(offset, 4, this.length);
  return ieee754.read(this, offset, false, 23, 4);
};

Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) checkOffset(offset, 8, this.length);
  return ieee754.read(this, offset, true, 52, 8);
};

Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) checkOffset(offset, 8, this.length);
  return ieee754.read(this, offset, false, 52, 8);
};

function checkInt(buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds');
  if (offset + ext > buf.length) throw new RangeError('Index out of range');
}

Buffer.prototype.writeUintLE = Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset >>> 0;
  byteLength = byteLength >>> 0;

  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1;
    checkInt(this, value, offset, byteLength, maxBytes, 0);
  }

  var mul = 1;
  var i = 0;
  this[offset] = value & 0xFF;

  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = value / mul & 0xFF;
  }

  return offset + byteLength;
};

Buffer.prototype.writeUintBE = Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset >>> 0;
  byteLength = byteLength >>> 0;

  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1;
    checkInt(this, value, offset, byteLength, maxBytes, 0);
  }

  var i = byteLength - 1;
  var mul = 1;
  this[offset + i] = value & 0xFF;

  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = value / mul & 0xFF;
  }

  return offset + byteLength;
};

Buffer.prototype.writeUint8 = Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
  value = +value;
  offset = offset >>> 0;
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
  this[offset] = value & 0xff;
  return offset + 1;
};

Buffer.prototype.writeUint16LE = Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
  value = +value;
  offset = offset >>> 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
  this[offset] = value & 0xff;
  this[offset + 1] = value >>> 8;
  return offset + 2;
};

Buffer.prototype.writeUint16BE = Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
  value = +value;
  offset = offset >>> 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
  this[offset] = value >>> 8;
  this[offset + 1] = value & 0xff;
  return offset + 2;
};

Buffer.prototype.writeUint32LE = Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
  value = +value;
  offset = offset >>> 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
  this[offset + 3] = value >>> 24;
  this[offset + 2] = value >>> 16;
  this[offset + 1] = value >>> 8;
  this[offset] = value & 0xff;
  return offset + 4;
};

Buffer.prototype.writeUint32BE = Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
  value = +value;
  offset = offset >>> 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
  this[offset] = value >>> 24;
  this[offset + 1] = value >>> 16;
  this[offset + 2] = value >>> 8;
  this[offset + 3] = value & 0xff;
  return offset + 4;
};

function wrtBigUInt64LE(buf, value, offset, min, max) {
  checkIntBI(value, min, max, buf, offset, 7);
  var lo = Number(value & BigInt(0xffffffff));
  buf[offset++] = lo;
  lo = lo >> 8;
  buf[offset++] = lo;
  lo = lo >> 8;
  buf[offset++] = lo;
  lo = lo >> 8;
  buf[offset++] = lo;
  var hi = Number(value >> BigInt(32) & BigInt(0xffffffff));
  buf[offset++] = hi;
  hi = hi >> 8;
  buf[offset++] = hi;
  hi = hi >> 8;
  buf[offset++] = hi;
  hi = hi >> 8;
  buf[offset++] = hi;
  return offset;
}

function wrtBigUInt64BE(buf, value, offset, min, max) {
  checkIntBI(value, min, max, buf, offset, 7);
  var lo = Number(value & BigInt(0xffffffff));
  buf[offset + 7] = lo;
  lo = lo >> 8;
  buf[offset + 6] = lo;
  lo = lo >> 8;
  buf[offset + 5] = lo;
  lo = lo >> 8;
  buf[offset + 4] = lo;
  var hi = Number(value >> BigInt(32) & BigInt(0xffffffff));
  buf[offset + 3] = hi;
  hi = hi >> 8;
  buf[offset + 2] = hi;
  hi = hi >> 8;
  buf[offset + 1] = hi;
  hi = hi >> 8;
  buf[offset] = hi;
  return offset + 8;
}

Buffer.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE(value) {
  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'));
});
Buffer.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE(value) {
  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'));
});

Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset >>> 0;

  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1);
    checkInt(this, value, offset, byteLength, limit - 1, -limit);
  }

  var i = 0;
  var mul = 1;
  var sub = 0;
  this[offset] = value & 0xFF;

  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1;
    }

    this[offset + i] = (value / mul >> 0) - sub & 0xFF;
  }

  return offset + byteLength;
};

Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset >>> 0;

  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1);
    checkInt(this, value, offset, byteLength, limit - 1, -limit);
  }

  var i = byteLength - 1;
  var mul = 1;
  var sub = 0;
  this[offset + i] = value & 0xFF;

  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1;
    }

    this[offset + i] = (value / mul >> 0) - sub & 0xFF;
  }

  return offset + byteLength;
};

Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
  value = +value;
  offset = offset >>> 0;
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);
  if (value < 0) value = 0xff + value + 1;
  this[offset] = value & 0xff;
  return offset + 1;
};

Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
  value = +value;
  offset = offset >>> 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
  this[offset] = value & 0xff;
  this[offset + 1] = value >>> 8;
  return offset + 2;
};

Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
  value = +value;
  offset = offset >>> 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
  this[offset] = value >>> 8;
  this[offset + 1] = value & 0xff;
  return offset + 2;
};

Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
  value = +value;
  offset = offset >>> 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
  this[offset] = value & 0xff;
  this[offset + 1] = value >>> 8;
  this[offset + 2] = value >>> 16;
  this[offset + 3] = value >>> 24;
  return offset + 4;
};

Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
  value = +value;
  offset = offset >>> 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
  if (value < 0) value = 0xffffffff + value + 1;
  this[offset] = value >>> 24;
  this[offset + 1] = value >>> 16;
  this[offset + 2] = value >>> 8;
  this[offset + 3] = value & 0xff;
  return offset + 4;
};

Buffer.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE(value) {
  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  return wrtBigUInt64LE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'));
});
Buffer.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE(value) {
  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  return wrtBigUInt64BE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'));
});

function checkIEEE754(buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range');
  if (offset < 0) throw new RangeError('Index out of range');
}

function writeFloat(buf, value, offset, littleEndian, noAssert) {
  value = +value;
  offset = offset >>> 0;

  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38);
  }

  ieee754.write(buf, value, offset, littleEndian, 23, 4);
  return offset + 4;
}

Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert);
};

Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert);
};

function writeDouble(buf, value, offset, littleEndian, noAssert) {
  value = +value;
  offset = offset >>> 0;

  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308);
  }

  ieee754.write(buf, value, offset, littleEndian, 52, 8);
  return offset + 8;
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert);
};

Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert);
}; // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)


Buffer.prototype.copy = function copy(target, targetStart, start, end) {
  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer');
  if (!start) start = 0;
  if (!end && end !== 0) end = this.length;
  if (targetStart >= target.length) targetStart = target.length;
  if (!targetStart) targetStart = 0;
  if (end > 0 && end < start) end = start; // Copy 0 bytes; we're done

  if (end === start) return 0;
  if (target.length === 0 || this.length === 0) return 0; // Fatal error conditions

  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds');
  }

  if (start < 0 || start >= this.length) throw new RangeError('Index out of range');
  if (end < 0) throw new RangeError('sourceEnd out of bounds'); // Are we oob?

  if (end > this.length) end = this.length;

  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start;
  }

  var len = end - start;

  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {
    // Use built-in when available, missing from IE11
    this.copyWithin(targetStart, start, end);
  } else {
    Uint8Array.prototype.set.call(target, this.subarray(start, end), targetStart);
  }

  return len;
}; // Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])


Buffer.prototype.fill = function fill(val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start;
      start = 0;
      end = this.length;
    } else if (typeof end === 'string') {
      encoding = end;
      end = this.length;
    }

    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string');
    }

    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding);
    }

    if (val.length === 1) {
      var code = val.charCodeAt(0);

      if (encoding === 'utf8' && code < 128 || encoding === 'latin1') {
        // Fast path: If `val` fits into a single byte, use that numeric value.
        val = code;
      }
    }
  } else if (typeof val === 'number') {
    val = val & 255;
  } else if (typeof val === 'boolean') {
    val = Number(val);
  } // Invalid ranges are not set to a default, so can range check early.


  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index');
  }

  if (end <= start) {
    return this;
  }

  start = start >>> 0;
  end = end === undefined ? this.length : end >>> 0;
  if (!val) val = 0;
  var i;

  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val;
    }
  } else {
    var bytes = Buffer.isBuffer(val) ? val : Buffer.from(val, encoding);
    var len = bytes.length;

    if (len === 0) {
      throw new TypeError('The value "' + val + '" is invalid for argument "value"');
    }

    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len];
    }
  }

  return this;
}; // CUSTOM ERRORS
// =============
// Simplified versions from Node, changed for Buffer-only usage


var errors = {};

function E(sym, getMessage, Base) {
  errors[sym] = /*#__PURE__*/function (_Base) {
    _inherits(NodeError, _Base);

    var _super = _createSuper(NodeError);

    function NodeError() {
      var _this;

      _classCallCheck(this, NodeError);

      _this = _super.call(this);
      Object.defineProperty(_assertThisInitialized(_this), 'message', {
        value: getMessage.apply(_assertThisInitialized(_this), arguments),
        writable: true,
        configurable: true
      }); // Add the error code to the name to include it in the stack trace.

      _this.name = "".concat(_this.name, " [").concat(sym, "]"); // Access the stack to generate the error message including the error code
      // from the name.

      _this.stack; // eslint-disable-line no-unused-expressions
      // Reset the name to the actual name.

      delete _this.name;
      return _this;
    }

    _createClass(NodeError, [{
      key: "code",
      get: function get() {
        return sym;
      },
      set: function set(value) {
        Object.defineProperty(this, 'code', {
          configurable: true,
          enumerable: true,
          value: value,
          writable: true
        });
      }
    }, {
      key: "toString",
      value: function toString() {
        return "".concat(this.name, " [").concat(sym, "]: ").concat(this.message);
      }
    }]);

    return NodeError;
  }(Base);
}

E('ERR_BUFFER_OUT_OF_BOUNDS', function (name) {
  if (name) {
    return "".concat(name, " is outside of buffer bounds");
  }

  return 'Attempt to access memory outside buffer bounds';
}, RangeError);
E('ERR_INVALID_ARG_TYPE', function (name, actual) {
  return "The \"".concat(name, "\" argument must be of type number. Received type ").concat(_typeof(actual));
}, TypeError);
E('ERR_OUT_OF_RANGE', function (str, range, input) {
  var msg = "The value of \"".concat(str, "\" is out of range.");
  var received = input;

  if (Number.isInteger(input) && Math.abs(input) > Math.pow(2, 32)) {
    received = addNumericalSeparator(String(input));
  } else if (typeof input === 'bigint') {
    received = String(input);

    if (input > Math.pow(BigInt(2), BigInt(32)) || input < -Math.pow(BigInt(2), BigInt(32))) {
      received = addNumericalSeparator(received);
    }

    received += 'n';
  }

  msg += " It must be ".concat(range, ". Received ").concat(received);
  return msg;
}, RangeError);

function addNumericalSeparator(val) {
  var res = '';
  var i = val.length;
  var start = val[0] === '-' ? 1 : 0;

  for (; i >= start + 4; i -= 3) {
    res = "_".concat(val.slice(i - 3, i)).concat(res);
  }

  return "".concat(val.slice(0, i)).concat(res);
} // CHECK FUNCTIONS
// ===============


function checkBounds(buf, offset, byteLength) {
  validateNumber(offset, 'offset');

  if (buf[offset] === undefined || buf[offset + byteLength] === undefined) {
    boundsError(offset, buf.length - (byteLength + 1));
  }
}

function checkIntBI(value, min, max, buf, offset, byteLength) {
  if (value > max || value < min) {
    var n = typeof min === 'bigint' ? 'n' : '';
    var range;

    if (byteLength > 3) {
      if (min === 0 || min === BigInt(0)) {
        range = ">= 0".concat(n, " and < 2").concat(n, " ** ").concat((byteLength + 1) * 8).concat(n);
      } else {
        range = ">= -(2".concat(n, " ** ").concat((byteLength + 1) * 8 - 1).concat(n, ") and < 2 ** ") + "".concat((byteLength + 1) * 8 - 1).concat(n);
      }
    } else {
      range = ">= ".concat(min).concat(n, " and <= ").concat(max).concat(n);
    }

    throw new errors.ERR_OUT_OF_RANGE('value', range, value);
  }

  checkBounds(buf, offset, byteLength);
}

function validateNumber(value, name) {
  if (typeof value !== 'number') {
    throw new errors.ERR_INVALID_ARG_TYPE(name, 'number', value);
  }
}

function boundsError(value, length, type) {
  if (Math.floor(value) !== value) {
    validateNumber(value, type);
    throw new errors.ERR_OUT_OF_RANGE(type || 'offset', 'an integer', value);
  }

  if (length < 0) {
    throw new errors.ERR_BUFFER_OUT_OF_BOUNDS();
  }

  throw new errors.ERR_OUT_OF_RANGE(type || 'offset', ">= ".concat(type ? 1 : 0, " and <= ").concat(length), value);
} // HELPER FUNCTIONS
// ================


var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;

function base64clean(str) {
  // Node takes equal signs as end of the Base64 encoding
  str = str.split('=')[0]; // Node strips out invalid characters like \n and \t from the string, base64-js does not

  str = str.trim().replace(INVALID_BASE64_RE, ''); // Node converts strings with length < 2 to ''

  if (str.length < 2) return ''; // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not

  while (str.length % 4 !== 0) {
    str = str + '=';
  }

  return str;
}

function utf8ToBytes(string, units) {
  units = units || Infinity;
  var codePoint;
  var length = string.length;
  var leadSurrogate = null;
  var bytes = [];

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i); // is surrogate component

    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
          continue;
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
          continue;
        } // valid lead


        leadSurrogate = codePoint;
        continue;
      } // 2 leads in a row


      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
        leadSurrogate = codePoint;
        continue;
      } // valid surrogate pair


      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
    }

    leadSurrogate = null; // encode utf8

    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break;
      bytes.push(codePoint);
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break;
      bytes.push(codePoint >> 0x6 | 0xC0, codePoint & 0x3F | 0x80);
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break;
      bytes.push(codePoint >> 0xC | 0xE0, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break;
      bytes.push(codePoint >> 0x12 | 0xF0, codePoint >> 0xC & 0x3F | 0x80, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
    } else {
      throw new Error('Invalid code point');
    }
  }

  return bytes;
}

function asciiToBytes(str) {
  var byteArray = [];

  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF);
  }

  return byteArray;
}

function utf16leToBytes(str, units) {
  var c, hi, lo;
  var byteArray = [];

  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break;
    c = str.charCodeAt(i);
    hi = c >> 8;
    lo = c % 256;
    byteArray.push(lo);
    byteArray.push(hi);
  }

  return byteArray;
}

function base64ToBytes(str) {
  return base64.toByteArray(base64clean(str));
}

function blitBuffer(src, dst, offset, length) {
  var i;

  for (i = 0; i < length; ++i) {
    if (i + offset >= dst.length || i >= src.length) break;
    dst[i + offset] = src[i];
  }

  return i;
} // ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
// the `instanceof` check but they should be treated as of that type.
// See: https://github.com/feross/buffer/issues/166


function isInstance(obj, type) {
  return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;
}

function numberIsNaN(obj) {
  // For IE11 support
  return obj !== obj; // eslint-disable-line no-self-compare
} // Create lookup table for `toString('hex')`
// See: https://github.com/feross/buffer/issues/219


var hexSliceLookupTable = function () {
  var alphabet = '0123456789abcdef';
  var table = new Array(256);

  for (var i = 0; i < 16; ++i) {
    var i16 = i * 16;

    for (var j = 0; j < 16; ++j) {
      table[i16 + j] = alphabet[i] + alphabet[j];
    }
  }

  return table;
}(); // Return not function with Error if BigInt not supported


function defineBigIntMethod(fn) {
  return typeof BigInt === 'undefined' ? BufferBigIntNotDefined : fn;
}

function BufferBigIntNotDefined() {
  throw new Error('BigInt not supported');
}

/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } Object.defineProperty(subClass, "prototype", { value: Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }), writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var packageInfo = __webpack_require__(3);

var EventEmitter = __webpack_require__(10).EventEmitter;

var net = __webpack_require__(18);

var tls = __webpack_require__(44);

var os = __webpack_require__(19);

var crypto = __webpack_require__(8);

var DataStream = __webpack_require__(85);

var PassThrough = __webpack_require__(1).PassThrough;

var shared = __webpack_require__(2); // default timeout values in ms


var CONNECTION_TIMEOUT = 2 * 60 * 1000; // how much to wait for the connection to be established

var SOCKET_TIMEOUT = 10 * 60 * 1000; // how much to wait for socket inactivity before disconnecting the client

var GREETING_TIMEOUT = 30 * 1000; // how much to wait after connection is established but SMTP greeting is not receieved

/**
 * Generates a SMTP connection object
 *
 * Optional options object takes the following possible properties:
 *
 *  * **port** - is the port to connect to (defaults to 587 or 465)
 *  * **host** - is the hostname or IP address to connect to (defaults to 'localhost')
 *  * **secure** - use SSL
 *  * **ignoreTLS** - ignore server support for STARTTLS
 *  * **requireTLS** - forces the client to use STARTTLS
 *  * **name** - the name of the client server
 *  * **localAddress** - outbound address to bind to (see: http://nodejs.org/api/net.html#net_net_connect_options_connectionlistener)
 *  * **greetingTimeout** - Time to wait in ms until greeting message is received from the server (defaults to 10000)
 *  * **connectionTimeout** - how many milliseconds to wait for the connection to establish
 *  * **socketTimeout** - Time of inactivity until the connection is closed (defaults to 1 hour)
 *  * **lmtp** - if true, uses LMTP instead of SMTP protocol
 *  * **logger** - bunyan compatible logger interface
 *  * **debug** - if true pass SMTP traffic to the logger
 *  * **tls** - options for createCredentials
 *  * **socket** - existing socket to use instead of creating a new one (see: http://nodejs.org/api/net.html#net_class_net_socket)
 *  * **secured** - boolean indicates that the provided socket has already been upgraded to tls
 *
 * @constructor
 * @namespace SMTP Client module
 * @param {Object} [options] Option properties
 */

var SMTPConnection = /*#__PURE__*/function (_EventEmitter) {
  _inherits(SMTPConnection, _EventEmitter);

  var _super = _createSuper(SMTPConnection);

  function SMTPConnection(options) {
    var _this;

    _classCallCheck(this, SMTPConnection);

    _this = _super.call(this, options);
    _this.id = crypto.randomBytes(8).toString('base64').replace(/\W/g, '');
    _this.stage = 'init';
    _this.options = options || {};
    _this.secureConnection = !!_this.options.secure;
    _this.alreadySecured = !!_this.options.secured;
    _this.port = Number(_this.options.port) || (_this.secureConnection ? 465 : 587);
    _this.host = _this.options.host || 'localhost';

    if (typeof _this.options.secure === 'undefined' && _this.port === 465) {
      // if secure option is not set but port is 465, then default to secure
      _this.secureConnection = true;
    }

    _this.name = _this.options.name || _this._getHostname();
    _this.logger = shared.getLogger(_this.options, {
      component: _this.options.component || 'smtp-connection',
      sid: _this.id
    });
    _this.customAuth = new Map();
    Object.keys(_this.options.customAuth || {}).forEach(function (key) {
      var mapKey = (key || '').toString().trim().toUpperCase();

      if (!mapKey) {
        return;
      }

      _this.customAuth.set(mapKey, _this.options.customAuth[key]);
    });
    /**
     * Expose version nr, just for the reference
     * @type {String}
     */

    _this.version = packageInfo.version;
    /**
     * If true, then the user is authenticated
     * @type {Boolean}
     */

    _this.authenticated = false;
    /**
     * If set to true, this instance is no longer active
     * @private
     */

    _this.destroyed = false;
    /**
     * Defines if the current connection is secure or not. If not,
     * STARTTLS can be used if available
     * @private
     */

    _this.secure = !!_this.secureConnection;
    /**
     * Store incomplete messages coming from the server
     * @private
     */

    _this._remainder = '';
    /**
     * Unprocessed responses from the server
     * @type {Array}
     */

    _this._responseQueue = [];
    _this.lastServerResponse = false;
    /**
     * The socket connecting to the server
     * @publick
     */

    _this._socket = false;
    /**
     * Lists supported auth mechanisms
     * @private
     */

    _this._supportedAuth = [];
    /**
     * Set to true, if EHLO response includes "AUTH".
     * If false then authentication is not tried
     */

    _this.allowsAuth = false;
    /**
     * Includes current envelope (from, to)
     * @private
     */

    _this._envelope = false;
    /**
     * Lists supported extensions
     * @private
     */

    _this._supportedExtensions = [];
    /**
     * Defines the maximum allowed size for a single message
     * @private
     */

    _this._maxAllowedSize = 0;
    /**
     * Function queue to run if a data chunk comes from the server
     * @private
     */

    _this._responseActions = [];
    _this._recipientQueue = [];
    /**
     * Timeout variable for waiting the greeting
     * @private
     */

    _this._greetingTimeout = false;
    /**
     * Timeout variable for waiting the connection to start
     * @private
     */

    _this._connectionTimeout = false;
    /**
     * If the socket is deemed already closed
     * @private
     */

    _this._destroyed = false;
    /**
     * If the socket is already being closed
     * @private
     */

    _this._closing = false;
    /**
     * Callbacks for socket's listeners
     */

    _this._onSocketData = function (chunk) {
      return _this._onData(chunk);
    };

    _this._onSocketError = function (error) {
      return _this._onError(error, 'ESOCKET', false, 'CONN');
    };

    _this._onSocketClose = function () {
      return _this._onClose();
    };

    _this._onSocketEnd = function () {
      return _this._onEnd();
    };

    _this._onSocketTimeout = function () {
      return _this._onTimeout();
    };

    return _this;
  }
  /**
   * Creates a connection to a SMTP server and sets up connection
   * listener
   */


  _createClass(SMTPConnection, [{
    key: "connect",
    value: function connect(connectCallback) {
      var _this2 = this;

      if (typeof connectCallback === 'function') {
        this.once('connect', function () {
          _this2.logger.debug({
            tnx: 'smtp'
          }, 'SMTP handshake finished');

          connectCallback();
        });

        var isDestroyedMessage = this._isDestroyedMessage('connect');

        if (isDestroyedMessage) {
          return connectCallback(this._formatError(isDestroyedMessage, 'ECONNECTION', false, 'CONN'));
        }
      }

      var opts = {
        port: this.port,
        host: this.host
      };

      if (this.options.localAddress) {
        opts.localAddress = this.options.localAddress;
      }

      var setupConnectionHandlers = function setupConnectionHandlers() {
        _this2._connectionTimeout = setTimeout(function () {
          _this2._onError('Connection timeout', 'ETIMEDOUT', false, 'CONN');
        }, _this2.options.connectionTimeout || CONNECTION_TIMEOUT);

        _this2._socket.on('error', _this2._onSocketError);
      };

      if (this.options.connection) {
        // connection is already opened
        this._socket = this.options.connection;

        if (this.secureConnection && !this.alreadySecured) {
          setImmediate(function () {
            return _this2._upgradeConnection(function (err) {
              if (err) {
                _this2._onError(new Error('Error initiating TLS - ' + (err.message || err)), 'ETLS', false, 'CONN');

                return;
              }

              _this2._onConnect();
            });
          });
        } else {
          setImmediate(function () {
            return _this2._onConnect();
          });
        }

        return;
      } else if (this.options.socket) {
        // socket object is set up but not yet connected
        this._socket = this.options.socket;
        return shared.resolveHostname(opts, function (err, resolved) {
          if (err) {
            return setImmediate(function () {
              return _this2._onError(err, 'EDNS', false, 'CONN');
            });
          }

          _this2.logger.debug({
            tnx: 'dns',
            source: opts.host,
            resolved: resolved.host,
            cached: !!resolved.cached
          }, 'Resolved %s as %s [cache %s]', opts.host, resolved.host, resolved.cached ? 'hit' : 'miss');

          Object.keys(resolved).forEach(function (key) {
            if (key.charAt(0) !== '_' && resolved[key]) {
              opts[key] = resolved[key];
            }
          });

          try {
            _this2._socket.connect(_this2.port, _this2.host, function () {
              _this2._socket.setKeepAlive(true);

              _this2._onConnect();
            });

            setupConnectionHandlers();
          } catch (E) {
            return setImmediate(function () {
              return _this2._onError(E, 'ECONNECTION', false, 'CONN');
            });
          }
        });
      } else if (this.secureConnection) {
        // connect using tls
        if (this.options.tls) {
          Object.keys(this.options.tls).forEach(function (key) {
            opts[key] = _this2.options.tls[key];
          });
        }

        return shared.resolveHostname(opts, function (err, resolved) {
          if (err) {
            return setImmediate(function () {
              return _this2._onError(err, 'EDNS', false, 'CONN');
            });
          }

          _this2.logger.debug({
            tnx: 'dns',
            source: opts.host,
            resolved: resolved.host,
            cached: !!resolved.cached
          }, 'Resolved %s as %s [cache %s]', opts.host, resolved.host, resolved.cached ? 'hit' : 'miss');

          Object.keys(resolved).forEach(function (key) {
            if (key.charAt(0) !== '_' && resolved[key]) {
              opts[key] = resolved[key];
            }
          });

          try {
            _this2._socket = tls.connect(opts, function () {
              _this2._socket.setKeepAlive(true);

              _this2._onConnect();
            });
            setupConnectionHandlers();
          } catch (E) {
            return setImmediate(function () {
              return _this2._onError(E, 'ECONNECTION', false, 'CONN');
            });
          }
        });
      } else {
        // connect using plaintext
        return shared.resolveHostname(opts, function (err, resolved) {
          if (err) {
            return setImmediate(function () {
              return _this2._onError(err, 'EDNS', false, 'CONN');
            });
          }

          _this2.logger.debug({
            tnx: 'dns',
            source: opts.host,
            resolved: resolved.host,
            cached: !!resolved.cached
          }, 'Resolved %s as %s [cache %s]', opts.host, resolved.host, resolved.cached ? 'hit' : 'miss');

          Object.keys(resolved).forEach(function (key) {
            if (key.charAt(0) !== '_' && resolved[key]) {
              opts[key] = resolved[key];
            }
          });

          try {
            _this2._socket = net.connect(opts, function () {
              _this2._socket.setKeepAlive(true);

              _this2._onConnect();
            });
            setupConnectionHandlers();
          } catch (E) {
            return setImmediate(function () {
              return _this2._onError(E, 'ECONNECTION', false, 'CONN');
            });
          }
        });
      }
    }
    /**
     * Sends QUIT
     */

  }, {
    key: "quit",
    value: function quit() {
      this._sendCommand('QUIT');

      this._responseActions.push(this.close);
    }
    /**
     * Closes the connection to the server
     */

  }, {
    key: "close",
    value: function close() {
      clearTimeout(this._connectionTimeout);
      clearTimeout(this._greetingTimeout);
      this._responseActions = []; // allow to run this function only once

      if (this._closing) {
        return;
      }

      this._closing = true;
      var closeMethod = 'end';

      if (this.stage === 'init') {
        // Close the socket immediately when connection timed out
        closeMethod = 'destroy';
      }

      this.logger.debug({
        tnx: 'smtp'
      }, 'Closing connection to the server using "%s"', closeMethod);
      var socket = this._socket && this._socket.socket || this._socket;

      if (socket && !socket.destroyed) {
        try {
          this._socket[closeMethod]();
        } catch (E) {// just ignore
        }
      }

      this._destroy();
    }
    /**
     * Authenticate user
     */

  }, {
    key: "login",
    value: function login(authData, callback) {
      var _this3 = this;

      var isDestroyedMessage = this._isDestroyedMessage('login');

      if (isDestroyedMessage) {
        return callback(this._formatError(isDestroyedMessage, 'ECONNECTION', false, 'API'));
      }

      this._auth = authData || {}; // Select SASL authentication method

      this._authMethod = (this._auth.method || '').toString().trim().toUpperCase() || false;

      if (!this._authMethod && this._auth.oauth2 && !this._auth.credentials) {
        this._authMethod = 'XOAUTH2';
      } else if (!this._authMethod || this._authMethod === 'XOAUTH2' && !this._auth.oauth2) {
        // use first supported
        this._authMethod = (this._supportedAuth[0] || 'PLAIN').toUpperCase().trim();
      }

      if (this._authMethod !== 'XOAUTH2' && (!this._auth.credentials || !this._auth.credentials.user || !this._auth.credentials.pass)) {
        if (this._auth.user && this._auth.pass) {
          this._auth.credentials = {
            user: this._auth.user,
            pass: this._auth.pass,
            options: this._auth.options
          };
        } else {
          return callback(this._formatError('Missing credentials for "' + this._authMethod + '"', 'EAUTH', false, 'API'));
        }
      }

      if (this.customAuth.has(this._authMethod)) {
        var handler = this.customAuth.get(this._authMethod);
        var lastResponse;
        var returned = false;

        var resolve = function resolve() {
          if (returned) {
            return;
          }

          returned = true;

          _this3.logger.info({
            tnx: 'smtp',
            username: _this3._auth.user,
            action: 'authenticated',
            method: _this3._authMethod
          }, 'User %s authenticated', JSON.stringify(_this3._auth.user));

          _this3.authenticated = true;
          callback(null, true);
        };

        var reject = function reject(err) {
          if (returned) {
            return;
          }

          returned = true;
          callback(_this3._formatError(err, 'EAUTH', lastResponse, 'AUTH ' + _this3._authMethod));
        };

        var handlerResponse = handler({
          auth: this._auth,
          method: this._authMethod,
          extensions: [].concat(this._supportedExtensions),
          authMethods: [].concat(this._supportedAuth),
          maxAllowedSize: this._maxAllowedSize || false,
          sendCommand: function sendCommand(cmd, done) {
            var promise;

            if (!done) {
              promise = new Promise(function (resolve, reject) {
                done = shared.callbackPromise(resolve, reject);
              });
            }

            _this3._responseActions.push(function (str) {
              lastResponse = str;
              var codes = str.match(/^(\d+)(?:\s(\d+\.\d+\.\d+))?\s/);
              var data = {
                command: cmd,
                response: str
              };

              if (codes) {
                data.status = Number(codes[1]) || 0;

                if (codes[2]) {
                  data.code = codes[2];
                }

                data.text = str.substr(codes[0].length);
              } else {
                data.text = str;
                data.status = 0; // just in case we need to perform numeric comparisons
              }

              done(null, data);
            });

            setImmediate(function () {
              return _this3._sendCommand(cmd);
            });
            return promise;
          },
          resolve: resolve,
          reject: reject
        });

        if (handlerResponse && typeof handlerResponse["catch"] === 'function') {
          // a promise was returned
          handlerResponse.then(resolve)["catch"](reject);
        }

        return;
      }

      switch (this._authMethod) {
        case 'XOAUTH2':
          this._handleXOauth2Token(false, callback);

          return;

        case 'LOGIN':
          this._responseActions.push(function (str) {
            _this3._actionAUTH_LOGIN_USER(str, callback);
          });

          this._sendCommand('AUTH LOGIN');

          return;

        case 'PLAIN':
          this._responseActions.push(function (str) {
            _this3._actionAUTHComplete(str, callback);
          });

          this._sendCommand('AUTH PLAIN ' + Buffer.from( //this._auth.user+'\u0000'+
          "\0" + // skip authorization identity as it causes problems with some servers
          this._auth.credentials.user + "\0" + this._auth.credentials.pass, 'utf-8').toString('base64'), // log entry without passwords
          'AUTH PLAIN ' + Buffer.from( //this._auth.user+'\u0000'+
          "\0" + // skip authorization identity as it causes problems with some servers
          this._auth.credentials.user + "\0" + '/* secret */', 'utf-8').toString('base64'));

          return;

        case 'CRAM-MD5':
          this._responseActions.push(function (str) {
            _this3._actionAUTH_CRAM_MD5(str, callback);
          });

          this._sendCommand('AUTH CRAM-MD5');

          return;
      }

      return callback(this._formatError('Unknown authentication method "' + this._authMethod + '"', 'EAUTH', false, 'API'));
    }
    /**
     * Sends a message
     *
     * @param {Object} envelope Envelope object, {from: addr, to: [addr]}
     * @param {Object} message String, Buffer or a Stream
     * @param {Function} callback Callback to return once sending is completed
     */

  }, {
    key: "send",
    value: function send(envelope, message, done) {
      var _this4 = this;

      if (!message) {
        return done(this._formatError('Empty message', 'EMESSAGE', false, 'API'));
      }

      var isDestroyedMessage = this._isDestroyedMessage('send message');

      if (isDestroyedMessage) {
        return done(this._formatError(isDestroyedMessage, 'ECONNECTION', false, 'API'));
      } // reject larger messages than allowed


      if (this._maxAllowedSize && envelope.size > this._maxAllowedSize) {
        return setImmediate(function () {
          done(_this4._formatError('Message size larger than allowed ' + _this4._maxAllowedSize, 'EMESSAGE', false, 'MAIL FROM'));
        });
      } // ensure that callback is only called once


      var returned = false;

      var callback = function callback() {
        if (returned) {
          return;
        }

        returned = true;
        done.apply(void 0, arguments);
      };

      if (typeof message.on === 'function') {
        message.on('error', function (err) {
          return callback(_this4._formatError(err, 'ESTREAM', false, 'API'));
        });
      }

      var startTime = Date.now();

      this._setEnvelope(envelope, function (err, info) {
        if (err) {
          return callback(err);
        }

        var envelopeTime = Date.now();

        var stream = _this4._createSendStream(function (err, str) {
          if (err) {
            return callback(err);
          }

          info.envelopeTime = envelopeTime - startTime;
          info.messageTime = Date.now() - envelopeTime;
          info.messageSize = stream.outByteCount;
          info.response = str;
          return callback(null, info);
        });

        if (typeof message.pipe === 'function') {
          message.pipe(stream);
        } else {
          stream.write(message);
          stream.end();
        }
      });
    }
    /**
     * Resets connection state
     *
     * @param {Function} callback Callback to return once connection is reset
     */

  }, {
    key: "reset",
    value: function reset(callback) {
      var _this5 = this;

      this._sendCommand('RSET');

      this._responseActions.push(function (str) {
        if (str.charAt(0) !== '2') {
          return callback(_this5._formatError('Could not reset session state. response=' + str, 'EPROTOCOL', str, 'RSET'));
        }

        _this5._envelope = false;
        return callback(null, true);
      });
    }
    /**
     * Connection listener that is run when the connection to
     * the server is opened
     *
     * @event
     */

  }, {
    key: "_onConnect",
    value: function _onConnect() {
      var _this6 = this;

      clearTimeout(this._connectionTimeout);
      this.logger.info({
        tnx: 'network',
        localAddress: this._socket.localAddress,
        localPort: this._socket.localPort,
        remoteAddress: this._socket.remoteAddress,
        remotePort: this._socket.remotePort
      }, '%s established to %s:%s', this.secure ? 'Secure connection' : 'Connection', this._socket.remoteAddress, this._socket.remotePort);

      if (this._destroyed) {
        // Connection was established after we already had canceled it
        this.close();
        return;
      }

      this.stage = 'connected'; // clear existing listeners for the socket

      this._socket.removeListener('data', this._onSocketData);

      this._socket.removeListener('timeout', this._onSocketTimeout);

      this._socket.removeListener('close', this._onSocketClose);

      this._socket.removeListener('end', this._onSocketEnd);

      this._socket.on('data', this._onSocketData);

      this._socket.once('close', this._onSocketClose);

      this._socket.once('end', this._onSocketEnd);

      this._socket.setTimeout(this.options.socketTimeout || SOCKET_TIMEOUT);

      this._socket.on('timeout', this._onSocketTimeout);

      this._greetingTimeout = setTimeout(function () {
        // if still waiting for greeting, give up
        if (_this6._socket && !_this6._destroyed && _this6._responseActions[0] === _this6._actionGreeting) {
          _this6._onError('Greeting never received', 'ETIMEDOUT', false, 'CONN');
        }
      }, this.options.greetingTimeout || GREETING_TIMEOUT);

      this._responseActions.push(this._actionGreeting); // we have a 'data' listener set up so resume socket if it was paused


      this._socket.resume();
    }
    /**
     * 'data' listener for data coming from the server
     *
     * @event
     * @param {Buffer} chunk Data chunk coming from the server
     */

  }, {
    key: "_onData",
    value: function _onData(chunk) {
      if (this._destroyed || !chunk || !chunk.length) {
        return;
      }

      var data = (chunk || '').toString('binary');
      var lines = (this._remainder + data).split(/\r?\n/);
      var lastline;
      this._remainder = lines.pop();

      for (var i = 0, len = lines.length; i < len; i++) {
        if (this._responseQueue.length) {
          lastline = this._responseQueue[this._responseQueue.length - 1];

          if (/^\d+-/.test(lastline.split('\n').pop())) {
            this._responseQueue[this._responseQueue.length - 1] += '\n' + lines[i];
            continue;
          }
        }

        this._responseQueue.push(lines[i]);
      }

      if (this._responseQueue.length) {
        lastline = this._responseQueue[this._responseQueue.length - 1];

        if (/^\d+-/.test(lastline.split('\n').pop())) {
          return;
        }
      }

      this._processResponse();
    }
    /**
     * 'error' listener for the socket
     *
     * @event
     * @param {Error} err Error object
     * @param {String} type Error name
     */

  }, {
    key: "_onError",
    value: function _onError(err, type, data, command) {
      clearTimeout(this._connectionTimeout);
      clearTimeout(this._greetingTimeout);

      if (this._destroyed) {
        // just ignore, already closed
        // this might happen when a socket is canceled because of reached timeout
        // but the socket timeout error itself receives only after
        return;
      }

      err = this._formatError(err, type, data, command);
      this.logger.error(data, err.message);
      this.emit('error', err);
      this.close();
    }
  }, {
    key: "_formatError",
    value: function _formatError(message, type, response, command) {
      var err;

      if (/Error\]$/i.test(Object.prototype.toString.call(message))) {
        err = message;
      } else {
        err = new Error(message);
      }

      if (type && type !== 'Error') {
        err.code = type;
      }

      if (response) {
        err.response = response;
        err.message += ': ' + response;
      }

      var responseCode = typeof response === 'string' && Number((response.match(/^\d+/) || [])[0]) || false;

      if (responseCode) {
        err.responseCode = responseCode;
      }

      if (command) {
        err.command = command;
      }

      return err;
    }
    /**
     * 'close' listener for the socket
     *
     * @event
     */

  }, {
    key: "_onClose",
    value: function _onClose() {
      this.logger.info({
        tnx: 'network'
      }, 'Connection closed');

      if (this.upgrading && !this._destroyed) {
        return this._onError(new Error('Connection closed unexpectedly'), 'ETLS', false, 'CONN');
      } else if (![this._actionGreeting, this.close].includes(this._responseActions[0]) && !this._destroyed) {
        return this._onError(new Error('Connection closed unexpectedly'), 'ECONNECTION', false, 'CONN');
      }

      this._destroy();
    }
    /**
     * 'end' listener for the socket
     *
     * @event
     */

  }, {
    key: "_onEnd",
    value: function _onEnd() {
      if (this._socket && !this._socket.destroyed) {
        this._socket.destroy();
      }
    }
    /**
     * 'timeout' listener for the socket
     *
     * @event
     */

  }, {
    key: "_onTimeout",
    value: function _onTimeout() {
      return this._onError(new Error('Timeout'), 'ETIMEDOUT', false, 'CONN');
    }
    /**
     * Destroys the client, emits 'end'
     */

  }, {
    key: "_destroy",
    value: function _destroy() {
      if (this._destroyed) {
        return;
      }

      this._destroyed = true;
      this.emit('end');
    }
    /**
     * Upgrades the connection to TLS
     *
     * @param {Function} callback Callback function to run when the connection
     *        has been secured
     */

  }, {
    key: "_upgradeConnection",
    value: function _upgradeConnection(callback) {
      var _this7 = this;

      // do not remove all listeners or it breaks node v0.10 as there's
      // apparently a 'finish' event set that would be cleared as well
      // we can safely keep 'error', 'end', 'close' etc. events
      this._socket.removeListener('data', this._onSocketData); // incoming data is going to be gibberish from this point onwards


      this._socket.removeListener('timeout', this._onSocketTimeout); // timeout will be re-set for the new socket object


      var socketPlain = this._socket;
      var opts = {
        socket: this._socket,
        host: this.host
      };
      Object.keys(this.options.tls || {}).forEach(function (key) {
        opts[key] = _this7.options.tls[key];
      });
      this.upgrading = true; // tls.connect is not an asynchronous function however it may still throw errors and requires to be wrapped with try/catch

      try {
        this._socket = tls.connect(opts, function () {
          _this7.secure = true;
          _this7.upgrading = false;

          _this7._socket.on('data', _this7._onSocketData);

          socketPlain.removeListener('close', _this7._onSocketClose);
          socketPlain.removeListener('end', _this7._onSocketEnd);
          return callback(null, true);
        });
      } catch (err) {
        return callback(err);
      }

      this._socket.on('error', this._onSocketError);

      this._socket.once('close', this._onSocketClose);

      this._socket.once('end', this._onSocketEnd);

      this._socket.setTimeout(this.options.socketTimeout || SOCKET_TIMEOUT); // 10 min.


      this._socket.on('timeout', this._onSocketTimeout); // resume in case the socket was paused


      socketPlain.resume();
    }
    /**
     * Processes queued responses from the server
     *
     * @param {Boolean} force If true, ignores _processing flag
     */

  }, {
    key: "_processResponse",
    value: function _processResponse() {
      var _this8 = this;

      if (!this._responseQueue.length) {
        return false;
      }

      var str = this.lastServerResponse = (this._responseQueue.shift() || '').toString();

      if (/^\d+-/.test(str.split('\n').pop())) {
        // keep waiting for the final part of multiline response
        return;
      }

      if (this.options.debug || this.options.transactionLog) {
        this.logger.debug({
          tnx: 'server'
        }, str.replace(/\r?\n$/, ''));
      }

      if (!str.trim()) {
        // skip unexpected empty lines
        setImmediate(function () {
          return _this8._processResponse(true);
        });
      }

      var action = this._responseActions.shift();

      if (typeof action === 'function') {
        action.call(this, str);
        setImmediate(function () {
          return _this8._processResponse(true);
        });
      } else {
        return this._onError(new Error('Unexpected Response'), 'EPROTOCOL', str, 'CONN');
      }
    }
    /**
     * Send a command to the server, append \r\n
     *
     * @param {String} str String to be sent to the server
     * @param {String} logStr Optional string to be used for logging instead of the actual string
     */

  }, {
    key: "_sendCommand",
    value: function _sendCommand(str, logStr) {
      if (this._destroyed) {
        // Connection already closed, can't send any more data
        return;
      }

      if (this._socket.destroyed) {
        return this.close();
      }

      if (this.options.debug || this.options.transactionLog) {
        this.logger.debug({
          tnx: 'client'
        }, (logStr || str || '').toString().replace(/\r?\n$/, ''));
      }

      this._socket.write(Buffer.from(str + '\r\n', 'utf-8'));
    }
    /**
     * Initiates a new message by submitting envelope data, starting with
     * MAIL FROM: command
     *
     * @param {Object} envelope Envelope object in the form of
     *        {from:'...', to:['...']}
     *        or
     *        {from:{address:'...',name:'...'}, to:[address:'...',name:'...']}
     */

  }, {
    key: "_setEnvelope",
    value: function _setEnvelope(envelope, callback) {
      var _this9 = this;

      var args = [];
      var useSmtpUtf8 = false;
      this._envelope = envelope || {};
      this._envelope.from = (this._envelope.from && this._envelope.from.address || this._envelope.from || '').toString().trim();
      this._envelope.to = [].concat(this._envelope.to || []).map(function (to) {
        return (to && to.address || to || '').toString().trim();
      });

      if (!this._envelope.to.length) {
        return callback(this._formatError('No recipients defined', 'EENVELOPE', false, 'API'));
      }

      if (this._envelope.from && /[\r\n<>]/.test(this._envelope.from)) {
        return callback(this._formatError('Invalid sender ' + JSON.stringify(this._envelope.from), 'EENVELOPE', false, 'API'));
      } // check if the sender address uses only ASCII characters,
      // otherwise require usage of SMTPUTF8 extension


      if (/[\x80-\uFFFF]/.test(this._envelope.from)) {
        useSmtpUtf8 = true;
      }

      for (var i = 0, len = this._envelope.to.length; i < len; i++) {
        if (!this._envelope.to[i] || /[\r\n<>]/.test(this._envelope.to[i])) {
          return callback(this._formatError('Invalid recipient ' + JSON.stringify(this._envelope.to[i]), 'EENVELOPE', false, 'API'));
        } // check if the recipients addresses use only ASCII characters,
        // otherwise require usage of SMTPUTF8 extension


        if (/[\x80-\uFFFF]/.test(this._envelope.to[i])) {
          useSmtpUtf8 = true;
        }
      } // clone the recipients array for latter manipulation


      this._envelope.rcptQueue = JSON.parse(JSON.stringify(this._envelope.to || []));
      this._envelope.rejected = [];
      this._envelope.rejectedErrors = [];
      this._envelope.accepted = [];

      if (this._envelope.dsn) {
        try {
          this._envelope.dsn = this._setDsnEnvelope(this._envelope.dsn);
        } catch (err) {
          return callback(this._formatError('Invalid DSN ' + err.message, 'EENVELOPE', false, 'API'));
        }
      }

      this._responseActions.push(function (str) {
        _this9._actionMAIL(str, callback);
      }); // If the server supports SMTPUTF8 and the envelope includes an internationalized
      // email address then append SMTPUTF8 keyword to the MAIL FROM command


      if (useSmtpUtf8 && this._supportedExtensions.includes('SMTPUTF8')) {
        args.push('SMTPUTF8');
        this._usingSmtpUtf8 = true;
      } // If the server supports 8BITMIME and the message might contain non-ascii bytes
      // then append the 8BITMIME keyword to the MAIL FROM command


      if (this._envelope.use8BitMime && this._supportedExtensions.includes('8BITMIME')) {
        args.push('BODY=8BITMIME');
        this._using8BitMime = true;
      }

      if (this._envelope.size && this._supportedExtensions.includes('SIZE')) {
        args.push('SIZE=' + this._envelope.size);
      } // If the server supports DSN and the envelope includes an DSN prop
      // then append DSN params to the MAIL FROM command


      if (this._envelope.dsn && this._supportedExtensions.includes('DSN')) {
        if (this._envelope.dsn.ret) {
          args.push('RET=' + shared.encodeXText(this._envelope.dsn.ret));
        }

        if (this._envelope.dsn.envid) {
          args.push('ENVID=' + shared.encodeXText(this._envelope.dsn.envid));
        }
      }

      this._sendCommand('MAIL FROM:<' + this._envelope.from + '>' + (args.length ? ' ' + args.join(' ') : ''));
    }
  }, {
    key: "_setDsnEnvelope",
    value: function _setDsnEnvelope(params) {
      var ret = (params.ret || params["return"] || '').toString().toUpperCase() || null;

      if (ret) {
        switch (ret) {
          case 'HDRS':
          case 'HEADERS':
            ret = 'HDRS';
            break;

          case 'FULL':
          case 'BODY':
            ret = 'FULL';
            break;
        }
      }

      if (ret && !['FULL', 'HDRS'].includes(ret)) {
        throw new Error('ret: ' + JSON.stringify(ret));
      }

      var envid = (params.envid || params.id || '').toString() || null;
      var notify = params.notify || null;

      if (notify) {
        if (typeof notify === 'string') {
          notify = notify.split(',');
        }

        notify = notify.map(function (n) {
          return n.trim().toUpperCase();
        });
        var validNotify = ['NEVER', 'SUCCESS', 'FAILURE', 'DELAY'];
        var invaliNotify = notify.filter(function (n) {
          return !validNotify.includes(n);
        });

        if (invaliNotify.length || notify.length > 1 && notify.includes('NEVER')) {
          throw new Error('notify: ' + JSON.stringify(notify.join(',')));
        }

        notify = notify.join(',');
      }

      var orcpt = (params.recipient || params.orcpt || '').toString() || null;

      if (orcpt && orcpt.indexOf(';') < 0) {
        orcpt = 'rfc822;' + orcpt;
      }

      return {
        ret: ret,
        envid: envid,
        notify: notify,
        orcpt: orcpt
      };
    }
  }, {
    key: "_getDsnRcptToArgs",
    value: function _getDsnRcptToArgs() {
      var args = []; // If the server supports DSN and the envelope includes an DSN prop
      // then append DSN params to the RCPT TO command

      if (this._envelope.dsn && this._supportedExtensions.includes('DSN')) {
        if (this._envelope.dsn.notify) {
          args.push('NOTIFY=' + shared.encodeXText(this._envelope.dsn.notify));
        }

        if (this._envelope.dsn.orcpt) {
          args.push('ORCPT=' + shared.encodeXText(this._envelope.dsn.orcpt));
        }
      }

      return args.length ? ' ' + args.join(' ') : '';
    }
  }, {
    key: "_createSendStream",
    value: function _createSendStream(callback) {
      var _this10 = this;

      var dataStream = new DataStream();
      var logStream;

      if (this.options.lmtp) {
        this._envelope.accepted.forEach(function (recipient, i) {
          var _final = i === _this10._envelope.accepted.length - 1;

          _this10._responseActions.push(function (str) {
            _this10._actionLMTPStream(recipient, _final, str, callback);
          });
        });
      } else {
        this._responseActions.push(function (str) {
          _this10._actionSMTPStream(str, callback);
        });
      }

      dataStream.pipe(this._socket, {
        end: false
      });

      if (this.options.debug) {
        logStream = new PassThrough();
        logStream.on('readable', function () {
          var chunk;

          while (chunk = logStream.read()) {
            _this10.logger.debug({
              tnx: 'message'
            }, chunk.toString('binary').replace(/\r?\n$/, ''));
          }
        });
        dataStream.pipe(logStream);
      }

      dataStream.once('end', function () {
        _this10.logger.info({
          tnx: 'message',
          inByteCount: dataStream.inByteCount,
          outByteCount: dataStream.outByteCount
        }, '<%s bytes encoded mime message (source size %s bytes)>', dataStream.outByteCount, dataStream.inByteCount);
      });
      return dataStream;
    }
    /** ACTIONS **/

    /**
     * Will be run after the connection is created and the server sends
     * a greeting. If the incoming message starts with 220 initiate
     * SMTP session by sending EHLO command
     *
     * @param {String} str Message from the server
     */

  }, {
    key: "_actionGreeting",
    value: function _actionGreeting(str) {
      clearTimeout(this._greetingTimeout);

      if (str.substr(0, 3) !== '220') {
        this._onError(new Error('Invalid greeting. response=' + str), 'EPROTOCOL', str, 'CONN');

        return;
      }

      if (this.options.lmtp) {
        this._responseActions.push(this._actionLHLO);

        this._sendCommand('LHLO ' + this.name);
      } else {
        this._responseActions.push(this._actionEHLO);

        this._sendCommand('EHLO ' + this.name);
      }
    }
    /**
     * Handles server response for LHLO command. If it yielded in
     * error, emit 'error', otherwise treat this as an EHLO response
     *
     * @param {String} str Message from the server
     */

  }, {
    key: "_actionLHLO",
    value: function _actionLHLO(str) {
      if (str.charAt(0) !== '2') {
        this._onError(new Error('Invalid LHLO. response=' + str), 'EPROTOCOL', str, 'LHLO');

        return;
      }

      this._actionEHLO(str);
    }
    /**
     * Handles server response for EHLO command. If it yielded in
     * error, try HELO instead, otherwise initiate TLS negotiation
     * if STARTTLS is supported by the server or move into the
     * authentication phase.
     *
     * @param {String} str Message from the server
     */

  }, {
    key: "_actionEHLO",
    value: function _actionEHLO(str) {
      var match;

      if (str.substr(0, 3) === '421') {
        this._onError(new Error('Server terminates connection. response=' + str), 'ECONNECTION', str, 'EHLO');

        return;
      }

      if (str.charAt(0) !== '2') {
        if (this.options.requireTLS) {
          this._onError(new Error('EHLO failed but HELO does not support required STARTTLS. response=' + str), 'ECONNECTION', str, 'EHLO');

          return;
        } // Try HELO instead


        this._responseActions.push(this._actionHELO);

        this._sendCommand('HELO ' + this.name);

        return;
      } // Detect if the server supports STARTTLS


      if (!this.secure && !this.options.ignoreTLS && (/[ -]STARTTLS\b/im.test(str) || this.options.requireTLS)) {
        this._sendCommand('STARTTLS');

        this._responseActions.push(this._actionSTARTTLS);

        return;
      } // Detect if the server supports SMTPUTF8


      if (/[ -]SMTPUTF8\b/im.test(str)) {
        this._supportedExtensions.push('SMTPUTF8');
      } // Detect if the server supports DSN


      if (/[ -]DSN\b/im.test(str)) {
        this._supportedExtensions.push('DSN');
      } // Detect if the server supports 8BITMIME


      if (/[ -]8BITMIME\b/im.test(str)) {
        this._supportedExtensions.push('8BITMIME');
      } // Detect if the server supports PIPELINING


      if (/[ -]PIPELINING\b/im.test(str)) {
        this._supportedExtensions.push('PIPELINING');
      } // Detect if the server supports AUTH


      if (/[ -]AUTH\b/i.test(str)) {
        this.allowsAuth = true;
      } // Detect if the server supports PLAIN auth


      if (/[ -]AUTH(?:(\s+|=)[^\n]*\s+|\s+|=)PLAIN/i.test(str)) {
        this._supportedAuth.push('PLAIN');
      } // Detect if the server supports LOGIN auth


      if (/[ -]AUTH(?:(\s+|=)[^\n]*\s+|\s+|=)LOGIN/i.test(str)) {
        this._supportedAuth.push('LOGIN');
      } // Detect if the server supports CRAM-MD5 auth


      if (/[ -]AUTH(?:(\s+|=)[^\n]*\s+|\s+|=)CRAM-MD5/i.test(str)) {
        this._supportedAuth.push('CRAM-MD5');
      } // Detect if the server supports XOAUTH2 auth


      if (/[ -]AUTH(?:(\s+|=)[^\n]*\s+|\s+|=)XOAUTH2/i.test(str)) {
        this._supportedAuth.push('XOAUTH2');
      } // Detect if the server supports SIZE extensions (and the max allowed size)


      if (match = str.match(/[ -]SIZE(?:[ \t]+(\d+))?/im)) {
        this._supportedExtensions.push('SIZE');

        this._maxAllowedSize = Number(match[1]) || 0;
      }

      this.emit('connect');
    }
    /**
     * Handles server response for HELO command. If it yielded in
     * error, emit 'error', otherwise move into the authentication phase.
     *
     * @param {String} str Message from the server
     */

  }, {
    key: "_actionHELO",
    value: function _actionHELO(str) {
      if (str.charAt(0) !== '2') {
        this._onError(new Error('Invalid HELO. response=' + str), 'EPROTOCOL', str, 'HELO');

        return;
      } // assume that authentication is enabled (most probably is not though)


      this.allowsAuth = true;
      this.emit('connect');
    }
    /**
     * Handles server response for STARTTLS command. If there's an error
     * try HELO instead, otherwise initiate TLS upgrade. If the upgrade
     * succeedes restart the EHLO
     *
     * @param {String} str Message from the server
     */

  }, {
    key: "_actionSTARTTLS",
    value: function _actionSTARTTLS(str) {
      var _this11 = this;

      if (str.charAt(0) !== '2') {
        if (this.options.opportunisticTLS) {
          this.logger.info({
            tnx: 'smtp'
          }, 'Failed STARTTLS upgrade, continuing unencrypted');
          return this.emit('connect');
        }

        this._onError(new Error('Error upgrading connection with STARTTLS'), 'ETLS', str, 'STARTTLS');

        return;
      }

      this._upgradeConnection(function (err, secured) {
        if (err) {
          _this11._onError(new Error('Error initiating TLS - ' + (err.message || err)), 'ETLS', false, 'STARTTLS');

          return;
        }

        _this11.logger.info({
          tnx: 'smtp'
        }, 'Connection upgraded with STARTTLS');

        if (secured) {
          // restart session
          if (_this11.options.lmtp) {
            _this11._responseActions.push(_this11._actionLHLO);

            _this11._sendCommand('LHLO ' + _this11.name);
          } else {
            _this11._responseActions.push(_this11._actionEHLO);

            _this11._sendCommand('EHLO ' + _this11.name);
          }
        } else {
          _this11.emit('connect');
        }
      });
    }
    /**
     * Handle the response for AUTH LOGIN command. We are expecting
     * '334 VXNlcm5hbWU6' (base64 for 'Username:'). Data to be sent as
     * response needs to be base64 encoded username. We do not need
     * exact match but settle with 334 response in general as some
     * hosts invalidly use a longer message than VXNlcm5hbWU6
     *
     * @param {String} str Message from the server
     */

  }, {
    key: "_actionAUTH_LOGIN_USER",
    value: function _actionAUTH_LOGIN_USER(str, callback) {
      var _this12 = this;

      if (!/^334[ -]/.test(str)) {
        // expecting '334 VXNlcm5hbWU6'
        callback(this._formatError('Invalid login sequence while waiting for "334 VXNlcm5hbWU6"', 'EAUTH', str, 'AUTH LOGIN'));
        return;
      }

      this._responseActions.push(function (str) {
        _this12._actionAUTH_LOGIN_PASS(str, callback);
      });

      this._sendCommand(Buffer.from(this._auth.credentials.user + '', 'utf-8').toString('base64'));
    }
    /**
     * Handle the response for AUTH CRAM-MD5 command. We are expecting
     * '334 <challenge string>'. Data to be sent as response needs to be
     * base64 decoded challenge string, MD5 hashed using the password as
     * a HMAC key, prefixed by the username and a space, and finally all
     * base64 encoded again.
     *
     * @param {String} str Message from the server
     */

  }, {
    key: "_actionAUTH_CRAM_MD5",
    value: function _actionAUTH_CRAM_MD5(str, callback) {
      var _this13 = this;

      var challengeMatch = str.match(/^334\s+(.+)$/);
      var challengeString = '';

      if (!challengeMatch) {
        return callback(this._formatError('Invalid login sequence while waiting for server challenge string', 'EAUTH', str, 'AUTH CRAM-MD5'));
      } else {
        challengeString = challengeMatch[1];
      } // Decode from base64


      var base64decoded = Buffer.from(challengeString, 'base64').toString('ascii'),
          hmacMD5 = crypto.createHmac('md5', this._auth.credentials.pass);
      hmacMD5.update(base64decoded);
      var prepended = this._auth.credentials.user + ' ' + hmacMD5.digest('hex');

      this._responseActions.push(function (str) {
        _this13._actionAUTH_CRAM_MD5_PASS(str, callback);
      });

      this._sendCommand(Buffer.from(prepended).toString('base64'), // hidden hash for logs
      Buffer.from(this._auth.credentials.user + ' /* secret */').toString('base64'));
    }
    /**
     * Handles the response to CRAM-MD5 authentication, if there's no error,
     * the user can be considered logged in. Start waiting for a message to send
     *
     * @param {String} str Message from the server
     */

  }, {
    key: "_actionAUTH_CRAM_MD5_PASS",
    value: function _actionAUTH_CRAM_MD5_PASS(str, callback) {
      if (!str.match(/^235\s+/)) {
        return callback(this._formatError('Invalid login sequence while waiting for "235"', 'EAUTH', str, 'AUTH CRAM-MD5'));
      }

      this.logger.info({
        tnx: 'smtp',
        username: this._auth.user,
        action: 'authenticated',
        method: this._authMethod
      }, 'User %s authenticated', JSON.stringify(this._auth.user));
      this.authenticated = true;
      callback(null, true);
    }
    /**
     * Handle the response for AUTH LOGIN command. We are expecting
     * '334 UGFzc3dvcmQ6' (base64 for 'Password:'). Data to be sent as
     * response needs to be base64 encoded password.
     *
     * @param {String} str Message from the server
     */

  }, {
    key: "_actionAUTH_LOGIN_PASS",
    value: function _actionAUTH_LOGIN_PASS(str, callback) {
      var _this14 = this;

      if (!/^334[ -]/.test(str)) {
        // expecting '334 UGFzc3dvcmQ6'
        return callback(this._formatError('Invalid login sequence while waiting for "334 UGFzc3dvcmQ6"', 'EAUTH', str, 'AUTH LOGIN'));
      }

      this._responseActions.push(function (str) {
        _this14._actionAUTHComplete(str, callback);
      });

      this._sendCommand(Buffer.from((this._auth.credentials.pass || '').toString(), 'utf-8').toString('base64'), // Hidden pass for logs
      Buffer.from('/* secret */', 'utf-8').toString('base64'));
    }
    /**
     * Handles the response for authentication, if there's no error,
     * the user can be considered logged in. Start waiting for a message to send
     *
     * @param {String} str Message from the server
     */

  }, {
    key: "_actionAUTHComplete",
    value: function _actionAUTHComplete(str, isRetry, callback) {
      var _this15 = this;

      if (!callback && typeof isRetry === 'function') {
        callback = isRetry;
        isRetry = false;
      }

      if (str.substr(0, 3) === '334') {
        this._responseActions.push(function (str) {
          if (isRetry || _this15._authMethod !== 'XOAUTH2') {
            _this15._actionAUTHComplete(str, true, callback);
          } else {
            // fetch a new OAuth2 access token
            setImmediate(function () {
              return _this15._handleXOauth2Token(true, callback);
            });
          }
        });

        this._sendCommand('');

        return;
      }

      if (str.charAt(0) !== '2') {
        this.logger.info({
          tnx: 'smtp',
          username: this._auth.user,
          action: 'authfail',
          method: this._authMethod
        }, 'User %s failed to authenticate', JSON.stringify(this._auth.user));
        return callback(this._formatError('Invalid login', 'EAUTH', str, 'AUTH ' + this._authMethod));
      }

      this.logger.info({
        tnx: 'smtp',
        username: this._auth.user,
        action: 'authenticated',
        method: this._authMethod
      }, 'User %s authenticated', JSON.stringify(this._auth.user));
      this.authenticated = true;
      callback(null, true);
    }
    /**
     * Handle response for a MAIL FROM: command
     *
     * @param {String} str Message from the server
     */

  }, {
    key: "_actionMAIL",
    value: function _actionMAIL(str, callback) {
      var _this16 = this;

      var message, curRecipient;

      if (Number(str.charAt(0)) !== 2) {
        if (this._usingSmtpUtf8 && /^550 /.test(str) && /[\x80-\uFFFF]/.test(this._envelope.from)) {
          message = 'Internationalized mailbox name not allowed';
        } else {
          message = 'Mail command failed';
        }

        return callback(this._formatError(message, 'EENVELOPE', str, 'MAIL FROM'));
      }

      if (!this._envelope.rcptQueue.length) {
        return callback(this._formatError('Can\x27t send mail - no recipients defined', 'EENVELOPE', false, 'API'));
      } else {
        this._recipientQueue = [];

        if (this._supportedExtensions.includes('PIPELINING')) {
          while (this._envelope.rcptQueue.length) {
            curRecipient = this._envelope.rcptQueue.shift();

            this._recipientQueue.push(curRecipient);

            this._responseActions.push(function (str) {
              _this16._actionRCPT(str, callback);
            });

            this._sendCommand('RCPT TO:<' + curRecipient + '>' + this._getDsnRcptToArgs());
          }
        } else {
          curRecipient = this._envelope.rcptQueue.shift();

          this._recipientQueue.push(curRecipient);

          this._responseActions.push(function (str) {
            _this16._actionRCPT(str, callback);
          });

          this._sendCommand('RCPT TO:<' + curRecipient + '>' + this._getDsnRcptToArgs());
        }
      }
    }
    /**
     * Handle response for a RCPT TO: command
     *
     * @param {String} str Message from the server
     */

  }, {
    key: "_actionRCPT",
    value: function _actionRCPT(str, callback) {
      var _this17 = this;

      var message,
          err,
          curRecipient = this._recipientQueue.shift();

      if (Number(str.charAt(0)) !== 2) {
        // this is a soft error
        if (this._usingSmtpUtf8 && /^553 /.test(str) && /[\x80-\uFFFF]/.test(curRecipient)) {
          message = 'Internationalized mailbox name not allowed';
        } else {
          message = 'Recipient command failed';
        }

        this._envelope.rejected.push(curRecipient); // store error for the failed recipient


        err = this._formatError(message, 'EENVELOPE', str, 'RCPT TO');
        err.recipient = curRecipient;

        this._envelope.rejectedErrors.push(err);
      } else {
        this._envelope.accepted.push(curRecipient);
      }

      if (!this._envelope.rcptQueue.length && !this._recipientQueue.length) {
        if (this._envelope.rejected.length < this._envelope.to.length) {
          this._responseActions.push(function (str) {
            _this17._actionDATA(str, callback);
          });

          this._sendCommand('DATA');
        } else {
          err = this._formatError('Can\x27t send mail - all recipients were rejected', 'EENVELOPE', str, 'RCPT TO');
          err.rejected = this._envelope.rejected;
          err.rejectedErrors = this._envelope.rejectedErrors;
          return callback(err);
        }
      } else if (this._envelope.rcptQueue.length) {
        curRecipient = this._envelope.rcptQueue.shift();

        this._recipientQueue.push(curRecipient);

        this._responseActions.push(function (str) {
          _this17._actionRCPT(str, callback);
        });

        this._sendCommand('RCPT TO:<' + curRecipient + '>' + this._getDsnRcptToArgs());
      }
    }
    /**
     * Handle response for a DATA command
     *
     * @param {String} str Message from the server
     */

  }, {
    key: "_actionDATA",
    value: function _actionDATA(str, callback) {
      // response should be 354 but according to this issue https://github.com/eleith/emailjs/issues/24
      // some servers might use 250 instead, so lets check for 2 or 3 as the first digit
      if (!/^[23]/.test(str)) {
        return callback(this._formatError('Data command failed', 'EENVELOPE', str, 'DATA'));
      }

      var response = {
        accepted: this._envelope.accepted,
        rejected: this._envelope.rejected
      };

      if (this._envelope.rejectedErrors.length) {
        response.rejectedErrors = this._envelope.rejectedErrors;
      }

      callback(null, response);
    }
    /**
     * Handle response for a DATA stream when using SMTP
     * We expect a single response that defines if the sending succeeded or failed
     *
     * @param {String} str Message from the server
     */

  }, {
    key: "_actionSMTPStream",
    value: function _actionSMTPStream(str, callback) {
      if (Number(str.charAt(0)) !== 2) {
        // Message failed
        return callback(this._formatError('Message failed', 'EMESSAGE', str, 'DATA'));
      } else {
        // Message sent succesfully
        return callback(null, str);
      }
    }
    /**
     * Handle response for a DATA stream
     * We expect a separate response for every recipient. All recipients can either
     * succeed or fail separately
     *
     * @param {String} recipient The recipient this response applies to
     * @param {Boolean} final Is this the final recipient?
     * @param {String} str Message from the server
     */

  }, {
    key: "_actionLMTPStream",
    value: function _actionLMTPStream(recipient, _final2, str, callback) {
      var err;

      if (Number(str.charAt(0)) !== 2) {
        // Message failed
        err = this._formatError('Message failed for recipient ' + recipient, 'EMESSAGE', str, 'DATA');
        err.recipient = recipient;

        this._envelope.rejected.push(recipient);

        this._envelope.rejectedErrors.push(err);

        for (var i = 0, len = this._envelope.accepted.length; i < len; i++) {
          if (this._envelope.accepted[i] === recipient) {
            this._envelope.accepted.splice(i, 1);
          }
        }
      }

      if (_final2) {
        return callback(null, str);
      }
    }
  }, {
    key: "_handleXOauth2Token",
    value: function _handleXOauth2Token(isRetry, callback) {
      var _this18 = this;

      this._auth.oauth2.getToken(isRetry, function (err, accessToken) {
        if (err) {
          _this18.logger.info({
            tnx: 'smtp',
            username: _this18._auth.user,
            action: 'authfail',
            method: _this18._authMethod
          }, 'User %s failed to authenticate', JSON.stringify(_this18._auth.user));

          return callback(_this18._formatError(err, 'EAUTH', false, 'AUTH XOAUTH2'));
        }

        _this18._responseActions.push(function (str) {
          _this18._actionAUTHComplete(str, isRetry, callback);
        });

        _this18._sendCommand('AUTH XOAUTH2 ' + _this18._auth.oauth2.buildXOAuth2Token(accessToken), //  Hidden for logs
        'AUTH XOAUTH2 ' + _this18._auth.oauth2.buildXOAuth2Token('/* secret */'));
      });
    }
    /**
     *
     * @param {string} command
     * @private
     */

  }, {
    key: "_isDestroyedMessage",
    value: function _isDestroyedMessage(command) {
      if (this._destroyed) {
        return 'Cannot ' + command + ' - smtp connection is already destroyed.';
      }

      if (this._socket) {
        if (this._socket.destroyed) {
          return 'Cannot ' + command + ' - smtp connection socket is already destroyed.';
        }

        if (!this._socket.writable) {
          return 'Cannot ' + command + ' - smtp connection socket is already half-closed.';
        }
      }
    }
  }, {
    key: "_getHostname",
    value: function _getHostname() {
      // defaul hostname is machine hostname or [IP]
      var defaultHostname = os.hostname() || ''; // ignore if not FQDN

      if (defaultHostname.indexOf('.') < 0) {
        defaultHostname = '[127.0.0.1]';
      } // IP should be enclosed in []


      if (defaultHostname.match(/^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/)) {
        defaultHostname = '[' + defaultHostname + ']';
      }

      return defaultHostname;
    }
  }]);

  return SMTPConnection;
}(EventEmitter);

module.exports = SMTPConnection;

/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(0);

function encode(val) {
  return encodeURIComponent(val).replace(/%3A/gi, ':').replace(/%24/g, '$').replace(/%2C/gi, ',').replace(/%20/g, '+').replace(/%5B/gi, '[').replace(/%5D/gi, ']');
}
/**
 * Build a URL by appending params to the end
 *
 * @param {string} url The base of the url (e.g., http://www.google.com)
 * @param {object} [params] The params to be appended
 * @returns {string} The formatted url
 */


module.exports = function buildURL(url, params, paramsSerializer) {
  /*eslint no-param-reassign:0*/
  if (!params) {
    return url;
  }

  var serializedParams;

  if (paramsSerializer) {
    serializedParams = paramsSerializer(params);
  } else if (utils.isURLSearchParams(params)) {
    serializedParams = params.toString();
  } else {
    var parts = [];
    utils.forEach(params, function serialize(val, key) {
      if (val === null || typeof val === 'undefined') {
        return;
      }

      if (utils.isArray(val)) {
        key = key + '[]';
      } else {
        val = [val];
      }

      utils.forEach(val, function parseValue(v) {
        if (utils.isDate(v)) {
          v = v.toISOString();
        } else if (utils.isObject(v)) {
          v = JSON.stringify(v);
        }

        parts.push(encode(key) + '=' + encode(v));
      });
    });
    serializedParams = parts.join('&');
  }

  if (serializedParams) {
    var hashmarkIndex = url.indexOf('#');

    if (hashmarkIndex !== -1) {
      url = url.slice(0, hashmarkIndex);
    }

    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
  }

  return url;
};

/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(0);

var normalizeHeaderName = __webpack_require__(98);

var AxiosError = __webpack_require__(9);

var transitionalDefaults = __webpack_require__(28);

var toFormData = __webpack_require__(48);

var DEFAULT_CONTENT_TYPE = {
  'Content-Type': 'application/x-www-form-urlencoded'
};

function setContentTypeIfUnset(headers, value) {
  if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {
    headers['Content-Type'] = value;
  }
}

function getDefaultAdapter() {
  var adapter;

  if (typeof XMLHttpRequest !== 'undefined') {
    // For browsers use XHR adapter
    adapter = __webpack_require__(99);
  } else if (typeof process !== 'undefined' && Object.prototype.toString.call(process) === '[object process]') {
    // For node use HTTP adapter
    adapter = __webpack_require__(106);
  }

  return adapter;
}

function stringifySafely(rawValue, parser, encoder) {
  if (utils.isString(rawValue)) {
    try {
      (parser || JSON.parse)(rawValue);
      return utils.trim(rawValue);
    } catch (e) {
      if (e.name !== 'SyntaxError') {
        throw e;
      }
    }
  }

  return (encoder || JSON.stringify)(rawValue);
}

var defaults = {
  transitional: transitionalDefaults,
  adapter: getDefaultAdapter(),
  transformRequest: [function transformRequest(data, headers) {
    normalizeHeaderName(headers, 'Accept');
    normalizeHeaderName(headers, 'Content-Type');

    if (utils.isFormData(data) || utils.isArrayBuffer(data) || utils.isBuffer(data) || utils.isStream(data) || utils.isFile(data) || utils.isBlob(data)) {
      return data;
    }

    if (utils.isArrayBufferView(data)) {
      return data.buffer;
    }

    if (utils.isURLSearchParams(data)) {
      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');
      return data.toString();
    }

    var isObjectPayload = utils.isObject(data);
    var contentType = headers && headers['Content-Type'];
    var isFileList;

    if ((isFileList = utils.isFileList(data)) || isObjectPayload && contentType === 'multipart/form-data') {
      var _FormData = this.env && this.env.FormData;

      return toFormData(isFileList ? {
        'files[]': data
      } : data, _FormData && new _FormData());
    } else if (isObjectPayload || contentType === 'application/json') {
      setContentTypeIfUnset(headers, 'application/json');
      return stringifySafely(data);
    }

    return data;
  }],
  transformResponse: [function transformResponse(data) {
    var transitional = this.transitional || defaults.transitional;
    var silentJSONParsing = transitional && transitional.silentJSONParsing;
    var forcedJSONParsing = transitional && transitional.forcedJSONParsing;
    var strictJSONParsing = !silentJSONParsing && this.responseType === 'json';

    if (strictJSONParsing || forcedJSONParsing && utils.isString(data) && data.length) {
      try {
        return JSON.parse(data);
      } catch (e) {
        if (strictJSONParsing) {
          if (e.name === 'SyntaxError') {
            throw AxiosError.from(e, AxiosError.ERR_BAD_RESPONSE, this, null, this.response);
          }

          throw e;
        }
      }
    }

    return data;
  }],

  /**
   * A timeout in milliseconds to abort a request. If set to 0 (default) a
   * timeout is not created.
   */
  timeout: 0,
  xsrfCookieName: 'XSRF-TOKEN',
  xsrfHeaderName: 'X-XSRF-TOKEN',
  maxContentLength: -1,
  maxBodyLength: -1,
  env: {
    FormData: __webpack_require__(115)
  },
  validateStatus: function validateStatus(status) {
    return status >= 200 && status < 300;
  },
  headers: {
    common: {
      'Accept': 'application/json, text/plain, */*'
    }
  }
};
utils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {
  defaults.headers[method] = {};
});
utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
});
module.exports = defaults;

/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = {
  silentJSONParsing: true,
  forcedJSONParsing: true,
  clarifyTimeoutError: false
};

/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var isAbsoluteURL = __webpack_require__(101);

var combineURLs = __webpack_require__(102);
/**
 * Creates a new URL by combining the baseURL with the requestedURL,
 * only when the requestedURL is not already an absolute URL.
 * If the requestURL is absolute, this function returns the requestedURL untouched.
 *
 * @param {string} baseURL The base URL
 * @param {string} requestedURL Absolute or relative URL to combine
 * @returns {string} The combined full path
 */


module.exports = function buildFullPath(baseURL, requestedURL) {
  if (baseURL && !isAbsoluteURL(requestedURL)) {
    return combineURLs(baseURL, requestedURL);
  }

  return requestedURL;
};

/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = {
  "version": "0.27.2"
};

/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

var undefined;
var $SyntaxError = SyntaxError;
var $Function = Function;
var $TypeError = TypeError; // eslint-disable-next-line consistent-return

var getEvalledConstructor = function getEvalledConstructor(expressionSyntax) {
  try {
    return $Function('"use strict"; return (' + expressionSyntax + ').constructor;')();
  } catch (e) {}
};

var $gOPD = Object.getOwnPropertyDescriptor;

if ($gOPD) {
  try {
    $gOPD({}, '');
  } catch (e) {
    $gOPD = null; // this is IE 8, which has a broken gOPD
  }
}

var throwTypeError = function throwTypeError() {
  throw new $TypeError();
};

var ThrowTypeError = $gOPD ? function () {
  try {
    // eslint-disable-next-line no-unused-expressions, no-caller, no-restricted-properties
    arguments.callee; // IE 8 does not throw here

    return throwTypeError;
  } catch (calleeThrows) {
    try {
      // IE 8 throws on Object.getOwnPropertyDescriptor(arguments, '')
      return $gOPD(arguments, 'callee').get;
    } catch (gOPDthrows) {
      return throwTypeError;
    }
  }
}() : throwTypeError;

var hasSymbols = __webpack_require__(134)();

var getProto = Object.getPrototypeOf || function (x) {
  return x.__proto__;
}; // eslint-disable-line no-proto


var needsEval = {};
var TypedArray = typeof Uint8Array === 'undefined' ? undefined : getProto(Uint8Array);
var INTRINSICS = {
  '%AggregateError%': typeof AggregateError === 'undefined' ? undefined : AggregateError,
  '%Array%': Array,
  '%ArrayBuffer%': typeof ArrayBuffer === 'undefined' ? undefined : ArrayBuffer,
  '%ArrayIteratorPrototype%': hasSymbols ? getProto([][Symbol.iterator]()) : undefined,
  '%AsyncFromSyncIteratorPrototype%': undefined,
  '%AsyncFunction%': needsEval,
  '%AsyncGenerator%': needsEval,
  '%AsyncGeneratorFunction%': needsEval,
  '%AsyncIteratorPrototype%': needsEval,
  '%Atomics%': typeof Atomics === 'undefined' ? undefined : Atomics,
  '%BigInt%': typeof BigInt === 'undefined' ? undefined : BigInt,
  '%Boolean%': Boolean,
  '%DataView%': typeof DataView === 'undefined' ? undefined : DataView,
  '%Date%': Date,
  '%decodeURI%': decodeURI,
  '%decodeURIComponent%': decodeURIComponent,
  '%encodeURI%': encodeURI,
  '%encodeURIComponent%': encodeURIComponent,
  '%Error%': Error,
  '%eval%': eval,
  // eslint-disable-line no-eval
  '%EvalError%': EvalError,
  '%Float32Array%': typeof Float32Array === 'undefined' ? undefined : Float32Array,
  '%Float64Array%': typeof Float64Array === 'undefined' ? undefined : Float64Array,
  '%FinalizationRegistry%': typeof FinalizationRegistry === 'undefined' ? undefined : FinalizationRegistry,
  '%Function%': $Function,
  '%GeneratorFunction%': needsEval,
  '%Int8Array%': typeof Int8Array === 'undefined' ? undefined : Int8Array,
  '%Int16Array%': typeof Int16Array === 'undefined' ? undefined : Int16Array,
  '%Int32Array%': typeof Int32Array === 'undefined' ? undefined : Int32Array,
  '%isFinite%': isFinite,
  '%isNaN%': isNaN,
  '%IteratorPrototype%': hasSymbols ? getProto(getProto([][Symbol.iterator]())) : undefined,
  '%JSON%': (typeof JSON === "undefined" ? "undefined" : _typeof(JSON)) === 'object' ? JSON : undefined,
  '%Map%': typeof Map === 'undefined' ? undefined : Map,
  '%MapIteratorPrototype%': typeof Map === 'undefined' || !hasSymbols ? undefined : getProto(new Map()[Symbol.iterator]()),
  '%Math%': Math,
  '%Number%': Number,
  '%Object%': Object,
  '%parseFloat%': parseFloat,
  '%parseInt%': parseInt,
  '%Promise%': typeof Promise === 'undefined' ? undefined : Promise,
  '%Proxy%': typeof Proxy === 'undefined' ? undefined : Proxy,
  '%RangeError%': RangeError,
  '%ReferenceError%': ReferenceError,
  '%Reflect%': typeof Reflect === 'undefined' ? undefined : Reflect,
  '%RegExp%': RegExp,
  '%Set%': typeof Set === 'undefined' ? undefined : Set,
  '%SetIteratorPrototype%': typeof Set === 'undefined' || !hasSymbols ? undefined : getProto(new Set()[Symbol.iterator]()),
  '%SharedArrayBuffer%': typeof SharedArrayBuffer === 'undefined' ? undefined : SharedArrayBuffer,
  '%String%': String,
  '%StringIteratorPrototype%': hasSymbols ? getProto(''[Symbol.iterator]()) : undefined,
  '%Symbol%': hasSymbols ? Symbol : undefined,
  '%SyntaxError%': $SyntaxError,
  '%ThrowTypeError%': ThrowTypeError,
  '%TypedArray%': TypedArray,
  '%TypeError%': $TypeError,
  '%Uint8Array%': typeof Uint8Array === 'undefined' ? undefined : Uint8Array,
  '%Uint8ClampedArray%': typeof Uint8ClampedArray === 'undefined' ? undefined : Uint8ClampedArray,
  '%Uint16Array%': typeof Uint16Array === 'undefined' ? undefined : Uint16Array,
  '%Uint32Array%': typeof Uint32Array === 'undefined' ? undefined : Uint32Array,
  '%URIError%': URIError,
  '%WeakMap%': typeof WeakMap === 'undefined' ? undefined : WeakMap,
  '%WeakRef%': typeof WeakRef === 'undefined' ? undefined : WeakRef,
  '%WeakSet%': typeof WeakSet === 'undefined' ? undefined : WeakSet
};

var doEval = function doEval(name) {
  var value;

  if (name === '%AsyncFunction%') {
    value = getEvalledConstructor('async function () {}');
  } else if (name === '%GeneratorFunction%') {
    value = getEvalledConstructor('function* () {}');
  } else if (name === '%AsyncGeneratorFunction%') {
    value = getEvalledConstructor('async function* () {}');
  } else if (name === '%AsyncGenerator%') {
    var fn = doEval('%AsyncGeneratorFunction%');

    if (fn) {
      value = fn.prototype;
    }
  } else if (name === '%AsyncIteratorPrototype%') {
    var gen = doEval('%AsyncGenerator%');

    if (gen) {
      value = getProto(gen.prototype);
    }
  }

  INTRINSICS[name] = value;
  return value;
};

var LEGACY_ALIASES = {
  '%ArrayBufferPrototype%': ['ArrayBuffer', 'prototype'],
  '%ArrayPrototype%': ['Array', 'prototype'],
  '%ArrayProto_entries%': ['Array', 'prototype', 'entries'],
  '%ArrayProto_forEach%': ['Array', 'prototype', 'forEach'],
  '%ArrayProto_keys%': ['Array', 'prototype', 'keys'],
  '%ArrayProto_values%': ['Array', 'prototype', 'values'],
  '%AsyncFunctionPrototype%': ['AsyncFunction', 'prototype'],
  '%AsyncGenerator%': ['AsyncGeneratorFunction', 'prototype'],
  '%AsyncGeneratorPrototype%': ['AsyncGeneratorFunction', 'prototype', 'prototype'],
  '%BooleanPrototype%': ['Boolean', 'prototype'],
  '%DataViewPrototype%': ['DataView', 'prototype'],
  '%DatePrototype%': ['Date', 'prototype'],
  '%ErrorPrototype%': ['Error', 'prototype'],
  '%EvalErrorPrototype%': ['EvalError', 'prototype'],
  '%Float32ArrayPrototype%': ['Float32Array', 'prototype'],
  '%Float64ArrayPrototype%': ['Float64Array', 'prototype'],
  '%FunctionPrototype%': ['Function', 'prototype'],
  '%Generator%': ['GeneratorFunction', 'prototype'],
  '%GeneratorPrototype%': ['GeneratorFunction', 'prototype', 'prototype'],
  '%Int8ArrayPrototype%': ['Int8Array', 'prototype'],
  '%Int16ArrayPrototype%': ['Int16Array', 'prototype'],
  '%Int32ArrayPrototype%': ['Int32Array', 'prototype'],
  '%JSONParse%': ['JSON', 'parse'],
  '%JSONStringify%': ['JSON', 'stringify'],
  '%MapPrototype%': ['Map', 'prototype'],
  '%NumberPrototype%': ['Number', 'prototype'],
  '%ObjectPrototype%': ['Object', 'prototype'],
  '%ObjProto_toString%': ['Object', 'prototype', 'toString'],
  '%ObjProto_valueOf%': ['Object', 'prototype', 'valueOf'],
  '%PromisePrototype%': ['Promise', 'prototype'],
  '%PromiseProto_then%': ['Promise', 'prototype', 'then'],
  '%Promise_all%': ['Promise', 'all'],
  '%Promise_reject%': ['Promise', 'reject'],
  '%Promise_resolve%': ['Promise', 'resolve'],
  '%RangeErrorPrototype%': ['RangeError', 'prototype'],
  '%ReferenceErrorPrototype%': ['ReferenceError', 'prototype'],
  '%RegExpPrototype%': ['RegExp', 'prototype'],
  '%SetPrototype%': ['Set', 'prototype'],
  '%SharedArrayBufferPrototype%': ['SharedArrayBuffer', 'prototype'],
  '%StringPrototype%': ['String', 'prototype'],
  '%SymbolPrototype%': ['Symbol', 'prototype'],
  '%SyntaxErrorPrototype%': ['SyntaxError', 'prototype'],
  '%TypedArrayPrototype%': ['TypedArray', 'prototype'],
  '%TypeErrorPrototype%': ['TypeError', 'prototype'],
  '%Uint8ArrayPrototype%': ['Uint8Array', 'prototype'],
  '%Uint8ClampedArrayPrototype%': ['Uint8ClampedArray', 'prototype'],
  '%Uint16ArrayPrototype%': ['Uint16Array', 'prototype'],
  '%Uint32ArrayPrototype%': ['Uint32Array', 'prototype'],
  '%URIErrorPrototype%': ['URIError', 'prototype'],
  '%WeakMapPrototype%': ['WeakMap', 'prototype'],
  '%WeakSetPrototype%': ['WeakSet', 'prototype']
};

var bind = __webpack_require__(32);

var hasOwn = __webpack_require__(137);

var $concat = bind.call(Function.call, Array.prototype.concat);
var $spliceApply = bind.call(Function.apply, Array.prototype.splice);
var $replace = bind.call(Function.call, String.prototype.replace);
var $strSlice = bind.call(Function.call, String.prototype.slice);
/* adapted from https://github.com/lodash/lodash/blob/4.17.15/dist/lodash.js#L6735-L6744 */

var rePropName = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
var reEscapeChar = /\\(\\)?/g;
/** Used to match backslashes in property paths. */

var stringToPath = function stringToPath(string) {
  var first = $strSlice(string, 0, 1);
  var last = $strSlice(string, -1);

  if (first === '%' && last !== '%') {
    throw new $SyntaxError('invalid intrinsic syntax, expected closing `%`');
  } else if (last === '%' && first !== '%') {
    throw new $SyntaxError('invalid intrinsic syntax, expected opening `%`');
  }

  var result = [];
  $replace(string, rePropName, function (match, number, quote, subString) {
    result[result.length] = quote ? $replace(subString, reEscapeChar, '$1') : number || match;
  });
  return result;
};
/* end adaptation */


var getBaseIntrinsic = function getBaseIntrinsic(name, allowMissing) {
  var intrinsicName = name;
  var alias;

  if (hasOwn(LEGACY_ALIASES, intrinsicName)) {
    alias = LEGACY_ALIASES[intrinsicName];
    intrinsicName = '%' + alias[0] + '%';
  }

  if (hasOwn(INTRINSICS, intrinsicName)) {
    var value = INTRINSICS[intrinsicName];

    if (value === needsEval) {
      value = doEval(intrinsicName);
    }

    if (typeof value === 'undefined' && !allowMissing) {
      throw new $TypeError('intrinsic ' + name + ' exists, but is not available. Please file an issue!');
    }

    return {
      alias: alias,
      name: intrinsicName,
      value: value
    };
  }

  throw new $SyntaxError('intrinsic ' + name + ' does not exist!');
};

module.exports = function GetIntrinsic(name, allowMissing) {
  if (typeof name !== 'string' || name.length === 0) {
    throw new $TypeError('intrinsic name must be a non-empty string');
  }

  if (arguments.length > 1 && typeof allowMissing !== 'boolean') {
    throw new $TypeError('"allowMissing" argument must be a boolean');
  }

  var parts = stringToPath(name);
  var intrinsicBaseName = parts.length > 0 ? parts[0] : '';
  var intrinsic = getBaseIntrinsic('%' + intrinsicBaseName + '%', allowMissing);
  var intrinsicRealName = intrinsic.name;
  var value = intrinsic.value;
  var skipFurtherCaching = false;
  var alias = intrinsic.alias;

  if (alias) {
    intrinsicBaseName = alias[0];
    $spliceApply(parts, $concat([0, 1], alias));
  }

  for (var i = 1, isOwn = true; i < parts.length; i += 1) {
    var part = parts[i];
    var first = $strSlice(part, 0, 1);
    var last = $strSlice(part, -1);

    if ((first === '"' || first === "'" || first === '`' || last === '"' || last === "'" || last === '`') && first !== last) {
      throw new $SyntaxError('property names with quotes must have matching quotes');
    }

    if (part === 'constructor' || !isOwn) {
      skipFurtherCaching = true;
    }

    intrinsicBaseName += '.' + part;
    intrinsicRealName = '%' + intrinsicBaseName + '%';

    if (hasOwn(INTRINSICS, intrinsicRealName)) {
      value = INTRINSICS[intrinsicRealName];
    } else if (value != null) {
      if (!(part in value)) {
        if (!allowMissing) {
          throw new $TypeError('base intrinsic for ' + name + ' exists, but the property is not available.');
        }

        return void undefined;
      }

      if ($gOPD && i + 1 >= parts.length) {
        var desc = $gOPD(value, part);
        isOwn = !!desc; // By convention, when a data property is converted to an accessor
        // property to emulate a data property that does not suffer from
        // the override mistake, that accessor's getter is marked with
        // an `originalValue` property. Here, when we detect this, we
        // uphold the illusion by pretending to see that original data
        // property, i.e., returning the value rather than the getter
        // itself.

        if (isOwn && 'get' in desc && !('originalValue' in desc.get)) {
          value = desc.get;
        } else {
          value = value[part];
        }
      } else {
        isOwn = hasOwn(value, part);
        value = value[part];
      }

      if (isOwn && !skipFurtherCaching) {
        INTRINSICS[intrinsicRealName] = value;
      }
    }
  }

  return value;
};

/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var implementation = __webpack_require__(136);

module.exports = Function.prototype.bind || implementation;

/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var replace = String.prototype.replace;
var percentTwenties = /%20/g;
var Format = {
  RFC1738: 'RFC1738',
  RFC3986: 'RFC3986'
};
module.exports = {
  'default': Format.RFC3986,
  formatters: {
    RFC1738: function RFC1738(value) {
      return replace.call(value, percentTwenties, '+');
    },
    RFC3986: function RFC3986(value) {
      return String(value);
    }
  },
  RFC1738: Format.RFC1738,
  RFC3986: Format.RFC3986
};

/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = __webpack_require__(93);

/***/ }),
/* 35 */
/***/ (function(module, exports) {

module.exports = require("querystring");

/***/ }),
/* 36 */
/***/ (function(module, exports) {

module.exports = require("zlib");

/***/ }),
/* 37 */
/***/ (function(module, exports) {

module.exports = require("dns");

/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* eslint quote-props: 0 */


var path = __webpack_require__(20);

var defaultMimeType = 'application/octet-stream';
var defaultExtension = 'bin';
var mimeTypes = new Map([['application/acad', 'dwg'], ['application/applixware', 'aw'], ['application/arj', 'arj'], ['application/atom+xml', 'xml'], ['application/atomcat+xml', 'atomcat'], ['application/atomsvc+xml', 'atomsvc'], ['application/base64', ['mm', 'mme']], ['application/binhex', 'hqx'], ['application/binhex4', 'hqx'], ['application/book', ['book', 'boo']], ['application/ccxml+xml,', 'ccxml'], ['application/cdf', 'cdf'], ['application/cdmi-capability', 'cdmia'], ['application/cdmi-container', 'cdmic'], ['application/cdmi-domain', 'cdmid'], ['application/cdmi-object', 'cdmio'], ['application/cdmi-queue', 'cdmiq'], ['application/clariscad', 'ccad'], ['application/commonground', 'dp'], ['application/cu-seeme', 'cu'], ['application/davmount+xml', 'davmount'], ['application/drafting', 'drw'], ['application/dsptype', 'tsp'], ['application/dssc+der', 'dssc'], ['application/dssc+xml', 'xdssc'], ['application/dxf', 'dxf'], ['application/ecmascript', ['js', 'es']], ['application/emma+xml', 'emma'], ['application/envoy', 'evy'], ['application/epub+zip', 'epub'], ['application/excel', ['xls', 'xl', 'xla', 'xlb', 'xlc', 'xld', 'xlk', 'xll', 'xlm', 'xlt', 'xlv', 'xlw']], ['application/exi', 'exi'], ['application/font-tdpfr', 'pfr'], ['application/fractals', 'fif'], ['application/freeloader', 'frl'], ['application/futuresplash', 'spl'], ['application/gnutar', 'tgz'], ['application/groupwise', 'vew'], ['application/hlp', 'hlp'], ['application/hta', 'hta'], ['application/hyperstudio', 'stk'], ['application/i-deas', 'unv'], ['application/iges', ['iges', 'igs']], ['application/inf', 'inf'], ['application/internet-property-stream', 'acx'], ['application/ipfix', 'ipfix'], ['application/java', 'class'], ['application/java-archive', 'jar'], ['application/java-byte-code', 'class'], ['application/java-serialized-object', 'ser'], ['application/java-vm', 'class'], ['application/javascript', 'js'], ['application/json', 'json'], ['application/lha', 'lha'], ['application/lzx', 'lzx'], ['application/mac-binary', 'bin'], ['application/mac-binhex', 'hqx'], ['application/mac-binhex40', 'hqx'], ['application/mac-compactpro', 'cpt'], ['application/macbinary', 'bin'], ['application/mads+xml', 'mads'], ['application/marc', 'mrc'], ['application/marcxml+xml', 'mrcx'], ['application/mathematica', 'ma'], ['application/mathml+xml', 'mathml'], ['application/mbedlet', 'mbd'], ['application/mbox', 'mbox'], ['application/mcad', 'mcd'], ['application/mediaservercontrol+xml', 'mscml'], ['application/metalink4+xml', 'meta4'], ['application/mets+xml', 'mets'], ['application/mime', 'aps'], ['application/mods+xml', 'mods'], ['application/mp21', 'm21'], ['application/mp4', 'mp4'], ['application/mspowerpoint', ['ppt', 'pot', 'pps', 'ppz']], ['application/msword', ['doc', 'dot', 'w6w', 'wiz', 'word']], ['application/mswrite', 'wri'], ['application/mxf', 'mxf'], ['application/netmc', 'mcp'], ['application/octet-stream', ['*']], ['application/oda', 'oda'], ['application/oebps-package+xml', 'opf'], ['application/ogg', 'ogx'], ['application/olescript', 'axs'], ['application/onenote', 'onetoc'], ['application/patch-ops-error+xml', 'xer'], ['application/pdf', 'pdf'], ['application/pgp-encrypted', 'asc'], ['application/pgp-signature', 'pgp'], ['application/pics-rules', 'prf'], ['application/pkcs-12', 'p12'], ['application/pkcs-crl', 'crl'], ['application/pkcs10', 'p10'], ['application/pkcs7-mime', ['p7c', 'p7m']], ['application/pkcs7-signature', 'p7s'], ['application/pkcs8', 'p8'], ['application/pkix-attr-cert', 'ac'], ['application/pkix-cert', ['cer', 'crt']], ['application/pkix-crl', 'crl'], ['application/pkix-pkipath', 'pkipath'], ['application/pkixcmp', 'pki'], ['application/plain', 'text'], ['application/pls+xml', 'pls'], ['application/postscript', ['ps', 'ai', 'eps']], ['application/powerpoint', 'ppt'], ['application/pro_eng', ['part', 'prt']], ['application/prs.cww', 'cww'], ['application/pskc+xml', 'pskcxml'], ['application/rdf+xml', 'rdf'], ['application/reginfo+xml', 'rif'], ['application/relax-ng-compact-syntax', 'rnc'], ['application/resource-lists+xml', 'rl'], ['application/resource-lists-diff+xml', 'rld'], ['application/ringing-tones', 'rng'], ['application/rls-services+xml', 'rs'], ['application/rsd+xml', 'rsd'], ['application/rss+xml', 'xml'], ['application/rtf', ['rtf', 'rtx']], ['application/sbml+xml', 'sbml'], ['application/scvp-cv-request', 'scq'], ['application/scvp-cv-response', 'scs'], ['application/scvp-vp-request', 'spq'], ['application/scvp-vp-response', 'spp'], ['application/sdp', 'sdp'], ['application/sea', 'sea'], ['application/set', 'set'], ['application/set-payment-initiation', 'setpay'], ['application/set-registration-initiation', 'setreg'], ['application/shf+xml', 'shf'], ['application/sla', 'stl'], ['application/smil', ['smi', 'smil']], ['application/smil+xml', 'smi'], ['application/solids', 'sol'], ['application/sounder', 'sdr'], ['application/sparql-query', 'rq'], ['application/sparql-results+xml', 'srx'], ['application/srgs', 'gram'], ['application/srgs+xml', 'grxml'], ['application/sru+xml', 'sru'], ['application/ssml+xml', 'ssml'], ['application/step', ['step', 'stp']], ['application/streamingmedia', 'ssm'], ['application/tei+xml', 'tei'], ['application/thraud+xml', 'tfi'], ['application/timestamped-data', 'tsd'], ['application/toolbook', 'tbk'], ['application/vda', 'vda'], ['application/vnd.3gpp.pic-bw-large', 'plb'], ['application/vnd.3gpp.pic-bw-small', 'psb'], ['application/vnd.3gpp.pic-bw-var', 'pvb'], ['application/vnd.3gpp2.tcap', 'tcap'], ['application/vnd.3m.post-it-notes', 'pwn'], ['application/vnd.accpac.simply.aso', 'aso'], ['application/vnd.accpac.simply.imp', 'imp'], ['application/vnd.acucobol', 'acu'], ['application/vnd.acucorp', 'atc'], ['application/vnd.adobe.air-application-installer-package+zip', 'air'], ['application/vnd.adobe.fxp', 'fxp'], ['application/vnd.adobe.xdp+xml', 'xdp'], ['application/vnd.adobe.xfdf', 'xfdf'], ['application/vnd.ahead.space', 'ahead'], ['application/vnd.airzip.filesecure.azf', 'azf'], ['application/vnd.airzip.filesecure.azs', 'azs'], ['application/vnd.amazon.ebook', 'azw'], ['application/vnd.americandynamics.acc', 'acc'], ['application/vnd.amiga.ami', 'ami'], ['application/vnd.android.package-archive', 'apk'], ['application/vnd.anser-web-certificate-issue-initiation', 'cii'], ['application/vnd.anser-web-funds-transfer-initiation', 'fti'], ['application/vnd.antix.game-component', 'atx'], ['application/vnd.apple.installer+xml', 'mpkg'], ['application/vnd.apple.mpegurl', 'm3u8'], ['application/vnd.aristanetworks.swi', 'swi'], ['application/vnd.audiograph', 'aep'], ['application/vnd.blueice.multipass', 'mpm'], ['application/vnd.bmi', 'bmi'], ['application/vnd.businessobjects', 'rep'], ['application/vnd.chemdraw+xml', 'cdxml'], ['application/vnd.chipnuts.karaoke-mmd', 'mmd'], ['application/vnd.cinderella', 'cdy'], ['application/vnd.claymore', 'cla'], ['application/vnd.cloanto.rp9', 'rp9'], ['application/vnd.clonk.c4group', 'c4g'], ['application/vnd.cluetrust.cartomobile-config', 'c11amc'], ['application/vnd.cluetrust.cartomobile-config-pkg', 'c11amz'], ['application/vnd.commonspace', 'csp'], ['application/vnd.contact.cmsg', 'cdbcmsg'], ['application/vnd.cosmocaller', 'cmc'], ['application/vnd.crick.clicker', 'clkx'], ['application/vnd.crick.clicker.keyboard', 'clkk'], ['application/vnd.crick.clicker.palette', 'clkp'], ['application/vnd.crick.clicker.template', 'clkt'], ['application/vnd.crick.clicker.wordbank', 'clkw'], ['application/vnd.criticaltools.wbs+xml', 'wbs'], ['application/vnd.ctc-posml', 'pml'], ['application/vnd.cups-ppd', 'ppd'], ['application/vnd.curl.car', 'car'], ['application/vnd.curl.pcurl', 'pcurl'], ['application/vnd.data-vision.rdz', 'rdz'], ['application/vnd.denovo.fcselayout-link', 'fe_launch'], ['application/vnd.dna', 'dna'], ['application/vnd.dolby.mlp', 'mlp'], ['application/vnd.dpgraph', 'dpg'], ['application/vnd.dreamfactory', 'dfac'], ['application/vnd.dvb.ait', 'ait'], ['application/vnd.dvb.service', 'svc'], ['application/vnd.dynageo', 'geo'], ['application/vnd.ecowin.chart', 'mag'], ['application/vnd.enliven', 'nml'], ['application/vnd.epson.esf', 'esf'], ['application/vnd.epson.msf', 'msf'], ['application/vnd.epson.quickanime', 'qam'], ['application/vnd.epson.salt', 'slt'], ['application/vnd.epson.ssf', 'ssf'], ['application/vnd.eszigno3+xml', 'es3'], ['application/vnd.ezpix-album', 'ez2'], ['application/vnd.ezpix-package', 'ez3'], ['application/vnd.fdf', 'fdf'], ['application/vnd.fdsn.seed', 'seed'], ['application/vnd.flographit', 'gph'], ['application/vnd.fluxtime.clip', 'ftc'], ['application/vnd.framemaker', 'fm'], ['application/vnd.frogans.fnc', 'fnc'], ['application/vnd.frogans.ltf', 'ltf'], ['application/vnd.fsc.weblaunch', 'fsc'], ['application/vnd.fujitsu.oasys', 'oas'], ['application/vnd.fujitsu.oasys2', 'oa2'], ['application/vnd.fujitsu.oasys3', 'oa3'], ['application/vnd.fujitsu.oasysgp', 'fg5'], ['application/vnd.fujitsu.oasysprs', 'bh2'], ['application/vnd.fujixerox.ddd', 'ddd'], ['application/vnd.fujixerox.docuworks', 'xdw'], ['application/vnd.fujixerox.docuworks.binder', 'xbd'], ['application/vnd.fuzzysheet', 'fzs'], ['application/vnd.genomatix.tuxedo', 'txd'], ['application/vnd.geogebra.file', 'ggb'], ['application/vnd.geogebra.tool', 'ggt'], ['application/vnd.geometry-explorer', 'gex'], ['application/vnd.geonext', 'gxt'], ['application/vnd.geoplan', 'g2w'], ['application/vnd.geospace', 'g3w'], ['application/vnd.gmx', 'gmx'], ['application/vnd.google-earth.kml+xml', 'kml'], ['application/vnd.google-earth.kmz', 'kmz'], ['application/vnd.grafeq', 'gqf'], ['application/vnd.groove-account', 'gac'], ['application/vnd.groove-help', 'ghf'], ['application/vnd.groove-identity-message', 'gim'], ['application/vnd.groove-injector', 'grv'], ['application/vnd.groove-tool-message', 'gtm'], ['application/vnd.groove-tool-template', 'tpl'], ['application/vnd.groove-vcard', 'vcg'], ['application/vnd.hal+xml', 'hal'], ['application/vnd.handheld-entertainment+xml', 'zmm'], ['application/vnd.hbci', 'hbci'], ['application/vnd.hhe.lesson-player', 'les'], ['application/vnd.hp-hpgl', ['hgl', 'hpg', 'hpgl']], ['application/vnd.hp-hpid', 'hpid'], ['application/vnd.hp-hps', 'hps'], ['application/vnd.hp-jlyt', 'jlt'], ['application/vnd.hp-pcl', 'pcl'], ['application/vnd.hp-pclxl', 'pclxl'], ['application/vnd.hydrostatix.sof-data', 'sfd-hdstx'], ['application/vnd.hzn-3d-crossword', 'x3d'], ['application/vnd.ibm.minipay', 'mpy'], ['application/vnd.ibm.modcap', 'afp'], ['application/vnd.ibm.rights-management', 'irm'], ['application/vnd.ibm.secure-container', 'sc'], ['application/vnd.iccprofile', 'icc'], ['application/vnd.igloader', 'igl'], ['application/vnd.immervision-ivp', 'ivp'], ['application/vnd.immervision-ivu', 'ivu'], ['application/vnd.insors.igm', 'igm'], ['application/vnd.intercon.formnet', 'xpw'], ['application/vnd.intergeo', 'i2g'], ['application/vnd.intu.qbo', 'qbo'], ['application/vnd.intu.qfx', 'qfx'], ['application/vnd.ipunplugged.rcprofile', 'rcprofile'], ['application/vnd.irepository.package+xml', 'irp'], ['application/vnd.is-xpr', 'xpr'], ['application/vnd.isac.fcs', 'fcs'], ['application/vnd.jam', 'jam'], ['application/vnd.jcp.javame.midlet-rms', 'rms'], ['application/vnd.jisp', 'jisp'], ['application/vnd.joost.joda-archive', 'joda'], ['application/vnd.kahootz', 'ktz'], ['application/vnd.kde.karbon', 'karbon'], ['application/vnd.kde.kchart', 'chrt'], ['application/vnd.kde.kformula', 'kfo'], ['application/vnd.kde.kivio', 'flw'], ['application/vnd.kde.kontour', 'kon'], ['application/vnd.kde.kpresenter', 'kpr'], ['application/vnd.kde.kspread', 'ksp'], ['application/vnd.kde.kword', 'kwd'], ['application/vnd.kenameaapp', 'htke'], ['application/vnd.kidspiration', 'kia'], ['application/vnd.kinar', 'kne'], ['application/vnd.koan', 'skp'], ['application/vnd.kodak-descriptor', 'sse'], ['application/vnd.las.las+xml', 'lasxml'], ['application/vnd.llamagraphics.life-balance.desktop', 'lbd'], ['application/vnd.llamagraphics.life-balance.exchange+xml', 'lbe'], ['application/vnd.lotus-1-2-3', '123'], ['application/vnd.lotus-approach', 'apr'], ['application/vnd.lotus-freelance', 'pre'], ['application/vnd.lotus-notes', 'nsf'], ['application/vnd.lotus-organizer', 'org'], ['application/vnd.lotus-screencam', 'scm'], ['application/vnd.lotus-wordpro', 'lwp'], ['application/vnd.macports.portpkg', 'portpkg'], ['application/vnd.mcd', 'mcd'], ['application/vnd.medcalcdata', 'mc1'], ['application/vnd.mediastation.cdkey', 'cdkey'], ['application/vnd.mfer', 'mwf'], ['application/vnd.mfmp', 'mfm'], ['application/vnd.micrografx.flo', 'flo'], ['application/vnd.micrografx.igx', 'igx'], ['application/vnd.mif', 'mif'], ['application/vnd.mobius.daf', 'daf'], ['application/vnd.mobius.dis', 'dis'], ['application/vnd.mobius.mbk', 'mbk'], ['application/vnd.mobius.mqy', 'mqy'], ['application/vnd.mobius.msl', 'msl'], ['application/vnd.mobius.plc', 'plc'], ['application/vnd.mobius.txf', 'txf'], ['application/vnd.mophun.application', 'mpn'], ['application/vnd.mophun.certificate', 'mpc'], ['application/vnd.mozilla.xul+xml', 'xul'], ['application/vnd.ms-artgalry', 'cil'], ['application/vnd.ms-cab-compressed', 'cab'], ['application/vnd.ms-excel', ['xls', 'xla', 'xlc', 'xlm', 'xlt', 'xlw', 'xlb', 'xll']], ['application/vnd.ms-excel.addin.macroenabled.12', 'xlam'], ['application/vnd.ms-excel.sheet.binary.macroenabled.12', 'xlsb'], ['application/vnd.ms-excel.sheet.macroenabled.12', 'xlsm'], ['application/vnd.ms-excel.template.macroenabled.12', 'xltm'], ['application/vnd.ms-fontobject', 'eot'], ['application/vnd.ms-htmlhelp', 'chm'], ['application/vnd.ms-ims', 'ims'], ['application/vnd.ms-lrm', 'lrm'], ['application/vnd.ms-officetheme', 'thmx'], ['application/vnd.ms-outlook', 'msg'], ['application/vnd.ms-pki.certstore', 'sst'], ['application/vnd.ms-pki.pko', 'pko'], ['application/vnd.ms-pki.seccat', 'cat'], ['application/vnd.ms-pki.stl', 'stl'], ['application/vnd.ms-pkicertstore', 'sst'], ['application/vnd.ms-pkiseccat', 'cat'], ['application/vnd.ms-pkistl', 'stl'], ['application/vnd.ms-powerpoint', ['ppt', 'pot', 'pps', 'ppa', 'pwz']], ['application/vnd.ms-powerpoint.addin.macroenabled.12', 'ppam'], ['application/vnd.ms-powerpoint.presentation.macroenabled.12', 'pptm'], ['application/vnd.ms-powerpoint.slide.macroenabled.12', 'sldm'], ['application/vnd.ms-powerpoint.slideshow.macroenabled.12', 'ppsm'], ['application/vnd.ms-powerpoint.template.macroenabled.12', 'potm'], ['application/vnd.ms-project', 'mpp'], ['application/vnd.ms-word.document.macroenabled.12', 'docm'], ['application/vnd.ms-word.template.macroenabled.12', 'dotm'], ['application/vnd.ms-works', ['wks', 'wcm', 'wdb', 'wps']], ['application/vnd.ms-wpl', 'wpl'], ['application/vnd.ms-xpsdocument', 'xps'], ['application/vnd.mseq', 'mseq'], ['application/vnd.musician', 'mus'], ['application/vnd.muvee.style', 'msty'], ['application/vnd.neurolanguage.nlu', 'nlu'], ['application/vnd.noblenet-directory', 'nnd'], ['application/vnd.noblenet-sealer', 'nns'], ['application/vnd.noblenet-web', 'nnw'], ['application/vnd.nokia.configuration-message', 'ncm'], ['application/vnd.nokia.n-gage.data', 'ngdat'], ['application/vnd.nokia.n-gage.symbian.install', 'n-gage'], ['application/vnd.nokia.radio-preset', 'rpst'], ['application/vnd.nokia.radio-presets', 'rpss'], ['application/vnd.nokia.ringing-tone', 'rng'], ['application/vnd.novadigm.edm', 'edm'], ['application/vnd.novadigm.edx', 'edx'], ['application/vnd.novadigm.ext', 'ext'], ['application/vnd.oasis.opendocument.chart', 'odc'], ['application/vnd.oasis.opendocument.chart-template', 'otc'], ['application/vnd.oasis.opendocument.database', 'odb'], ['application/vnd.oasis.opendocument.formula', 'odf'], ['application/vnd.oasis.opendocument.formula-template', 'odft'], ['application/vnd.oasis.opendocument.graphics', 'odg'], ['application/vnd.oasis.opendocument.graphics-template', 'otg'], ['application/vnd.oasis.opendocument.image', 'odi'], ['application/vnd.oasis.opendocument.image-template', 'oti'], ['application/vnd.oasis.opendocument.presentation', 'odp'], ['application/vnd.oasis.opendocument.presentation-template', 'otp'], ['application/vnd.oasis.opendocument.spreadsheet', 'ods'], ['application/vnd.oasis.opendocument.spreadsheet-template', 'ots'], ['application/vnd.oasis.opendocument.text', 'odt'], ['application/vnd.oasis.opendocument.text-master', 'odm'], ['application/vnd.oasis.opendocument.text-template', 'ott'], ['application/vnd.oasis.opendocument.text-web', 'oth'], ['application/vnd.olpc-sugar', 'xo'], ['application/vnd.oma.dd2+xml', 'dd2'], ['application/vnd.openofficeorg.extension', 'oxt'], ['application/vnd.openxmlformats-officedocument.presentationml.presentation', 'pptx'], ['application/vnd.openxmlformats-officedocument.presentationml.slide', 'sldx'], ['application/vnd.openxmlformats-officedocument.presentationml.slideshow', 'ppsx'], ['application/vnd.openxmlformats-officedocument.presentationml.template', 'potx'], ['application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'xlsx'], ['application/vnd.openxmlformats-officedocument.spreadsheetml.template', 'xltx'], ['application/vnd.openxmlformats-officedocument.wordprocessingml.document', 'docx'], ['application/vnd.openxmlformats-officedocument.wordprocessingml.template', 'dotx'], ['application/vnd.osgeo.mapguide.package', 'mgp'], ['application/vnd.osgi.dp', 'dp'], ['application/vnd.palm', 'pdb'], ['application/vnd.pawaafile', 'paw'], ['application/vnd.pg.format', 'str'], ['application/vnd.pg.osasli', 'ei6'], ['application/vnd.picsel', 'efif'], ['application/vnd.pmi.widget', 'wg'], ['application/vnd.pocketlearn', 'plf'], ['application/vnd.powerbuilder6', 'pbd'], ['application/vnd.previewsystems.box', 'box'], ['application/vnd.proteus.magazine', 'mgz'], ['application/vnd.publishare-delta-tree', 'qps'], ['application/vnd.pvi.ptid1', 'ptid'], ['application/vnd.quark.quarkxpress', 'qxd'], ['application/vnd.realvnc.bed', 'bed'], ['application/vnd.recordare.musicxml', 'mxl'], ['application/vnd.recordare.musicxml+xml', 'musicxml'], ['application/vnd.rig.cryptonote', 'cryptonote'], ['application/vnd.rim.cod', 'cod'], ['application/vnd.rn-realmedia', 'rm'], ['application/vnd.rn-realplayer', 'rnx'], ['application/vnd.route66.link66+xml', 'link66'], ['application/vnd.sailingtracker.track', 'st'], ['application/vnd.seemail', 'see'], ['application/vnd.sema', 'sema'], ['application/vnd.semd', 'semd'], ['application/vnd.semf', 'semf'], ['application/vnd.shana.informed.formdata', 'ifm'], ['application/vnd.shana.informed.formtemplate', 'itp'], ['application/vnd.shana.informed.interchange', 'iif'], ['application/vnd.shana.informed.package', 'ipk'], ['application/vnd.simtech-mindmapper', 'twd'], ['application/vnd.smaf', 'mmf'], ['application/vnd.smart.teacher', 'teacher'], ['application/vnd.solent.sdkm+xml', 'sdkm'], ['application/vnd.spotfire.dxp', 'dxp'], ['application/vnd.spotfire.sfs', 'sfs'], ['application/vnd.stardivision.calc', 'sdc'], ['application/vnd.stardivision.draw', 'sda'], ['application/vnd.stardivision.impress', 'sdd'], ['application/vnd.stardivision.math', 'smf'], ['application/vnd.stardivision.writer', 'sdw'], ['application/vnd.stardivision.writer-global', 'sgl'], ['application/vnd.stepmania.stepchart', 'sm'], ['application/vnd.sun.xml.calc', 'sxc'], ['application/vnd.sun.xml.calc.template', 'stc'], ['application/vnd.sun.xml.draw', 'sxd'], ['application/vnd.sun.xml.draw.template', 'std'], ['application/vnd.sun.xml.impress', 'sxi'], ['application/vnd.sun.xml.impress.template', 'sti'], ['application/vnd.sun.xml.math', 'sxm'], ['application/vnd.sun.xml.writer', 'sxw'], ['application/vnd.sun.xml.writer.global', 'sxg'], ['application/vnd.sun.xml.writer.template', 'stw'], ['application/vnd.sus-calendar', 'sus'], ['application/vnd.svd', 'svd'], ['application/vnd.symbian.install', 'sis'], ['application/vnd.syncml+xml', 'xsm'], ['application/vnd.syncml.dm+wbxml', 'bdm'], ['application/vnd.syncml.dm+xml', 'xdm'], ['application/vnd.tao.intent-module-archive', 'tao'], ['application/vnd.tmobile-livetv', 'tmo'], ['application/vnd.trid.tpt', 'tpt'], ['application/vnd.triscape.mxs', 'mxs'], ['application/vnd.trueapp', 'tra'], ['application/vnd.ufdl', 'ufd'], ['application/vnd.uiq.theme', 'utz'], ['application/vnd.umajin', 'umj'], ['application/vnd.unity', 'unityweb'], ['application/vnd.uoml+xml', 'uoml'], ['application/vnd.vcx', 'vcx'], ['application/vnd.visio', 'vsd'], ['application/vnd.visionary', 'vis'], ['application/vnd.vsf', 'vsf'], ['application/vnd.wap.wbxml', 'wbxml'], ['application/vnd.wap.wmlc', 'wmlc'], ['application/vnd.wap.wmlscriptc', 'wmlsc'], ['application/vnd.webturbo', 'wtb'], ['application/vnd.wolfram.player', 'nbp'], ['application/vnd.wordperfect', 'wpd'], ['application/vnd.wqd', 'wqd'], ['application/vnd.wt.stf', 'stf'], ['application/vnd.xara', ['web', 'xar']], ['application/vnd.xfdl', 'xfdl'], ['application/vnd.yamaha.hv-dic', 'hvd'], ['application/vnd.yamaha.hv-script', 'hvs'], ['application/vnd.yamaha.hv-voice', 'hvp'], ['application/vnd.yamaha.openscoreformat', 'osf'], ['application/vnd.yamaha.openscoreformat.osfpvg+xml', 'osfpvg'], ['application/vnd.yamaha.smaf-audio', 'saf'], ['application/vnd.yamaha.smaf-phrase', 'spf'], ['application/vnd.yellowriver-custom-menu', 'cmp'], ['application/vnd.zul', 'zir'], ['application/vnd.zzazz.deck+xml', 'zaz'], ['application/vocaltec-media-desc', 'vmd'], ['application/vocaltec-media-file', 'vmf'], ['application/voicexml+xml', 'vxml'], ['application/widget', 'wgt'], ['application/winhlp', 'hlp'], ['application/wordperfect', ['wp', 'wp5', 'wp6', 'wpd']], ['application/wordperfect6.0', ['w60', 'wp5']], ['application/wordperfect6.1', 'w61'], ['application/wsdl+xml', 'wsdl'], ['application/wspolicy+xml', 'wspolicy'], ['application/x-123', 'wk1'], ['application/x-7z-compressed', '7z'], ['application/x-abiword', 'abw'], ['application/x-ace-compressed', 'ace'], ['application/x-aim', 'aim'], ['application/x-authorware-bin', 'aab'], ['application/x-authorware-map', 'aam'], ['application/x-authorware-seg', 'aas'], ['application/x-bcpio', 'bcpio'], ['application/x-binary', 'bin'], ['application/x-binhex40', 'hqx'], ['application/x-bittorrent', 'torrent'], ['application/x-bsh', ['bsh', 'sh', 'shar']], ['application/x-bytecode.elisp', 'elc'], ['applicaiton/x-bytecode.python', 'pyc'], ['application/x-bzip', 'bz'], ['application/x-bzip2', ['boz', 'bz2']], ['application/x-cdf', 'cdf'], ['application/x-cdlink', 'vcd'], ['application/x-chat', ['cha', 'chat']], ['application/x-chess-pgn', 'pgn'], ['application/x-cmu-raster', 'ras'], ['application/x-cocoa', 'cco'], ['application/x-compactpro', 'cpt'], ['application/x-compress', 'z'], ['application/x-compressed', ['tgz', 'gz', 'z', 'zip']], ['application/x-conference', 'nsc'], ['application/x-cpio', 'cpio'], ['application/x-cpt', 'cpt'], ['application/x-csh', 'csh'], ['application/x-debian-package', 'deb'], ['application/x-deepv', 'deepv'], ['application/x-director', ['dir', 'dcr', 'dxr']], ['application/x-doom', 'wad'], ['application/x-dtbncx+xml', 'ncx'], ['application/x-dtbook+xml', 'dtb'], ['application/x-dtbresource+xml', 'res'], ['application/x-dvi', 'dvi'], ['application/x-elc', 'elc'], ['application/x-envoy', ['env', 'evy']], ['application/x-esrehber', 'es'], ['application/x-excel', ['xls', 'xla', 'xlb', 'xlc', 'xld', 'xlk', 'xll', 'xlm', 'xlt', 'xlv', 'xlw']], ['application/x-font-bdf', 'bdf'], ['application/x-font-ghostscript', 'gsf'], ['application/x-font-linux-psf', 'psf'], ['application/x-font-otf', 'otf'], ['application/x-font-pcf', 'pcf'], ['application/x-font-snf', 'snf'], ['application/x-font-ttf', 'ttf'], ['application/x-font-type1', 'pfa'], ['application/x-font-woff', 'woff'], ['application/x-frame', 'mif'], ['application/x-freelance', 'pre'], ['application/x-futuresplash', 'spl'], ['application/x-gnumeric', 'gnumeric'], ['application/x-gsp', 'gsp'], ['application/x-gss', 'gss'], ['application/x-gtar', 'gtar'], ['application/x-gzip', ['gz', 'gzip']], ['application/x-hdf', 'hdf'], ['application/x-helpfile', ['help', 'hlp']], ['application/x-httpd-imap', 'imap'], ['application/x-ima', 'ima'], ['application/x-internet-signup', ['ins', 'isp']], ['application/x-internett-signup', 'ins'], ['application/x-inventor', 'iv'], ['application/x-ip2', 'ip'], ['application/x-iphone', 'iii'], ['application/x-java-class', 'class'], ['application/x-java-commerce', 'jcm'], ['application/x-java-jnlp-file', 'jnlp'], ['application/x-javascript', 'js'], ['application/x-koan', ['skd', 'skm', 'skp', 'skt']], ['application/x-ksh', 'ksh'], ['application/x-latex', ['latex', 'ltx']], ['application/x-lha', 'lha'], ['application/x-lisp', 'lsp'], ['application/x-livescreen', 'ivy'], ['application/x-lotus', 'wq1'], ['application/x-lotusscreencam', 'scm'], ['application/x-lzh', 'lzh'], ['application/x-lzx', 'lzx'], ['application/x-mac-binhex40', 'hqx'], ['application/x-macbinary', 'bin'], ['application/x-magic-cap-package-1.0', 'mc$'], ['application/x-mathcad', 'mcd'], ['application/x-meme', 'mm'], ['application/x-midi', ['mid', 'midi']], ['application/x-mif', 'mif'], ['application/x-mix-transfer', 'nix'], ['application/x-mobipocket-ebook', 'prc'], ['application/x-mplayer2', 'asx'], ['application/x-ms-application', 'application'], ['application/x-ms-wmd', 'wmd'], ['application/x-ms-wmz', 'wmz'], ['application/x-ms-xbap', 'xbap'], ['application/x-msaccess', 'mdb'], ['application/x-msbinder', 'obd'], ['application/x-mscardfile', 'crd'], ['application/x-msclip', 'clp'], ['application/x-msdownload', ['exe', 'dll']], ['application/x-msexcel', ['xls', 'xla', 'xlw']], ['application/x-msmediaview', ['mvb', 'm13', 'm14']], ['application/x-msmetafile', 'wmf'], ['application/x-msmoney', 'mny'], ['application/x-mspowerpoint', 'ppt'], ['application/x-mspublisher', 'pub'], ['application/x-msschedule', 'scd'], ['application/x-msterminal', 'trm'], ['application/x-mswrite', 'wri'], ['application/x-navi-animation', 'ani'], ['application/x-navidoc', 'nvd'], ['application/x-navimap', 'map'], ['application/x-navistyle', 'stl'], ['application/x-netcdf', ['cdf', 'nc']], ['application/x-newton-compatible-pkg', 'pkg'], ['application/x-nokia-9000-communicator-add-on-software', 'aos'], ['application/x-omc', 'omc'], ['application/x-omcdatamaker', 'omcd'], ['application/x-omcregerator', 'omcr'], ['application/x-pagemaker', ['pm4', 'pm5']], ['application/x-pcl', 'pcl'], ['application/x-perfmon', ['pma', 'pmc', 'pml', 'pmr', 'pmw']], ['application/x-pixclscript', 'plx'], ['application/x-pkcs10', 'p10'], ['application/x-pkcs12', ['p12', 'pfx']], ['application/x-pkcs7-certificates', ['p7b', 'spc']], ['application/x-pkcs7-certreqresp', 'p7r'], ['application/x-pkcs7-mime', ['p7m', 'p7c']], ['application/x-pkcs7-signature', ['p7s', 'p7a']], ['application/x-pointplus', 'css'], ['application/x-portable-anymap', 'pnm'], ['application/x-project', ['mpc', 'mpt', 'mpv', 'mpx']], ['application/x-qpro', 'wb1'], ['application/x-rar-compressed', 'rar'], ['application/x-rtf', 'rtf'], ['application/x-sdp', 'sdp'], ['application/x-sea', 'sea'], ['application/x-seelogo', 'sl'], ['application/x-sh', 'sh'], ['application/x-shar', ['shar', 'sh']], ['application/x-shockwave-flash', 'swf'], ['application/x-silverlight-app', 'xap'], ['application/x-sit', 'sit'], ['application/x-sprite', ['spr', 'sprite']], ['application/x-stuffit', 'sit'], ['application/x-stuffitx', 'sitx'], ['application/x-sv4cpio', 'sv4cpio'], ['application/x-sv4crc', 'sv4crc'], ['application/x-tar', 'tar'], ['application/x-tbook', ['sbk', 'tbk']], ['application/x-tcl', 'tcl'], ['application/x-tex', 'tex'], ['application/x-tex-tfm', 'tfm'], ['application/x-texinfo', ['texi', 'texinfo']], ['application/x-troff', ['roff', 't', 'tr']], ['application/x-troff-man', 'man'], ['application/x-troff-me', 'me'], ['application/x-troff-ms', 'ms'], ['application/x-troff-msvideo', 'avi'], ['application/x-ustar', 'ustar'], ['application/x-visio', ['vsd', 'vst', 'vsw']], ['application/x-vnd.audioexplosion.mzz', 'mzz'], ['application/x-vnd.ls-xpix', 'xpix'], ['application/x-vrml', 'vrml'], ['application/x-wais-source', ['src', 'wsrc']], ['application/x-winhelp', 'hlp'], ['application/x-wintalk', 'wtk'], ['application/x-world', ['wrl', 'svr']], ['application/x-wpwin', 'wpd'], ['application/x-wri', 'wri'], ['application/x-x509-ca-cert', ['cer', 'crt', 'der']], ['application/x-x509-user-cert', 'crt'], ['application/x-xfig', 'fig'], ['application/x-xpinstall', 'xpi'], ['application/x-zip-compressed', 'zip'], ['application/xcap-diff+xml', 'xdf'], ['application/xenc+xml', 'xenc'], ['application/xhtml+xml', 'xhtml'], ['application/xml', 'xml'], ['application/xml-dtd', 'dtd'], ['application/xop+xml', 'xop'], ['application/xslt+xml', 'xslt'], ['application/xspf+xml', 'xspf'], ['application/xv+xml', 'mxml'], ['application/yang', 'yang'], ['application/yin+xml', 'yin'], ['application/ynd.ms-pkipko', 'pko'], ['application/zip', 'zip'], ['audio/adpcm', 'adp'], ['audio/aiff', ['aiff', 'aif', 'aifc']], ['audio/basic', ['snd', 'au']], ['audio/it', 'it'], ['audio/make', ['funk', 'my', 'pfunk']], ['audio/make.my.funk', 'pfunk'], ['audio/mid', ['mid', 'rmi']], ['audio/midi', ['midi', 'kar', 'mid']], ['audio/mod', 'mod'], ['audio/mp4', 'mp4a'], ['audio/mpeg', ['mpga', 'mp3', 'm2a', 'mp2', 'mpa', 'mpg']], ['audio/mpeg3', 'mp3'], ['audio/nspaudio', ['la', 'lma']], ['audio/ogg', 'oga'], ['audio/s3m', 's3m'], ['audio/tsp-audio', 'tsi'], ['audio/tsplayer', 'tsp'], ['audio/vnd.dece.audio', 'uva'], ['audio/vnd.digital-winds', 'eol'], ['audio/vnd.dra', 'dra'], ['audio/vnd.dts', 'dts'], ['audio/vnd.dts.hd', 'dtshd'], ['audio/vnd.lucent.voice', 'lvp'], ['audio/vnd.ms-playready.media.pya', 'pya'], ['audio/vnd.nuera.ecelp4800', 'ecelp4800'], ['audio/vnd.nuera.ecelp7470', 'ecelp7470'], ['audio/vnd.nuera.ecelp9600', 'ecelp9600'], ['audio/vnd.qcelp', 'qcp'], ['audio/vnd.rip', 'rip'], ['audio/voc', 'voc'], ['audio/voxware', 'vox'], ['audio/wav', 'wav'], ['audio/webm', 'weba'], ['audio/x-aac', 'aac'], ['audio/x-adpcm', 'snd'], ['audio/x-aiff', ['aiff', 'aif', 'aifc']], ['audio/x-au', 'au'], ['audio/x-gsm', ['gsd', 'gsm']], ['audio/x-jam', 'jam'], ['audio/x-liveaudio', 'lam'], ['audio/x-mid', ['mid', 'midi']], ['audio/x-midi', ['midi', 'mid']], ['audio/x-mod', 'mod'], ['audio/x-mpeg', 'mp2'], ['audio/x-mpeg-3', 'mp3'], ['audio/x-mpegurl', 'm3u'], ['audio/x-mpequrl', 'm3u'], ['audio/x-ms-wax', 'wax'], ['audio/x-ms-wma', 'wma'], ['audio/x-nspaudio', ['la', 'lma']], ['audio/x-pn-realaudio', ['ra', 'ram', 'rm', 'rmm', 'rmp']], ['audio/x-pn-realaudio-plugin', ['ra', 'rmp', 'rpm']], ['audio/x-psid', 'sid'], ['audio/x-realaudio', 'ra'], ['audio/x-twinvq', 'vqf'], ['audio/x-twinvq-plugin', ['vqe', 'vql']], ['audio/x-vnd.audioexplosion.mjuicemediafile', 'mjf'], ['audio/x-voc', 'voc'], ['audio/x-wav', 'wav'], ['audio/xm', 'xm'], ['chemical/x-cdx', 'cdx'], ['chemical/x-cif', 'cif'], ['chemical/x-cmdf', 'cmdf'], ['chemical/x-cml', 'cml'], ['chemical/x-csml', 'csml'], ['chemical/x-pdb', ['pdb', 'xyz']], ['chemical/x-xyz', 'xyz'], ['drawing/x-dwf', 'dwf'], ['i-world/i-vrml', 'ivr'], ['image/bmp', ['bmp', 'bm']], ['image/cgm', 'cgm'], ['image/cis-cod', 'cod'], ['image/cmu-raster', ['ras', 'rast']], ['image/fif', 'fif'], ['image/florian', ['flo', 'turbot']], ['image/g3fax', 'g3'], ['image/gif', 'gif'], ['image/ief', ['ief', 'iefs']], ['image/jpeg', ['jpeg', 'jpe', 'jpg', 'jfif', 'jfif-tbnl']], ['image/jutvision', 'jut'], ['image/ktx', 'ktx'], ['image/naplps', ['nap', 'naplps']], ['image/pict', ['pic', 'pict']], ['image/pipeg', 'jfif'], ['image/pjpeg', ['jfif', 'jpe', 'jpeg', 'jpg']], ['image/png', ['png', 'x-png']], ['image/prs.btif', 'btif'], ['image/svg+xml', 'svg'], ['image/tiff', ['tif', 'tiff']], ['image/vasa', 'mcf'], ['image/vnd.adobe.photoshop', 'psd'], ['image/vnd.dece.graphic', 'uvi'], ['image/vnd.djvu', 'djvu'], ['image/vnd.dvb.subtitle', 'sub'], ['image/vnd.dwg', ['dwg', 'dxf', 'svf']], ['image/vnd.dxf', 'dxf'], ['image/vnd.fastbidsheet', 'fbs'], ['image/vnd.fpx', 'fpx'], ['image/vnd.fst', 'fst'], ['image/vnd.fujixerox.edmics-mmr', 'mmr'], ['image/vnd.fujixerox.edmics-rlc', 'rlc'], ['image/vnd.ms-modi', 'mdi'], ['image/vnd.net-fpx', ['fpx', 'npx']], ['image/vnd.rn-realflash', 'rf'], ['image/vnd.rn-realpix', 'rp'], ['image/vnd.wap.wbmp', 'wbmp'], ['image/vnd.xiff', 'xif'], ['image/webp', 'webp'], ['image/x-cmu-raster', 'ras'], ['image/x-cmx', 'cmx'], ['image/x-dwg', ['dwg', 'dxf', 'svf']], ['image/x-freehand', 'fh'], ['image/x-icon', 'ico'], ['image/x-jg', 'art'], ['image/x-jps', 'jps'], ['image/x-niff', ['niff', 'nif']], ['image/x-pcx', 'pcx'], ['image/x-pict', ['pct', 'pic']], ['image/x-portable-anymap', 'pnm'], ['image/x-portable-bitmap', 'pbm'], ['image/x-portable-graymap', 'pgm'], ['image/x-portable-greymap', 'pgm'], ['image/x-portable-pixmap', 'ppm'], ['image/x-quicktime', ['qif', 'qti', 'qtif']], ['image/x-rgb', 'rgb'], ['image/x-tiff', ['tif', 'tiff']], ['image/x-windows-bmp', 'bmp'], ['image/x-xbitmap', 'xbm'], ['image/x-xbm', 'xbm'], ['image/x-xpixmap', ['xpm', 'pm']], ['image/x-xwd', 'xwd'], ['image/x-xwindowdump', 'xwd'], ['image/xbm', 'xbm'], ['image/xpm', 'xpm'], ['message/rfc822', ['eml', 'mht', 'mhtml', 'nws', 'mime']], ['model/iges', ['iges', 'igs']], ['model/mesh', 'msh'], ['model/vnd.collada+xml', 'dae'], ['model/vnd.dwf', 'dwf'], ['model/vnd.gdl', 'gdl'], ['model/vnd.gtw', 'gtw'], ['model/vnd.mts', 'mts'], ['model/vnd.vtu', 'vtu'], ['model/vrml', ['vrml', 'wrl', 'wrz']], ['model/x-pov', 'pov'], ['multipart/x-gzip', 'gzip'], ['multipart/x-ustar', 'ustar'], ['multipart/x-zip', 'zip'], ['music/crescendo', ['mid', 'midi']], ['music/x-karaoke', 'kar'], ['paleovu/x-pv', 'pvu'], ['text/asp', 'asp'], ['text/calendar', 'ics'], ['text/css', 'css'], ['text/csv', 'csv'], ['text/ecmascript', 'js'], ['text/h323', '323'], ['text/html', ['html', 'htm', 'stm', 'acgi', 'htmls', 'htx', 'shtml']], ['text/iuls', 'uls'], ['text/javascript', 'js'], ['text/mcf', 'mcf'], ['text/n3', 'n3'], ['text/pascal', 'pas'], ['text/plain', ['txt', 'bas', 'c', 'h', 'c++', 'cc', 'com', 'conf', 'cxx', 'def', 'f', 'f90', 'for', 'g', 'hh', 'idc', 'jav', 'java', 'list', 'log', 'lst', 'm', 'mar', 'pl', 'sdml', 'text']], ['text/plain-bas', 'par'], ['text/prs.lines.tag', 'dsc'], ['text/richtext', ['rtx', 'rt', 'rtf']], ['text/scriplet', 'wsc'], ['text/scriptlet', 'sct'], ['text/sgml', ['sgm', 'sgml']], ['text/tab-separated-values', 'tsv'], ['text/troff', 't'], ['text/turtle', 'ttl'], ['text/uri-list', ['uni', 'unis', 'uri', 'uris']], ['text/vnd.abc', 'abc'], ['text/vnd.curl', 'curl'], ['text/vnd.curl.dcurl', 'dcurl'], ['text/vnd.curl.mcurl', 'mcurl'], ['text/vnd.curl.scurl', 'scurl'], ['text/vnd.fly', 'fly'], ['text/vnd.fmi.flexstor', 'flx'], ['text/vnd.graphviz', 'gv'], ['text/vnd.in3d.3dml', '3dml'], ['text/vnd.in3d.spot', 'spot'], ['text/vnd.rn-realtext', 'rt'], ['text/vnd.sun.j2me.app-descriptor', 'jad'], ['text/vnd.wap.wml', 'wml'], ['text/vnd.wap.wmlscript', 'wmls'], ['text/webviewhtml', 'htt'], ['text/x-asm', ['asm', 's']], ['text/x-audiosoft-intra', 'aip'], ['text/x-c', ['c', 'cc', 'cpp']], ['text/x-component', 'htc'], ['text/x-fortran', ['for', 'f', 'f77', 'f90']], ['text/x-h', ['h', 'hh']], ['text/x-java-source', ['java', 'jav']], ['text/x-java-source,java', 'java'], ['text/x-la-asf', 'lsx'], ['text/x-m', 'm'], ['text/x-pascal', 'p'], ['text/x-script', 'hlb'], ['text/x-script.csh', 'csh'], ['text/x-script.elisp', 'el'], ['text/x-script.guile', 'scm'], ['text/x-script.ksh', 'ksh'], ['text/x-script.lisp', 'lsp'], ['text/x-script.perl', 'pl'], ['text/x-script.perl-module', 'pm'], ['text/x-script.phyton', 'py'], ['text/x-script.rexx', 'rexx'], ['text/x-script.scheme', 'scm'], ['text/x-script.sh', 'sh'], ['text/x-script.tcl', 'tcl'], ['text/x-script.tcsh', 'tcsh'], ['text/x-script.zsh', 'zsh'], ['text/x-server-parsed-html', ['shtml', 'ssi']], ['text/x-setext', 'etx'], ['text/x-sgml', ['sgm', 'sgml']], ['text/x-speech', ['spc', 'talk']], ['text/x-uil', 'uil'], ['text/x-uuencode', ['uu', 'uue']], ['text/x-vcalendar', 'vcs'], ['text/x-vcard', 'vcf'], ['text/xml', 'xml'], ['video/3gpp', '3gp'], ['video/3gpp2', '3g2'], ['video/animaflex', 'afl'], ['video/avi', 'avi'], ['video/avs-video', 'avs'], ['video/dl', 'dl'], ['video/fli', 'fli'], ['video/gl', 'gl'], ['video/h261', 'h261'], ['video/h263', 'h263'], ['video/h264', 'h264'], ['video/jpeg', 'jpgv'], ['video/jpm', 'jpm'], ['video/mj2', 'mj2'], ['video/mp4', 'mp4'], ['video/mpeg', ['mpeg', 'mp2', 'mpa', 'mpe', 'mpg', 'mpv2', 'm1v', 'm2v', 'mp3']], ['video/msvideo', 'avi'], ['video/ogg', 'ogv'], ['video/quicktime', ['mov', 'qt', 'moov']], ['video/vdo', 'vdo'], ['video/vivo', ['viv', 'vivo']], ['video/vnd.dece.hd', 'uvh'], ['video/vnd.dece.mobile', 'uvm'], ['video/vnd.dece.pd', 'uvp'], ['video/vnd.dece.sd', 'uvs'], ['video/vnd.dece.video', 'uvv'], ['video/vnd.fvt', 'fvt'], ['video/vnd.mpegurl', 'mxu'], ['video/vnd.ms-playready.media.pyv', 'pyv'], ['video/vnd.rn-realvideo', 'rv'], ['video/vnd.uvvu.mp4', 'uvu'], ['video/vnd.vivo', ['viv', 'vivo']], ['video/vosaic', 'vos'], ['video/webm', 'webm'], ['video/x-amt-demorun', 'xdr'], ['video/x-amt-showrun', 'xsr'], ['video/x-atomic3d-feature', 'fmf'], ['video/x-dl', 'dl'], ['video/x-dv', ['dif', 'dv']], ['video/x-f4v', 'f4v'], ['video/x-fli', 'fli'], ['video/x-flv', 'flv'], ['video/x-gl', 'gl'], ['video/x-isvideo', 'isu'], ['video/x-la-asf', ['lsf', 'lsx']], ['video/x-m4v', 'm4v'], ['video/x-motion-jpeg', 'mjpg'], ['video/x-mpeg', ['mp3', 'mp2']], ['video/x-mpeq2a', 'mp2'], ['video/x-ms-asf', ['asf', 'asr', 'asx']], ['video/x-ms-asf-plugin', 'asx'], ['video/x-ms-wm', 'wm'], ['video/x-ms-wmv', 'wmv'], ['video/x-ms-wmx', 'wmx'], ['video/x-ms-wvx', 'wvx'], ['video/x-msvideo', 'avi'], ['video/x-qtc', 'qtc'], ['video/x-scm', 'scm'], ['video/x-sgi-movie', ['movie', 'mv']], ['windows/metafile', 'wmf'], ['www/mime', 'mime'], ['x-conference/x-cooltalk', 'ice'], ['x-music/x-midi', ['mid', 'midi']], ['x-world/x-3dmf', ['3dm', '3dmf', 'qd3', 'qd3d']], ['x-world/x-svr', 'svr'], ['x-world/x-vrml', ['flr', 'vrml', 'wrl', 'wrz', 'xaf', 'xof']], ['x-world/x-vrt', 'vrt'], ['xgl/drawing', 'xgz'], ['xgl/movie', 'xmz']]);
var extensions = new Map([['123', 'application/vnd.lotus-1-2-3'], ['323', 'text/h323'], ['*', 'application/octet-stream'], ['3dm', 'x-world/x-3dmf'], ['3dmf', 'x-world/x-3dmf'], ['3dml', 'text/vnd.in3d.3dml'], ['3g2', 'video/3gpp2'], ['3gp', 'video/3gpp'], ['7z', 'application/x-7z-compressed'], ['a', 'application/octet-stream'], ['aab', 'application/x-authorware-bin'], ['aac', 'audio/x-aac'], ['aam', 'application/x-authorware-map'], ['aas', 'application/x-authorware-seg'], ['abc', 'text/vnd.abc'], ['abw', 'application/x-abiword'], ['ac', 'application/pkix-attr-cert'], ['acc', 'application/vnd.americandynamics.acc'], ['ace', 'application/x-ace-compressed'], ['acgi', 'text/html'], ['acu', 'application/vnd.acucobol'], ['acx', 'application/internet-property-stream'], ['adp', 'audio/adpcm'], ['aep', 'application/vnd.audiograph'], ['afl', 'video/animaflex'], ['afp', 'application/vnd.ibm.modcap'], ['ahead', 'application/vnd.ahead.space'], ['ai', 'application/postscript'], ['aif', ['audio/aiff', 'audio/x-aiff']], ['aifc', ['audio/aiff', 'audio/x-aiff']], ['aiff', ['audio/aiff', 'audio/x-aiff']], ['aim', 'application/x-aim'], ['aip', 'text/x-audiosoft-intra'], ['air', 'application/vnd.adobe.air-application-installer-package+zip'], ['ait', 'application/vnd.dvb.ait'], ['ami', 'application/vnd.amiga.ami'], ['ani', 'application/x-navi-animation'], ['aos', 'application/x-nokia-9000-communicator-add-on-software'], ['apk', 'application/vnd.android.package-archive'], ['application', 'application/x-ms-application'], ['apr', 'application/vnd.lotus-approach'], ['aps', 'application/mime'], ['arc', 'application/octet-stream'], ['arj', ['application/arj', 'application/octet-stream']], ['art', 'image/x-jg'], ['asf', 'video/x-ms-asf'], ['asm', 'text/x-asm'], ['aso', 'application/vnd.accpac.simply.aso'], ['asp', 'text/asp'], ['asr', 'video/x-ms-asf'], ['asx', ['video/x-ms-asf', 'application/x-mplayer2', 'video/x-ms-asf-plugin']], ['atc', 'application/vnd.acucorp'], ['atomcat', 'application/atomcat+xml'], ['atomsvc', 'application/atomsvc+xml'], ['atx', 'application/vnd.antix.game-component'], ['au', ['audio/basic', 'audio/x-au']], ['avi', ['video/avi', 'video/msvideo', 'application/x-troff-msvideo', 'video/x-msvideo']], ['avs', 'video/avs-video'], ['aw', 'application/applixware'], ['axs', 'application/olescript'], ['azf', 'application/vnd.airzip.filesecure.azf'], ['azs', 'application/vnd.airzip.filesecure.azs'], ['azw', 'application/vnd.amazon.ebook'], ['bas', 'text/plain'], ['bcpio', 'application/x-bcpio'], ['bdf', 'application/x-font-bdf'], ['bdm', 'application/vnd.syncml.dm+wbxml'], ['bed', 'application/vnd.realvnc.bed'], ['bh2', 'application/vnd.fujitsu.oasysprs'], ['bin', ['application/octet-stream', 'application/mac-binary', 'application/macbinary', 'application/x-macbinary', 'application/x-binary']], ['bm', 'image/bmp'], ['bmi', 'application/vnd.bmi'], ['bmp', ['image/bmp', 'image/x-windows-bmp']], ['boo', 'application/book'], ['book', 'application/book'], ['box', 'application/vnd.previewsystems.box'], ['boz', 'application/x-bzip2'], ['bsh', 'application/x-bsh'], ['btif', 'image/prs.btif'], ['bz', 'application/x-bzip'], ['bz2', 'application/x-bzip2'], ['c', ['text/plain', 'text/x-c']], ['c++', 'text/plain'], ['c11amc', 'application/vnd.cluetrust.cartomobile-config'], ['c11amz', 'application/vnd.cluetrust.cartomobile-config-pkg'], ['c4g', 'application/vnd.clonk.c4group'], ['cab', 'application/vnd.ms-cab-compressed'], ['car', 'application/vnd.curl.car'], ['cat', ['application/vnd.ms-pkiseccat', 'application/vnd.ms-pki.seccat']], ['cc', ['text/plain', 'text/x-c']], ['ccad', 'application/clariscad'], ['cco', 'application/x-cocoa'], ['ccxml', 'application/ccxml+xml,'], ['cdbcmsg', 'application/vnd.contact.cmsg'], ['cdf', ['application/cdf', 'application/x-cdf', 'application/x-netcdf']], ['cdkey', 'application/vnd.mediastation.cdkey'], ['cdmia', 'application/cdmi-capability'], ['cdmic', 'application/cdmi-container'], ['cdmid', 'application/cdmi-domain'], ['cdmio', 'application/cdmi-object'], ['cdmiq', 'application/cdmi-queue'], ['cdx', 'chemical/x-cdx'], ['cdxml', 'application/vnd.chemdraw+xml'], ['cdy', 'application/vnd.cinderella'], ['cer', ['application/pkix-cert', 'application/x-x509-ca-cert']], ['cgm', 'image/cgm'], ['cha', 'application/x-chat'], ['chat', 'application/x-chat'], ['chm', 'application/vnd.ms-htmlhelp'], ['chrt', 'application/vnd.kde.kchart'], ['cif', 'chemical/x-cif'], ['cii', 'application/vnd.anser-web-certificate-issue-initiation'], ['cil', 'application/vnd.ms-artgalry'], ['cla', 'application/vnd.claymore'], ['class', ['application/octet-stream', 'application/java', 'application/java-byte-code', 'application/java-vm', 'application/x-java-class']], ['clkk', 'application/vnd.crick.clicker.keyboard'], ['clkp', 'application/vnd.crick.clicker.palette'], ['clkt', 'application/vnd.crick.clicker.template'], ['clkw', 'application/vnd.crick.clicker.wordbank'], ['clkx', 'application/vnd.crick.clicker'], ['clp', 'application/x-msclip'], ['cmc', 'application/vnd.cosmocaller'], ['cmdf', 'chemical/x-cmdf'], ['cml', 'chemical/x-cml'], ['cmp', 'application/vnd.yellowriver-custom-menu'], ['cmx', 'image/x-cmx'], ['cod', ['image/cis-cod', 'application/vnd.rim.cod']], ['com', ['application/octet-stream', 'text/plain']], ['conf', 'text/plain'], ['cpio', 'application/x-cpio'], ['cpp', 'text/x-c'], ['cpt', ['application/mac-compactpro', 'application/x-compactpro', 'application/x-cpt']], ['crd', 'application/x-mscardfile'], ['crl', ['application/pkix-crl', 'application/pkcs-crl']], ['crt', ['application/pkix-cert', 'application/x-x509-user-cert', 'application/x-x509-ca-cert']], ['cryptonote', 'application/vnd.rig.cryptonote'], ['csh', ['text/x-script.csh', 'application/x-csh']], ['csml', 'chemical/x-csml'], ['csp', 'application/vnd.commonspace'], ['css', ['text/css', 'application/x-pointplus']], ['csv', 'text/csv'], ['cu', 'application/cu-seeme'], ['curl', 'text/vnd.curl'], ['cww', 'application/prs.cww'], ['cxx', 'text/plain'], ['dae', 'model/vnd.collada+xml'], ['daf', 'application/vnd.mobius.daf'], ['davmount', 'application/davmount+xml'], ['dcr', 'application/x-director'], ['dcurl', 'text/vnd.curl.dcurl'], ['dd2', 'application/vnd.oma.dd2+xml'], ['ddd', 'application/vnd.fujixerox.ddd'], ['deb', 'application/x-debian-package'], ['deepv', 'application/x-deepv'], ['def', 'text/plain'], ['der', 'application/x-x509-ca-cert'], ['dfac', 'application/vnd.dreamfactory'], ['dif', 'video/x-dv'], ['dir', 'application/x-director'], ['dis', 'application/vnd.mobius.dis'], ['djvu', 'image/vnd.djvu'], ['dl', ['video/dl', 'video/x-dl']], ['dll', 'application/x-msdownload'], ['dms', 'application/octet-stream'], ['dna', 'application/vnd.dna'], ['doc', 'application/msword'], ['docm', 'application/vnd.ms-word.document.macroenabled.12'], ['docx', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'], ['dot', 'application/msword'], ['dotm', 'application/vnd.ms-word.template.macroenabled.12'], ['dotx', 'application/vnd.openxmlformats-officedocument.wordprocessingml.template'], ['dp', ['application/commonground', 'application/vnd.osgi.dp']], ['dpg', 'application/vnd.dpgraph'], ['dra', 'audio/vnd.dra'], ['drw', 'application/drafting'], ['dsc', 'text/prs.lines.tag'], ['dssc', 'application/dssc+der'], ['dtb', 'application/x-dtbook+xml'], ['dtd', 'application/xml-dtd'], ['dts', 'audio/vnd.dts'], ['dtshd', 'audio/vnd.dts.hd'], ['dump', 'application/octet-stream'], ['dv', 'video/x-dv'], ['dvi', 'application/x-dvi'], ['dwf', ['model/vnd.dwf', 'drawing/x-dwf']], ['dwg', ['application/acad', 'image/vnd.dwg', 'image/x-dwg']], ['dxf', ['application/dxf', 'image/vnd.dwg', 'image/vnd.dxf', 'image/x-dwg']], ['dxp', 'application/vnd.spotfire.dxp'], ['dxr', 'application/x-director'], ['ecelp4800', 'audio/vnd.nuera.ecelp4800'], ['ecelp7470', 'audio/vnd.nuera.ecelp7470'], ['ecelp9600', 'audio/vnd.nuera.ecelp9600'], ['edm', 'application/vnd.novadigm.edm'], ['edx', 'application/vnd.novadigm.edx'], ['efif', 'application/vnd.picsel'], ['ei6', 'application/vnd.pg.osasli'], ['el', 'text/x-script.elisp'], ['elc', ['application/x-elc', 'application/x-bytecode.elisp']], ['eml', 'message/rfc822'], ['emma', 'application/emma+xml'], ['env', 'application/x-envoy'], ['eol', 'audio/vnd.digital-winds'], ['eot', 'application/vnd.ms-fontobject'], ['eps', 'application/postscript'], ['epub', 'application/epub+zip'], ['es', ['application/ecmascript', 'application/x-esrehber']], ['es3', 'application/vnd.eszigno3+xml'], ['esf', 'application/vnd.epson.esf'], ['etx', 'text/x-setext'], ['evy', ['application/envoy', 'application/x-envoy']], ['exe', ['application/octet-stream', 'application/x-msdownload']], ['exi', 'application/exi'], ['ext', 'application/vnd.novadigm.ext'], ['ez2', 'application/vnd.ezpix-album'], ['ez3', 'application/vnd.ezpix-package'], ['f', ['text/plain', 'text/x-fortran']], ['f4v', 'video/x-f4v'], ['f77', 'text/x-fortran'], ['f90', ['text/plain', 'text/x-fortran']], ['fbs', 'image/vnd.fastbidsheet'], ['fcs', 'application/vnd.isac.fcs'], ['fdf', 'application/vnd.fdf'], ['fe_launch', 'application/vnd.denovo.fcselayout-link'], ['fg5', 'application/vnd.fujitsu.oasysgp'], ['fh', 'image/x-freehand'], ['fif', ['application/fractals', 'image/fif']], ['fig', 'application/x-xfig'], ['fli', ['video/fli', 'video/x-fli']], ['flo', ['image/florian', 'application/vnd.micrografx.flo']], ['flr', 'x-world/x-vrml'], ['flv', 'video/x-flv'], ['flw', 'application/vnd.kde.kivio'], ['flx', 'text/vnd.fmi.flexstor'], ['fly', 'text/vnd.fly'], ['fm', 'application/vnd.framemaker'], ['fmf', 'video/x-atomic3d-feature'], ['fnc', 'application/vnd.frogans.fnc'], ['for', ['text/plain', 'text/x-fortran']], ['fpx', ['image/vnd.fpx', 'image/vnd.net-fpx']], ['frl', 'application/freeloader'], ['fsc', 'application/vnd.fsc.weblaunch'], ['fst', 'image/vnd.fst'], ['ftc', 'application/vnd.fluxtime.clip'], ['fti', 'application/vnd.anser-web-funds-transfer-initiation'], ['funk', 'audio/make'], ['fvt', 'video/vnd.fvt'], ['fxp', 'application/vnd.adobe.fxp'], ['fzs', 'application/vnd.fuzzysheet'], ['g', 'text/plain'], ['g2w', 'application/vnd.geoplan'], ['g3', 'image/g3fax'], ['g3w', 'application/vnd.geospace'], ['gac', 'application/vnd.groove-account'], ['gdl', 'model/vnd.gdl'], ['geo', 'application/vnd.dynageo'], ['gex', 'application/vnd.geometry-explorer'], ['ggb', 'application/vnd.geogebra.file'], ['ggt', 'application/vnd.geogebra.tool'], ['ghf', 'application/vnd.groove-help'], ['gif', 'image/gif'], ['gim', 'application/vnd.groove-identity-message'], ['gl', ['video/gl', 'video/x-gl']], ['gmx', 'application/vnd.gmx'], ['gnumeric', 'application/x-gnumeric'], ['gph', 'application/vnd.flographit'], ['gqf', 'application/vnd.grafeq'], ['gram', 'application/srgs'], ['grv', 'application/vnd.groove-injector'], ['grxml', 'application/srgs+xml'], ['gsd', 'audio/x-gsm'], ['gsf', 'application/x-font-ghostscript'], ['gsm', 'audio/x-gsm'], ['gsp', 'application/x-gsp'], ['gss', 'application/x-gss'], ['gtar', 'application/x-gtar'], ['gtm', 'application/vnd.groove-tool-message'], ['gtw', 'model/vnd.gtw'], ['gv', 'text/vnd.graphviz'], ['gxt', 'application/vnd.geonext'], ['gz', ['application/x-gzip', 'application/x-compressed']], ['gzip', ['multipart/x-gzip', 'application/x-gzip']], ['h', ['text/plain', 'text/x-h']], ['h261', 'video/h261'], ['h263', 'video/h263'], ['h264', 'video/h264'], ['hal', 'application/vnd.hal+xml'], ['hbci', 'application/vnd.hbci'], ['hdf', 'application/x-hdf'], ['help', 'application/x-helpfile'], ['hgl', 'application/vnd.hp-hpgl'], ['hh', ['text/plain', 'text/x-h']], ['hlb', 'text/x-script'], ['hlp', ['application/winhlp', 'application/hlp', 'application/x-helpfile', 'application/x-winhelp']], ['hpg', 'application/vnd.hp-hpgl'], ['hpgl', 'application/vnd.hp-hpgl'], ['hpid', 'application/vnd.hp-hpid'], ['hps', 'application/vnd.hp-hps'], ['hqx', ['application/mac-binhex40', 'application/binhex', 'application/binhex4', 'application/mac-binhex', 'application/x-binhex40', 'application/x-mac-binhex40']], ['hta', 'application/hta'], ['htc', 'text/x-component'], ['htke', 'application/vnd.kenameaapp'], ['htm', 'text/html'], ['html', 'text/html'], ['htmls', 'text/html'], ['htt', 'text/webviewhtml'], ['htx', 'text/html'], ['hvd', 'application/vnd.yamaha.hv-dic'], ['hvp', 'application/vnd.yamaha.hv-voice'], ['hvs', 'application/vnd.yamaha.hv-script'], ['i2g', 'application/vnd.intergeo'], ['icc', 'application/vnd.iccprofile'], ['ice', 'x-conference/x-cooltalk'], ['ico', 'image/x-icon'], ['ics', 'text/calendar'], ['idc', 'text/plain'], ['ief', 'image/ief'], ['iefs', 'image/ief'], ['ifm', 'application/vnd.shana.informed.formdata'], ['iges', ['application/iges', 'model/iges']], ['igl', 'application/vnd.igloader'], ['igm', 'application/vnd.insors.igm'], ['igs', ['application/iges', 'model/iges']], ['igx', 'application/vnd.micrografx.igx'], ['iif', 'application/vnd.shana.informed.interchange'], ['iii', 'application/x-iphone'], ['ima', 'application/x-ima'], ['imap', 'application/x-httpd-imap'], ['imp', 'application/vnd.accpac.simply.imp'], ['ims', 'application/vnd.ms-ims'], ['inf', 'application/inf'], ['ins', ['application/x-internet-signup', 'application/x-internett-signup']], ['ip', 'application/x-ip2'], ['ipfix', 'application/ipfix'], ['ipk', 'application/vnd.shana.informed.package'], ['irm', 'application/vnd.ibm.rights-management'], ['irp', 'application/vnd.irepository.package+xml'], ['isp', 'application/x-internet-signup'], ['isu', 'video/x-isvideo'], ['it', 'audio/it'], ['itp', 'application/vnd.shana.informed.formtemplate'], ['iv', 'application/x-inventor'], ['ivp', 'application/vnd.immervision-ivp'], ['ivr', 'i-world/i-vrml'], ['ivu', 'application/vnd.immervision-ivu'], ['ivy', 'application/x-livescreen'], ['jad', 'text/vnd.sun.j2me.app-descriptor'], ['jam', ['application/vnd.jam', 'audio/x-jam']], ['jar', 'application/java-archive'], ['jav', ['text/plain', 'text/x-java-source']], ['java', ['text/plain', 'text/x-java-source,java', 'text/x-java-source']], ['jcm', 'application/x-java-commerce'], ['jfif', ['image/pipeg', 'image/jpeg', 'image/pjpeg']], ['jfif-tbnl', 'image/jpeg'], ['jisp', 'application/vnd.jisp'], ['jlt', 'application/vnd.hp-jlyt'], ['jnlp', 'application/x-java-jnlp-file'], ['joda', 'application/vnd.joost.joda-archive'], ['jpe', ['image/jpeg', 'image/pjpeg']], ['jpeg', ['image/jpeg', 'image/pjpeg']], ['jpg', ['image/jpeg', 'image/pjpeg']], ['jpgv', 'video/jpeg'], ['jpm', 'video/jpm'], ['jps', 'image/x-jps'], ['js', ['application/javascript', 'application/ecmascript', 'text/javascript', 'text/ecmascript', 'application/x-javascript']], ['json', 'application/json'], ['jut', 'image/jutvision'], ['kar', ['audio/midi', 'music/x-karaoke']], ['karbon', 'application/vnd.kde.karbon'], ['kfo', 'application/vnd.kde.kformula'], ['kia', 'application/vnd.kidspiration'], ['kml', 'application/vnd.google-earth.kml+xml'], ['kmz', 'application/vnd.google-earth.kmz'], ['kne', 'application/vnd.kinar'], ['kon', 'application/vnd.kde.kontour'], ['kpr', 'application/vnd.kde.kpresenter'], ['ksh', ['application/x-ksh', 'text/x-script.ksh']], ['ksp', 'application/vnd.kde.kspread'], ['ktx', 'image/ktx'], ['ktz', 'application/vnd.kahootz'], ['kwd', 'application/vnd.kde.kword'], ['la', ['audio/nspaudio', 'audio/x-nspaudio']], ['lam', 'audio/x-liveaudio'], ['lasxml', 'application/vnd.las.las+xml'], ['latex', 'application/x-latex'], ['lbd', 'application/vnd.llamagraphics.life-balance.desktop'], ['lbe', 'application/vnd.llamagraphics.life-balance.exchange+xml'], ['les', 'application/vnd.hhe.lesson-player'], ['lha', ['application/octet-stream', 'application/lha', 'application/x-lha']], ['lhx', 'application/octet-stream'], ['link66', 'application/vnd.route66.link66+xml'], ['list', 'text/plain'], ['lma', ['audio/nspaudio', 'audio/x-nspaudio']], ['log', 'text/plain'], ['lrm', 'application/vnd.ms-lrm'], ['lsf', 'video/x-la-asf'], ['lsp', ['application/x-lisp', 'text/x-script.lisp']], ['lst', 'text/plain'], ['lsx', ['video/x-la-asf', 'text/x-la-asf']], ['ltf', 'application/vnd.frogans.ltf'], ['ltx', 'application/x-latex'], ['lvp', 'audio/vnd.lucent.voice'], ['lwp', 'application/vnd.lotus-wordpro'], ['lzh', ['application/octet-stream', 'application/x-lzh']], ['lzx', ['application/lzx', 'application/octet-stream', 'application/x-lzx']], ['m', ['text/plain', 'text/x-m']], ['m13', 'application/x-msmediaview'], ['m14', 'application/x-msmediaview'], ['m1v', 'video/mpeg'], ['m21', 'application/mp21'], ['m2a', 'audio/mpeg'], ['m2v', 'video/mpeg'], ['m3u', ['audio/x-mpegurl', 'audio/x-mpequrl']], ['m3u8', 'application/vnd.apple.mpegurl'], ['m4v', 'video/x-m4v'], ['ma', 'application/mathematica'], ['mads', 'application/mads+xml'], ['mag', 'application/vnd.ecowin.chart'], ['man', 'application/x-troff-man'], ['map', 'application/x-navimap'], ['mar', 'text/plain'], ['mathml', 'application/mathml+xml'], ['mbd', 'application/mbedlet'], ['mbk', 'application/vnd.mobius.mbk'], ['mbox', 'application/mbox'], ['mc$', 'application/x-magic-cap-package-1.0'], ['mc1', 'application/vnd.medcalcdata'], ['mcd', ['application/mcad', 'application/vnd.mcd', 'application/x-mathcad']], ['mcf', ['image/vasa', 'text/mcf']], ['mcp', 'application/netmc'], ['mcurl', 'text/vnd.curl.mcurl'], ['mdb', 'application/x-msaccess'], ['mdi', 'image/vnd.ms-modi'], ['me', 'application/x-troff-me'], ['meta4', 'application/metalink4+xml'], ['mets', 'application/mets+xml'], ['mfm', 'application/vnd.mfmp'], ['mgp', 'application/vnd.osgeo.mapguide.package'], ['mgz', 'application/vnd.proteus.magazine'], ['mht', 'message/rfc822'], ['mhtml', 'message/rfc822'], ['mid', ['audio/mid', 'audio/midi', 'music/crescendo', 'x-music/x-midi', 'audio/x-midi', 'application/x-midi', 'audio/x-mid']], ['midi', ['audio/midi', 'music/crescendo', 'x-music/x-midi', 'audio/x-midi', 'application/x-midi', 'audio/x-mid']], ['mif', ['application/vnd.mif', 'application/x-mif', 'application/x-frame']], ['mime', ['message/rfc822', 'www/mime']], ['mj2', 'video/mj2'], ['mjf', 'audio/x-vnd.audioexplosion.mjuicemediafile'], ['mjpg', 'video/x-motion-jpeg'], ['mlp', 'application/vnd.dolby.mlp'], ['mm', ['application/base64', 'application/x-meme']], ['mmd', 'application/vnd.chipnuts.karaoke-mmd'], ['mme', 'application/base64'], ['mmf', 'application/vnd.smaf'], ['mmr', 'image/vnd.fujixerox.edmics-mmr'], ['mny', 'application/x-msmoney'], ['mod', ['audio/mod', 'audio/x-mod']], ['mods', 'application/mods+xml'], ['moov', 'video/quicktime'], ['mov', 'video/quicktime'], ['movie', 'video/x-sgi-movie'], ['mp2', ['video/mpeg', 'audio/mpeg', 'video/x-mpeg', 'audio/x-mpeg', 'video/x-mpeq2a']], ['mp3', ['audio/mpeg', 'audio/mpeg3', 'video/mpeg', 'audio/x-mpeg-3', 'video/x-mpeg']], ['mp4', ['video/mp4', 'application/mp4']], ['mp4a', 'audio/mp4'], ['mpa', ['video/mpeg', 'audio/mpeg']], ['mpc', ['application/vnd.mophun.certificate', 'application/x-project']], ['mpe', 'video/mpeg'], ['mpeg', 'video/mpeg'], ['mpg', ['video/mpeg', 'audio/mpeg']], ['mpga', 'audio/mpeg'], ['mpkg', 'application/vnd.apple.installer+xml'], ['mpm', 'application/vnd.blueice.multipass'], ['mpn', 'application/vnd.mophun.application'], ['mpp', 'application/vnd.ms-project'], ['mpt', 'application/x-project'], ['mpv', 'application/x-project'], ['mpv2', 'video/mpeg'], ['mpx', 'application/x-project'], ['mpy', 'application/vnd.ibm.minipay'], ['mqy', 'application/vnd.mobius.mqy'], ['mrc', 'application/marc'], ['mrcx', 'application/marcxml+xml'], ['ms', 'application/x-troff-ms'], ['mscml', 'application/mediaservercontrol+xml'], ['mseq', 'application/vnd.mseq'], ['msf', 'application/vnd.epson.msf'], ['msg', 'application/vnd.ms-outlook'], ['msh', 'model/mesh'], ['msl', 'application/vnd.mobius.msl'], ['msty', 'application/vnd.muvee.style'], ['mts', 'model/vnd.mts'], ['mus', 'application/vnd.musician'], ['musicxml', 'application/vnd.recordare.musicxml+xml'], ['mv', 'video/x-sgi-movie'], ['mvb', 'application/x-msmediaview'], ['mwf', 'application/vnd.mfer'], ['mxf', 'application/mxf'], ['mxl', 'application/vnd.recordare.musicxml'], ['mxml', 'application/xv+xml'], ['mxs', 'application/vnd.triscape.mxs'], ['mxu', 'video/vnd.mpegurl'], ['my', 'audio/make'], ['mzz', 'application/x-vnd.audioexplosion.mzz'], ['n-gage', 'application/vnd.nokia.n-gage.symbian.install'], ['n3', 'text/n3'], ['nap', 'image/naplps'], ['naplps', 'image/naplps'], ['nbp', 'application/vnd.wolfram.player'], ['nc', 'application/x-netcdf'], ['ncm', 'application/vnd.nokia.configuration-message'], ['ncx', 'application/x-dtbncx+xml'], ['ngdat', 'application/vnd.nokia.n-gage.data'], ['nif', 'image/x-niff'], ['niff', 'image/x-niff'], ['nix', 'application/x-mix-transfer'], ['nlu', 'application/vnd.neurolanguage.nlu'], ['nml', 'application/vnd.enliven'], ['nnd', 'application/vnd.noblenet-directory'], ['nns', 'application/vnd.noblenet-sealer'], ['nnw', 'application/vnd.noblenet-web'], ['npx', 'image/vnd.net-fpx'], ['nsc', 'application/x-conference'], ['nsf', 'application/vnd.lotus-notes'], ['nvd', 'application/x-navidoc'], ['nws', 'message/rfc822'], ['o', 'application/octet-stream'], ['oa2', 'application/vnd.fujitsu.oasys2'], ['oa3', 'application/vnd.fujitsu.oasys3'], ['oas', 'application/vnd.fujitsu.oasys'], ['obd', 'application/x-msbinder'], ['oda', 'application/oda'], ['odb', 'application/vnd.oasis.opendocument.database'], ['odc', 'application/vnd.oasis.opendocument.chart'], ['odf', 'application/vnd.oasis.opendocument.formula'], ['odft', 'application/vnd.oasis.opendocument.formula-template'], ['odg', 'application/vnd.oasis.opendocument.graphics'], ['odi', 'application/vnd.oasis.opendocument.image'], ['odm', 'application/vnd.oasis.opendocument.text-master'], ['odp', 'application/vnd.oasis.opendocument.presentation'], ['ods', 'application/vnd.oasis.opendocument.spreadsheet'], ['odt', 'application/vnd.oasis.opendocument.text'], ['oga', 'audio/ogg'], ['ogv', 'video/ogg'], ['ogx', 'application/ogg'], ['omc', 'application/x-omc'], ['omcd', 'application/x-omcdatamaker'], ['omcr', 'application/x-omcregerator'], ['onetoc', 'application/onenote'], ['opf', 'application/oebps-package+xml'], ['org', 'application/vnd.lotus-organizer'], ['osf', 'application/vnd.yamaha.openscoreformat'], ['osfpvg', 'application/vnd.yamaha.openscoreformat.osfpvg+xml'], ['otc', 'application/vnd.oasis.opendocument.chart-template'], ['otf', 'application/x-font-otf'], ['otg', 'application/vnd.oasis.opendocument.graphics-template'], ['oth', 'application/vnd.oasis.opendocument.text-web'], ['oti', 'application/vnd.oasis.opendocument.image-template'], ['otp', 'application/vnd.oasis.opendocument.presentation-template'], ['ots', 'application/vnd.oasis.opendocument.spreadsheet-template'], ['ott', 'application/vnd.oasis.opendocument.text-template'], ['oxt', 'application/vnd.openofficeorg.extension'], ['p', 'text/x-pascal'], ['p10', ['application/pkcs10', 'application/x-pkcs10']], ['p12', ['application/pkcs-12', 'application/x-pkcs12']], ['p7a', 'application/x-pkcs7-signature'], ['p7b', 'application/x-pkcs7-certificates'], ['p7c', ['application/pkcs7-mime', 'application/x-pkcs7-mime']], ['p7m', ['application/pkcs7-mime', 'application/x-pkcs7-mime']], ['p7r', 'application/x-pkcs7-certreqresp'], ['p7s', ['application/pkcs7-signature', 'application/x-pkcs7-signature']], ['p8', 'application/pkcs8'], ['par', 'text/plain-bas'], ['part', 'application/pro_eng'], ['pas', 'text/pascal'], ['paw', 'application/vnd.pawaafile'], ['pbd', 'application/vnd.powerbuilder6'], ['pbm', 'image/x-portable-bitmap'], ['pcf', 'application/x-font-pcf'], ['pcl', ['application/vnd.hp-pcl', 'application/x-pcl']], ['pclxl', 'application/vnd.hp-pclxl'], ['pct', 'image/x-pict'], ['pcurl', 'application/vnd.curl.pcurl'], ['pcx', 'image/x-pcx'], ['pdb', ['application/vnd.palm', 'chemical/x-pdb']], ['pdf', 'application/pdf'], ['pfa', 'application/x-font-type1'], ['pfr', 'application/font-tdpfr'], ['pfunk', ['audio/make', 'audio/make.my.funk']], ['pfx', 'application/x-pkcs12'], ['pgm', ['image/x-portable-graymap', 'image/x-portable-greymap']], ['pgn', 'application/x-chess-pgn'], ['pgp', 'application/pgp-signature'], ['pic', ['image/pict', 'image/x-pict']], ['pict', 'image/pict'], ['pkg', 'application/x-newton-compatible-pkg'], ['pki', 'application/pkixcmp'], ['pkipath', 'application/pkix-pkipath'], ['pko', ['application/ynd.ms-pkipko', 'application/vnd.ms-pki.pko']], ['pl', ['text/plain', 'text/x-script.perl']], ['plb', 'application/vnd.3gpp.pic-bw-large'], ['plc', 'application/vnd.mobius.plc'], ['plf', 'application/vnd.pocketlearn'], ['pls', 'application/pls+xml'], ['plx', 'application/x-pixclscript'], ['pm', ['text/x-script.perl-module', 'image/x-xpixmap']], ['pm4', 'application/x-pagemaker'], ['pm5', 'application/x-pagemaker'], ['pma', 'application/x-perfmon'], ['pmc', 'application/x-perfmon'], ['pml', ['application/vnd.ctc-posml', 'application/x-perfmon']], ['pmr', 'application/x-perfmon'], ['pmw', 'application/x-perfmon'], ['png', 'image/png'], ['pnm', ['application/x-portable-anymap', 'image/x-portable-anymap']], ['portpkg', 'application/vnd.macports.portpkg'], ['pot', ['application/vnd.ms-powerpoint', 'application/mspowerpoint']], ['potm', 'application/vnd.ms-powerpoint.template.macroenabled.12'], ['potx', 'application/vnd.openxmlformats-officedocument.presentationml.template'], ['pov', 'model/x-pov'], ['ppa', 'application/vnd.ms-powerpoint'], ['ppam', 'application/vnd.ms-powerpoint.addin.macroenabled.12'], ['ppd', 'application/vnd.cups-ppd'], ['ppm', 'image/x-portable-pixmap'], ['pps', ['application/vnd.ms-powerpoint', 'application/mspowerpoint']], ['ppsm', 'application/vnd.ms-powerpoint.slideshow.macroenabled.12'], ['ppsx', 'application/vnd.openxmlformats-officedocument.presentationml.slideshow'], ['ppt', ['application/vnd.ms-powerpoint', 'application/mspowerpoint', 'application/powerpoint', 'application/x-mspowerpoint']], ['pptm', 'application/vnd.ms-powerpoint.presentation.macroenabled.12'], ['pptx', 'application/vnd.openxmlformats-officedocument.presentationml.presentation'], ['ppz', 'application/mspowerpoint'], ['prc', 'application/x-mobipocket-ebook'], ['pre', ['application/vnd.lotus-freelance', 'application/x-freelance']], ['prf', 'application/pics-rules'], ['prt', 'application/pro_eng'], ['ps', 'application/postscript'], ['psb', 'application/vnd.3gpp.pic-bw-small'], ['psd', ['application/octet-stream', 'image/vnd.adobe.photoshop']], ['psf', 'application/x-font-linux-psf'], ['pskcxml', 'application/pskc+xml'], ['ptid', 'application/vnd.pvi.ptid1'], ['pub', 'application/x-mspublisher'], ['pvb', 'application/vnd.3gpp.pic-bw-var'], ['pvu', 'paleovu/x-pv'], ['pwn', 'application/vnd.3m.post-it-notes'], ['pwz', 'application/vnd.ms-powerpoint'], ['py', 'text/x-script.phyton'], ['pya', 'audio/vnd.ms-playready.media.pya'], ['pyc', 'applicaiton/x-bytecode.python'], ['pyv', 'video/vnd.ms-playready.media.pyv'], ['qam', 'application/vnd.epson.quickanime'], ['qbo', 'application/vnd.intu.qbo'], ['qcp', 'audio/vnd.qcelp'], ['qd3', 'x-world/x-3dmf'], ['qd3d', 'x-world/x-3dmf'], ['qfx', 'application/vnd.intu.qfx'], ['qif', 'image/x-quicktime'], ['qps', 'application/vnd.publishare-delta-tree'], ['qt', 'video/quicktime'], ['qtc', 'video/x-qtc'], ['qti', 'image/x-quicktime'], ['qtif', 'image/x-quicktime'], ['qxd', 'application/vnd.quark.quarkxpress'], ['ra', ['audio/x-realaudio', 'audio/x-pn-realaudio', 'audio/x-pn-realaudio-plugin']], ['ram', 'audio/x-pn-realaudio'], ['rar', 'application/x-rar-compressed'], ['ras', ['image/cmu-raster', 'application/x-cmu-raster', 'image/x-cmu-raster']], ['rast', 'image/cmu-raster'], ['rcprofile', 'application/vnd.ipunplugged.rcprofile'], ['rdf', 'application/rdf+xml'], ['rdz', 'application/vnd.data-vision.rdz'], ['rep', 'application/vnd.businessobjects'], ['res', 'application/x-dtbresource+xml'], ['rexx', 'text/x-script.rexx'], ['rf', 'image/vnd.rn-realflash'], ['rgb', 'image/x-rgb'], ['rif', 'application/reginfo+xml'], ['rip', 'audio/vnd.rip'], ['rl', 'application/resource-lists+xml'], ['rlc', 'image/vnd.fujixerox.edmics-rlc'], ['rld', 'application/resource-lists-diff+xml'], ['rm', ['application/vnd.rn-realmedia', 'audio/x-pn-realaudio']], ['rmi', 'audio/mid'], ['rmm', 'audio/x-pn-realaudio'], ['rmp', ['audio/x-pn-realaudio-plugin', 'audio/x-pn-realaudio']], ['rms', 'application/vnd.jcp.javame.midlet-rms'], ['rnc', 'application/relax-ng-compact-syntax'], ['rng', ['application/ringing-tones', 'application/vnd.nokia.ringing-tone']], ['rnx', 'application/vnd.rn-realplayer'], ['roff', 'application/x-troff'], ['rp', 'image/vnd.rn-realpix'], ['rp9', 'application/vnd.cloanto.rp9'], ['rpm', 'audio/x-pn-realaudio-plugin'], ['rpss', 'application/vnd.nokia.radio-presets'], ['rpst', 'application/vnd.nokia.radio-preset'], ['rq', 'application/sparql-query'], ['rs', 'application/rls-services+xml'], ['rsd', 'application/rsd+xml'], ['rt', ['text/richtext', 'text/vnd.rn-realtext']], ['rtf', ['application/rtf', 'text/richtext', 'application/x-rtf']], ['rtx', ['text/richtext', 'application/rtf']], ['rv', 'video/vnd.rn-realvideo'], ['s', 'text/x-asm'], ['s3m', 'audio/s3m'], ['saf', 'application/vnd.yamaha.smaf-audio'], ['saveme', 'application/octet-stream'], ['sbk', 'application/x-tbook'], ['sbml', 'application/sbml+xml'], ['sc', 'application/vnd.ibm.secure-container'], ['scd', 'application/x-msschedule'], ['scm', ['application/vnd.lotus-screencam', 'video/x-scm', 'text/x-script.guile', 'application/x-lotusscreencam', 'text/x-script.scheme']], ['scq', 'application/scvp-cv-request'], ['scs', 'application/scvp-cv-response'], ['sct', 'text/scriptlet'], ['scurl', 'text/vnd.curl.scurl'], ['sda', 'application/vnd.stardivision.draw'], ['sdc', 'application/vnd.stardivision.calc'], ['sdd', 'application/vnd.stardivision.impress'], ['sdkm', 'application/vnd.solent.sdkm+xml'], ['sdml', 'text/plain'], ['sdp', ['application/sdp', 'application/x-sdp']], ['sdr', 'application/sounder'], ['sdw', 'application/vnd.stardivision.writer'], ['sea', ['application/sea', 'application/x-sea']], ['see', 'application/vnd.seemail'], ['seed', 'application/vnd.fdsn.seed'], ['sema', 'application/vnd.sema'], ['semd', 'application/vnd.semd'], ['semf', 'application/vnd.semf'], ['ser', 'application/java-serialized-object'], ['set', 'application/set'], ['setpay', 'application/set-payment-initiation'], ['setreg', 'application/set-registration-initiation'], ['sfd-hdstx', 'application/vnd.hydrostatix.sof-data'], ['sfs', 'application/vnd.spotfire.sfs'], ['sgl', 'application/vnd.stardivision.writer-global'], ['sgm', ['text/sgml', 'text/x-sgml']], ['sgml', ['text/sgml', 'text/x-sgml']], ['sh', ['application/x-shar', 'application/x-bsh', 'application/x-sh', 'text/x-script.sh']], ['shar', ['application/x-bsh', 'application/x-shar']], ['shf', 'application/shf+xml'], ['shtml', ['text/html', 'text/x-server-parsed-html']], ['sid', 'audio/x-psid'], ['sis', 'application/vnd.symbian.install'], ['sit', ['application/x-stuffit', 'application/x-sit']], ['sitx', 'application/x-stuffitx'], ['skd', 'application/x-koan'], ['skm', 'application/x-koan'], ['skp', ['application/vnd.koan', 'application/x-koan']], ['skt', 'application/x-koan'], ['sl', 'application/x-seelogo'], ['sldm', 'application/vnd.ms-powerpoint.slide.macroenabled.12'], ['sldx', 'application/vnd.openxmlformats-officedocument.presentationml.slide'], ['slt', 'application/vnd.epson.salt'], ['sm', 'application/vnd.stepmania.stepchart'], ['smf', 'application/vnd.stardivision.math'], ['smi', ['application/smil', 'application/smil+xml']], ['smil', 'application/smil'], ['snd', ['audio/basic', 'audio/x-adpcm']], ['snf', 'application/x-font-snf'], ['sol', 'application/solids'], ['spc', ['text/x-speech', 'application/x-pkcs7-certificates']], ['spf', 'application/vnd.yamaha.smaf-phrase'], ['spl', ['application/futuresplash', 'application/x-futuresplash']], ['spot', 'text/vnd.in3d.spot'], ['spp', 'application/scvp-vp-response'], ['spq', 'application/scvp-vp-request'], ['spr', 'application/x-sprite'], ['sprite', 'application/x-sprite'], ['src', 'application/x-wais-source'], ['sru', 'application/sru+xml'], ['srx', 'application/sparql-results+xml'], ['sse', 'application/vnd.kodak-descriptor'], ['ssf', 'application/vnd.epson.ssf'], ['ssi', 'text/x-server-parsed-html'], ['ssm', 'application/streamingmedia'], ['ssml', 'application/ssml+xml'], ['sst', ['application/vnd.ms-pkicertstore', 'application/vnd.ms-pki.certstore']], ['st', 'application/vnd.sailingtracker.track'], ['stc', 'application/vnd.sun.xml.calc.template'], ['std', 'application/vnd.sun.xml.draw.template'], ['step', 'application/step'], ['stf', 'application/vnd.wt.stf'], ['sti', 'application/vnd.sun.xml.impress.template'], ['stk', 'application/hyperstudio'], ['stl', ['application/vnd.ms-pkistl', 'application/sla', 'application/vnd.ms-pki.stl', 'application/x-navistyle']], ['stm', 'text/html'], ['stp', 'application/step'], ['str', 'application/vnd.pg.format'], ['stw', 'application/vnd.sun.xml.writer.template'], ['sub', 'image/vnd.dvb.subtitle'], ['sus', 'application/vnd.sus-calendar'], ['sv4cpio', 'application/x-sv4cpio'], ['sv4crc', 'application/x-sv4crc'], ['svc', 'application/vnd.dvb.service'], ['svd', 'application/vnd.svd'], ['svf', ['image/vnd.dwg', 'image/x-dwg']], ['svg', 'image/svg+xml'], ['svr', ['x-world/x-svr', 'application/x-world']], ['swf', 'application/x-shockwave-flash'], ['swi', 'application/vnd.aristanetworks.swi'], ['sxc', 'application/vnd.sun.xml.calc'], ['sxd', 'application/vnd.sun.xml.draw'], ['sxg', 'application/vnd.sun.xml.writer.global'], ['sxi', 'application/vnd.sun.xml.impress'], ['sxm', 'application/vnd.sun.xml.math'], ['sxw', 'application/vnd.sun.xml.writer'], ['t', ['text/troff', 'application/x-troff']], ['talk', 'text/x-speech'], ['tao', 'application/vnd.tao.intent-module-archive'], ['tar', 'application/x-tar'], ['tbk', ['application/toolbook', 'application/x-tbook']], ['tcap', 'application/vnd.3gpp2.tcap'], ['tcl', ['text/x-script.tcl', 'application/x-tcl']], ['tcsh', 'text/x-script.tcsh'], ['teacher', 'application/vnd.smart.teacher'], ['tei', 'application/tei+xml'], ['tex', 'application/x-tex'], ['texi', 'application/x-texinfo'], ['texinfo', 'application/x-texinfo'], ['text', ['application/plain', 'text/plain']], ['tfi', 'application/thraud+xml'], ['tfm', 'application/x-tex-tfm'], ['tgz', ['application/gnutar', 'application/x-compressed']], ['thmx', 'application/vnd.ms-officetheme'], ['tif', ['image/tiff', 'image/x-tiff']], ['tiff', ['image/tiff', 'image/x-tiff']], ['tmo', 'application/vnd.tmobile-livetv'], ['torrent', 'application/x-bittorrent'], ['tpl', 'application/vnd.groove-tool-template'], ['tpt', 'application/vnd.trid.tpt'], ['tr', 'application/x-troff'], ['tra', 'application/vnd.trueapp'], ['trm', 'application/x-msterminal'], ['tsd', 'application/timestamped-data'], ['tsi', 'audio/tsp-audio'], ['tsp', ['application/dsptype', 'audio/tsplayer']], ['tsv', 'text/tab-separated-values'], ['ttf', 'application/x-font-ttf'], ['ttl', 'text/turtle'], ['turbot', 'image/florian'], ['twd', 'application/vnd.simtech-mindmapper'], ['txd', 'application/vnd.genomatix.tuxedo'], ['txf', 'application/vnd.mobius.txf'], ['txt', 'text/plain'], ['ufd', 'application/vnd.ufdl'], ['uil', 'text/x-uil'], ['uls', 'text/iuls'], ['umj', 'application/vnd.umajin'], ['uni', 'text/uri-list'], ['unis', 'text/uri-list'], ['unityweb', 'application/vnd.unity'], ['unv', 'application/i-deas'], ['uoml', 'application/vnd.uoml+xml'], ['uri', 'text/uri-list'], ['uris', 'text/uri-list'], ['ustar', ['application/x-ustar', 'multipart/x-ustar']], ['utz', 'application/vnd.uiq.theme'], ['uu', ['application/octet-stream', 'text/x-uuencode']], ['uue', 'text/x-uuencode'], ['uva', 'audio/vnd.dece.audio'], ['uvh', 'video/vnd.dece.hd'], ['uvi', 'image/vnd.dece.graphic'], ['uvm', 'video/vnd.dece.mobile'], ['uvp', 'video/vnd.dece.pd'], ['uvs', 'video/vnd.dece.sd'], ['uvu', 'video/vnd.uvvu.mp4'], ['uvv', 'video/vnd.dece.video'], ['vcd', 'application/x-cdlink'], ['vcf', 'text/x-vcard'], ['vcg', 'application/vnd.groove-vcard'], ['vcs', 'text/x-vcalendar'], ['vcx', 'application/vnd.vcx'], ['vda', 'application/vda'], ['vdo', 'video/vdo'], ['vew', 'application/groupwise'], ['vis', 'application/vnd.visionary'], ['viv', ['video/vivo', 'video/vnd.vivo']], ['vivo', ['video/vivo', 'video/vnd.vivo']], ['vmd', 'application/vocaltec-media-desc'], ['vmf', 'application/vocaltec-media-file'], ['voc', ['audio/voc', 'audio/x-voc']], ['vos', 'video/vosaic'], ['vox', 'audio/voxware'], ['vqe', 'audio/x-twinvq-plugin'], ['vqf', 'audio/x-twinvq'], ['vql', 'audio/x-twinvq-plugin'], ['vrml', ['model/vrml', 'x-world/x-vrml', 'application/x-vrml']], ['vrt', 'x-world/x-vrt'], ['vsd', ['application/vnd.visio', 'application/x-visio']], ['vsf', 'application/vnd.vsf'], ['vst', 'application/x-visio'], ['vsw', 'application/x-visio'], ['vtu', 'model/vnd.vtu'], ['vxml', 'application/voicexml+xml'], ['w60', 'application/wordperfect6.0'], ['w61', 'application/wordperfect6.1'], ['w6w', 'application/msword'], ['wad', 'application/x-doom'], ['wav', ['audio/wav', 'audio/x-wav']], ['wax', 'audio/x-ms-wax'], ['wb1', 'application/x-qpro'], ['wbmp', 'image/vnd.wap.wbmp'], ['wbs', 'application/vnd.criticaltools.wbs+xml'], ['wbxml', 'application/vnd.wap.wbxml'], ['wcm', 'application/vnd.ms-works'], ['wdb', 'application/vnd.ms-works'], ['web', 'application/vnd.xara'], ['weba', 'audio/webm'], ['webm', 'video/webm'], ['webp', 'image/webp'], ['wg', 'application/vnd.pmi.widget'], ['wgt', 'application/widget'], ['wiz', 'application/msword'], ['wk1', 'application/x-123'], ['wks', 'application/vnd.ms-works'], ['wm', 'video/x-ms-wm'], ['wma', 'audio/x-ms-wma'], ['wmd', 'application/x-ms-wmd'], ['wmf', ['windows/metafile', 'application/x-msmetafile']], ['wml', 'text/vnd.wap.wml'], ['wmlc', 'application/vnd.wap.wmlc'], ['wmls', 'text/vnd.wap.wmlscript'], ['wmlsc', 'application/vnd.wap.wmlscriptc'], ['wmv', 'video/x-ms-wmv'], ['wmx', 'video/x-ms-wmx'], ['wmz', 'application/x-ms-wmz'], ['woff', 'application/x-font-woff'], ['word', 'application/msword'], ['wp', 'application/wordperfect'], ['wp5', ['application/wordperfect', 'application/wordperfect6.0']], ['wp6', 'application/wordperfect'], ['wpd', ['application/wordperfect', 'application/vnd.wordperfect', 'application/x-wpwin']], ['wpl', 'application/vnd.ms-wpl'], ['wps', 'application/vnd.ms-works'], ['wq1', 'application/x-lotus'], ['wqd', 'application/vnd.wqd'], ['wri', ['application/mswrite', 'application/x-wri', 'application/x-mswrite']], ['wrl', ['model/vrml', 'x-world/x-vrml', 'application/x-world']], ['wrz', ['model/vrml', 'x-world/x-vrml']], ['wsc', 'text/scriplet'], ['wsdl', 'application/wsdl+xml'], ['wspolicy', 'application/wspolicy+xml'], ['wsrc', 'application/x-wais-source'], ['wtb', 'application/vnd.webturbo'], ['wtk', 'application/x-wintalk'], ['wvx', 'video/x-ms-wvx'], ['x-png', 'image/png'], ['x3d', 'application/vnd.hzn-3d-crossword'], ['xaf', 'x-world/x-vrml'], ['xap', 'application/x-silverlight-app'], ['xar', 'application/vnd.xara'], ['xbap', 'application/x-ms-xbap'], ['xbd', 'application/vnd.fujixerox.docuworks.binder'], ['xbm', ['image/xbm', 'image/x-xbm', 'image/x-xbitmap']], ['xdf', 'application/xcap-diff+xml'], ['xdm', 'application/vnd.syncml.dm+xml'], ['xdp', 'application/vnd.adobe.xdp+xml'], ['xdr', 'video/x-amt-demorun'], ['xdssc', 'application/dssc+xml'], ['xdw', 'application/vnd.fujixerox.docuworks'], ['xenc', 'application/xenc+xml'], ['xer', 'application/patch-ops-error+xml'], ['xfdf', 'application/vnd.adobe.xfdf'], ['xfdl', 'application/vnd.xfdl'], ['xgz', 'xgl/drawing'], ['xhtml', 'application/xhtml+xml'], ['xif', 'image/vnd.xiff'], ['xl', 'application/excel'], ['xla', ['application/vnd.ms-excel', 'application/excel', 'application/x-msexcel', 'application/x-excel']], ['xlam', 'application/vnd.ms-excel.addin.macroenabled.12'], ['xlb', ['application/excel', 'application/vnd.ms-excel', 'application/x-excel']], ['xlc', ['application/vnd.ms-excel', 'application/excel', 'application/x-excel']], ['xld', ['application/excel', 'application/x-excel']], ['xlk', ['application/excel', 'application/x-excel']], ['xll', ['application/excel', 'application/vnd.ms-excel', 'application/x-excel']], ['xlm', ['application/vnd.ms-excel', 'application/excel', 'application/x-excel']], ['xls', ['application/vnd.ms-excel', 'application/excel', 'application/x-msexcel', 'application/x-excel']], ['xlsb', 'application/vnd.ms-excel.sheet.binary.macroenabled.12'], ['xlsm', 'application/vnd.ms-excel.sheet.macroenabled.12'], ['xlsx', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'], ['xlt', ['application/vnd.ms-excel', 'application/excel', 'application/x-excel']], ['xltm', 'application/vnd.ms-excel.template.macroenabled.12'], ['xltx', 'application/vnd.openxmlformats-officedocument.spreadsheetml.template'], ['xlv', ['application/excel', 'application/x-excel']], ['xlw', ['application/vnd.ms-excel', 'application/excel', 'application/x-msexcel', 'application/x-excel']], ['xm', 'audio/xm'], ['xml', ['application/xml', 'text/xml', 'application/atom+xml', 'application/rss+xml']], ['xmz', 'xgl/movie'], ['xo', 'application/vnd.olpc-sugar'], ['xof', 'x-world/x-vrml'], ['xop', 'application/xop+xml'], ['xpi', 'application/x-xpinstall'], ['xpix', 'application/x-vnd.ls-xpix'], ['xpm', ['image/xpm', 'image/x-xpixmap']], ['xpr', 'application/vnd.is-xpr'], ['xps', 'application/vnd.ms-xpsdocument'], ['xpw', 'application/vnd.intercon.formnet'], ['xslt', 'application/xslt+xml'], ['xsm', 'application/vnd.syncml+xml'], ['xspf', 'application/xspf+xml'], ['xsr', 'video/x-amt-showrun'], ['xul', 'application/vnd.mozilla.xul+xml'], ['xwd', ['image/x-xwd', 'image/x-xwindowdump']], ['xyz', ['chemical/x-xyz', 'chemical/x-pdb']], ['yang', 'application/yang'], ['yin', 'application/yin+xml'], ['z', ['application/x-compressed', 'application/x-compress']], ['zaz', 'application/vnd.zzazz.deck+xml'], ['zip', ['application/zip', 'multipart/x-zip', 'application/x-zip-compressed', 'application/x-compressed']], ['zir', 'application/vnd.zul'], ['zmm', 'application/vnd.handheld-entertainment+xml'], ['zoo', 'application/octet-stream'], ['zsh', 'text/x-script.zsh']]);
module.exports = {
  detectMimeType: function detectMimeType(filename) {
    if (!filename) {
      return defaultMimeType;
    }

    var parsed = path.parse(filename);
    var extension = (parsed.ext.substr(1) || parsed.name || '').split('?').shift().trim().toLowerCase();
    var value = defaultMimeType;

    if (extensions.has(extension)) {
      value = extensions.get(extension);
    }

    if (Array.isArray(value)) {
      return value[0];
    }

    return value;
  },
  detectExtension: function detectExtension(mimeType) {
    if (!mimeType) {
      return defaultExtension;
    }

    var parts = (mimeType || '').toLowerCase().trim().split('/');
    var rootType = parts.shift().trim();
    var subType = parts.join('/').trim();

    if (mimeTypes.has(rootType + '/' + subType)) {
      var value = mimeTypes.get(rootType + '/' + subType);

      if (Array.isArray(value)) {
        return value[0];
      }

      return value;
    }

    switch (rootType) {
      case 'text':
        return 'txt';

      default:
        return 'bin';
    }
  }
};

/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* eslint no-undefined: 0, prefer-spread: 0, no-control-regex: 0 */


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

var crypto = __webpack_require__(8);

var os = __webpack_require__(19);

var fs = __webpack_require__(14);

var punycode = __webpack_require__(40);

var PassThrough = __webpack_require__(1).PassThrough;

var shared = __webpack_require__(2);

var mimeFuncs = __webpack_require__(21);

var qp = __webpack_require__(42);

var base64 = __webpack_require__(41);

var addressparser = __webpack_require__(74);

var fetch = __webpack_require__(15);

var LastNewline = __webpack_require__(75);

var LeWindows = __webpack_require__(43);

var LeUnix = __webpack_require__(76);
/**
 * Creates a new mime tree node. Assumes 'multipart/*' as the content type
 * if it is a branch, anything else counts as leaf. If rootNode is missing from
 * the options, assumes this is the root.
 *
 * @param {String} contentType Define the content type for the node. Can be left blank for attachments (derived from filename)
 * @param {Object} [options] optional options
 * @param {Object} [options.rootNode] root node for this tree
 * @param {Object} [options.parentNode] immediate parent for this node
 * @param {Object} [options.filename] filename for an attachment node
 * @param {String} [options.baseBoundary] shared part of the unique multipart boundary
 * @param {Boolean} [options.keepBcc] If true, do not exclude Bcc from the generated headers
 * @param {Function} [options.normalizeHeaderKey] method to normalize header keys for custom caseing
 * @param {String} [options.textEncoding] either 'Q' (the default) or 'B'
 */


var MimeNode = /*#__PURE__*/function () {
  function MimeNode(contentType, options) {
    _classCallCheck(this, MimeNode);

    this.nodeCounter = 0;
    options = options || {};
    /**
     * shared part of the unique multipart boundary
     */

    this.baseBoundary = options.baseBoundary || crypto.randomBytes(8).toString('hex');
    this.boundaryPrefix = options.boundaryPrefix || '--_NmP';
    this.disableFileAccess = !!options.disableFileAccess;
    this.disableUrlAccess = !!options.disableUrlAccess;
    this.normalizeHeaderKey = options.normalizeHeaderKey;
    /**
     * If date headers is missing and current node is the root, this value is used instead
     */

    this.date = new Date();
    /**
     * Root node for current mime tree
     */

    this.rootNode = options.rootNode || this;
    /**
     * If true include Bcc in generated headers (if available)
     */

    this.keepBcc = !!options.keepBcc;
    /**
     * If filename is specified but contentType is not (probably an attachment)
     * detect the content type from filename extension
     */

    if (options.filename) {
      /**
       * Filename for this node. Useful with attachments
       */
      this.filename = options.filename;

      if (!contentType) {
        contentType = mimeFuncs.detectMimeType(this.filename.split('.').pop());
      }
    }
    /**
     * Indicates which encoding should be used for header strings: "Q" or "B"
     */


    this.textEncoding = (options.textEncoding || '').toString().trim().charAt(0).toUpperCase();
    /**
     * Immediate parent for this node (or undefined if not set)
     */

    this.parentNode = options.parentNode;
    /**
     * Hostname for default message-id values
     */

    this.hostname = options.hostname;
    /**
     * If set to 'win' then uses \r\n, if 'linux' then \n. If not set (or `raw` is used) then newlines are kept as is.
     */

    this.newline = options.newline;
    /**
     * An array for possible child nodes
     */

    this.childNodes = [];
    /**
     * Used for generating unique boundaries (prepended to the shared base)
     */

    this._nodeId = ++this.rootNode.nodeCounter;
    /**
     * A list of header values for this node in the form of [{key:'', value:''}]
     */

    this._headers = [];
    /**
     * True if the content only uses ASCII printable characters
     * @type {Boolean}
     */

    this._isPlainText = false;
    /**
     * True if the content is plain text but has longer lines than allowed
     * @type {Boolean}
     */

    this._hasLongLines = false;
    /**
     * If set, use instead this value for envelopes instead of generating one
     * @type {Boolean}
     */

    this._envelope = false;
    /**
     * If set then use this value as the stream content instead of building it
     * @type {String|Buffer|Stream}
     */

    this._raw = false;
    /**
     * Additional transform streams that the message will be piped before
     * exposing by createReadStream
     * @type {Array}
     */

    this._transforms = [];
    /**
     * Additional process functions that the message will be piped through before
     * exposing by createReadStream. These functions are run after transforms
     * @type {Array}
     */

    this._processFuncs = [];
    /**
     * If content type is set (or derived from the filename) add it to headers
     */

    if (contentType) {
      this.setHeader('Content-Type', contentType);
    }
  } /////// PUBLIC METHODS

  /**
   * Creates and appends a child node.Arguments provided are passed to MimeNode constructor
   *
   * @param {String} [contentType] Optional content type
   * @param {Object} [options] Optional options object
   * @return {Object} Created node object
   */


  _createClass(MimeNode, [{
    key: "createChild",
    value: function createChild(contentType, options) {
      if (!options && _typeof(contentType) === 'object') {
        options = contentType;
        contentType = undefined;
      }

      var node = new MimeNode(contentType, options);
      this.appendChild(node);
      return node;
    }
    /**
     * Appends an existing node to the mime tree. Removes the node from an existing
     * tree if needed
     *
     * @param {Object} childNode node to be appended
     * @return {Object} Appended node object
     */

  }, {
    key: "appendChild",
    value: function appendChild(childNode) {
      if (childNode.rootNode !== this.rootNode) {
        childNode.rootNode = this.rootNode;
        childNode._nodeId = ++this.rootNode.nodeCounter;
      }

      childNode.parentNode = this;
      this.childNodes.push(childNode);
      return childNode;
    }
    /**
     * Replaces current node with another node
     *
     * @param {Object} node Replacement node
     * @return {Object} Replacement node
     */

  }, {
    key: "replace",
    value: function replace(node) {
      var _this = this;

      if (node === this) {
        return this;
      }

      this.parentNode.childNodes.forEach(function (childNode, i) {
        if (childNode === _this) {
          node.rootNode = _this.rootNode;
          node.parentNode = _this.parentNode;
          node._nodeId = _this._nodeId;
          _this.rootNode = _this;
          _this.parentNode = undefined;
          node.parentNode.childNodes[i] = node;
        }
      });
      return node;
    }
    /**
     * Removes current node from the mime tree
     *
     * @return {Object} removed node
     */

  }, {
    key: "remove",
    value: function remove() {
      if (!this.parentNode) {
        return this;
      }

      for (var i = this.parentNode.childNodes.length - 1; i >= 0; i--) {
        if (this.parentNode.childNodes[i] === this) {
          this.parentNode.childNodes.splice(i, 1);
          this.parentNode = undefined;
          this.rootNode = this;
          return this;
        }
      }
    }
    /**
     * Sets a header value. If the value for selected key exists, it is overwritten.
     * You can set multiple values as well by using [{key:'', value:''}] or
     * {key: 'value'} as the first argument.
     *
     * @param {String|Array|Object} key Header key or a list of key value pairs
     * @param {String} value Header value
     * @return {Object} current node
     */

  }, {
    key: "setHeader",
    value: function setHeader(key, value) {
      var _this2 = this;

      var added = false,
          headerValue; // Allow setting multiple headers at once

      if (!value && key && _typeof(key) === 'object') {
        // allow {key:'content-type', value: 'text/plain'}
        if (key.key && 'value' in key) {
          this.setHeader(key.key, key.value);
        } else if (Array.isArray(key)) {
          // allow [{key:'content-type', value: 'text/plain'}]
          key.forEach(function (i) {
            _this2.setHeader(i.key, i.value);
          });
        } else {
          // allow {'content-type': 'text/plain'}
          Object.keys(key).forEach(function (i) {
            _this2.setHeader(i, key[i]);
          });
        }

        return this;
      }

      key = this._normalizeHeaderKey(key);
      headerValue = {
        key: key,
        value: value
      }; // Check if the value exists and overwrite

      for (var i = 0, len = this._headers.length; i < len; i++) {
        if (this._headers[i].key === key) {
          if (!added) {
            // replace the first match
            this._headers[i] = headerValue;
            added = true;
          } else {
            // remove following matches
            this._headers.splice(i, 1);

            i--;
            len--;
          }
        }
      } // match not found, append the value


      if (!added) {
        this._headers.push(headerValue);
      }

      return this;
    }
    /**
     * Adds a header value. If the value for selected key exists, the value is appended
     * as a new field and old one is not touched.
     * You can set multiple values as well by using [{key:'', value:''}] or
     * {key: 'value'} as the first argument.
     *
     * @param {String|Array|Object} key Header key or a list of key value pairs
     * @param {String} value Header value
     * @return {Object} current node
     */

  }, {
    key: "addHeader",
    value: function addHeader(key, value) {
      var _this3 = this;

      // Allow setting multiple headers at once
      if (!value && key && _typeof(key) === 'object') {
        // allow {key:'content-type', value: 'text/plain'}
        if (key.key && key.value) {
          this.addHeader(key.key, key.value);
        } else if (Array.isArray(key)) {
          // allow [{key:'content-type', value: 'text/plain'}]
          key.forEach(function (i) {
            _this3.addHeader(i.key, i.value);
          });
        } else {
          // allow {'content-type': 'text/plain'}
          Object.keys(key).forEach(function (i) {
            _this3.addHeader(i, key[i]);
          });
        }

        return this;
      } else if (Array.isArray(value)) {
        value.forEach(function (val) {
          _this3.addHeader(key, val);
        });
        return this;
      }

      this._headers.push({
        key: this._normalizeHeaderKey(key),
        value: value
      });

      return this;
    }
    /**
     * Retrieves the first mathcing value of a selected key
     *
     * @param {String} key Key to search for
     * @retun {String} Value for the key
     */

  }, {
    key: "getHeader",
    value: function getHeader(key) {
      key = this._normalizeHeaderKey(key);

      for (var i = 0, len = this._headers.length; i < len; i++) {
        if (this._headers[i].key === key) {
          return this._headers[i].value;
        }
      }
    }
    /**
     * Sets body content for current node. If the value is a string, charset is added automatically
     * to Content-Type (if it is text/*). If the value is a Buffer, you need to specify
     * the charset yourself
     *
     * @param (String|Buffer) content Body content
     * @return {Object} current node
     */

  }, {
    key: "setContent",
    value: function setContent(content) {
      var _this4 = this;

      this.content = content;

      if (typeof this.content.pipe === 'function') {
        // pre-stream handler. might be triggered if a stream is set as content
        // and 'error' fires before anything is done with this stream
        this._contentErrorHandler = function (err) {
          _this4.content.removeListener('error', _this4._contentErrorHandler);

          _this4.content = err;
        };

        this.content.once('error', this._contentErrorHandler);
      } else if (typeof this.content === 'string') {
        this._isPlainText = mimeFuncs.isPlainText(this.content);

        if (this._isPlainText && mimeFuncs.hasLongerLines(this.content, 76)) {
          // If there are lines longer than 76 symbols/bytes do not use 7bit
          this._hasLongLines = true;
        }
      }

      return this;
    }
  }, {
    key: "build",
    value: function build(callback) {
      var promise;

      if (!callback) {
        promise = new Promise(function (resolve, reject) {
          callback = shared.callbackPromise(resolve, reject);
        });
      }

      var stream = this.createReadStream();
      var buf = [];
      var buflen = 0;
      var returned = false;
      stream.on('readable', function () {
        var chunk;

        while ((chunk = stream.read()) !== null) {
          buf.push(chunk);
          buflen += chunk.length;
        }
      });
      stream.once('error', function (err) {
        if (returned) {
          return;
        }

        returned = true;
        return callback(err);
      });
      stream.once('end', function (chunk) {
        if (returned) {
          return;
        }

        returned = true;

        if (chunk && chunk.length) {
          buf.push(chunk);
          buflen += chunk.length;
        }

        return callback(null, Buffer.concat(buf, buflen));
      });
      return promise;
    }
  }, {
    key: "getTransferEncoding",
    value: function getTransferEncoding() {
      var transferEncoding = false;
      var contentType = (this.getHeader('Content-Type') || '').toString().toLowerCase().trim();

      if (this.content) {
        transferEncoding = (this.getHeader('Content-Transfer-Encoding') || '').toString().toLowerCase().trim();

        if (!transferEncoding || !['base64', 'quoted-printable'].includes(transferEncoding)) {
          if (/^text\//i.test(contentType)) {
            // If there are no special symbols, no need to modify the text
            if (this._isPlainText && !this._hasLongLines) {
              transferEncoding = '7bit';
            } else if (typeof this.content === 'string' || this.content instanceof Buffer) {
              // detect preferred encoding for string value
              transferEncoding = this._getTextEncoding(this.content) === 'Q' ? 'quoted-printable' : 'base64';
            } else {
              // we can not check content for a stream, so either use preferred encoding or fallback to QP
              transferEncoding = this.textEncoding === 'B' ? 'base64' : 'quoted-printable';
            }
          } else if (!/^(multipart|message)\//i.test(contentType)) {
            transferEncoding = transferEncoding || 'base64';
          }
        }
      }

      return transferEncoding;
    }
    /**
     * Builds the header block for the mime node. Append \r\n\r\n before writing the content
     *
     * @returns {String} Headers
     */

  }, {
    key: "buildHeaders",
    value: function buildHeaders() {
      var _this5 = this;

      var transferEncoding = this.getTransferEncoding();
      var headers = [];

      if (transferEncoding) {
        this.setHeader('Content-Transfer-Encoding', transferEncoding);
      }

      if (this.filename && !this.getHeader('Content-Disposition')) {
        this.setHeader('Content-Disposition', 'attachment');
      } // Ensure mandatory header fields


      if (this.rootNode === this) {
        if (!this.getHeader('Date')) {
          this.setHeader('Date', this.date.toUTCString().replace(/GMT/, '+0000'));
        } // ensure that Message-Id is present


        this.messageId();

        if (!this.getHeader('MIME-Version')) {
          this.setHeader('MIME-Version', '1.0');
        }
      }

      this._headers.forEach(function (header) {
        var key = header.key;
        var value = header.value;
        var structured;
        var param;
        var options = {};
        var formattedHeaders = ['From', 'Sender', 'To', 'Cc', 'Bcc', 'Reply-To', 'Date', 'References'];

        if (value && _typeof(value) === 'object' && !formattedHeaders.includes(key)) {
          Object.keys(value).forEach(function (key) {
            if (key !== 'value') {
              options[key] = value[key];
            }
          });
          value = (value.value || '').toString();

          if (!value.trim()) {
            return;
          }
        }

        if (options.prepared) {
          // header value is
          if (options.foldLines) {
            headers.push(mimeFuncs.foldLines(key + ': ' + value));
          } else {
            headers.push(key + ': ' + value);
          }

          return;
        }

        switch (header.key) {
          case 'Content-Disposition':
            structured = mimeFuncs.parseHeaderValue(value);

            if (_this5.filename) {
              structured.params.filename = _this5.filename;
            }

            value = mimeFuncs.buildHeaderValue(structured);
            break;

          case 'Content-Type':
            structured = mimeFuncs.parseHeaderValue(value);

            _this5._handleContentType(structured);

            if (structured.value.match(/^text\/plain\b/) && typeof _this5.content === 'string' && /[\u0080-\uFFFF]/.test(_this5.content)) {
              structured.params.charset = 'utf-8';
            }

            value = mimeFuncs.buildHeaderValue(structured);

            if (_this5.filename) {
              // add support for non-compliant clients like QQ webmail
              // we can't build the value with buildHeaderValue as the value is non standard and
              // would be converted to parameter continuation encoding that we do not want
              param = _this5._encodeWords(_this5.filename);

              if (param !== _this5.filename || /[\s'"\\;:/=(),<>@[\]?]|^-/.test(param)) {
                // include value in quotes if needed
                param = '"' + param + '"';
              }

              value += '; name=' + param;
            }

            break;

          case 'Bcc':
            if (!_this5.keepBcc) {
              // skip BCC values
              return;
            }

            break;
        }

        value = _this5._encodeHeaderValue(key, value); // skip empty lines

        if (!(value || '').toString().trim()) {
          return;
        }

        if (typeof _this5.normalizeHeaderKey === 'function') {
          var normalized = _this5.normalizeHeaderKey(key, value);

          if (normalized && typeof normalized === 'string' && normalized.length) {
            key = normalized;
          }
        }

        headers.push(mimeFuncs.foldLines(key + ': ' + value, 76));
      });

      return headers.join('\r\n');
    }
    /**
     * Streams the rfc2822 message from the current node. If this is a root node,
     * mandatory header fields are set if missing (Date, Message-Id, MIME-Version)
     *
     * @return {String} Compiled message
     */

  }, {
    key: "createReadStream",
    value: function createReadStream(options) {
      options = options || {};
      var stream = new PassThrough(options);
      var outputStream = stream;
      var transform;
      this.stream(stream, options, function (err) {
        if (err) {
          outputStream.emit('error', err);
          return;
        }

        stream.end();
      });

      for (var i = 0, len = this._transforms.length; i < len; i++) {
        transform = typeof this._transforms[i] === 'function' ? this._transforms[i]() : this._transforms[i];
        outputStream.once('error', function (err) {
          transform.emit('error', err);
        });
        outputStream = outputStream.pipe(transform);
      } // ensure terminating newline after possible user transforms


      transform = new LastNewline();
      outputStream.once('error', function (err) {
        transform.emit('error', err);
      });
      outputStream = outputStream.pipe(transform); // dkim and stuff

      for (var _i = 0, _len = this._processFuncs.length; _i < _len; _i++) {
        transform = this._processFuncs[_i];
        outputStream = transform(outputStream);
      }

      if (this.newline) {
        var winbreak = ['win', 'windows', 'dos', '\r\n'].includes(this.newline.toString().toLowerCase());
        var newlineTransform = winbreak ? new LeWindows() : new LeUnix();

        var _stream = outputStream.pipe(newlineTransform);

        outputStream.on('error', function (err) {
          return _stream.emit('error', err);
        });
        return _stream;
      }

      return outputStream;
    }
    /**
     * Appends a transform stream object to the transforms list. Final output
     * is passed through this stream before exposing
     *
     * @param {Object} transform Read-Write stream
     */

  }, {
    key: "transform",
    value: function transform(_transform) {
      this._transforms.push(_transform);
    }
    /**
     * Appends a post process function. The functon is run after transforms and
     * uses the following syntax
     *
     *   processFunc(input) -> outputStream
     *
     * @param {Object} processFunc Read-Write stream
     */

  }, {
    key: "processFunc",
    value: function processFunc(_processFunc) {
      this._processFuncs.push(_processFunc);
    }
  }, {
    key: "stream",
    value: function stream(outputStream, options, done) {
      var _this6 = this;

      var transferEncoding = this.getTransferEncoding();
      var contentStream;
      var localStream; // protect actual callback against multiple triggering

      var returned = false;

      var callback = function callback(err) {
        if (returned) {
          return;
        }

        returned = true;
        done(err);
      }; // for multipart nodes, push child nodes
      // for content nodes end the stream


      var finalize = function finalize() {
        var childId = 0;

        var processChildNode = function processChildNode() {
          if (childId >= _this6.childNodes.length) {
            outputStream.write('\r\n--' + _this6.boundary + '--\r\n');
            return callback();
          }

          var child = _this6.childNodes[childId++];
          outputStream.write((childId > 1 ? '\r\n' : '') + '--' + _this6.boundary + '\r\n');
          child.stream(outputStream, options, function (err) {
            if (err) {
              return callback(err);
            }

            setImmediate(processChildNode);
          });
        };

        if (_this6.multipart) {
          setImmediate(processChildNode);
        } else {
          return callback();
        }
      }; // pushes node content


      var sendContent = function sendContent() {
        if (_this6.content) {
          if (Object.prototype.toString.call(_this6.content) === '[object Error]') {
            // content is already errored
            return callback(_this6.content);
          }

          if (typeof _this6.content.pipe === 'function') {
            _this6.content.removeListener('error', _this6._contentErrorHandler);

            _this6._contentErrorHandler = function (err) {
              return callback(err);
            };

            _this6.content.once('error', _this6._contentErrorHandler);
          }

          var createStream = function createStream() {
            if (['quoted-printable', 'base64'].includes(transferEncoding)) {
              contentStream = new (transferEncoding === 'base64' ? base64 : qp).Encoder(options);
              contentStream.pipe(outputStream, {
                end: false
              });
              contentStream.once('end', finalize);
              contentStream.once('error', function (err) {
                return callback(err);
              });
              localStream = _this6._getStream(_this6.content);
              localStream.pipe(contentStream);
            } else {
              // anything that is not QP or Base54 passes as-is
              localStream = _this6._getStream(_this6.content);
              localStream.pipe(outputStream, {
                end: false
              });
              localStream.once('end', finalize);
            }

            localStream.once('error', function (err) {
              return callback(err);
            });
          };

          if (_this6.content._resolve) {
            var chunks = [];
            var chunklen = 0;
            var _returned = false;

            var sourceStream = _this6._getStream(_this6.content);

            sourceStream.on('error', function (err) {
              if (_returned) {
                return;
              }

              _returned = true;
              callback(err);
            });
            sourceStream.on('readable', function () {
              var chunk;

              while ((chunk = sourceStream.read()) !== null) {
                chunks.push(chunk);
                chunklen += chunk.length;
              }
            });
            sourceStream.on('end', function () {
              if (_returned) {
                return;
              }

              _returned = true;
              _this6.content._resolve = false;
              _this6.content._resolvedValue = Buffer.concat(chunks, chunklen);
              setImmediate(createStream);
            });
          } else {
            setImmediate(createStream);
          }

          return;
        } else {
          return setImmediate(finalize);
        }
      };

      if (this._raw) {
        setImmediate(function () {
          if (Object.prototype.toString.call(_this6._raw) === '[object Error]') {
            // content is already errored
            return callback(_this6._raw);
          } // remove default error handler (if set)


          if (typeof _this6._raw.pipe === 'function') {
            _this6._raw.removeListener('error', _this6._contentErrorHandler);
          }

          var raw = _this6._getStream(_this6._raw);

          raw.pipe(outputStream, {
            end: false
          });
          raw.on('error', function (err) {
            return outputStream.emit('error', err);
          });
          raw.on('end', finalize);
        });
      } else {
        outputStream.write(this.buildHeaders() + '\r\n\r\n');
        setImmediate(sendContent);
      }
    }
    /**
     * Sets envelope to be used instead of the generated one
     *
     * @return {Object} SMTP envelope in the form of {from: 'from@example.com', to: ['to@example.com']}
     */

  }, {
    key: "setEnvelope",
    value: function setEnvelope(envelope) {
      var _this7 = this;

      var list;
      this._envelope = {
        from: false,
        to: []
      };

      if (envelope.from) {
        list = [];

        this._convertAddresses(this._parseAddresses(envelope.from), list);

        list = list.filter(function (address) {
          return address && address.address;
        });

        if (list.length && list[0]) {
          this._envelope.from = list[0].address;
        }
      }

      ['to', 'cc', 'bcc'].forEach(function (key) {
        if (envelope[key]) {
          _this7._convertAddresses(_this7._parseAddresses(envelope[key]), _this7._envelope.to);
        }
      });
      this._envelope.to = this._envelope.to.map(function (to) {
        return to.address;
      }).filter(function (address) {
        return address;
      });
      var standardFields = ['to', 'cc', 'bcc', 'from'];
      Object.keys(envelope).forEach(function (key) {
        if (!standardFields.includes(key)) {
          _this7._envelope[key] = envelope[key];
        }
      });
      return this;
    }
    /**
     * Generates and returns an object with parsed address fields
     *
     * @return {Object} Address object
     */

  }, {
    key: "getAddresses",
    value: function getAddresses() {
      var _this8 = this;

      var addresses = {};

      this._headers.forEach(function (header) {
        var key = header.key.toLowerCase();

        if (['from', 'sender', 'reply-to', 'to', 'cc', 'bcc'].includes(key)) {
          if (!Array.isArray(addresses[key])) {
            addresses[key] = [];
          }

          _this8._convertAddresses(_this8._parseAddresses(header.value), addresses[key]);
        }
      });

      return addresses;
    }
    /**
     * Generates and returns SMTP envelope with the sender address and a list of recipients addresses
     *
     * @return {Object} SMTP envelope in the form of {from: 'from@example.com', to: ['to@example.com']}
     */

  }, {
    key: "getEnvelope",
    value: function getEnvelope() {
      var _this9 = this;

      if (this._envelope) {
        return this._envelope;
      }

      var envelope = {
        from: false,
        to: []
      };

      this._headers.forEach(function (header) {
        var list = [];

        if (header.key === 'From' || !envelope.from && ['Reply-To', 'Sender'].includes(header.key)) {
          _this9._convertAddresses(_this9._parseAddresses(header.value), list);

          if (list.length && list[0]) {
            envelope.from = list[0].address;
          }
        } else if (['To', 'Cc', 'Bcc'].includes(header.key)) {
          _this9._convertAddresses(_this9._parseAddresses(header.value), envelope.to);
        }
      });

      envelope.to = envelope.to.map(function (to) {
        return to.address;
      });
      return envelope;
    }
    /**
     * Returns Message-Id value. If it does not exist, then creates one
     *
     * @return {String} Message-Id value
     */

  }, {
    key: "messageId",
    value: function messageId() {
      var messageId = this.getHeader('Message-ID'); // You really should define your own Message-Id field!

      if (!messageId) {
        messageId = this._generateMessageId();
        this.setHeader('Message-ID', messageId);
      }

      return messageId;
    }
    /**
     * Sets pregenerated content that will be used as the output of this node
     *
     * @param {String|Buffer|Stream} Raw MIME contents
     */

  }, {
    key: "setRaw",
    value: function setRaw(raw) {
      var _this10 = this;

      this._raw = raw;

      if (this._raw && typeof this._raw.pipe === 'function') {
        // pre-stream handler. might be triggered if a stream is set as content
        // and 'error' fires before anything is done with this stream
        this._contentErrorHandler = function (err) {
          _this10._raw.removeListener('error', _this10._contentErrorHandler);

          _this10._raw = err;
        };

        this._raw.once('error', this._contentErrorHandler);
      }

      return this;
    } /////// PRIVATE METHODS

    /**
     * Detects and returns handle to a stream related with the content.
     *
     * @param {Mixed} content Node content
     * @returns {Object} Stream object
     */

  }, {
    key: "_getStream",
    value: function _getStream(content) {
      var contentStream;

      if (content._resolvedValue) {
        // pass string or buffer content as a stream
        contentStream = new PassThrough();
        setImmediate(function () {
          return contentStream.end(content._resolvedValue);
        });
        return contentStream;
      } else if (typeof content.pipe === 'function') {
        // assume as stream
        return content;
      } else if (content && typeof content.path === 'string' && !content.href) {
        if (this.disableFileAccess) {
          contentStream = new PassThrough();
          setImmediate(function () {
            return contentStream.emit('error', new Error('File access rejected for ' + content.path));
          });
          return contentStream;
        } // read file


        return fs.createReadStream(content.path);
      } else if (content && typeof content.href === 'string') {
        if (this.disableUrlAccess) {
          contentStream = new PassThrough();
          setImmediate(function () {
            return contentStream.emit('error', new Error('Url access rejected for ' + content.href));
          });
          return contentStream;
        } // fetch URL


        return fetch(content.href, {
          headers: content.httpHeaders
        });
      } else {
        // pass string or buffer content as a stream
        contentStream = new PassThrough();
        setImmediate(function () {
          return contentStream.end(content || '');
        });
        return contentStream;
      }
    }
    /**
     * Parses addresses. Takes in a single address or an array or an
     * array of address arrays (eg. To: [[first group], [second group],...])
     *
     * @param {Mixed} addresses Addresses to be parsed
     * @return {Array} An array of address objects
     */

  }, {
    key: "_parseAddresses",
    value: function _parseAddresses(addresses) {
      var _this11 = this;

      return [].concat.apply([], [].concat(addresses).map(function (address) {
        // eslint-disable-line prefer-spread
        if (address && address.address) {
          address.address = _this11._normalizeAddress(address.address);
          address.name = address.name || '';
          return [address];
        }

        return addressparser(address);
      }));
    }
    /**
     * Normalizes a header key, uses Camel-Case form, except for uppercase MIME-
     *
     * @param {String} key Key to be normalized
     * @return {String} key in Camel-Case form
     */

  }, {
    key: "_normalizeHeaderKey",
    value: function _normalizeHeaderKey(key) {
      key = (key || '').toString() // no newlines in keys
      .replace(/\r?\n|\r/g, ' ').trim().toLowerCase() // use uppercase words, except MIME
      .replace(/^X-SMTPAPI$|^(MIME|DKIM|ARC|BIMI)\b|^[a-z]|-(SPF|FBL|ID|MD5)$|-[a-z]/gi, function (c) {
        return c.toUpperCase();
      }) // special case
      .replace(/^Content-Features$/i, 'Content-features');
      return key;
    }
    /**
     * Checks if the content type is multipart and defines boundary if needed.
     * Doesn't return anything, modifies object argument instead.
     *
     * @param {Object} structured Parsed header value for 'Content-Type' key
     */

  }, {
    key: "_handleContentType",
    value: function _handleContentType(structured) {
      this.contentType = structured.value.trim().toLowerCase();
      this.multipart = /^multipart\//i.test(this.contentType) ? this.contentType.substr(this.contentType.indexOf('/') + 1) : false;

      if (this.multipart) {
        this.boundary = structured.params.boundary = structured.params.boundary || this.boundary || this._generateBoundary();
      } else {
        this.boundary = false;
      }
    }
    /**
     * Generates a multipart boundary value
     *
     * @return {String} boundary value
     */

  }, {
    key: "_generateBoundary",
    value: function _generateBoundary() {
      return this.rootNode.boundaryPrefix + '-' + this.rootNode.baseBoundary + '-Part_' + this._nodeId;
    }
    /**
     * Encodes a header value for use in the generated rfc2822 email.
     *
     * @param {String} key Header key
     * @param {String} value Header value
     */

  }, {
    key: "_encodeHeaderValue",
    value: function _encodeHeaderValue(key, value) {
      key = this._normalizeHeaderKey(key);

      switch (key) {
        // Structured headers
        case 'From':
        case 'Sender':
        case 'To':
        case 'Cc':
        case 'Bcc':
        case 'Reply-To':
          return this._convertAddresses(this._parseAddresses(value));
        // values enclosed in <>

        case 'Message-ID':
        case 'In-Reply-To':
        case 'Content-Id':
          value = (value || '').toString().replace(/\r?\n|\r/g, ' ');

          if (value.charAt(0) !== '<') {
            value = '<' + value;
          }

          if (value.charAt(value.length - 1) !== '>') {
            value = value + '>';
          }

          return value;
        // space separated list of values enclosed in <>

        case 'References':
          value = [].concat.apply([], [].concat(value || '').map(function (elm) {
            // eslint-disable-line prefer-spread
            elm = (elm || '').toString().replace(/\r?\n|\r/g, ' ').trim();
            return elm.replace(/<[^>]*>/g, function (str) {
              return str.replace(/\s/g, '');
            }).split(/\s+/);
          })).map(function (elm) {
            if (elm.charAt(0) !== '<') {
              elm = '<' + elm;
            }

            if (elm.charAt(elm.length - 1) !== '>') {
              elm = elm + '>';
            }

            return elm;
          });
          return value.join(' ').trim();

        case 'Date':
          if (Object.prototype.toString.call(value) === '[object Date]') {
            return value.toUTCString().replace(/GMT/, '+0000');
          }

          value = (value || '').toString().replace(/\r?\n|\r/g, ' ');
          return this._encodeWords(value);

        case 'Content-Type':
        case 'Content-Disposition':
          // if it includes a filename then it is already encoded
          return (value || '').toString().replace(/\r?\n|\r/g, ' ');

        default:
          value = (value || '').toString().replace(/\r?\n|\r/g, ' '); // encodeWords only encodes if needed, otherwise the original string is returned

          return this._encodeWords(value);
      }
    }
    /**
     * Rebuilds address object using punycode and other adjustments
     *
     * @param {Array} addresses An array of address objects
     * @param {Array} [uniqueList] An array to be populated with addresses
     * @return {String} address string
     */

  }, {
    key: "_convertAddresses",
    value: function _convertAddresses(addresses, uniqueList) {
      var _this12 = this;

      var values = [];
      uniqueList = uniqueList || [];
      [].concat(addresses || []).forEach(function (address) {
        if (address.address) {
          address.address = _this12._normalizeAddress(address.address);

          if (!address.name) {
            values.push(address.address.indexOf(' ') >= 0 ? "<".concat(address.address, ">") : "".concat(address.address));
          } else if (address.name) {
            values.push("".concat(_this12._encodeAddressName(address.name), " <").concat(address.address, ">"));
          }

          if (address.address) {
            if (!uniqueList.filter(function (a) {
              return a.address === address.address;
            }).length) {
              uniqueList.push(address);
            }
          }
        } else if (address.group) {
          var groupListAddresses = (address.group.length ? _this12._convertAddresses(address.group, uniqueList) : '').trim();
          values.push("".concat(_this12._encodeAddressName(address.name), ":").concat(groupListAddresses, ";"));
        }
      });
      return values.join(', ');
    }
    /**
     * Normalizes an email address
     *
     * @param {Array} address An array of address objects
     * @return {String} address string
     */

  }, {
    key: "_normalizeAddress",
    value: function _normalizeAddress(address) {
      address = (address || '').toString().replace(/[\x00-\x1F<>]+/g, ' ') // remove unallowed characters
      .trim();
      var lastAt = address.lastIndexOf('@');

      if (lastAt < 0) {
        // Bare username
        return address;
      }

      var user = address.substr(0, lastAt);
      var domain = address.substr(lastAt + 1); // Usernames are not touched and are kept as is even if these include unicode
      // Domains are punycoded by default
      // 'jõgeva.ee' will be converted to 'xn--jgeva-dua.ee'
      // non-unicode domains are left as is

      var encodedDomain;

      try {
        encodedDomain = punycode.toASCII(domain.toLowerCase());
      } catch (err) {// keep as is?
      }

      if (user.indexOf(' ') >= 0) {
        if (user.charAt(0) !== '"') {
          user = '"' + user;
        }

        if (user.substr(-1) !== '"') {
          user = user + '"';
        }
      }

      return "".concat(user, "@").concat(encodedDomain);
    }
    /**
     * If needed, mime encodes the name part
     *
     * @param {String} name Name part of an address
     * @returns {String} Mime word encoded string if needed
     */

  }, {
    key: "_encodeAddressName",
    value: function _encodeAddressName(name) {
      if (!/^[\w ']*$/.test(name)) {
        if (/^[\x20-\x7e]*$/.test(name)) {
          return '"' + name.replace(/([\\"])/g, '\\$1') + '"';
        } else {
          return mimeFuncs.encodeWord(name, this._getTextEncoding(name), 52);
        }
      }

      return name;
    }
    /**
     * If needed, mime encodes the name part
     *
     * @param {String} name Name part of an address
     * @returns {String} Mime word encoded string if needed
     */

  }, {
    key: "_encodeWords",
    value: function _encodeWords(value) {
      // set encodeAll parameter to true even though it is against the recommendation of RFC2047,
      // by default only words that include non-ascii should be converted into encoded words
      // but some clients (eg. Zimbra) do not handle it properly and remove surrounding whitespace
      return mimeFuncs.encodeWords(value, this._getTextEncoding(value), 52, true);
    }
    /**
     * Detects best mime encoding for a text value
     *
     * @param {String} value Value to check for
     * @return {String} either 'Q' or 'B'
     */

  }, {
    key: "_getTextEncoding",
    value: function _getTextEncoding(value) {
      value = (value || '').toString();
      var encoding = this.textEncoding;
      var latinLen;
      var nonLatinLen;

      if (!encoding) {
        // count latin alphabet symbols and 8-bit range symbols + control symbols
        // if there are more latin characters, then use quoted-printable
        // encoding, otherwise use base64
        nonLatinLen = (value.match(/[\x00-\x08\x0B\x0C\x0E-\x1F\u0080-\uFFFF]/g) || []).length; // eslint-disable-line no-control-regex

        latinLen = (value.match(/[a-z]/gi) || []).length; // if there are more latin symbols than binary/unicode, then prefer Q, otherwise B

        encoding = nonLatinLen < latinLen ? 'Q' : 'B';
      }

      return encoding;
    }
    /**
     * Generates a message id
     *
     * @return {String} Random Message-ID value
     */

  }, {
    key: "_generateMessageId",
    value: function _generateMessageId() {
      return '<' + [2, 2, 2, 6].reduce( // crux to generate UUID-like random strings
      function (prev, len) {
        return prev + '-' + crypto.randomBytes(len).toString('hex');
      }, crypto.randomBytes(4).toString('hex')) + '@' + // try to use the domain of the FROM address or fallback to server hostname
      (this.getEnvelope().from || this.hostname || os.hostname() || 'localhost').split('@').pop() + '>';
    }
  }]);

  return MimeNode;
}();

module.exports = MimeNode;

/***/ }),
/* 40 */
/***/ (function(module, exports) {

module.exports = require("punycode");

/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } Object.defineProperty(subClass, "prototype", { value: Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }), writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Transform = __webpack_require__(1).Transform;
/**
 * Encodes a Buffer into a base64 encoded string
 *
 * @param {Buffer} buffer Buffer to convert
 * @returns {String} base64 encoded string
 */


function encode(buffer) {
  if (typeof buffer === 'string') {
    buffer = Buffer.from(buffer, 'utf-8');
  }

  return buffer.toString('base64');
}
/**
 * Adds soft line breaks to a base64 string
 *
 * @param {String} str base64 encoded string that might need line wrapping
 * @param {Number} [lineLength=76] Maximum allowed length for a line
 * @returns {String} Soft-wrapped base64 encoded string
 */


function wrap(str, lineLength) {
  str = (str || '').toString();
  lineLength = lineLength || 76;

  if (str.length <= lineLength) {
    return str;
  }

  var result = [];
  var pos = 0;
  var chunkLength = lineLength * 1024;

  while (pos < str.length) {
    var wrappedLines = str.substr(pos, chunkLength).replace(new RegExp('.{' + lineLength + '}', 'g'), '$&\r\n').trim();
    result.push(wrappedLines);
    pos += chunkLength;
  }

  return result.join('\r\n').trim();
}
/**
 * Creates a transform stream for encoding data to base64 encoding
 *
 * @constructor
 * @param {Object} options Stream options
 * @param {Number} [options.lineLength=76] Maximum lenght for lines, set to false to disable wrapping
 */


var Encoder = /*#__PURE__*/function (_Transform) {
  _inherits(Encoder, _Transform);

  var _super = _createSuper(Encoder);

  function Encoder(options) {
    var _this;

    _classCallCheck(this, Encoder);

    _this = _super.call(this); // init Transform

    _this.options = options || {};

    if (_this.options.lineLength !== false) {
      _this.options.lineLength = _this.options.lineLength || 76;
    }

    _this._curLine = '';
    _this._remainingBytes = false;
    _this.inputBytes = 0;
    _this.outputBytes = 0;
    return _this;
  }

  _createClass(Encoder, [{
    key: "_transform",
    value: function _transform(chunk, encoding, done) {
      if (encoding !== 'buffer') {
        chunk = Buffer.from(chunk, encoding);
      }

      if (!chunk || !chunk.length) {
        return setImmediate(done);
      }

      this.inputBytes += chunk.length;

      if (this._remainingBytes && this._remainingBytes.length) {
        chunk = Buffer.concat([this._remainingBytes, chunk], this._remainingBytes.length + chunk.length);
        this._remainingBytes = false;
      }

      if (chunk.length % 3) {
        this._remainingBytes = chunk.slice(chunk.length - chunk.length % 3);
        chunk = chunk.slice(0, chunk.length - chunk.length % 3);
      } else {
        this._remainingBytes = false;
      }

      var b64 = this._curLine + encode(chunk);

      if (this.options.lineLength) {
        b64 = wrap(b64, this.options.lineLength); // remove last line as it is still most probably incomplete

        var lastLF = b64.lastIndexOf('\n');

        if (lastLF < 0) {
          this._curLine = b64;
          b64 = '';
        } else if (lastLF === b64.length - 1) {
          this._curLine = '';
        } else {
          this._curLine = b64.substr(lastLF + 1);
          b64 = b64.substr(0, lastLF + 1);
        }
      }

      if (b64) {
        this.outputBytes += b64.length;
        this.push(Buffer.from(b64, 'ascii'));
      }

      setImmediate(done);
    }
  }, {
    key: "_flush",
    value: function _flush(done) {
      if (this._remainingBytes && this._remainingBytes.length) {
        this._curLine += encode(this._remainingBytes);
      }

      if (this._curLine) {
        this._curLine = wrap(this._curLine, this.options.lineLength);
        this.outputBytes += this._curLine.length;
        this.push(this._curLine, 'ascii');
        this._curLine = '';
      }

      done();
    }
  }]);

  return Encoder;
}(Transform); // expose to the world


module.exports = {
  encode: encode,
  wrap: wrap,
  Encoder: Encoder
};

/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } Object.defineProperty(subClass, "prototype", { value: Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }), writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Transform = __webpack_require__(1).Transform;
/**
 * Encodes a Buffer into a Quoted-Printable encoded string
 *
 * @param {Buffer} buffer Buffer to convert
 * @returns {String} Quoted-Printable encoded string
 */


function encode(buffer) {
  if (typeof buffer === 'string') {
    buffer = Buffer.from(buffer, 'utf-8');
  } // usable characters that do not need encoding


  var ranges = [// https://tools.ietf.org/html/rfc2045#section-6.7
  [0x09], // <TAB>
  [0x0a], // <LF>
  [0x0d], // <CR>
  [0x20, 0x3c], // <SP>!"#$%&'()*+,-./0123456789:;
  [0x3e, 0x7e] // >?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}
  ];
  var result = '';
  var ord;

  for (var i = 0, len = buffer.length; i < len; i++) {
    ord = buffer[i]; // if the char is in allowed range, then keep as is, unless it is a WS in the end of a line

    if (checkRanges(ord, ranges) && !((ord === 0x20 || ord === 0x09) && (i === len - 1 || buffer[i + 1] === 0x0a || buffer[i + 1] === 0x0d))) {
      result += String.fromCharCode(ord);
      continue;
    }

    result += '=' + (ord < 0x10 ? '0' : '') + ord.toString(16).toUpperCase();
  }

  return result;
}
/**
 * Adds soft line breaks to a Quoted-Printable string
 *
 * @param {String} str Quoted-Printable encoded string that might need line wrapping
 * @param {Number} [lineLength=76] Maximum allowed length for a line
 * @returns {String} Soft-wrapped Quoted-Printable encoded string
 */


function wrap(str, lineLength) {
  str = (str || '').toString();
  lineLength = lineLength || 76;

  if (str.length <= lineLength) {
    return str;
  }

  var pos = 0;
  var len = str.length;
  var match, code, line;
  var lineMargin = Math.floor(lineLength / 3);
  var result = ''; // insert soft linebreaks where needed

  while (pos < len) {
    line = str.substr(pos, lineLength);

    if (match = line.match(/\r\n/)) {
      line = line.substr(0, match.index + match[0].length);
      result += line;
      pos += line.length;
      continue;
    }

    if (line.substr(-1) === '\n') {
      // nothing to change here
      result += line;
      pos += line.length;
      continue;
    } else if (match = line.substr(-lineMargin).match(/\n.*?$/)) {
      // truncate to nearest line break
      line = line.substr(0, line.length - (match[0].length - 1));
      result += line;
      pos += line.length;
      continue;
    } else if (line.length > lineLength - lineMargin && (match = line.substr(-lineMargin).match(/[ \t.,!?][^ \t.,!?]*$/))) {
      // truncate to nearest space
      line = line.substr(0, line.length - (match[0].length - 1));
    } else if (line.match(/[=][\da-f]{0,2}$/i)) {
      // push incomplete encoding sequences to the next line
      if (match = line.match(/[=][\da-f]{0,1}$/i)) {
        line = line.substr(0, line.length - match[0].length);
      } // ensure that utf-8 sequences are not split


      while (line.length > 3 && line.length < len - pos && !line.match(/^(?:=[\da-f]{2}){1,4}$/i) && (match = line.match(/[=][\da-f]{2}$/gi))) {
        code = parseInt(match[0].substr(1, 2), 16);

        if (code < 128) {
          break;
        }

        line = line.substr(0, line.length - 3);

        if (code >= 0xc0) {
          break;
        }
      }
    }

    if (pos + line.length < len && line.substr(-1) !== '\n') {
      if (line.length === lineLength && line.match(/[=][\da-f]{2}$/i)) {
        line = line.substr(0, line.length - 3);
      } else if (line.length === lineLength) {
        line = line.substr(0, line.length - 1);
      }

      pos += line.length;
      line += '=\r\n';
    } else {
      pos += line.length;
    }

    result += line;
  }

  return result;
}
/**
 * Helper function to check if a number is inside provided ranges
 *
 * @param {Number} nr Number to check for
 * @param {Array} ranges An Array of allowed values
 * @returns {Boolean} True if the value was found inside allowed ranges, false otherwise
 */


function checkRanges(nr, ranges) {
  for (var i = ranges.length - 1; i >= 0; i--) {
    if (!ranges[i].length) {
      continue;
    }

    if (ranges[i].length === 1 && nr === ranges[i][0]) {
      return true;
    }

    if (ranges[i].length === 2 && nr >= ranges[i][0] && nr <= ranges[i][1]) {
      return true;
    }
  }

  return false;
}
/**
 * Creates a transform stream for encoding data to Quoted-Printable encoding
 *
 * @constructor
 * @param {Object} options Stream options
 * @param {Number} [options.lineLength=76] Maximum length for lines, set to false to disable wrapping
 */


var Encoder = /*#__PURE__*/function (_Transform) {
  _inherits(Encoder, _Transform);

  var _super = _createSuper(Encoder);

  function Encoder(options) {
    var _this;

    _classCallCheck(this, Encoder);

    _this = _super.call(this); // init Transform

    _this.options = options || {};

    if (_this.options.lineLength !== false) {
      _this.options.lineLength = _this.options.lineLength || 76;
    }

    _this._curLine = '';
    _this.inputBytes = 0;
    _this.outputBytes = 0;
    return _this;
  }

  _createClass(Encoder, [{
    key: "_transform",
    value: function _transform(chunk, encoding, done) {
      var _this2 = this;

      var qp;

      if (encoding !== 'buffer') {
        chunk = Buffer.from(chunk, encoding);
      }

      if (!chunk || !chunk.length) {
        return done();
      }

      this.inputBytes += chunk.length;

      if (this.options.lineLength) {
        qp = this._curLine + encode(chunk);
        qp = wrap(qp, this.options.lineLength);
        qp = qp.replace(/(^|\n)([^\n]*)$/, function (match, lineBreak, lastLine) {
          _this2._curLine = lastLine;
          return lineBreak;
        });

        if (qp) {
          this.outputBytes += qp.length;
          this.push(qp);
        }
      } else {
        qp = encode(chunk);
        this.outputBytes += qp.length;
        this.push(qp, 'ascii');
      }

      done();
    }
  }, {
    key: "_flush",
    value: function _flush(done) {
      if (this._curLine) {
        this.outputBytes += this._curLine.length;
        this.push(this._curLine, 'ascii');
      }

      done();
    }
  }]);

  return Encoder;
}(Transform); // expose to the world


module.exports = {
  encode: encode,
  wrap: wrap,
  Encoder: Encoder
};

/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } Object.defineProperty(subClass, "prototype", { value: Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }), writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var stream = __webpack_require__(1);

var Transform = stream.Transform;
/**
 * Ensures that only <CR><LF> sequences are used for linebreaks
 *
 * @param {Object} options Stream options
 */

var LeWindows = /*#__PURE__*/function (_Transform) {
  _inherits(LeWindows, _Transform);

  var _super = _createSuper(LeWindows);

  function LeWindows(options) {
    var _this;

    _classCallCheck(this, LeWindows);

    _this = _super.call(this, options); // init Transform

    _this.options = options || {};
    _this.lastByte = false;
    return _this;
  }
  /**
   * Escapes dots
   */


  _createClass(LeWindows, [{
    key: "_transform",
    value: function _transform(chunk, encoding, done) {
      var buf;
      var lastPos = 0;

      for (var i = 0, len = chunk.length; i < len; i++) {
        if (chunk[i] === 0x0a) {
          // \n
          if (i && chunk[i - 1] !== 0x0d || !i && this.lastByte !== 0x0d) {
            if (i > lastPos) {
              buf = chunk.slice(lastPos, i);
              this.push(buf);
            }

            this.push(Buffer.from('\r\n'));
            lastPos = i + 1;
          }
        }
      }

      if (lastPos && lastPos < chunk.length) {
        buf = chunk.slice(lastPos);
        this.push(buf);
      } else if (!lastPos) {
        this.push(chunk);
      }

      this.lastByte = chunk[chunk.length - 1];
      done();
    }
  }]);

  return LeWindows;
}(Transform);

module.exports = LeWindows;

/***/ }),
/* 44 */
/***/ (function(module, exports) {

module.exports = require("tls");

/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } Object.defineProperty(subClass, "prototype", { value: Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }), writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Stream = __webpack_require__(1).Stream;

var fetch = __webpack_require__(15);

var crypto = __webpack_require__(8);

var shared = __webpack_require__(2);
/**
 * XOAUTH2 access_token generator for Gmail.
 * Create client ID for web applications in Google API console to use it.
 * See Offline Access for receiving the needed refreshToken for an user
 * https://developers.google.com/accounts/docs/OAuth2WebServer#offline
 *
 * Usage for generating access tokens with a custom method using provisionCallback:
 * provisionCallback(user, renew, callback)
 *   * user is the username to get the token for
 *   * renew is a boolean that if true indicates that existing token failed and needs to be renewed
 *   * callback is the callback to run with (error, accessToken [, expires])
 *     * accessToken is a string
 *     * expires is an optional expire time in milliseconds
 * If provisionCallback is used, then Nodemailer does not try to attempt generating the token by itself
 *
 * @constructor
 * @param {Object} options Client information for token generation
 * @param {String} options.user User e-mail address
 * @param {String} options.clientId Client ID value
 * @param {String} options.clientSecret Client secret value
 * @param {String} options.refreshToken Refresh token for an user
 * @param {String} options.accessUrl Endpoint for token generation, defaults to 'https://accounts.google.com/o/oauth2/token'
 * @param {String} options.accessToken An existing valid accessToken
 * @param {String} options.privateKey Private key for JSW
 * @param {Number} options.expires Optional Access Token expire time in ms
 * @param {Number} options.timeout Optional TTL for Access Token in seconds
 * @param {Function} options.provisionCallback Function to run when a new access token is required
 */


var XOAuth2 = /*#__PURE__*/function (_Stream) {
  _inherits(XOAuth2, _Stream);

  var _super = _createSuper(XOAuth2);

  function XOAuth2(options, logger) {
    var _this;

    _classCallCheck(this, XOAuth2);

    _this = _super.call(this);
    _this.options = options || {};

    if (options && options.serviceClient) {
      if (!options.privateKey || !options.user) {
        setImmediate(function () {
          return _this.emit('error', new Error('Options "privateKey" and "user" are required for service account!'));
        });
        return _possibleConstructorReturn(_this);
      }

      var serviceRequestTimeout = Math.min(Math.max(Number(_this.options.serviceRequestTimeout) || 0, 0), 3600);
      _this.options.serviceRequestTimeout = serviceRequestTimeout || 5 * 60;
    }

    _this.logger = shared.getLogger({
      logger: logger
    }, {
      component: _this.options.component || 'OAuth2'
    });
    _this.provisionCallback = typeof _this.options.provisionCallback === 'function' ? _this.options.provisionCallback : false;
    _this.options.accessUrl = _this.options.accessUrl || 'https://accounts.google.com/o/oauth2/token';
    _this.options.customHeaders = _this.options.customHeaders || {};
    _this.options.customParams = _this.options.customParams || {};
    _this.accessToken = _this.options.accessToken || false;

    if (_this.options.expires && Number(_this.options.expires)) {
      _this.expires = _this.options.expires;
    } else {
      var timeout = Math.max(Number(_this.options.timeout) || 0, 0);
      _this.expires = timeout && Date.now() + timeout * 1000 || 0;
    }

    return _this;
  }
  /**
   * Returns or generates (if previous has expired) a XOAuth2 token
   *
   * @param {Boolean} renew If false then use cached access token (if available)
   * @param {Function} callback Callback function with error object and token string
   */


  _createClass(XOAuth2, [{
    key: "getToken",
    value: function getToken(renew, callback) {
      var _this2 = this;

      if (!renew && this.accessToken && (!this.expires || this.expires > Date.now())) {
        return callback(null, this.accessToken);
      }

      var generateCallback = function generateCallback() {
        if (arguments.length <= 0 ? undefined : arguments[0]) {
          _this2.logger.error({
            err: arguments.length <= 0 ? undefined : arguments[0],
            tnx: 'OAUTH2',
            user: _this2.options.user,
            action: 'renew'
          }, 'Failed generating new Access Token for %s', _this2.options.user);
        } else {
          _this2.logger.info({
            tnx: 'OAUTH2',
            user: _this2.options.user,
            action: 'renew'
          }, 'Generated new Access Token for %s', _this2.options.user);
        }

        callback.apply(void 0, arguments);
      };

      if (this.provisionCallback) {
        this.provisionCallback(this.options.user, !!renew, function (err, accessToken, expires) {
          if (!err && accessToken) {
            _this2.accessToken = accessToken;
            _this2.expires = expires || 0;
          }

          generateCallback(err, accessToken);
        });
      } else {
        this.generateToken(generateCallback);
      }
    }
    /**
     * Updates token values
     *
     * @param {String} accessToken New access token
     * @param {Number} timeout Access token lifetime in seconds
     *
     * Emits 'token': { user: User email-address, accessToken: the new accessToken, timeout: TTL in seconds}
     */

  }, {
    key: "updateToken",
    value: function updateToken(accessToken, timeout) {
      this.accessToken = accessToken;
      timeout = Math.max(Number(timeout) || 0, 0);
      this.expires = timeout && Date.now() + timeout * 1000 || 0;
      this.emit('token', {
        user: this.options.user,
        accessToken: accessToken || '',
        expires: this.expires
      });
    }
    /**
     * Generates a new XOAuth2 token with the credentials provided at initialization
     *
     * @param {Function} callback Callback function with error object and token string
     */

  }, {
    key: "generateToken",
    value: function generateToken(callback) {
      var _this3 = this;

      var urlOptions;
      var loggedUrlOptions;

      if (this.options.serviceClient) {
        // service account - https://developers.google.com/identity/protocols/OAuth2ServiceAccount
        var iat = Math.floor(Date.now() / 1000); // unix time

        var tokenData = {
          iss: this.options.serviceClient,
          scope: this.options.scope || 'https://mail.google.com/',
          sub: this.options.user,
          aud: this.options.accessUrl,
          iat: iat,
          exp: iat + this.options.serviceRequestTimeout
        };
        var token;

        try {
          token = this.jwtSignRS256(tokenData);
        } catch (err) {
          return callback(new Error('Can\x27t generate token. Check your auth options'));
        }

        urlOptions = {
          grant_type: 'urn:ietf:params:oauth:grant-type:jwt-bearer',
          assertion: token
        };
        loggedUrlOptions = {
          grant_type: 'urn:ietf:params:oauth:grant-type:jwt-bearer',
          assertion: tokenData
        };
      } else {
        if (!this.options.refreshToken) {
          return callback(new Error('Can\x27t create new access token for user'));
        } // web app - https://developers.google.com/identity/protocols/OAuth2WebServer


        urlOptions = {
          client_id: this.options.clientId || '',
          client_secret: this.options.clientSecret || '',
          refresh_token: this.options.refreshToken,
          grant_type: 'refresh_token'
        };
        loggedUrlOptions = {
          client_id: this.options.clientId || '',
          client_secret: (this.options.clientSecret || '').substr(0, 6) + '...',
          refresh_token: (this.options.refreshToken || '').substr(0, 6) + '...',
          grant_type: 'refresh_token'
        };
      }

      Object.keys(this.options.customParams).forEach(function (key) {
        urlOptions[key] = _this3.options.customParams[key];
        loggedUrlOptions[key] = _this3.options.customParams[key];
      });
      this.logger.debug({
        tnx: 'OAUTH2',
        user: this.options.user,
        action: 'generate'
      }, 'Requesting token using: %s', JSON.stringify(loggedUrlOptions));
      this.postRequest(this.options.accessUrl, urlOptions, this.options, function (error, body) {
        var data;

        if (error) {
          return callback(error);
        }

        try {
          data = JSON.parse(body.toString());
        } catch (E) {
          return callback(E);
        }

        if (!data || _typeof(data) !== 'object') {
          _this3.logger.debug({
            tnx: 'OAUTH2',
            user: _this3.options.user,
            action: 'post'
          }, 'Response: %s', (body || '').toString());

          return callback(new Error('Invalid authentication response'));
        }

        var logData = {};
        Object.keys(data).forEach(function (key) {
          if (key !== 'access_token') {
            logData[key] = data[key];
          } else {
            logData[key] = (data[key] || '').toString().substr(0, 6) + '...';
          }
        });

        _this3.logger.debug({
          tnx: 'OAUTH2',
          user: _this3.options.user,
          action: 'post'
        }, 'Response: %s', JSON.stringify(logData));

        if (data.error) {
          // Error Response : https://tools.ietf.org/html/rfc6749#section-5.2
          var errorMessage = data.error;

          if (data.error_description) {
            errorMessage += ': ' + data.error_description;
          }

          if (data.error_uri) {
            errorMessage += ' (' + data.error_uri + ')';
          }

          return callback(new Error(errorMessage));
        }

        if (data.access_token) {
          _this3.updateToken(data.access_token, data.expires_in);

          return callback(null, _this3.accessToken);
        }

        return callback(new Error('No access token'));
      });
    }
    /**
     * Converts an access_token and user id into a base64 encoded XOAuth2 token
     *
     * @param {String} [accessToken] Access token string
     * @return {String} Base64 encoded token for IMAP or SMTP login
     */

  }, {
    key: "buildXOAuth2Token",
    value: function buildXOAuth2Token(accessToken) {
      var authData = ['user=' + (this.options.user || ''), 'auth=Bearer ' + (accessToken || this.accessToken), '', ''];
      return Buffer.from(authData.join('\x01'), 'utf-8').toString('base64');
    }
    /**
     * Custom POST request handler.
     * This is only needed to keep paths short in Windows – usually this module
     * is a dependency of a dependency and if it tries to require something
     * like the request module the paths get way too long to handle for Windows.
     * As we do only a simple POST request we do not actually require complicated
     * logic support (no redirects, no nothing) anyway.
     *
     * @param {String} url Url to POST to
     * @param {String|Buffer} payload Payload to POST
     * @param {Function} callback Callback function with (err, buff)
     */

  }, {
    key: "postRequest",
    value: function postRequest(url, payload, params, callback) {
      var returned = false;
      var chunks = [];
      var chunklen = 0;
      var req = fetch(url, {
        method: 'post',
        headers: params.customHeaders,
        body: payload,
        allowErrorResponse: true
      });
      req.on('readable', function () {
        var chunk;

        while ((chunk = req.read()) !== null) {
          chunks.push(chunk);
          chunklen += chunk.length;
        }
      });
      req.once('error', function (err) {
        if (returned) {
          return;
        }

        returned = true;
        return callback(err);
      });
      req.once('end', function () {
        if (returned) {
          return;
        }

        returned = true;
        return callback(null, Buffer.concat(chunks, chunklen));
      });
    }
    /**
     * Encodes a buffer or a string into Base64url format
     *
     * @param {Buffer|String} data The data to convert
     * @return {String} The encoded string
     */

  }, {
    key: "toBase64URL",
    value: function toBase64URL(data) {
      if (typeof data === 'string') {
        data = Buffer.from(data);
      }

      return data.toString('base64').replace(/[=]+/g, '') // remove '='s
      .replace(/\+/g, '-') // '+' → '-'
      .replace(/\//g, '_'); // '/' → '_'
    }
    /**
     * Creates a JSON Web Token signed with RS256 (SHA256 + RSA)
     *
     * @param {Object} payload The payload to include in the generated token
     * @return {String} The generated and signed token
     */

  }, {
    key: "jwtSignRS256",
    value: function jwtSignRS256(payload) {
      var _this4 = this;

      payload = ['{"alg":"RS256","typ":"JWT"}', JSON.stringify(payload)].map(function (val) {
        return _this4.toBase64URL(val);
      }).join('.');
      var signature = crypto.createSign('RSA-SHA256').update(payload).sign(this.options.privateKey);
      return payload + '.' + this.toBase64URL(signature);
    }
  }]);

  return XOAuth2;
}(Stream);

module.exports = XOAuth2;

/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var services = __webpack_require__(86);

var normalized = {};
Object.keys(services).forEach(function (key) {
  var service = services[key];
  normalized[normalizeKey(key)] = normalizeService(service);
  [].concat(service.aliases || []).forEach(function (alias) {
    normalized[normalizeKey(alias)] = normalizeService(service);
  });
  [].concat(service.domains || []).forEach(function (domain) {
    normalized[normalizeKey(domain)] = normalizeService(service);
  });
});

function normalizeKey(key) {
  return key.replace(/[^a-zA-Z0-9.-]/g, '').toLowerCase();
}

function normalizeService(service) {
  var filter = ['domains', 'aliases'];
  var response = {};
  Object.keys(service).forEach(function (key) {
    if (filter.indexOf(key) < 0) {
      response[key] = service[key];
    }
  });
  return response;
}
/**
 * Resolves SMTP config for given key. Key can be a name (like 'Gmail'), alias (like 'Google Mail') or
 * an email address (like 'test@googlemail.com').
 *
 * @param {String} key [description]
 * @returns {Object} SMTP config or false if not found
 */


module.exports = function (key) {
  key = normalizeKey(key.split('@').pop());
  return normalized[key] || false;
};

/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function bind(fn, thisArg) {
  return function wrap() {
    var args = new Array(arguments.length);

    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i];
    }

    return fn.apply(thisArg, args);
  };
};

/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

var utils = __webpack_require__(0);
/**
 * Convert a data object to FormData
 * @param {Object} obj
 * @param {?Object} [formData]
 * @returns {Object}
 **/


function toFormData(obj, formData) {
  // eslint-disable-next-line no-param-reassign
  formData = formData || new FormData();
  var stack = [];

  function convertValue(value) {
    if (value === null) return '';

    if (utils.isDate(value)) {
      return value.toISOString();
    }

    if (utils.isArrayBuffer(value) || utils.isTypedArray(value)) {
      return typeof Blob === 'function' ? new Blob([value]) : Buffer.from(value);
    }

    return value;
  }

  function build(data, parentKey) {
    if (utils.isPlainObject(data) || utils.isArray(data)) {
      if (stack.indexOf(data) !== -1) {
        throw Error('Circular reference detected in ' + parentKey);
      }

      stack.push(data);
      utils.forEach(data, function each(value, key) {
        if (utils.isUndefined(value)) return;
        var fullKey = parentKey ? parentKey + '.' + key : key;
        var arr;

        if (value && !parentKey && _typeof(value) === 'object') {
          if (utils.endsWith(key, '{}')) {
            // eslint-disable-next-line no-param-reassign
            value = JSON.stringify(value);
          } else if (utils.endsWith(key, '[]') && (arr = utils.toArray(value))) {
            // eslint-disable-next-line func-names
            arr.forEach(function (el) {
              !utils.isUndefined(el) && formData.append(fullKey, convertValue(el));
            });
            return;
          }
        }

        build(value, fullKey);
      });
      stack.pop();
    } else {
      formData.append(parentKey, convertValue(data));
    }
  }

  build(obj);
  return formData;
}

module.exports = toFormData;

/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var AxiosError = __webpack_require__(9);
/**
 * Resolve or reject a Promise based on response status.
 *
 * @param {Function} resolve A function that resolves the promise.
 * @param {Function} reject A function that rejects the promise.
 * @param {object} response The response.
 */


module.exports = function settle(resolve, reject, response) {
  var validateStatus = response.config.validateStatus;

  if (!response.status || !validateStatus || validateStatus(response.status)) {
    resolve(response);
  } else {
    reject(new AxiosError('Request failed with status code ' + response.status, [AxiosError.ERR_BAD_REQUEST, AxiosError.ERR_BAD_RESPONSE][Math.floor(response.status / 100) - 4], response.config, response.request, response));
  }
};

/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

var url = __webpack_require__(5);

var URL = url.URL;

var http = __webpack_require__(16);

var https = __webpack_require__(17);

var Writable = __webpack_require__(1).Writable;

var assert = __webpack_require__(107);

var debug = __webpack_require__(108); // Create handlers that pass events from native requests


var events = ["abort", "aborted", "connect", "error", "socket", "timeout"];
var eventHandlers = Object.create(null);
events.forEach(function (event) {
  eventHandlers[event] = function (arg1, arg2, arg3) {
    this._redirectable.emit(event, arg1, arg2, arg3);
  };
}); // Error types with codes

var RedirectionError = createErrorType("ERR_FR_REDIRECTION_FAILURE", "Redirected request failed");
var TooManyRedirectsError = createErrorType("ERR_FR_TOO_MANY_REDIRECTS", "Maximum number of redirects exceeded");
var MaxBodyLengthExceededError = createErrorType("ERR_FR_MAX_BODY_LENGTH_EXCEEDED", "Request body larger than maxBodyLength limit");
var WriteAfterEndError = createErrorType("ERR_STREAM_WRITE_AFTER_END", "write after end"); // An HTTP(S) request that can be redirected

function RedirectableRequest(options, responseCallback) {
  // Initialize the request
  Writable.call(this);

  this._sanitizeOptions(options);

  this._options = options;
  this._ended = false;
  this._ending = false;
  this._redirectCount = 0;
  this._redirects = [];
  this._requestBodyLength = 0;
  this._requestBodyBuffers = []; // Attach a callback if passed

  if (responseCallback) {
    this.on("response", responseCallback);
  } // React to responses of native requests


  var self = this;

  this._onNativeResponse = function (response) {
    self._processResponse(response);
  }; // Perform the first request


  this._performRequest();
}

RedirectableRequest.prototype = Object.create(Writable.prototype);

RedirectableRequest.prototype.abort = function () {
  abortRequest(this._currentRequest);
  this.emit("abort");
}; // Writes buffered data to the current native request


RedirectableRequest.prototype.write = function (data, encoding, callback) {
  // Writing is not allowed if end has been called
  if (this._ending) {
    throw new WriteAfterEndError();
  } // Validate input and shift parameters if necessary


  if (!(typeof data === "string" || _typeof(data) === "object" && "length" in data)) {
    throw new TypeError("data should be a string, Buffer or Uint8Array");
  }

  if (typeof encoding === "function") {
    callback = encoding;
    encoding = null;
  } // Ignore empty buffers, since writing them doesn't invoke the callback
  // https://github.com/nodejs/node/issues/22066


  if (data.length === 0) {
    if (callback) {
      callback();
    }

    return;
  } // Only write when we don't exceed the maximum body length


  if (this._requestBodyLength + data.length <= this._options.maxBodyLength) {
    this._requestBodyLength += data.length;

    this._requestBodyBuffers.push({
      data: data,
      encoding: encoding
    });

    this._currentRequest.write(data, encoding, callback);
  } // Error when we exceed the maximum body length
  else {
    this.emit("error", new MaxBodyLengthExceededError());
    this.abort();
  }
}; // Ends the current native request


RedirectableRequest.prototype.end = function (data, encoding, callback) {
  // Shift parameters if necessary
  if (typeof data === "function") {
    callback = data;
    data = encoding = null;
  } else if (typeof encoding === "function") {
    callback = encoding;
    encoding = null;
  } // Write data if needed and end


  if (!data) {
    this._ended = this._ending = true;

    this._currentRequest.end(null, null, callback);
  } else {
    var self = this;
    var currentRequest = this._currentRequest;
    this.write(data, encoding, function () {
      self._ended = true;
      currentRequest.end(null, null, callback);
    });
    this._ending = true;
  }
}; // Sets a header value on the current native request


RedirectableRequest.prototype.setHeader = function (name, value) {
  this._options.headers[name] = value;

  this._currentRequest.setHeader(name, value);
}; // Clears a header value on the current native request


RedirectableRequest.prototype.removeHeader = function (name) {
  delete this._options.headers[name];

  this._currentRequest.removeHeader(name);
}; // Global timeout for all underlying requests


RedirectableRequest.prototype.setTimeout = function (msecs, callback) {
  var self = this; // Destroys the socket on timeout

  function destroyOnTimeout(socket) {
    socket.setTimeout(msecs);
    socket.removeListener("timeout", socket.destroy);
    socket.addListener("timeout", socket.destroy);
  } // Sets up a timer to trigger a timeout event


  function startTimer(socket) {
    if (self._timeout) {
      clearTimeout(self._timeout);
    }

    self._timeout = setTimeout(function () {
      self.emit("timeout");
      clearTimer();
    }, msecs);
    destroyOnTimeout(socket);
  } // Stops a timeout from triggering


  function clearTimer() {
    // Clear the timeout
    if (self._timeout) {
      clearTimeout(self._timeout);
      self._timeout = null;
    } // Clean up all attached listeners


    self.removeListener("abort", clearTimer);
    self.removeListener("error", clearTimer);
    self.removeListener("response", clearTimer);

    if (callback) {
      self.removeListener("timeout", callback);
    }

    if (!self.socket) {
      self._currentRequest.removeListener("socket", startTimer);
    }
  } // Attach callback if passed


  if (callback) {
    this.on("timeout", callback);
  } // Start the timer if or when the socket is opened


  if (this.socket) {
    startTimer(this.socket);
  } else {
    this._currentRequest.once("socket", startTimer);
  } // Clean up on events


  this.on("socket", destroyOnTimeout);
  this.on("abort", clearTimer);
  this.on("error", clearTimer);
  this.on("response", clearTimer);
  return this;
}; // Proxy all other public ClientRequest methods


["flushHeaders", "getHeader", "setNoDelay", "setSocketKeepAlive"].forEach(function (method) {
  RedirectableRequest.prototype[method] = function (a, b) {
    return this._currentRequest[method](a, b);
  };
}); // Proxy all public ClientRequest properties

["aborted", "connection", "socket"].forEach(function (property) {
  Object.defineProperty(RedirectableRequest.prototype, property, {
    get: function get() {
      return this._currentRequest[property];
    }
  });
});

RedirectableRequest.prototype._sanitizeOptions = function (options) {
  // Ensure headers are always present
  if (!options.headers) {
    options.headers = {};
  } // Since http.request treats host as an alias of hostname,
  // but the url module interprets host as hostname plus port,
  // eliminate the host property to avoid confusion.


  if (options.host) {
    // Use hostname if set, because it has precedence
    if (!options.hostname) {
      options.hostname = options.host;
    }

    delete options.host;
  } // Complete the URL object when necessary


  if (!options.pathname && options.path) {
    var searchPos = options.path.indexOf("?");

    if (searchPos < 0) {
      options.pathname = options.path;
    } else {
      options.pathname = options.path.substring(0, searchPos);
      options.search = options.path.substring(searchPos);
    }
  }
}; // Executes the next native request (initial or redirect)


RedirectableRequest.prototype._performRequest = function () {
  // Load the native protocol
  var protocol = this._options.protocol;
  var nativeProtocol = this._options.nativeProtocols[protocol];

  if (!nativeProtocol) {
    this.emit("error", new TypeError("Unsupported protocol " + protocol));
    return;
  } // If specified, use the agent corresponding to the protocol
  // (HTTP and HTTPS use different types of agents)


  if (this._options.agents) {
    var scheme = protocol.slice(0, -1);
    this._options.agent = this._options.agents[scheme];
  } // Create the native request and set up its event handlers


  var request = this._currentRequest = nativeProtocol.request(this._options, this._onNativeResponse);
  request._redirectable = this;

  var _iterator = _createForOfIteratorHelper(events),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var event = _step.value;
      request.on(event, eventHandlers[event]);
    } // RFC7230§5.3.1: When making a request directly to an origin server, […]
    // a client MUST send only the absolute path […] as the request-target.

  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  this._currentUrl = /^\//.test(this._options.path) ? url.format(this._options) : // When making a request to a proxy, […]
  // a client MUST send the target URI in absolute-form […].
  this._currentUrl = this._options.path; // End a redirected request
  // (The first request must be ended explicitly with RedirectableRequest#end)

  if (this._isRedirect) {
    // Write the request entity and end
    var i = 0;
    var self = this;
    var buffers = this._requestBodyBuffers;

    (function writeNext(error) {
      // Only write if this request has not been redirected yet

      /* istanbul ignore else */
      if (request === self._currentRequest) {
        // Report any write errors

        /* istanbul ignore if */
        if (error) {
          self.emit("error", error);
        } // Write the next buffer if there are still left
        else if (i < buffers.length) {
          var buffer = buffers[i++];
          /* istanbul ignore else */

          if (!request.finished) {
            request.write(buffer.data, buffer.encoding, writeNext);
          }
        } // End the request if `end` has been called on us
        else if (self._ended) {
          request.end();
        }
      }
    })();
  }
}; // Processes a response from the current native request


RedirectableRequest.prototype._processResponse = function (response) {
  // Store the redirected response
  var statusCode = response.statusCode;

  if (this._options.trackRedirects) {
    this._redirects.push({
      url: this._currentUrl,
      headers: response.headers,
      statusCode: statusCode
    });
  } // RFC7231§6.4: The 3xx (Redirection) class of status code indicates
  // that further action needs to be taken by the user agent in order to
  // fulfill the request. If a Location header field is provided,
  // the user agent MAY automatically redirect its request to the URI
  // referenced by the Location field value,
  // even if the specific status code is not understood.
  // If the response is not a redirect; return it as-is


  var location = response.headers.location;

  if (!location || this._options.followRedirects === false || statusCode < 300 || statusCode >= 400) {
    response.responseUrl = this._currentUrl;
    response.redirects = this._redirects;
    this.emit("response", response); // Clean up

    this._requestBodyBuffers = [];
    return;
  } // The response is a redirect, so abort the current request


  abortRequest(this._currentRequest); // Discard the remainder of the response to avoid waiting for data

  response.destroy(); // RFC7231§6.4: A client SHOULD detect and intervene
  // in cyclical redirections (i.e., "infinite" redirection loops).

  if (++this._redirectCount > this._options.maxRedirects) {
    this.emit("error", new TooManyRedirectsError());
    return;
  } // Store the request headers if applicable


  var requestHeaders;
  var beforeRedirect = this._options.beforeRedirect;

  if (beforeRedirect) {
    requestHeaders = Object.assign({
      // The Host header was set by nativeProtocol.request
      Host: response.req.getHeader("host")
    }, this._options.headers);
  } // RFC7231§6.4: Automatic redirection needs to done with
  // care for methods not known to be safe, […]
  // RFC7231§6.4.2–3: For historical reasons, a user agent MAY change
  // the request method from POST to GET for the subsequent request.


  var method = this._options.method;

  if ((statusCode === 301 || statusCode === 302) && this._options.method === "POST" || // RFC7231§6.4.4: The 303 (See Other) status code indicates that
  // the server is redirecting the user agent to a different resource […]
  // A user agent can perform a retrieval request targeting that URI
  // (a GET or HEAD request if using HTTP) […]
  statusCode === 303 && !/^(?:GET|HEAD)$/.test(this._options.method)) {
    this._options.method = "GET"; // Drop a possible entity and headers related to it

    this._requestBodyBuffers = [];
    removeMatchingHeaders(/^content-/i, this._options.headers);
  } // Drop the Host header, as the redirect might lead to a different host


  var currentHostHeader = removeMatchingHeaders(/^host$/i, this._options.headers); // If the redirect is relative, carry over the host of the last request

  var currentUrlParts = url.parse(this._currentUrl);
  var currentHost = currentHostHeader || currentUrlParts.host;
  var currentUrl = /^\w+:/.test(location) ? this._currentUrl : url.format(Object.assign(currentUrlParts, {
    host: currentHost
  })); // Determine the URL of the redirection

  var redirectUrl;

  try {
    redirectUrl = url.resolve(currentUrl, location);
  } catch (cause) {
    this.emit("error", new RedirectionError(cause));
    return;
  } // Create the redirected request


  debug("redirecting to", redirectUrl);
  this._isRedirect = true;
  var redirectUrlParts = url.parse(redirectUrl);
  Object.assign(this._options, redirectUrlParts); // Drop confidential headers when redirecting to a less secure protocol
  // or to a different domain that is not a superdomain

  if (redirectUrlParts.protocol !== currentUrlParts.protocol && redirectUrlParts.protocol !== "https:" || redirectUrlParts.host !== currentHost && !isSubdomain(redirectUrlParts.host, currentHost)) {
    removeMatchingHeaders(/^(?:authorization|cookie)$/i, this._options.headers);
  } // Evaluate the beforeRedirect callback


  if (typeof beforeRedirect === "function") {
    var responseDetails = {
      headers: response.headers,
      statusCode: statusCode
    };
    var requestDetails = {
      url: currentUrl,
      method: method,
      headers: requestHeaders
    };

    try {
      beforeRedirect(this._options, responseDetails, requestDetails);
    } catch (err) {
      this.emit("error", err);
      return;
    }

    this._sanitizeOptions(this._options);
  } // Perform the redirected request


  try {
    this._performRequest();
  } catch (cause) {
    this.emit("error", new RedirectionError(cause));
  }
}; // Wraps the key/value object of protocols with redirect functionality


function wrap(protocols) {
  // Default settings
  var exports = {
    maxRedirects: 21,
    maxBodyLength: 10 * 1024 * 1024
  }; // Wrap each protocol

  var nativeProtocols = {};
  Object.keys(protocols).forEach(function (scheme) {
    var protocol = scheme + ":";
    var nativeProtocol = nativeProtocols[protocol] = protocols[scheme];
    var wrappedProtocol = exports[scheme] = Object.create(nativeProtocol); // Executes a request, following redirects

    function request(input, options, callback) {
      // Parse parameters
      if (typeof input === "string") {
        var urlStr = input;

        try {
          input = urlToOptions(new URL(urlStr));
        } catch (err) {
          /* istanbul ignore next */
          input = url.parse(urlStr);
        }
      } else if (URL && input instanceof URL) {
        input = urlToOptions(input);
      } else {
        callback = options;
        options = input;
        input = {
          protocol: protocol
        };
      }

      if (typeof options === "function") {
        callback = options;
        options = null;
      } // Set defaults


      options = Object.assign({
        maxRedirects: exports.maxRedirects,
        maxBodyLength: exports.maxBodyLength
      }, input, options);
      options.nativeProtocols = nativeProtocols;
      assert.equal(options.protocol, protocol, "protocol mismatch");
      debug("options", options);
      return new RedirectableRequest(options, callback);
    } // Executes a GET request, following redirects


    function get(input, options, callback) {
      var wrappedRequest = wrappedProtocol.request(input, options, callback);
      wrappedRequest.end();
      return wrappedRequest;
    } // Expose the properties on the wrapped protocol


    Object.defineProperties(wrappedProtocol, {
      request: {
        value: request,
        configurable: true,
        enumerable: true,
        writable: true
      },
      get: {
        value: get,
        configurable: true,
        enumerable: true,
        writable: true
      }
    });
  });
  return exports;
}
/* istanbul ignore next */


function noop() {
  /* empty */
} // from https://github.com/nodejs/node/blob/master/lib/internal/url.js


function urlToOptions(urlObject) {
  var options = {
    protocol: urlObject.protocol,
    hostname: urlObject.hostname.startsWith("[") ?
    /* istanbul ignore next */
    urlObject.hostname.slice(1, -1) : urlObject.hostname,
    hash: urlObject.hash,
    search: urlObject.search,
    pathname: urlObject.pathname,
    path: urlObject.pathname + urlObject.search,
    href: urlObject.href
  };

  if (urlObject.port !== "") {
    options.port = Number(urlObject.port);
  }

  return options;
}

function removeMatchingHeaders(regex, headers) {
  var lastValue;

  for (var header in headers) {
    if (regex.test(header)) {
      lastValue = headers[header];
      delete headers[header];
    }
  }

  return lastValue === null || typeof lastValue === "undefined" ? undefined : String(lastValue).trim();
}

function createErrorType(code, defaultMessage) {
  function CustomError(cause) {
    Error.captureStackTrace(this, this.constructor);

    if (!cause) {
      this.message = defaultMessage;
    } else {
      this.message = defaultMessage + ": " + cause.message;
      this.cause = cause;
    }
  }

  CustomError.prototype = new Error();
  CustomError.prototype.constructor = CustomError;
  CustomError.prototype.name = "Error [" + code + "]";
  CustomError.prototype.code = code;
  return CustomError;
}

function abortRequest(request) {
  var _iterator2 = _createForOfIteratorHelper(events),
      _step2;

  try {
    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
      var event = _step2.value;
      request.removeListener(event, eventHandlers[event]);
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }

  request.on("error", noop);
  request.abort();
}

function isSubdomain(subdomain, domain) {
  var dot = subdomain.length - domain.length - 1;
  return dot > 0 && subdomain[dot] === "." && subdomain.endsWith(domain);
} // Exports


module.exports = wrap({
  http: http,
  https: https
});
module.exports.wrap = wrap;

/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

/**
 * This is the common logic for both the Node.js and web browser
 * implementations of `debug()`.
 */
function setup(env) {
  createDebug.debug = createDebug;
  createDebug["default"] = createDebug;
  createDebug.coerce = coerce;
  createDebug.disable = disable;
  createDebug.enable = enable;
  createDebug.enabled = enabled;
  createDebug.humanize = __webpack_require__(111);
  createDebug.destroy = destroy;
  Object.keys(env).forEach(function (key) {
    createDebug[key] = env[key];
  });
  /**
  * The currently active debug mode names, and names to skip.
  */

  createDebug.names = [];
  createDebug.skips = [];
  /**
  * Map of special "%n" handling functions, for the debug "format" argument.
  *
  * Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
  */

  createDebug.formatters = {};
  /**
  * Selects a color for a debug namespace
  * @param {String} namespace The namespace string for the debug instance to be colored
  * @return {Number|String} An ANSI color code for the given namespace
  * @api private
  */

  function selectColor(namespace) {
    var hash = 0;

    for (var i = 0; i < namespace.length; i++) {
      hash = (hash << 5) - hash + namespace.charCodeAt(i);
      hash |= 0; // Convert to 32bit integer
    }

    return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
  }

  createDebug.selectColor = selectColor;
  /**
  * Create a debugger with the given `namespace`.
  *
  * @param {String} namespace
  * @return {Function}
  * @api public
  */

  function createDebug(namespace) {
    var prevTime;
    var enableOverride = null;
    var namespacesCache;
    var enabledCache;

    function debug() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      // Disabled?
      if (!debug.enabled) {
        return;
      }

      var self = debug; // Set `diff` timestamp

      var curr = Number(new Date());
      var ms = curr - (prevTime || curr);
      self.diff = ms;
      self.prev = prevTime;
      self.curr = curr;
      prevTime = curr;
      args[0] = createDebug.coerce(args[0]);

      if (typeof args[0] !== 'string') {
        // Anything else let's inspect with %O
        args.unshift('%O');
      } // Apply any `formatters` transformations


      var index = 0;
      args[0] = args[0].replace(/%([a-zA-Z%])/g, function (match, format) {
        // If we encounter an escaped % then don't increase the array index
        if (match === '%%') {
          return '%';
        }

        index++;
        var formatter = createDebug.formatters[format];

        if (typeof formatter === 'function') {
          var val = args[index];
          match = formatter.call(self, val); // Now we need to remove `args[index]` since it's inlined in the `format`

          args.splice(index, 1);
          index--;
        }

        return match;
      }); // Apply env-specific formatting (colors, etc.)

      createDebug.formatArgs.call(self, args);
      var logFn = self.log || createDebug.log;
      logFn.apply(self, args);
    }

    debug.namespace = namespace;
    debug.useColors = createDebug.useColors();
    debug.color = createDebug.selectColor(namespace);
    debug.extend = extend;
    debug.destroy = createDebug.destroy; // XXX Temporary. Will be removed in the next major release.

    Object.defineProperty(debug, 'enabled', {
      enumerable: true,
      configurable: false,
      get: function get() {
        if (enableOverride !== null) {
          return enableOverride;
        }

        if (namespacesCache !== createDebug.namespaces) {
          namespacesCache = createDebug.namespaces;
          enabledCache = createDebug.enabled(namespace);
        }

        return enabledCache;
      },
      set: function set(v) {
        enableOverride = v;
      }
    }); // Env-specific initialization logic for debug instances

    if (typeof createDebug.init === 'function') {
      createDebug.init(debug);
    }

    return debug;
  }

  function extend(namespace, delimiter) {
    var newDebug = createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);
    newDebug.log = this.log;
    return newDebug;
  }
  /**
  * Enables a debug mode by namespaces. This can include modes
  * separated by a colon and wildcards.
  *
  * @param {String} namespaces
  * @api public
  */


  function enable(namespaces) {
    createDebug.save(namespaces);
    createDebug.namespaces = namespaces;
    createDebug.names = [];
    createDebug.skips = [];
    var i;
    var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
    var len = split.length;

    for (i = 0; i < len; i++) {
      if (!split[i]) {
        // ignore empty strings
        continue;
      }

      namespaces = split[i].replace(/\*/g, '.*?');

      if (namespaces[0] === '-') {
        createDebug.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
      } else {
        createDebug.names.push(new RegExp('^' + namespaces + '$'));
      }
    }
  }
  /**
  * Disable debug output.
  *
  * @return {String} namespaces
  * @api public
  */


  function disable() {
    var namespaces = [].concat(_toConsumableArray(createDebug.names.map(toNamespace)), _toConsumableArray(createDebug.skips.map(toNamespace).map(function (namespace) {
      return '-' + namespace;
    }))).join(',');
    createDebug.enable('');
    return namespaces;
  }
  /**
  * Returns true if the given mode name is enabled, false otherwise.
  *
  * @param {String} name
  * @return {Boolean}
  * @api public
  */


  function enabled(name) {
    if (name[name.length - 1] === '*') {
      return true;
    }

    var i;
    var len;

    for (i = 0, len = createDebug.skips.length; i < len; i++) {
      if (createDebug.skips[i].test(name)) {
        return false;
      }
    }

    for (i = 0, len = createDebug.names.length; i < len; i++) {
      if (createDebug.names[i].test(name)) {
        return true;
      }
    }

    return false;
  }
  /**
  * Convert regexp to namespace
  *
  * @param {RegExp} regxep
  * @return {String} namespace
  * @api private
  */


  function toNamespace(regexp) {
    return regexp.toString().substring(2, regexp.toString().length - 2).replace(/\.\*\?$/, '*');
  }
  /**
  * Coerce `val`.
  *
  * @param {Mixed} val
  * @return {Mixed}
  * @api private
  */


  function coerce(val) {
    if (val instanceof Error) {
      return val.stack || val.message;
    }

    return val;
  }
  /**
  * XXX DO NOT USE. This is a temporary stub function.
  * XXX It WILL be removed in the next major release.
  */


  function destroy() {
    console.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');
  }

  createDebug.enable(createDebug.load());
  return createDebug;
}

module.exports = setup;

/***/ }),
/* 52 */
/***/ (function(module, exports) {

module.exports = require("tty");

/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var async = __webpack_require__(54),
    abort = __webpack_require__(55); // API


module.exports = iterate;
/**
 * Iterates over each job object
 *
 * @param {array|object} list - array or object (named list) to iterate over
 * @param {function} iterator - iterator to run
 * @param {object} state - current job status
 * @param {function} callback - invoked when all elements processed
 */

function iterate(list, iterator, state, callback) {
  // store current index
  var key = state['keyedList'] ? state['keyedList'][state.index] : state.index;
  state.jobs[key] = runJob(iterator, key, list[key], function (error, output) {
    // don't repeat yourself
    // skip secondary callbacks
    if (!(key in state.jobs)) {
      return;
    } // clean up jobs


    delete state.jobs[key];

    if (error) {
      // don't process rest of the results
      // stop still active jobs
      // and reset the list
      abort(state);
    } else {
      state.results[key] = output;
    } // return salvaged results


    callback(error, state.results);
  });
}
/**
 * Runs iterator over provided job element
 *
 * @param   {function} iterator - iterator to invoke
 * @param   {string|number} key - key/index of the element in the list of jobs
 * @param   {mixed} item - job description
 * @param   {function} callback - invoked after iterator is done with the job
 * @returns {function|mixed} - job abort function or something else
 */


function runJob(iterator, key, item, callback) {
  var aborter; // allow shortcut if iterator expects only two arguments

  if (iterator.length == 2) {
    aborter = iterator(item, async(callback));
  } // otherwise go with full three arguments
  else {
    aborter = iterator(item, key, async(callback));
  }

  return aborter;
}

/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var defer = __webpack_require__(124); // API


module.exports = async;
/**
 * Runs provided callback asynchronously
 * even if callback itself is not
 *
 * @param   {function} callback - callback to invoke
 * @returns {function} - augmented callback
 */

function async(callback) {
  var isAsync = false; // check if async happened

  defer(function () {
    isAsync = true;
  });
  return function async_callback(err, result) {
    if (isAsync) {
      callback(err, result);
    } else {
      defer(function nextTick_callback() {
        callback(err, result);
      });
    }
  };
}

/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// API
module.exports = abort;
/**
 * Aborts leftover active jobs
 *
 * @param {object} state - current state object
 */

function abort(state) {
  Object.keys(state.jobs).forEach(clean.bind(state)); // reset leftover jobs

  state.jobs = {};
}
/**
 * Cleans up leftover job by invoking abort function for the provided job id
 *
 * @this  state
 * @param {string|number} key - job id to abort
 */


function clean(key) {
  if (typeof this.jobs[key] == 'function') {
    this.jobs[key]();
  }
}

/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// API
module.exports = state;
/**
 * Creates initial state object
 * for iteration over list
 *
 * @param   {array|object} list - list to iterate over
 * @param   {function|null} sortMethod - function to use for keys sort,
 *                                     or `null` to keep them as is
 * @returns {object} - initial state object
 */

function state(list, sortMethod) {
  var isNamedList = !Array.isArray(list),
      initState = {
    index: 0,
    keyedList: isNamedList || sortMethod ? Object.keys(list) : null,
    jobs: {},
    results: isNamedList ? {} : [],
    size: isNamedList ? Object.keys(list).length : list.length
  };

  if (sortMethod) {
    // sort array keys based on it's values
    // sort object's keys just on own merit
    initState.keyedList.sort(isNamedList ? sortMethod : function (a, b) {
      return sortMethod(list[a], list[b]);
    });
  }

  return initState;
}

/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var abort = __webpack_require__(55),
    async = __webpack_require__(54); // API


module.exports = terminator;
/**
 * Terminates jobs in the attached state context
 *
 * @this  AsyncKitState#
 * @param {function} callback - final callback to invoke after termination
 */

function terminator(callback) {
  if (!Object.keys(this.jobs).length) {
    return;
  } // fast forward iteration index


  this.index = this.size; // abort jobs

  abort(this); // send back results we have so far

  async(callback)(null, this.results);
}

/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var iterate = __webpack_require__(53),
    initState = __webpack_require__(56),
    terminator = __webpack_require__(57); // Public API


module.exports = serialOrdered; // sorting helpers

module.exports.ascending = ascending;
module.exports.descending = descending;
/**
 * Runs iterator over provided sorted array elements in series
 *
 * @param   {array|object} list - array or object (named list) to iterate over
 * @param   {function} iterator - iterator to run
 * @param   {function} sortMethod - custom sort function
 * @param   {function} callback - invoked when all elements processed
 * @returns {function} - jobs terminator
 */

function serialOrdered(list, iterator, sortMethod, callback) {
  var state = initState(list, sortMethod);
  iterate(list, iterator, state, function iteratorHandler(error, result) {
    if (error) {
      callback(error, result);
      return;
    }

    state.index++; // are we there yet?

    if (state.index < (state['keyedList'] || list).length) {
      iterate(list, iterator, state, iteratorHandler);
      return;
    } // done here


    callback(null, state.results);
  });
  return terminator.bind(state, callback);
}
/*
 * -- Sort methods
 */

/**
 * sort helper to sort array elements in ascending order
 *
 * @param   {mixed} a - an item to compare
 * @param   {mixed} b - an item to compare
 * @returns {number} - comparison result
 */


function ascending(a, b) {
  return a < b ? -1 : a > b ? 1 : 0;
}
/**
 * sort helper to sort array elements in descending order
 *
 * @param   {mixed} a - an item to compare
 * @param   {mixed} b - an item to compare
 * @returns {number} - comparison result
 */


function descending(a, b) {
  return -1 * ascending(a, b);
}

/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function isCancel(value) {
  return !!(value && value.__CANCEL__);
};

/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(0);
/**
 * Config-specific merge-function which creates a new config-object
 * by merging two configuration objects together.
 *
 * @param {Object} config1
 * @param {Object} config2
 * @returns {Object} New object resulting from merging config2 to config1
 */


module.exports = function mergeConfig(config1, config2) {
  // eslint-disable-next-line no-param-reassign
  config2 = config2 || {};
  var config = {};

  function getMergedValue(target, source) {
    if (utils.isPlainObject(target) && utils.isPlainObject(source)) {
      return utils.merge(target, source);
    } else if (utils.isPlainObject(source)) {
      return utils.merge({}, source);
    } else if (utils.isArray(source)) {
      return source.slice();
    }

    return source;
  } // eslint-disable-next-line consistent-return


  function mergeDeepProperties(prop) {
    if (!utils.isUndefined(config2[prop])) {
      return getMergedValue(config1[prop], config2[prop]);
    } else if (!utils.isUndefined(config1[prop])) {
      return getMergedValue(undefined, config1[prop]);
    }
  } // eslint-disable-next-line consistent-return


  function valueFromConfig2(prop) {
    if (!utils.isUndefined(config2[prop])) {
      return getMergedValue(undefined, config2[prop]);
    }
  } // eslint-disable-next-line consistent-return


  function defaultToConfig2(prop) {
    if (!utils.isUndefined(config2[prop])) {
      return getMergedValue(undefined, config2[prop]);
    } else if (!utils.isUndefined(config1[prop])) {
      return getMergedValue(undefined, config1[prop]);
    }
  } // eslint-disable-next-line consistent-return


  function mergeDirectKeys(prop) {
    if (prop in config2) {
      return getMergedValue(config1[prop], config2[prop]);
    } else if (prop in config1) {
      return getMergedValue(undefined, config1[prop]);
    }
  }

  var mergeMap = {
    'url': valueFromConfig2,
    'method': valueFromConfig2,
    'data': valueFromConfig2,
    'baseURL': defaultToConfig2,
    'transformRequest': defaultToConfig2,
    'transformResponse': defaultToConfig2,
    'paramsSerializer': defaultToConfig2,
    'timeout': defaultToConfig2,
    'timeoutMessage': defaultToConfig2,
    'withCredentials': defaultToConfig2,
    'adapter': defaultToConfig2,
    'responseType': defaultToConfig2,
    'xsrfCookieName': defaultToConfig2,
    'xsrfHeaderName': defaultToConfig2,
    'onUploadProgress': defaultToConfig2,
    'onDownloadProgress': defaultToConfig2,
    'decompress': defaultToConfig2,
    'maxContentLength': defaultToConfig2,
    'maxBodyLength': defaultToConfig2,
    'beforeRedirect': defaultToConfig2,
    'transport': defaultToConfig2,
    'httpAgent': defaultToConfig2,
    'httpsAgent': defaultToConfig2,
    'cancelToken': defaultToConfig2,
    'socketPath': defaultToConfig2,
    'responseEncoding': defaultToConfig2,
    'validateStatus': mergeDirectKeys
  };
  utils.forEach(Object.keys(config1).concat(Object.keys(config2)), function computeConfigValue(prop) {
    var merge = mergeMap[prop] || mergeDeepProperties;
    var configValue = merge(prop);
    utils.isUndefined(configValue) && merge !== mergeDirectKeys || (config[prop] = configValue);
  });
  return config;
};

/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

var formats = __webpack_require__(33);

var has = Object.prototype.hasOwnProperty;
var isArray = Array.isArray;

var hexTable = function () {
  var array = [];

  for (var i = 0; i < 256; ++i) {
    array.push('%' + ((i < 16 ? '0' : '') + i.toString(16)).toUpperCase());
  }

  return array;
}();

var compactQueue = function compactQueue(queue) {
  while (queue.length > 1) {
    var item = queue.pop();
    var obj = item.obj[item.prop];

    if (isArray(obj)) {
      var compacted = [];

      for (var j = 0; j < obj.length; ++j) {
        if (typeof obj[j] !== 'undefined') {
          compacted.push(obj[j]);
        }
      }

      item.obj[item.prop] = compacted;
    }
  }
};

var arrayToObject = function arrayToObject(source, options) {
  var obj = options && options.plainObjects ? Object.create(null) : {};

  for (var i = 0; i < source.length; ++i) {
    if (typeof source[i] !== 'undefined') {
      obj[i] = source[i];
    }
  }

  return obj;
};

var merge = function merge(target, source, options) {
  /* eslint no-param-reassign: 0 */
  if (!source) {
    return target;
  }

  if (_typeof(source) !== 'object') {
    if (isArray(target)) {
      target.push(source);
    } else if (target && _typeof(target) === 'object') {
      if (options && (options.plainObjects || options.allowPrototypes) || !has.call(Object.prototype, source)) {
        target[source] = true;
      }
    } else {
      return [target, source];
    }

    return target;
  }

  if (!target || _typeof(target) !== 'object') {
    return [target].concat(source);
  }

  var mergeTarget = target;

  if (isArray(target) && !isArray(source)) {
    mergeTarget = arrayToObject(target, options);
  }

  if (isArray(target) && isArray(source)) {
    source.forEach(function (item, i) {
      if (has.call(target, i)) {
        var targetItem = target[i];

        if (targetItem && _typeof(targetItem) === 'object' && item && _typeof(item) === 'object') {
          target[i] = merge(targetItem, item, options);
        } else {
          target.push(item);
        }
      } else {
        target[i] = item;
      }
    });
    return target;
  }

  return Object.keys(source).reduce(function (acc, key) {
    var value = source[key];

    if (has.call(acc, key)) {
      acc[key] = merge(acc[key], value, options);
    } else {
      acc[key] = value;
    }

    return acc;
  }, mergeTarget);
};

var assign = function assignSingleSource(target, source) {
  return Object.keys(source).reduce(function (acc, key) {
    acc[key] = source[key];
    return acc;
  }, target);
};

var decode = function decode(str, decoder, charset) {
  var strWithoutPlus = str.replace(/\+/g, ' ');

  if (charset === 'iso-8859-1') {
    // unescape never throws, no try...catch needed:
    return strWithoutPlus.replace(/%[0-9a-f]{2}/gi, unescape);
  } // utf-8


  try {
    return decodeURIComponent(strWithoutPlus);
  } catch (e) {
    return strWithoutPlus;
  }
};

var encode = function encode(str, defaultEncoder, charset, kind, format) {
  // This code was originally written by Brian White (mscdex) for the io.js core querystring library.
  // It has been adapted here for stricter adherence to RFC 3986
  if (str.length === 0) {
    return str;
  }

  var string = str;

  if (_typeof(str) === 'symbol') {
    string = Symbol.prototype.toString.call(str);
  } else if (typeof str !== 'string') {
    string = String(str);
  }

  if (charset === 'iso-8859-1') {
    return escape(string).replace(/%u[0-9a-f]{4}/gi, function ($0) {
      return '%26%23' + parseInt($0.slice(2), 16) + '%3B';
    });
  }

  var out = '';

  for (var i = 0; i < string.length; ++i) {
    var c = string.charCodeAt(i);

    if (c === 0x2D // -
    || c === 0x2E // .
    || c === 0x5F // _
    || c === 0x7E // ~
    || c >= 0x30 && c <= 0x39 // 0-9
    || c >= 0x41 && c <= 0x5A // a-z
    || c >= 0x61 && c <= 0x7A // A-Z
    || format === formats.RFC1738 && (c === 0x28 || c === 0x29) // ( )
    ) {
      out += string.charAt(i);
      continue;
    }

    if (c < 0x80) {
      out = out + hexTable[c];
      continue;
    }

    if (c < 0x800) {
      out = out + (hexTable[0xC0 | c >> 6] + hexTable[0x80 | c & 0x3F]);
      continue;
    }

    if (c < 0xD800 || c >= 0xE000) {
      out = out + (hexTable[0xE0 | c >> 12] + hexTable[0x80 | c >> 6 & 0x3F] + hexTable[0x80 | c & 0x3F]);
      continue;
    }

    i += 1;
    c = 0x10000 + ((c & 0x3FF) << 10 | string.charCodeAt(i) & 0x3FF);
    /* eslint operator-linebreak: [2, "before"] */

    out += hexTable[0xF0 | c >> 18] + hexTable[0x80 | c >> 12 & 0x3F] + hexTable[0x80 | c >> 6 & 0x3F] + hexTable[0x80 | c & 0x3F];
  }

  return out;
};

var compact = function compact(value) {
  var queue = [{
    obj: {
      o: value
    },
    prop: 'o'
  }];
  var refs = [];

  for (var i = 0; i < queue.length; ++i) {
    var item = queue[i];
    var obj = item.obj[item.prop];
    var keys = Object.keys(obj);

    for (var j = 0; j < keys.length; ++j) {
      var key = keys[j];
      var val = obj[key];

      if (_typeof(val) === 'object' && val !== null && refs.indexOf(val) === -1) {
        queue.push({
          obj: obj,
          prop: key
        });
        refs.push(val);
      }
    }
  }

  compactQueue(queue);
  return value;
};

var isRegExp = function isRegExp(obj) {
  return Object.prototype.toString.call(obj) === '[object RegExp]';
};

var isBuffer = function isBuffer(obj) {
  if (!obj || _typeof(obj) !== 'object') {
    return false;
  }

  return !!(obj.constructor && obj.constructor.isBuffer && obj.constructor.isBuffer(obj));
};

var combine = function combine(a, b) {
  return [].concat(a, b);
};

var maybeMap = function maybeMap(val, fn) {
  if (isArray(val)) {
    var mapped = [];

    for (var i = 0; i < val.length; i += 1) {
      mapped.push(fn(val[i]));
    }

    return mapped;
  }

  return fn(val);
};

module.exports = {
  arrayToObject: arrayToObject,
  assign: assign,
  combine: combine,
  compact: compact,
  decode: decode,
  encode: encode,
  isBuffer: isBuffer,
  isRegExp: isRegExp,
  maybeMap: maybeMap,
  merge: merge
};

/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = mixinStringifySafe;

var _jsonStringifySafe = _interopRequireDefault(__webpack_require__(150));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function mixinStringifySafe(data) {
  return Object.defineProperty(data, 'stringifySafe', {
    enumerable: false,
    configurable: false,
    writable: false,
    value: function value() {
      var serializer = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      var indent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
      return (0, _jsonStringifySafe["default"])(this, serializer, indent, function (key, value) {
        return {
          sys: {
            type: 'Link',
            linkType: 'Entry',
            id: value.sys.id,
            circular: true
          }
        };
      });
    }
  });
}

/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _fastCopy = _interopRequireDefault(__webpack_require__(6));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof2(obj) { "@babel/helpers - typeof"; return _typeof2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof2(obj); }

var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
  return _typeof2(obj);
} : function (obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof2(obj);
};

function _toConsumableArray(arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
      arr2[i] = arr[i];
    }

    return arr2;
  } else {
    return Array.from(arr);
  }
}

var UNRESOLVED_LINK = {}; // unique object to avoid polyfill bloat using Symbol()

/**
 * isLink Function
 * Checks if the object has sys.type "Link"
 * @param object
 */

var isLink = function isLink(object) {
  return object && object.sys && object.sys.type === 'Link';
};
/**
 * Creates a string key for lookup in entityMap
 *
 * @param {*} sys
 * @param {String} sys.type
 * @param {String} sys.id
 * @return {String}
 */


var makeLookupKey = function makeLookupKey(sys) {
  return sys.type + '!' + sys.id;
};
/**
 * getLink Function
 *
 * @param response
 * @param link
 * @return {undefined}
 */


var getLink = function getLink(entityMap, link) {
  var _link$sys = link.sys,
      type = _link$sys.linkType,
      id = _link$sys.id;
  var lookupKey = makeLookupKey({
    type: type,
    id: id
  });
  return entityMap.get(lookupKey) || UNRESOLVED_LINK;
};
/**
 * cleanUpLinks Function
 * - Removes unresolvable links from Arrays and Objects
 *
 * @param {Object[]|Object} input
 */


var cleanUpLinks = function cleanUpLinks(input) {
  if (Array.isArray(input)) {
    return input.filter(function (val) {
      return val !== UNRESOLVED_LINK;
    });
  }

  for (var key in input) {
    if (input[key] === UNRESOLVED_LINK) {
      delete input[key];
    }
  }

  return input;
};
/**
 * walkMutate Function
 * @param input
 * @param predicate
 * @param mutator
 * @return {*}
 */


var walkMutate = function walkMutate(input, predicate, mutator, removeUnresolved) {
  if (predicate(input)) {
    return mutator(input);
  }

  if (input && (typeof input === 'undefined' ? 'undefined' : _typeof(input)) === 'object') {
    for (var key in input) {
      // eslint-disable-next-line no-prototype-builtins
      if (input.hasOwnProperty(key)) {
        input[key] = walkMutate(input[key], predicate, mutator, removeUnresolved);
      }
    }

    if (removeUnresolved) {
      input = cleanUpLinks(input);
    }
  }

  return input;
};

var normalizeLink = function normalizeLink(entityMap, link, removeUnresolved) {
  var resolvedLink = getLink(entityMap, link);

  if (resolvedLink === UNRESOLVED_LINK) {
    return removeUnresolved ? resolvedLink : link;
  }

  return resolvedLink;
};

var makeEntryObject = function makeEntryObject(item, itemEntryPoints) {
  if (!Array.isArray(itemEntryPoints)) {
    return item;
  }

  var entryPoints = Object.keys(item).filter(function (ownKey) {
    return itemEntryPoints.indexOf(ownKey) !== -1;
  });
  return entryPoints.reduce(function (entryObj, entryPoint) {
    entryObj[entryPoint] = item[entryPoint];
    return entryObj;
  }, {});
};
/**
 * resolveResponse Function
 * Resolves contentful response to normalized form.
 * @param {Object} response Contentful response
 * @param {{removeUnresolved: Boolean, itemEntryPoints: Array<String>}|{}} options
 * @param {Boolean} options.removeUnresolved - Remove unresolved links default:false
 * @param {Array<String>} options.itemEntryPoints - Resolve links only in those item properties
 * @return {Object}
 */


var resolveResponse = function resolveResponse(response, options) {
  options = options || {};

  if (!response.items) {
    return [];
  }

  var responseClone = (0, _fastCopy["default"])(response);
  var allIncludes = Object.keys(responseClone.includes || {}).reduce(function (all, type) {
    return [].concat(_toConsumableArray(all), _toConsumableArray(response.includes[type]));
  }, []);
  var allEntries = [].concat(_toConsumableArray(responseClone.items), _toConsumableArray(allIncludes));
  var entityMap = new Map(allEntries.map(function (entity) {
    return [makeLookupKey(entity.sys), entity];
  }));
  allEntries.forEach(function (item) {
    var entryObject = makeEntryObject(item, options.itemEntryPoints);
    Object.assign(item, walkMutate(entryObject, isLink, function (link) {
      return normalizeLink(entityMap, link, options.removeUnresolved);
    }, options.removeUnresolved));
  });
  return responseClone.items;
};

var _default = resolveResponse;
exports["default"] = _default;

/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ApiRoot = void 0;
exports.createApiBuilderFromCtpClient = createApiBuilderFromCtpClient;
exports.createExecutorFromMiddlewares = void 0;

var _querystring = __webpack_require__(35);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty2(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate <raml_file_path> -o <output_path> -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


function isDefined(value) {
  return typeof value !== 'undefined' && value !== null;
}

function cleanObject(obj) {
  return Object.keys(obj).reduce(function (result, key) {
    var value = obj[key];

    if (Array.isArray(value)) {
      var values = value.filter(isDefined);

      if (!values.length) {
        return result;
      }

      return _objectSpread(_objectSpread({}, result), {}, _defineProperty2({}, key, values));
    }

    if (isDefined(value)) {
      return _objectSpread(_objectSpread({}, result), {}, _defineProperty2({}, key, value));
    }

    return result;
  }, {});
}

function formatQueryString(variableMap) {
  var map = cleanObject(variableMap);
  var result = (0, _querystring.stringify)(map);

  if (result === '') {
    return '';
  }

  return "?".concat(result);
}

function buildRelativeUri(commonRequest) {
  var pathMap = commonRequest.pathVariables;
  var uri = commonRequest.uriTemplate;

  for (var param in pathMap) {
    uri = uri.replace("{".concat(param, "}"), "".concat(pathMap[param]));
  }

  var resQuery = formatQueryString(commonRequest.queryParams || {});
  return "".concat(uri).concat(resQuery);
}

var ApiRequest = /*#__PURE__*/function () {
  function ApiRequest(request, requestExecutor) {
    _classCallCheck(this, ApiRequest);

    this.requestExecutor = requestExecutor;

    _defineProperty(this, "request", void 0);

    this.request = _objectSpread(_objectSpread({}, request), {}, {
      uri: buildRelativeUri(request)
    });
  }

  _createClass(ApiRequest, [{
    key: "clientRequest",
    value: function clientRequest() {
      return this.request;
    }
  }, {
    key: "execute",
    value: function execute() {
      return this.requestExecutor(this.request);
    }
  }]);

  return ApiRequest;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyApiClientsByIDRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyApiClientsByIDRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyApiClientsByIDRequestBuilder);

    this.args = args;
  }

  _createClass(ByProjectKeyApiClientsByIDRequestBuilder, [{
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/api-clients/{ID}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      }, this.args.executeRequest);
    }
  }, {
    key: "delete",
    value: function _delete(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'DELETE',
        uriTemplate: '/{projectKey}/api-clients/{ID}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyApiClientsByIDRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyApiClientsRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyApiClientsRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyApiClientsRequestBuilder);

    this.args = args;
  }

  _createClass(ByProjectKeyApiClientsRequestBuilder, [{
    key: "withId",
    value: function withId(childPathArgs) {
      return new ByProjectKeyApiClientsByIDRequestBuilder({
        pathArgs: _objectSpread(_objectSpread({}, this.args.pathArgs), childPathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
  }, {
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/api-clients',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }, {
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/api-clients',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyApiClientsRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyAttributeGroupsByIDRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyAttributeGroupsByIDRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyAttributeGroupsByIDRequestBuilder);

    this.args = args;
  }

  _createClass(ByProjectKeyAttributeGroupsByIDRequestBuilder, [{
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/attribute-groups/{ID}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }, {
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/attribute-groups/{ID}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }, {
    key: "delete",
    value: function _delete(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'DELETE',
        uriTemplate: '/{projectKey}/attribute-groups/{ID}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyAttributeGroupsByIDRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyAttributeGroupsKeyByKeyRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyAttributeGroupsKeyByKeyRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyAttributeGroupsKeyByKeyRequestBuilder);

    this.args = args;
  }

  _createClass(ByProjectKeyAttributeGroupsKeyByKeyRequestBuilder, [{
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/attribute-groups/key={key}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }, {
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/attribute-groups/key={key}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }, {
    key: "delete",
    value: function _delete(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'DELETE',
        uriTemplate: '/{projectKey}/attribute-groups/key={key}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyAttributeGroupsKeyByKeyRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyAttributeGroupsRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyAttributeGroupsRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyAttributeGroupsRequestBuilder);

    this.args = args;
  }

  _createClass(ByProjectKeyAttributeGroupsRequestBuilder, [{
    key: "withKey",
    value: function withKey(childPathArgs) {
      return new ByProjectKeyAttributeGroupsKeyByKeyRequestBuilder({
        pathArgs: _objectSpread(_objectSpread({}, this.args.pathArgs), childPathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
  }, {
    key: "withId",
    value: function withId(childPathArgs) {
      return new ByProjectKeyAttributeGroupsByIDRequestBuilder({
        pathArgs: _objectSpread(_objectSpread({}, this.args.pathArgs), childPathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
  }, {
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/attribute-groups',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }, {
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/attribute-groups',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyAttributeGroupsRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyBusinessUnitsByIDRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyBusinessUnitsByIDRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyBusinessUnitsByIDRequestBuilder);

    this.args = args;
  }

  _createClass(ByProjectKeyBusinessUnitsByIDRequestBuilder, [{
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/business-units/{ID}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }, {
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/business-units/{ID}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }, {
    key: "delete",
    value: function _delete(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'DELETE',
        uriTemplate: '/{projectKey}/business-units/{ID}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyBusinessUnitsByIDRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyBusinessUnitsKeyByKeyRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyBusinessUnitsKeyByKeyRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyBusinessUnitsKeyByKeyRequestBuilder);

    this.args = args;
  }

  _createClass(ByProjectKeyBusinessUnitsKeyByKeyRequestBuilder, [{
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/business-units/key={key}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }, {
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/business-units/key={key}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }, {
    key: "delete",
    value: function _delete(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'DELETE',
        uriTemplate: '/{projectKey}/business-units/key={key}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyBusinessUnitsKeyByKeyRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyBusinessUnitsRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyBusinessUnitsRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyBusinessUnitsRequestBuilder);

    this.args = args;
  }

  _createClass(ByProjectKeyBusinessUnitsRequestBuilder, [{
    key: "withKey",
    value: function withKey(childPathArgs) {
      return new ByProjectKeyBusinessUnitsKeyByKeyRequestBuilder({
        pathArgs: _objectSpread(_objectSpread({}, this.args.pathArgs), childPathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
  }, {
    key: "withId",
    value: function withId(childPathArgs) {
      return new ByProjectKeyBusinessUnitsByIDRequestBuilder({
        pathArgs: _objectSpread(_objectSpread({}, this.args.pathArgs), childPathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
  }, {
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/business-units',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }, {
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/business-units',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyBusinessUnitsRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyCartDiscountsByIDRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyCartDiscountsByIDRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyCartDiscountsByIDRequestBuilder);

    this.args = args;
  }

  _createClass(ByProjectKeyCartDiscountsByIDRequestBuilder, [{
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/cart-discounts/{ID}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }, {
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/cart-discounts/{ID}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }, {
    key: "delete",
    value: function _delete(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'DELETE',
        uriTemplate: '/{projectKey}/cart-discounts/{ID}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyCartDiscountsByIDRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyCartDiscountsKeyByKeyRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyCartDiscountsKeyByKeyRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyCartDiscountsKeyByKeyRequestBuilder);

    this.args = args;
  }

  _createClass(ByProjectKeyCartDiscountsKeyByKeyRequestBuilder, [{
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/cart-discounts/key={key}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }, {
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/cart-discounts/key={key}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }, {
    key: "delete",
    value: function _delete(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'DELETE',
        uriTemplate: '/{projectKey}/cart-discounts/key={key}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyCartDiscountsKeyByKeyRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyCartDiscountsRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyCartDiscountsRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyCartDiscountsRequestBuilder);

    this.args = args;
  }

  _createClass(ByProjectKeyCartDiscountsRequestBuilder, [{
    key: "withKey",
    value: function withKey(childPathArgs) {
      return new ByProjectKeyCartDiscountsKeyByKeyRequestBuilder({
        pathArgs: _objectSpread(_objectSpread({}, this.args.pathArgs), childPathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
  }, {
    key: "withId",
    value: function withId(childPathArgs) {
      return new ByProjectKeyCartDiscountsByIDRequestBuilder({
        pathArgs: _objectSpread(_objectSpread({}, this.args.pathArgs), childPathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
  }, {
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/cart-discounts',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }, {
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/cart-discounts',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyCartDiscountsRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyCartsReplicateRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyCartsReplicateRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyCartsReplicateRequestBuilder);

    this.args = args;
  }

  _createClass(ByProjectKeyCartsReplicateRequestBuilder, [{
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/carts/replicate',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyCartsReplicateRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyCartsByIDRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyCartsByIDRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyCartsByIDRequestBuilder);

    this.args = args;
  }
  /**
   *	The cart may not contain up-to-date prices, discounts etc.
   *	If you want to ensure they're up-to-date, send an Update request with the Recalculate update action instead.
   *
   */


  _createClass(ByProjectKeyCartsByIDRequestBuilder, [{
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/carts/{ID}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }, {
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/carts/{ID}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }, {
    key: "delete",
    value: function _delete(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'DELETE',
        uriTemplate: '/{projectKey}/carts/{ID}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyCartsByIDRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyCartsCustomerIdByCustomerIdRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyCartsCustomerIdByCustomerIdRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyCartsCustomerIdByCustomerIdRequestBuilder);

    this.args = args;
  }
  /**
   *	Retrieves the active cart of the customer that has been modified most recently.
   *	It does not consider carts with CartOrigin Merchant. If no active cart exists, a 404 Not Found error is returned.
   *
   *	The cart may not contain up-to-date prices, discounts etc. If you want to ensure they're up-to-date,
   *	send an Update request with the Recalculate update action instead.
   *
   */


  _createClass(ByProjectKeyCartsCustomerIdByCustomerIdRequestBuilder, [{
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/carts/customer-id={customerId}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyCartsCustomerIdByCustomerIdRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyCartsKeyByKeyRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyCartsKeyByKeyRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyCartsKeyByKeyRequestBuilder);

    this.args = args;
  }
  /**
   *	The cart may not contain up-to-date prices, discounts etc.
   *	If you want to ensure they're up-to-date, send an Update request with the Recalculate update action instead.
   *
   */


  _createClass(ByProjectKeyCartsKeyByKeyRequestBuilder, [{
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/carts/key={key}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }, {
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/carts/key={key}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }, {
    key: "delete",
    value: function _delete(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'DELETE',
        uriTemplate: '/{projectKey}/carts/key={key}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyCartsKeyByKeyRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyCartsRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyCartsRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyCartsRequestBuilder);

    this.args = args;
  }

  _createClass(ByProjectKeyCartsRequestBuilder, [{
    key: "replicate",
    value: function replicate() {
      return new ByProjectKeyCartsReplicateRequestBuilder({
        pathArgs: _objectSpread({}, this.args.pathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
  }, {
    key: "withCustomerId",
    value: function withCustomerId(childPathArgs) {
      return new ByProjectKeyCartsCustomerIdByCustomerIdRequestBuilder({
        pathArgs: _objectSpread(_objectSpread({}, this.args.pathArgs), childPathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
  }, {
    key: "withKey",
    value: function withKey(childPathArgs) {
      return new ByProjectKeyCartsKeyByKeyRequestBuilder({
        pathArgs: _objectSpread(_objectSpread({}, this.args.pathArgs), childPathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
  }, {
    key: "withId",
    value: function withId(childPathArgs) {
      return new ByProjectKeyCartsByIDRequestBuilder({
        pathArgs: _objectSpread(_objectSpread({}, this.args.pathArgs), childPathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
  }, {
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/carts',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
    /**
     *	Creating a cart can fail with an InvalidOperation if the referenced shipping method in the
     *	CartDraft has a predicate which does not match the cart.
     *
     */

  }, {
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/carts',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyCartsRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyCategoriesByIDRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyCategoriesByIDRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyCategoriesByIDRequestBuilder);

    this.args = args;
  }
  /**
   *	Either the [scope](/../api/scopes) `view_products:{projectKey}` or `view_categories:{projectKey}` is required.
   *
   */


  _createClass(ByProjectKeyCategoriesByIDRequestBuilder, [{
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/categories/{ID}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
    /**
     *	Either the [scope](/../api/scopes) `manage_products:{projectKey}` or `manage_categories:{projectKey}` is required.
     *
     */

  }, {
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/categories/{ID}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
    /**
     *	Either the [scope](/../api/scopes) `manage_products:{projectKey}` or `manage_categories:{projectKey}` is required.
     *
     */

  }, {
    key: "delete",
    value: function _delete(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'DELETE',
        uriTemplate: '/{projectKey}/categories/{ID}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyCategoriesByIDRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyCategoriesKeyByKeyRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyCategoriesKeyByKeyRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyCategoriesKeyByKeyRequestBuilder);

    this.args = args;
  }
  /**
   *	Either the [scope](/../api/scopes) `view_products:{projectKey}` or `view_categories:{projectKey}` is required.
   *
   */


  _createClass(ByProjectKeyCategoriesKeyByKeyRequestBuilder, [{
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/categories/key={key}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
    /**
     *	Either the [scope](/../api/scopes) `manage_products:{projectKey}` or `manage_categories:{projectKey}` is required.
     *
     */

  }, {
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/categories/key={key}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
    /**
     *	Either the [scope](/../api/scopes) `manage_products:{projectKey}` or `manage_categories:{projectKey}` is required.
     *
     */

  }, {
    key: "delete",
    value: function _delete(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'DELETE',
        uriTemplate: '/{projectKey}/categories/key={key}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyCategoriesKeyByKeyRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyCategoriesRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyCategoriesRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyCategoriesRequestBuilder);

    this.args = args;
  }

  _createClass(ByProjectKeyCategoriesRequestBuilder, [{
    key: "withKey",
    value: function withKey(childPathArgs) {
      return new ByProjectKeyCategoriesKeyByKeyRequestBuilder({
        pathArgs: _objectSpread(_objectSpread({}, this.args.pathArgs), childPathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
  }, {
    key: "withId",
    value: function withId(childPathArgs) {
      return new ByProjectKeyCategoriesByIDRequestBuilder({
        pathArgs: _objectSpread(_objectSpread({}, this.args.pathArgs), childPathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
    /**
     *	Either the [scope](/../api/scopes) `view_products:{projectKey}` or `view_categories:{projectKey}` is required.
     *
     */

  }, {
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/categories',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
    /**
     *	Either the [scope](/../api/scopes) `manage_products:{projectKey}` or `manage_categories:{projectKey}` is required.
     *
     *	Creating a Category produces the [CategoryCreated](ctp:api:type:CategoryCreatedMessage) Message.
     *
     */

  }, {
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/categories',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyCategoriesRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyChannelsByIDRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyChannelsByIDRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyChannelsByIDRequestBuilder);

    this.args = args;
  }

  _createClass(ByProjectKeyChannelsByIDRequestBuilder, [{
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/channels/{ID}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }, {
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/channels/{ID}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }, {
    key: "delete",
    value: function _delete(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'DELETE',
        uriTemplate: '/{projectKey}/channels/{ID}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyChannelsByIDRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyChannelsRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyChannelsRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyChannelsRequestBuilder);

    this.args = args;
  }

  _createClass(ByProjectKeyChannelsRequestBuilder, [{
    key: "withId",
    value: function withId(childPathArgs) {
      return new ByProjectKeyChannelsByIDRequestBuilder({
        pathArgs: _objectSpread(_objectSpread({}, this.args.pathArgs), childPathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
  }, {
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/channels',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }, {
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/channels',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyChannelsRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyCustomObjectsByContainerByKeyRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyCustomObjectsByContainerByKeyRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyCustomObjectsByContainerByKeyRequestBuilder);

    this.args = args;
  }

  _createClass(ByProjectKeyCustomObjectsByContainerByKeyRequestBuilder, [{
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/custom-objects/{container}/{key}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }, {
    key: "delete",
    value: function _delete(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'DELETE',
        uriTemplate: '/{projectKey}/custom-objects/{container}/{key}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyCustomObjectsByContainerByKeyRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyCustomObjectsByContainerRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyCustomObjectsByContainerRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyCustomObjectsByContainerRequestBuilder);

    this.args = args;
  }

  _createClass(ByProjectKeyCustomObjectsByContainerRequestBuilder, [{
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/custom-objects/{container}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyCustomObjectsByContainerRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyCustomObjectsRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyCustomObjectsRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyCustomObjectsRequestBuilder);

    this.args = args;
  }

  _createClass(ByProjectKeyCustomObjectsRequestBuilder, [{
    key: "withContainerAndKey",
    value: function withContainerAndKey(childPathArgs) {
      return new ByProjectKeyCustomObjectsByContainerByKeyRequestBuilder({
        pathArgs: _objectSpread(_objectSpread({}, this.args.pathArgs), childPathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
  }, {
    key: "withContainer",
    value: function withContainer(childPathArgs) {
      return new ByProjectKeyCustomObjectsByContainerRequestBuilder({
        pathArgs: _objectSpread(_objectSpread({}, this.args.pathArgs), childPathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
    /**
     *	For performance reasons, it is highly advisable to query for Custom Objects in a container by using the `container` field in the `where` predicate.
     *
     */

    /**
     * @deprecated
     **/

  }, {
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/custom-objects',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
    /**
     *	If an object with the given container/key exists, the object will be replaced with the new value and the version is incremented.
     *	If the request contains a version and an object with the given container/key, then the version must match the version of the existing object. Concurrent updates for the same Custom Object can result in a [409 Conflict](/../api/errors#409-conflict) even if the version is not provided.
     *
     *	Fields with `null` values will **not be saved**.
     *
     */

  }, {
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/custom-objects',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyCustomObjectsRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyCustomerGroupsByIDRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyCustomerGroupsByIDRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyCustomerGroupsByIDRequestBuilder);

    this.args = args;
  }

  _createClass(ByProjectKeyCustomerGroupsByIDRequestBuilder, [{
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/customer-groups/{ID}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }, {
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/customer-groups/{ID}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }, {
    key: "delete",
    value: function _delete(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'DELETE',
        uriTemplate: '/{projectKey}/customer-groups/{ID}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyCustomerGroupsByIDRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyCustomerGroupsKeyByKeyRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyCustomerGroupsKeyByKeyRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyCustomerGroupsKeyByKeyRequestBuilder);

    this.args = args;
  }

  _createClass(ByProjectKeyCustomerGroupsKeyByKeyRequestBuilder, [{
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/customer-groups/key={key}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }, {
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/customer-groups/key={key}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }, {
    key: "delete",
    value: function _delete(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'DELETE',
        uriTemplate: '/{projectKey}/customer-groups/key={key}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyCustomerGroupsKeyByKeyRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyCustomerGroupsRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyCustomerGroupsRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyCustomerGroupsRequestBuilder);

    this.args = args;
  }

  _createClass(ByProjectKeyCustomerGroupsRequestBuilder, [{
    key: "withKey",
    value: function withKey(childPathArgs) {
      return new ByProjectKeyCustomerGroupsKeyByKeyRequestBuilder({
        pathArgs: _objectSpread(_objectSpread({}, this.args.pathArgs), childPathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
  }, {
    key: "withId",
    value: function withId(childPathArgs) {
      return new ByProjectKeyCustomerGroupsByIDRequestBuilder({
        pathArgs: _objectSpread(_objectSpread({}, this.args.pathArgs), childPathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
  }, {
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/customer-groups',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }, {
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/customer-groups',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyCustomerGroupsRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyCustomersEmailConfirmRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyCustomersEmailConfirmRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyCustomersEmailConfirmRequestBuilder);

    this.args = args;
  }
  /**
   *	Verifying the email of the Customer produces the [CustomerEmailVerified](ctp:api:type:CustomerEmailVerifiedMessage) Message.
   *
   */


  _createClass(ByProjectKeyCustomersEmailConfirmRequestBuilder, [{
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/customers/email/confirm',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyCustomersEmailConfirmRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyCustomersEmailTokenRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyCustomersEmailTokenRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyCustomersEmailTokenRequestBuilder);

    this.args = args;
  }

  _createClass(ByProjectKeyCustomersEmailTokenRequestBuilder, [{
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/customers/email-token',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyCustomersEmailTokenRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyCustomersPasswordTokenRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyCustomersPasswordTokenRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyCustomersPasswordTokenRequestBuilder);

    this.args = args;
  }

  _createClass(ByProjectKeyCustomersPasswordTokenRequestBuilder, [{
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/customers/password-token',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyCustomersPasswordTokenRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyCustomersPasswordRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyCustomersPasswordRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyCustomersPasswordRequestBuilder);

    this.args = args;
  }
  /**
   *	Changing the password produces the [CustomerPasswordUpdated](ctp:api:type:CustomerPasswordUpdatedMessage) Message with `reset=false`.
   *
   */


  _createClass(ByProjectKeyCustomersPasswordRequestBuilder, [{
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/customers/password',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyCustomersPasswordRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyCustomersPasswordResetRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyCustomersPasswordResetRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyCustomersPasswordResetRequestBuilder);

    this.args = args;
  }
  /**
   *	Resetting the password of the Customer produces the [CustomerPasswordUpdated](ctp:api:type:CustomerPasswordUpdatedMessage) Message with `reset=true`.
   *
   */


  _createClass(ByProjectKeyCustomersPasswordResetRequestBuilder, [{
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/customers/password/reset',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyCustomersPasswordResetRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyCustomersByIDRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyCustomersByIDRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyCustomersByIDRequestBuilder);

    this.args = args;
  }

  _createClass(ByProjectKeyCustomersByIDRequestBuilder, [{
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/customers/{ID}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }, {
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/customers/{ID}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
    /**
     *	Deleting a Customer produces the [CustomerDeleted](ctp:api:type:CustomerDeletedMessage) Message.
     *
     */

  }, {
    key: "delete",
    value: function _delete(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'DELETE',
        uriTemplate: '/{projectKey}/customers/{ID}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyCustomersByIDRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyCustomersEmailTokenByEmailTokenRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyCustomersEmailTokenByEmailTokenRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyCustomersEmailTokenByEmailTokenRequestBuilder);

    this.args = args;
  }

  _createClass(ByProjectKeyCustomersEmailTokenByEmailTokenRequestBuilder, [{
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/customers/email-token={emailToken}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyCustomersEmailTokenByEmailTokenRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyCustomersKeyByKeyRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyCustomersKeyByKeyRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyCustomersKeyByKeyRequestBuilder);

    this.args = args;
  }

  _createClass(ByProjectKeyCustomersKeyByKeyRequestBuilder, [{
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/customers/key={key}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }, {
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/customers/key={key}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
    /**
     *	Deleting a Customer produces the [CustomerDeleted](ctp:api:type:CustomerDeletedMessage) Message.
     *
     */

  }, {
    key: "delete",
    value: function _delete(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'DELETE',
        uriTemplate: '/{projectKey}/customers/key={key}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyCustomersKeyByKeyRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyCustomersPasswordTokenByPasswordTokenRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyCustomersPasswordTokenByPasswordTokenRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyCustomersPasswordTokenByPasswordTokenRequestBuilder);

    this.args = args;
  }

  _createClass(ByProjectKeyCustomersPasswordTokenByPasswordTokenRequestBuilder, [{
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/customers/password-token={passwordToken}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyCustomersPasswordTokenByPasswordTokenRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyCustomersRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyCustomersRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyCustomersRequestBuilder);

    this.args = args;
  }

  _createClass(ByProjectKeyCustomersRequestBuilder, [{
    key: "withPasswordToken",
    value: function withPasswordToken(childPathArgs) {
      return new ByProjectKeyCustomersPasswordTokenByPasswordTokenRequestBuilder({
        pathArgs: _objectSpread(_objectSpread({}, this.args.pathArgs), childPathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
  }, {
    key: "withEmailToken",
    value: function withEmailToken(childPathArgs) {
      return new ByProjectKeyCustomersEmailTokenByEmailTokenRequestBuilder({
        pathArgs: _objectSpread(_objectSpread({}, this.args.pathArgs), childPathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
  }, {
    key: "emailToken",
    value: function emailToken() {
      return new ByProjectKeyCustomersEmailTokenRequestBuilder({
        pathArgs: _objectSpread({}, this.args.pathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
  }, {
    key: "emailConfirm",
    value: function emailConfirm() {
      return new ByProjectKeyCustomersEmailConfirmRequestBuilder({
        pathArgs: _objectSpread({}, this.args.pathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
  }, {
    key: "password",
    value: function password() {
      return new ByProjectKeyCustomersPasswordRequestBuilder({
        pathArgs: _objectSpread({}, this.args.pathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
  }, {
    key: "passwordReset",
    value: function passwordReset() {
      return new ByProjectKeyCustomersPasswordResetRequestBuilder({
        pathArgs: _objectSpread({}, this.args.pathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
  }, {
    key: "passwordToken",
    value: function passwordToken() {
      return new ByProjectKeyCustomersPasswordTokenRequestBuilder({
        pathArgs: _objectSpread({}, this.args.pathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
  }, {
    key: "withKey",
    value: function withKey(childPathArgs) {
      return new ByProjectKeyCustomersKeyByKeyRequestBuilder({
        pathArgs: _objectSpread(_objectSpread({}, this.args.pathArgs), childPathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
  }, {
    key: "withId",
    value: function withId(childPathArgs) {
      return new ByProjectKeyCustomersByIDRequestBuilder({
        pathArgs: _objectSpread(_objectSpread({}, this.args.pathArgs), childPathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
  }, {
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/customers',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
    /**
     *	If the `anonymousCart` field is set on the [CustomerDraft](ctp:api:type:CustomerDraft), then the newly created Customer will be assigned to that [Cart](ctp:api:type:Cart).
     *	Similarly, if the `anonymousId` field is set, the Customer will be set on all [Carts](ctp:api:type:Cart), [Orders](ctp:api:type:Order), [ShoppingLists](ctp:api:type:ShoppingList) and [Payments](ctp:api:type:Payment) with the same `anonymousId`.
     *	Creating a Customer produces the [CustomerCreated](ctp:api:type:CustomerCreatedMessage) Message.
     *
     */

  }, {
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/customers',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyCustomersRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyDiscountCodesByIDRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyDiscountCodesByIDRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyDiscountCodesByIDRequestBuilder);

    this.args = args;
  }
  /**
   *	Deprecated scope: `view_orders:{projectKey}`
   */


  _createClass(ByProjectKeyDiscountCodesByIDRequestBuilder, [{
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/discount-codes/{ID}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
    /**
     *	Deprecated scope: `manage_orders:{projectKey}`
     */

  }, {
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/discount-codes/{ID}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
    /**
     *	Deprecated scope: `manage_orders:{projectKey}`
     */

  }, {
    key: "delete",
    value: function _delete(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'DELETE',
        uriTemplate: '/{projectKey}/discount-codes/{ID}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyDiscountCodesByIDRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyDiscountCodesRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyDiscountCodesRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyDiscountCodesRequestBuilder);

    this.args = args;
  }

  _createClass(ByProjectKeyDiscountCodesRequestBuilder, [{
    key: "withId",
    value: function withId(childPathArgs) {
      return new ByProjectKeyDiscountCodesByIDRequestBuilder({
        pathArgs: _objectSpread(_objectSpread({}, this.args.pathArgs), childPathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
    /**
     *	Deprecated scope: `view_orders:{projectKey}`
     */

  }, {
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/discount-codes',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
    /**
     *	Deprecated scope: `manage_orders:{projectKey}`
     */

  }, {
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/discount-codes',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyDiscountCodesRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyExtensionsByIDRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyExtensionsByIDRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyExtensionsByIDRequestBuilder);

    this.args = args;
  }

  _createClass(ByProjectKeyExtensionsByIDRequestBuilder, [{
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/extensions/{ID}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }, {
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/extensions/{ID}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }, {
    key: "delete",
    value: function _delete(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'DELETE',
        uriTemplate: '/{projectKey}/extensions/{ID}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyExtensionsByIDRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyExtensionsKeyByKeyRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyExtensionsKeyByKeyRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyExtensionsKeyByKeyRequestBuilder);

    this.args = args;
  }

  _createClass(ByProjectKeyExtensionsKeyByKeyRequestBuilder, [{
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/extensions/key={key}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }, {
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/extensions/key={key}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }, {
    key: "delete",
    value: function _delete(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'DELETE',
        uriTemplate: '/{projectKey}/extensions/key={key}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyExtensionsKeyByKeyRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyExtensionsRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyExtensionsRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyExtensionsRequestBuilder);

    this.args = args;
  }

  _createClass(ByProjectKeyExtensionsRequestBuilder, [{
    key: "withKey",
    value: function withKey(childPathArgs) {
      return new ByProjectKeyExtensionsKeyByKeyRequestBuilder({
        pathArgs: _objectSpread(_objectSpread({}, this.args.pathArgs), childPathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
  }, {
    key: "withId",
    value: function withId(childPathArgs) {
      return new ByProjectKeyExtensionsByIDRequestBuilder({
        pathArgs: _objectSpread(_objectSpread({}, this.args.pathArgs), childPathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
  }, {
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/extensions',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }, {
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/extensions',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyExtensionsRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyGraphqlRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyGraphqlRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyGraphqlRequestBuilder);

    this.args = args;
  }
  /**
   *	Execute a GraphQL query
   */


  _createClass(ByProjectKeyGraphqlRequestBuilder, [{
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/graphql',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/graphql'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyGraphqlRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyInBusinessUnitKeyByBusinessUnitKeyMeCustomersRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyInBusinessUnitKeyByBusinessUnitKeyMeCustomersRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyInBusinessUnitKeyByBusinessUnitKeyMeCustomersRequestBuilder);

    this.args = args;
  }
  /**
   *	The My Business Unit endpoint does not support assigning existing Customers to a Business Unit.
   *	Use this endpoint to create a new Customer and associate it with the Business Unit.
   *	The user must have the `Admin` role within the Business Unit to perform this request.
   *	The new Customer is created with an empty set of roles.
   *
   */


  _createClass(ByProjectKeyInBusinessUnitKeyByBusinessUnitKeyMeCustomersRequestBuilder, [{
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/in-business-unit/key={businessUnitKey}/me/customers',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyInBusinessUnitKeyByBusinessUnitKeyMeCustomersRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyInBusinessUnitKeyByBusinessUnitKeyMeRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyInBusinessUnitKeyByBusinessUnitKeyMeRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyInBusinessUnitKeyByBusinessUnitKeyMeRequestBuilder);

    this.args = args;
  }

  _createClass(ByProjectKeyInBusinessUnitKeyByBusinessUnitKeyMeRequestBuilder, [{
    key: "customers",
    value: function customers() {
      return new ByProjectKeyInBusinessUnitKeyByBusinessUnitKeyMeCustomersRequestBuilder({
        pathArgs: _objectSpread({}, this.args.pathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
  }]);

  return ByProjectKeyInBusinessUnitKeyByBusinessUnitKeyMeRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyInBusinessUnitKeyByBusinessUnitKeyRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyInBusinessUnitKeyByBusinessUnitKeyRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyInBusinessUnitKeyByBusinessUnitKeyRequestBuilder);

    this.args = args;
  }

  _createClass(ByProjectKeyInBusinessUnitKeyByBusinessUnitKeyRequestBuilder, [{
    key: "me",
    value: function me() {
      return new ByProjectKeyInBusinessUnitKeyByBusinessUnitKeyMeRequestBuilder({
        pathArgs: _objectSpread({}, this.args.pathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
  }]);

  return ByProjectKeyInBusinessUnitKeyByBusinessUnitKeyRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyInStoreKeyByStoreKeyCartsReplicateRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyInStoreKeyByStoreKeyCartsReplicateRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyInStoreKeyByStoreKeyCartsReplicateRequestBuilder);

    this.args = args;
  }

  _createClass(ByProjectKeyInStoreKeyByStoreKeyCartsReplicateRequestBuilder, [{
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/in-store/key={storeKey}/carts/replicate',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyInStoreKeyByStoreKeyCartsReplicateRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyInStoreKeyByStoreKeyCartsByIDRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyInStoreKeyByStoreKeyCartsByIDRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyInStoreKeyByStoreKeyCartsByIDRequestBuilder);

    this.args = args;
  }
  /**
   *	Returns a cart by its ID from a specific Store.
   *	If the cart exists in the project but does not have the store field,
   *	or the store field references a different store, this method returns a ResourceNotFound error.
   *	The cart may not contain up-to-date prices, discounts etc.
   *	If you want to ensure they're up-to-date, send an Update request with the Recalculate update action instead.
   *
   */


  _createClass(ByProjectKeyInStoreKeyByStoreKeyCartsByIDRequestBuilder, [{
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/in-store/key={storeKey}/carts/{ID}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
    /**
     *	Updates a [Cart](ctp:api:type:Cart) in the Store specified by `storeKey`.
     *	If the Cart exists in the Project but does not have the store field,
     *	or the `store` field references a different Store, this method returns a [ResourceNotFoundError](ctp:api:type:ResourceNotFoundError).
     *
     */

  }, {
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/in-store/key={storeKey}/carts/{ID}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }, {
    key: "delete",
    value: function _delete(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'DELETE',
        uriTemplate: '/{projectKey}/in-store/key={storeKey}/carts/{ID}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyInStoreKeyByStoreKeyCartsByIDRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyInStoreKeyByStoreKeyCartsCustomerIdByCustomerIdRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyInStoreKeyByStoreKeyCartsCustomerIdByCustomerIdRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyInStoreKeyByStoreKeyCartsCustomerIdByCustomerIdRequestBuilder);

    this.args = args;
  }
  /**
   *	Retrieves the active cart of the customer that has been modified most recently in a specific Store.
   *
   *	If the cart exists in the project but does not have the store field, or the store field
   *	references a different store, this method returns a ResourceNotFound error.
   *
   *	The cart may not contain up-to-date prices, discounts etc. If you want to ensure they're up-to-date,
   *	send an Update request with the Recalculate update action instead.
   *
   */


  _createClass(ByProjectKeyInStoreKeyByStoreKeyCartsCustomerIdByCustomerIdRequestBuilder, [{
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/in-store/key={storeKey}/carts/customer-id={customerId}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyInStoreKeyByStoreKeyCartsCustomerIdByCustomerIdRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyInStoreKeyByStoreKeyCartsKeyByKeyRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyInStoreKeyByStoreKeyCartsKeyByKeyRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyInStoreKeyByStoreKeyCartsKeyByKeyRequestBuilder);

    this.args = args;
  }
  /**
   *	Returns a cart by its key from a specific Store.
   *	If the cart exists in the project but does not have the store field,
   *	or the store field references a different store, this method returns a ResourceNotFound error.
   *	The cart may not contain up-to-date prices, discounts etc.
   *	If you want to ensure they're up-to-date, send an Update request with the Recalculate update action instead.
   *
   */


  _createClass(ByProjectKeyInStoreKeyByStoreKeyCartsKeyByKeyRequestBuilder, [{
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/in-store/key={storeKey}/carts/key={key}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
    /**
     *	Updates a [Cart](ctp:api:type:Cart) in the Store specified by `storeKey`.
     *	If the Cart exists in the Project but does not have the store field,
     *	or the `store` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFound) error.
     *
     */

  }, {
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/in-store/key={storeKey}/carts/key={key}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }, {
    key: "delete",
    value: function _delete(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'DELETE',
        uriTemplate: '/{projectKey}/in-store/key={storeKey}/carts/key={key}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyInStoreKeyByStoreKeyCartsKeyByKeyRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyInStoreKeyByStoreKeyCartsRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyInStoreKeyByStoreKeyCartsRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyInStoreKeyByStoreKeyCartsRequestBuilder);

    this.args = args;
  }

  _createClass(ByProjectKeyInStoreKeyByStoreKeyCartsRequestBuilder, [{
    key: "withCustomerId",
    value: function withCustomerId(childPathArgs) {
      return new ByProjectKeyInStoreKeyByStoreKeyCartsCustomerIdByCustomerIdRequestBuilder({
        pathArgs: _objectSpread(_objectSpread({}, this.args.pathArgs), childPathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
  }, {
    key: "withKey",
    value: function withKey(childPathArgs) {
      return new ByProjectKeyInStoreKeyByStoreKeyCartsKeyByKeyRequestBuilder({
        pathArgs: _objectSpread(_objectSpread({}, this.args.pathArgs), childPathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
  }, {
    key: "replicate",
    value: function replicate() {
      return new ByProjectKeyInStoreKeyByStoreKeyCartsReplicateRequestBuilder({
        pathArgs: _objectSpread({}, this.args.pathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
  }, {
    key: "withId",
    value: function withId(childPathArgs) {
      return new ByProjectKeyInStoreKeyByStoreKeyCartsByIDRequestBuilder({
        pathArgs: _objectSpread(_objectSpread({}, this.args.pathArgs), childPathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
    /**
     *	Queries carts in a specific Store.
     */

  }, {
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/in-store/key={storeKey}/carts',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
    /**
     *	Creates a [Cart](ctp:api:type:Cart) in the Store specified by `storeKey`.
     *	When using this endpoint the Cart's `store` field is always set to the store specified in the path parameter.
     *	Creating a Cart can fail with an [InvalidOperationError](ctp:api:type:InvalidOperationError) if the referenced [ShippingMethod](ctp:api:type:ShippingMethod)
     *	in the [CartDraft](ctp:api:type:CartDraft) has a predicate which does not match the Cart.
     *
     */

  }, {
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/in-store/key={storeKey}/carts',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyInStoreKeyByStoreKeyCartsRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyInStoreKeyByStoreKeyCustomersEmailConfirmRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyInStoreKeyByStoreKeyCustomersEmailConfirmRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyInStoreKeyByStoreKeyCustomersEmailConfirmRequestBuilder);

    this.args = args;
  }
  /**
   *	The customer verifies the email using the token value.
   *	Verifying the email of the Customer produces the [CustomerEmailVerified](ctp:api:type:CustomerEmailVerifiedMessage) Message.
   *
   *	If the Customer exists in the Project but the `stores` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.
   *
   */


  _createClass(ByProjectKeyInStoreKeyByStoreKeyCustomersEmailConfirmRequestBuilder, [{
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/in-store/key={storeKey}/customers/email/confirm',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyInStoreKeyByStoreKeyCustomersEmailConfirmRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyInStoreKeyByStoreKeyCustomersEmailTokenRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyInStoreKeyByStoreKeyCustomersEmailTokenRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyInStoreKeyByStoreKeyCustomersEmailTokenRequestBuilder);

    this.args = args;
  }
  /**
   *	If the Customer exists in the Project but the `stores` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.
   *
   */


  _createClass(ByProjectKeyInStoreKeyByStoreKeyCustomersEmailTokenRequestBuilder, [{
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/in-store/key={storeKey}/customers/email-token',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyInStoreKeyByStoreKeyCustomersEmailTokenRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyInStoreKeyByStoreKeyCustomersPasswordTokenRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyInStoreKeyByStoreKeyCustomersPasswordTokenRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyInStoreKeyByStoreKeyCustomersPasswordTokenRequestBuilder);

    this.args = args;
  }
  /**
   *	If the Customer exists in the Project but the `stores` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.
   *
   */


  _createClass(ByProjectKeyInStoreKeyByStoreKeyCustomersPasswordTokenRequestBuilder, [{
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/in-store/key={storeKey}/customers/password-token',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyInStoreKeyByStoreKeyCustomersPasswordTokenRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyInStoreKeyByStoreKeyCustomersPasswordRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyInStoreKeyByStoreKeyCustomersPasswordRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyInStoreKeyByStoreKeyCustomersPasswordRequestBuilder);

    this.args = args;
  }
  /**
   *	Changing the password of the Customer produces the [CustomerPasswordUpdated](ctp:api:type:CustomerPasswordUpdatedMessage) Message with `reset=false`.
   *
   */


  _createClass(ByProjectKeyInStoreKeyByStoreKeyCustomersPasswordRequestBuilder, [{
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/in-store/key={storeKey}/customers/password',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyInStoreKeyByStoreKeyCustomersPasswordRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyInStoreKeyByStoreKeyCustomersPasswordResetRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyInStoreKeyByStoreKeyCustomersPasswordResetRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyInStoreKeyByStoreKeyCustomersPasswordResetRequestBuilder);

    this.args = args;
  }
  /**
   *	Resetting the password of the Customer produces the [CustomerPasswordUpdated](ctp:api:type:CustomerPasswordUpdatedMessage) Message with `reset=true`.
   *
   *	If the Customer exists in the Project but the `stores` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.
   *
   */


  _createClass(ByProjectKeyInStoreKeyByStoreKeyCustomersPasswordResetRequestBuilder, [{
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/in-store/key={storeKey}/customers/password/reset',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyInStoreKeyByStoreKeyCustomersPasswordResetRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyInStoreKeyByStoreKeyCustomersByIDRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyInStoreKeyByStoreKeyCustomersByIDRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyInStoreKeyByStoreKeyCustomersByIDRequestBuilder);

    this.args = args;
  }
  /**
   *	If the Customer exists in the Project but the `stores` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.
   *
   */


  _createClass(ByProjectKeyInStoreKeyByStoreKeyCustomersByIDRequestBuilder, [{
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/in-store/key={storeKey}/customers/{ID}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
    /**
     *	If the Customer exists in the Project but the `stores` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.
     *
     */

  }, {
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/in-store/key={storeKey}/customers/{ID}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
    /**
     *	Deleting a Customer produces the [CustomerDeleted](ctp:api:type:CustomerDeletedMessage) Message.
     *
     *	If the Customer exists in the Project but the `stores` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.
     *
     */

  }, {
    key: "delete",
    value: function _delete(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'DELETE',
        uriTemplate: '/{projectKey}/in-store/key={storeKey}/customers/{ID}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyInStoreKeyByStoreKeyCustomersByIDRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyInStoreKeyByStoreKeyCustomersEmailTokenByEmailTokenRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyInStoreKeyByStoreKeyCustomersEmailTokenByEmailTokenRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyInStoreKeyByStoreKeyCustomersEmailTokenByEmailTokenRequestBuilder);

    this.args = args;
  }
  /**
   *	If the Customer exists in the Project but the `stores` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.
   *
   */


  _createClass(ByProjectKeyInStoreKeyByStoreKeyCustomersEmailTokenByEmailTokenRequestBuilder, [{
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/in-store/key={storeKey}/customers/email-token={emailToken}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyInStoreKeyByStoreKeyCustomersEmailTokenByEmailTokenRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyInStoreKeyByStoreKeyCustomersKeyByKeyRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyInStoreKeyByStoreKeyCustomersKeyByKeyRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyInStoreKeyByStoreKeyCustomersKeyByKeyRequestBuilder);

    this.args = args;
  }
  /**
   *	If the Customer exists in the Project but the `stores` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.
   *
   */


  _createClass(ByProjectKeyInStoreKeyByStoreKeyCustomersKeyByKeyRequestBuilder, [{
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/in-store/key={storeKey}/customers/key={key}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
    /**
     *	If the Customer exists in the Project but the `stores` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.
     *
     */

  }, {
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/in-store/key={storeKey}/customers/key={key}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
    /**
     *	Deleting a Customer produces the [CustomerDeleted](ctp:api:type:CustomerDeletedMessage) Message.
     *
     *	If the Customer exists in the Project but the `stores` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.
     *
     */

  }, {
    key: "delete",
    value: function _delete(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'DELETE',
        uriTemplate: '/{projectKey}/in-store/key={storeKey}/customers/key={key}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyInStoreKeyByStoreKeyCustomersKeyByKeyRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyInStoreKeyByStoreKeyCustomersPasswordTokenByPasswordTokenRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyInStoreKeyByStoreKeyCustomersPasswordTokenByPasswordTokenRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyInStoreKeyByStoreKeyCustomersPasswordTokenByPasswordTokenRequestBuilder);

    this.args = args;
  }
  /**
   *	If the Customer exists in the Project but the `stores` field references a different Store, this method returns a [ResourceNotFound](ctp:api:type:ResourceNotFoundError) error.
   *
   */


  _createClass(ByProjectKeyInStoreKeyByStoreKeyCustomersPasswordTokenByPasswordTokenRequestBuilder, [{
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/in-store/key={storeKey}/customers/password-token={passwordToken}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyInStoreKeyByStoreKeyCustomersPasswordTokenByPasswordTokenRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyInStoreKeyByStoreKeyCustomersRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyInStoreKeyByStoreKeyCustomersRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyInStoreKeyByStoreKeyCustomersRequestBuilder);

    this.args = args;
  }

  _createClass(ByProjectKeyInStoreKeyByStoreKeyCustomersRequestBuilder, [{
    key: "withPasswordToken",
    value: function withPasswordToken(childPathArgs) {
      return new ByProjectKeyInStoreKeyByStoreKeyCustomersPasswordTokenByPasswordTokenRequestBuilder({
        pathArgs: _objectSpread(_objectSpread({}, this.args.pathArgs), childPathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
  }, {
    key: "withEmailToken",
    value: function withEmailToken(childPathArgs) {
      return new ByProjectKeyInStoreKeyByStoreKeyCustomersEmailTokenByEmailTokenRequestBuilder({
        pathArgs: _objectSpread(_objectSpread({}, this.args.pathArgs), childPathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
  }, {
    key: "emailToken",
    value: function emailToken() {
      return new ByProjectKeyInStoreKeyByStoreKeyCustomersEmailTokenRequestBuilder({
        pathArgs: _objectSpread({}, this.args.pathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
  }, {
    key: "emailConfirm",
    value: function emailConfirm() {
      return new ByProjectKeyInStoreKeyByStoreKeyCustomersEmailConfirmRequestBuilder({
        pathArgs: _objectSpread({}, this.args.pathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
  }, {
    key: "password",
    value: function password() {
      return new ByProjectKeyInStoreKeyByStoreKeyCustomersPasswordRequestBuilder({
        pathArgs: _objectSpread({}, this.args.pathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
  }, {
    key: "passwordReset",
    value: function passwordReset() {
      return new ByProjectKeyInStoreKeyByStoreKeyCustomersPasswordResetRequestBuilder({
        pathArgs: _objectSpread({}, this.args.pathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
  }, {
    key: "passwordToken",
    value: function passwordToken() {
      return new ByProjectKeyInStoreKeyByStoreKeyCustomersPasswordTokenRequestBuilder({
        pathArgs: _objectSpread({}, this.args.pathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
  }, {
    key: "withKey",
    value: function withKey(childPathArgs) {
      return new ByProjectKeyInStoreKeyByStoreKeyCustomersKeyByKeyRequestBuilder({
        pathArgs: _objectSpread(_objectSpread({}, this.args.pathArgs), childPathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
  }, {
    key: "withId",
    value: function withId(childPathArgs) {
      return new ByProjectKeyInStoreKeyByStoreKeyCustomersByIDRequestBuilder({
        pathArgs: _objectSpread(_objectSpread({}, this.args.pathArgs), childPathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
  }, {
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/in-store/key={storeKey}/customers',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
    /**
     *	When using this endpoint, if omitted, the Customer `stores` field is set to the Store specified in the path parameter.
     *
     *	If the `anonymousCart` field is set on the [CustomerDraft](ctp:api:type:CustomerDraft), then the newly created Customer will be assigned to that [Cart](ctp:api:type:Cart).
     *	Similarly, if the `anonymousId` field is set, the Customer will be set on all [Carts](ctp:api:type:Cart), [Orders](ctp:api:type:Order), [ShoppingLists](ctp:api:type:ShoppingList) and [Payments](ctp:api:type:Payment) with the same `anonymousId`.
     *	If a Cart with a `store` field specified, the `store` field must reference the same Store specified in the `{storeKey}` path parameter.
     *	Creating a Customer produces the [CustomerCreated](ctp:api:type:CustomerCreatedMessage) Message.
     *
     */

  }, {
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/in-store/key={storeKey}/customers',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyInStoreKeyByStoreKeyCustomersRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyInStoreKeyByStoreKeyLoginRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyInStoreKeyByStoreKeyLoginRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyInStoreKeyByStoreKeyLoginRequestBuilder);

    this.args = args;
  }
  /**
   *	Authenticates a Customer associated with a Store. For more information, see [Global versus Store-specific Customers](/../api/customers-overview#global-versus-store-specific-customers).
   *
   *	If the Customer exists in the Project but the `stores` field references a different Store, this method returns an [InvalidCredentials](ctp:api:type:InvalidCredentialsError) error.
   *
   */


  _createClass(ByProjectKeyInStoreKeyByStoreKeyLoginRequestBuilder, [{
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/in-store/key={storeKey}/login',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyInStoreKeyByStoreKeyLoginRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyInStoreKeyByStoreKeyMeActiveCartRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyInStoreKeyByStoreKeyMeActiveCartRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyInStoreKeyByStoreKeyMeActiveCartRequestBuilder);

    this.args = args;
  }

  _createClass(ByProjectKeyInStoreKeyByStoreKeyMeActiveCartRequestBuilder, [{
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/in-store/key={storeKey}/me/active-cart',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyInStoreKeyByStoreKeyMeActiveCartRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyInStoreKeyByStoreKeyMeCartsByIDRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyInStoreKeyByStoreKeyMeCartsByIDRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyInStoreKeyByStoreKeyMeCartsByIDRequestBuilder);

    this.args = args;
  }

  _createClass(ByProjectKeyInStoreKeyByStoreKeyMeCartsByIDRequestBuilder, [{
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/in-store/key={storeKey}/me/carts/{ID}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }, {
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/in-store/key={storeKey}/me/carts/{ID}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }, {
    key: "delete",
    value: function _delete(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'DELETE',
        uriTemplate: '/{projectKey}/in-store/key={storeKey}/me/carts/{ID}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyInStoreKeyByStoreKeyMeCartsByIDRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyInStoreKeyByStoreKeyMeCartsRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyInStoreKeyByStoreKeyMeCartsRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyInStoreKeyByStoreKeyMeCartsRequestBuilder);

    this.args = args;
  }

  _createClass(ByProjectKeyInStoreKeyByStoreKeyMeCartsRequestBuilder, [{
    key: "withId",
    value: function withId(childPathArgs) {
      return new ByProjectKeyInStoreKeyByStoreKeyMeCartsByIDRequestBuilder({
        pathArgs: _objectSpread(_objectSpread({}, this.args.pathArgs), childPathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
  }, {
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/in-store/key={storeKey}/me/carts',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }, {
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/in-store/key={storeKey}/me/carts',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyInStoreKeyByStoreKeyMeCartsRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyInStoreKeyByStoreKeyMeEmailConfirmRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyInStoreKeyByStoreKeyMeEmailConfirmRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyInStoreKeyByStoreKeyMeEmailConfirmRequestBuilder);

    this.args = args;
  }
  /**
   *	This is the last step in the [email verification process of a Customer](/../api/projects/customers#email-verification-of-customer-in-store).
   *
   */


  _createClass(ByProjectKeyInStoreKeyByStoreKeyMeEmailConfirmRequestBuilder, [{
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/in-store/key={storeKey}/me/email/confirm',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyInStoreKeyByStoreKeyMeEmailConfirmRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyInStoreKeyByStoreKeyMeLoginRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyInStoreKeyByStoreKeyMeLoginRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyInStoreKeyByStoreKeyMeLoginRequestBuilder);

    this.args = args;
  }
  /**
   *	Retrieves the authenticated Customer (that matches the given email/password pair) if they are part of a specific [Store](ctp:api:type:Store).
   *
   *	- If the Customer does not have a Cart, the most recently modified anonymous cart becomes the Customer's Cart.
   *	- If the Customer already has a Cart, the most recently modified anonymous cart is handled according to [AnonymousCartSignInMode](ctp:api:type:AnonymousCartSignInMode).
   *
   *	If a Cart is returned as part of [CustomerSignInResult](ctp:api:type:CustomerSignInResult), it has been [recalculated](/../api/projects/carts#recalculate) with up-to-date prices, taxes, discounts, and invalid line items removed.
   *
   *	If an account with the given credentials is not found, an [InvalidCredentials](ctp:api:type:InvalidCredentialsError) error is returned.
   *
   */


  _createClass(ByProjectKeyInStoreKeyByStoreKeyMeLoginRequestBuilder, [{
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/in-store/key={storeKey}/me/login',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyInStoreKeyByStoreKeyMeLoginRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyInStoreKeyByStoreKeyMeOrdersByIDRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyInStoreKeyByStoreKeyMeOrdersByIDRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyInStoreKeyByStoreKeyMeOrdersByIDRequestBuilder);

    this.args = args;
  }

  _createClass(ByProjectKeyInStoreKeyByStoreKeyMeOrdersByIDRequestBuilder, [{
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/in-store/key={storeKey}/me/orders/{ID}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyInStoreKeyByStoreKeyMeOrdersByIDRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyInStoreKeyByStoreKeyMeOrdersRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyInStoreKeyByStoreKeyMeOrdersRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyInStoreKeyByStoreKeyMeOrdersRequestBuilder);

    this.args = args;
  }

  _createClass(ByProjectKeyInStoreKeyByStoreKeyMeOrdersRequestBuilder, [{
    key: "withId",
    value: function withId(childPathArgs) {
      return new ByProjectKeyInStoreKeyByStoreKeyMeOrdersByIDRequestBuilder({
        pathArgs: _objectSpread(_objectSpread({}, this.args.pathArgs), childPathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
  }, {
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/in-store/key={storeKey}/me/orders',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }, {
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/in-store/key={storeKey}/me/orders',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyInStoreKeyByStoreKeyMeOrdersRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyInStoreKeyByStoreKeyMePasswordResetRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyInStoreKeyByStoreKeyMePasswordResetRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyInStoreKeyByStoreKeyMePasswordResetRequestBuilder);

    this.args = args;
  }
  /**
   *	This is the last step in the [password reset process of the authenticated Customer](/../api/projects/customers#password-reset-of-customer-in-store).
   *
   *	Resetting a password produces the of the Customer [CustomerPasswordUpdated](ctp:api:type:CustomerPasswordUpdatedMessage) Message with `reset=true`.
   *
   */


  _createClass(ByProjectKeyInStoreKeyByStoreKeyMePasswordResetRequestBuilder, [{
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/in-store/key={storeKey}/me/password/reset',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyInStoreKeyByStoreKeyMePasswordResetRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyInStoreKeyByStoreKeyMePasswordRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyInStoreKeyByStoreKeyMePasswordRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyInStoreKeyByStoreKeyMePasswordRequestBuilder);

    this.args = args;
  }

  _createClass(ByProjectKeyInStoreKeyByStoreKeyMePasswordRequestBuilder, [{
    key: "reset",
    value: function reset() {
      return new ByProjectKeyInStoreKeyByStoreKeyMePasswordResetRequestBuilder({
        pathArgs: _objectSpread({}, this.args.pathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
    /**
     *	Changing the password of the Customer produces the [CustomerPasswordUpdated](ctp:api:type:CustomerPasswordUpdatedMessage) Message with `reset=false`.
     *
     */

  }, {
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/in-store/key={storeKey}/me/password',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyInStoreKeyByStoreKeyMePasswordRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyInStoreKeyByStoreKeyMeShoppingListsByIDRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyInStoreKeyByStoreKeyMeShoppingListsByIDRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyInStoreKeyByStoreKeyMeShoppingListsByIDRequestBuilder);

    this.args = args;
  }
  /**
   *	Gets a shopping list by ID.
   */


  _createClass(ByProjectKeyInStoreKeyByStoreKeyMeShoppingListsByIDRequestBuilder, [{
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/in-store/key={storeKey}/me/shopping-lists/{ID}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }, {
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/in-store/key={storeKey}/me/shopping-lists/{ID}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }, {
    key: "delete",
    value: function _delete(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'DELETE',
        uriTemplate: '/{projectKey}/in-store/key={storeKey}/me/shopping-lists/{ID}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyInStoreKeyByStoreKeyMeShoppingListsByIDRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyInStoreKeyByStoreKeyMeShoppingListsKeyByKeyRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyInStoreKeyByStoreKeyMeShoppingListsKeyByKeyRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyInStoreKeyByStoreKeyMeShoppingListsKeyByKeyRequestBuilder);

    this.args = args;
  }
  /**
   *	Gets a shopping list by Key.
   */


  _createClass(ByProjectKeyInStoreKeyByStoreKeyMeShoppingListsKeyByKeyRequestBuilder, [{
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/in-store/key={storeKey}/me/shopping-lists/key={key}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
    /**
     *	Update a shopping list found by its Key.
     */

  }, {
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/in-store/key={storeKey}/me/shopping-lists/key={key}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }, {
    key: "delete",
    value: function _delete(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'DELETE',
        uriTemplate: '/{projectKey}/in-store/key={storeKey}/me/shopping-lists/key={key}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyInStoreKeyByStoreKeyMeShoppingListsKeyByKeyRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyInStoreKeyByStoreKeyMeShoppingListsRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyInStoreKeyByStoreKeyMeShoppingListsRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyInStoreKeyByStoreKeyMeShoppingListsRequestBuilder);

    this.args = args;
  }

  _createClass(ByProjectKeyInStoreKeyByStoreKeyMeShoppingListsRequestBuilder, [{
    key: "withKey",
    value: function withKey(childPathArgs) {
      return new ByProjectKeyInStoreKeyByStoreKeyMeShoppingListsKeyByKeyRequestBuilder({
        pathArgs: _objectSpread(_objectSpread({}, this.args.pathArgs), childPathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
  }, {
    key: "withId",
    value: function withId(childPathArgs) {
      return new ByProjectKeyInStoreKeyByStoreKeyMeShoppingListsByIDRequestBuilder({
        pathArgs: _objectSpread(_objectSpread({}, this.args.pathArgs), childPathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
  }, {
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/in-store/key={storeKey}/me/shopping-lists',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }, {
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/in-store/key={storeKey}/me/shopping-lists',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyInStoreKeyByStoreKeyMeShoppingListsRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyInStoreKeyByStoreKeyMeSignupRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyInStoreKeyByStoreKeyMeSignupRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyInStoreKeyByStoreKeyMeSignupRequestBuilder);

    this.args = args;
  }
  /**
   *	If omitted in the request body, the [Customer](ctp:api:type:Customer) `stores` field is set to the Store specified in the path parameter.
   *
   *	Creating a Customer produces the [CustomerCreated](ctp:api:type:CustomerCreatedMessage) Message.
   *
   */


  _createClass(ByProjectKeyInStoreKeyByStoreKeyMeSignupRequestBuilder, [{
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/in-store/key={storeKey}/me/signup',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyInStoreKeyByStoreKeyMeSignupRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyInStoreKeyByStoreKeyMeRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyInStoreKeyByStoreKeyMeRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyInStoreKeyByStoreKeyMeRequestBuilder);

    this.args = args;
  }
  /**
   *	A shopping cart holds product variants and can be ordered.
   */


  _createClass(ByProjectKeyInStoreKeyByStoreKeyMeRequestBuilder, [{
    key: "carts",
    value: function carts() {
      return new ByProjectKeyInStoreKeyByStoreKeyMeCartsRequestBuilder({
        pathArgs: _objectSpread({}, this.args.pathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
    /**
     *	An order can be created from a order, usually after a checkout process has been completed.
     */

  }, {
    key: "orders",
    value: function orders() {
      return new ByProjectKeyInStoreKeyByStoreKeyMeOrdersRequestBuilder({
        pathArgs: _objectSpread({}, this.args.pathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
  }, {
    key: "activeCart",
    value: function activeCart() {
      return new ByProjectKeyInStoreKeyByStoreKeyMeActiveCartRequestBuilder({
        pathArgs: _objectSpread({}, this.args.pathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
    /**
     *	shopping-lists e.g. for wishlist support
     *
     */

  }, {
    key: "shoppingLists",
    value: function shoppingLists() {
      return new ByProjectKeyInStoreKeyByStoreKeyMeShoppingListsRequestBuilder({
        pathArgs: _objectSpread({}, this.args.pathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
  }, {
    key: "emailConfirm",
    value: function emailConfirm() {
      return new ByProjectKeyInStoreKeyByStoreKeyMeEmailConfirmRequestBuilder({
        pathArgs: _objectSpread({}, this.args.pathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
  }, {
    key: "password",
    value: function password() {
      return new ByProjectKeyInStoreKeyByStoreKeyMePasswordRequestBuilder({
        pathArgs: _objectSpread({}, this.args.pathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
  }, {
    key: "signup",
    value: function signup() {
      return new ByProjectKeyInStoreKeyByStoreKeyMeSignupRequestBuilder({
        pathArgs: _objectSpread({}, this.args.pathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
  }, {
    key: "login",
    value: function login() {
      return new ByProjectKeyInStoreKeyByStoreKeyMeLoginRequestBuilder({
        pathArgs: _objectSpread({}, this.args.pathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
  }, {
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/in-store/key={storeKey}/me',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }, {
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/in-store/key={storeKey}/me',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }, {
    key: "delete",
    value: function _delete(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'DELETE',
        uriTemplate: '/{projectKey}/in-store/key={storeKey}/me',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyInStoreKeyByStoreKeyMeRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyInStoreKeyByStoreKeyOrdersByIDRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyInStoreKeyByStoreKeyOrdersByIDRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyInStoreKeyByStoreKeyOrdersByIDRequestBuilder);

    this.args = args;
  }
  /**
   *	Returns an order by its ID from a specific Store.
   *	If the order exists in the project but does not have the store field,
   *	or the store field references a different store, this method returns a ResourceNotFound error.
   *
   */


  _createClass(ByProjectKeyInStoreKeyByStoreKeyOrdersByIDRequestBuilder, [{
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/in-store/key={storeKey}/orders/{ID}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
    /**
     *	Updates an order in the store specified by {storeKey}.
     *	If the order exists in the project but does not have the store field,
     *	or the store field references a different store, this method returns a ResourceNotFound error.
     *
     */

  }, {
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/in-store/key={storeKey}/orders/{ID}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }, {
    key: "delete",
    value: function _delete(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'DELETE',
        uriTemplate: '/{projectKey}/in-store/key={storeKey}/orders/{ID}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyInStoreKeyByStoreKeyOrdersByIDRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyInStoreKeyByStoreKeyOrdersOrderNumberByOrderNumberRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyInStoreKeyByStoreKeyOrdersOrderNumberByOrderNumberRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyInStoreKeyByStoreKeyOrdersOrderNumberByOrderNumberRequestBuilder);

    this.args = args;
  }
  /**
   *	Returns an order by its order number from a specific Store.
   *
   *	If the order exists in the project but does not have the store field,
   *	or the store field references a different store, this method returns a ResourceNotFound error.
   *	In case the orderNumber does not match the regular expression [a-zA-Z0-9_\-]+,
   *	it should be provided in URL-encoded format.
   *
   */


  _createClass(ByProjectKeyInStoreKeyByStoreKeyOrdersOrderNumberByOrderNumberRequestBuilder, [{
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/in-store/key={storeKey}/orders/order-number={orderNumber}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
    /**
     *	Updates an order in the store specified by {storeKey}.
     *	If the order exists in the project but does not have the store field,
     *	or the store field references a different store, this method returns a ResourceNotFound error.
     *	In case the orderNumber does not match the regular expression [a-zA-Z0-9_\-]+,
     *	it should be provided in URL-encoded format.
     *
     */

  }, {
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/in-store/key={storeKey}/orders/order-number={orderNumber}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }, {
    key: "delete",
    value: function _delete(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'DELETE',
        uriTemplate: '/{projectKey}/in-store/key={storeKey}/orders/order-number={orderNumber}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyInStoreKeyByStoreKeyOrdersOrderNumberByOrderNumberRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyInStoreKeyByStoreKeyOrdersRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyInStoreKeyByStoreKeyOrdersRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyInStoreKeyByStoreKeyOrdersRequestBuilder);

    this.args = args;
  }

  _createClass(ByProjectKeyInStoreKeyByStoreKeyOrdersRequestBuilder, [{
    key: "withOrderNumber",
    value: function withOrderNumber(childPathArgs) {
      return new ByProjectKeyInStoreKeyByStoreKeyOrdersOrderNumberByOrderNumberRequestBuilder({
        pathArgs: _objectSpread(_objectSpread({}, this.args.pathArgs), childPathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
  }, {
    key: "withId",
    value: function withId(childPathArgs) {
      return new ByProjectKeyInStoreKeyByStoreKeyOrdersByIDRequestBuilder({
        pathArgs: _objectSpread(_objectSpread({}, this.args.pathArgs), childPathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
    /**
     *	Queries orders in a specific Store.
     */

  }, {
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/in-store/key={storeKey}/orders',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
    /**
     *	Creates an order from a Cart from a specific Store.
     *	When using this endpoint the orders's store field is always set to the store specified in the path parameter.
     *	The cart must have a shipping address set before creating an order. When using the Platform TaxMode,
     *	the shipping address is used for tax calculation.
     *
     */

  }, {
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/in-store/key={storeKey}/orders',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyInStoreKeyByStoreKeyOrdersRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyInStoreKeyByStoreKeyProductProjectionsByIDRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyInStoreKeyByStoreKeyProductProjectionsByIDRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyInStoreKeyByStoreKeyProductProjectionsByIDRequestBuilder);

    this.args = args;
  }
  /**
   *	Gets the current or staged representation of a [Product](ctp:api:type:Product) by its ID from the specified Store.
   */


  _createClass(ByProjectKeyInStoreKeyByStoreKeyProductProjectionsByIDRequestBuilder, [{
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/in-store/key={storeKey}/product-projections/{ID}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyInStoreKeyByStoreKeyProductProjectionsByIDRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyInStoreKeyByStoreKeyProductProjectionsKeyByKeyRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyInStoreKeyByStoreKeyProductProjectionsKeyByKeyRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyInStoreKeyByStoreKeyProductProjectionsKeyByKeyRequestBuilder);

    this.args = args;
  }
  /**
   *	Gets the current or staged representation of a [Product](ctp:api:type:Product) by its key from the specified Store.
   */


  _createClass(ByProjectKeyInStoreKeyByStoreKeyProductProjectionsKeyByKeyRequestBuilder, [{
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/in-store/key={storeKey}/product-projections/key={key}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyInStoreKeyByStoreKeyProductProjectionsKeyByKeyRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyInStoreKeyByStoreKeyProductProjectionsRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyInStoreKeyByStoreKeyProductProjectionsRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyInStoreKeyByStoreKeyProductProjectionsRequestBuilder);

    this.args = args;
  }

  _createClass(ByProjectKeyInStoreKeyByStoreKeyProductProjectionsRequestBuilder, [{
    key: "withKey",
    value: function withKey(childPathArgs) {
      return new ByProjectKeyInStoreKeyByStoreKeyProductProjectionsKeyByKeyRequestBuilder({
        pathArgs: _objectSpread(_objectSpread({}, this.args.pathArgs), childPathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
  }, {
    key: "withId",
    value: function withId(childPathArgs) {
      return new ByProjectKeyInStoreKeyByStoreKeyProductProjectionsByIDRequestBuilder({
        pathArgs: _objectSpread(_objectSpread({}, this.args.pathArgs), childPathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
  }]);

  return ByProjectKeyInStoreKeyByStoreKeyProductProjectionsRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyInStoreKeyByStoreKeyProductSelectionAssignmentsRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyInStoreKeyByStoreKeyProductSelectionAssignmentsRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyInStoreKeyByStoreKeyProductSelectionAssignmentsRequestBuilder);

    this.args = args;
  }
  /**
   *	Queries Product Selection assignments in a specific Store.
   *
   *	The response will include duplicate Products whenever more than one active Product Selection of the Store
   *	includes a Product. To make clear through which Product Selection a Product is available in the Store
   *	the response contains assignments including both the Product and the Product Selection.
   *	Only Products of Product Selections that are activated in Store will be returned.
   *
   */


  _createClass(ByProjectKeyInStoreKeyByStoreKeyProductSelectionAssignmentsRequestBuilder, [{
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/in-store/key={storeKey}/product-selection-assignments',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyInStoreKeyByStoreKeyProductSelectionAssignmentsRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyInStoreKeyByStoreKeyShippingMethodsMatchingCartRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyInStoreKeyByStoreKeyShippingMethodsMatchingCartRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyInStoreKeyByStoreKeyShippingMethodsMatchingCartRequestBuilder);

    this.args = args;
  }
  /**
   *	Retrieves all the ShippingMethods that can ship to the shipping address of the given Cart in a given Store.
   *	Each ShippingMethod contains exactly one ShippingRate with the flag `isMatching` set to `true`.
   *	This ShippingRate is used when the ShippingMethod is [added to the Cart](ctp:api:type:CartSetShippingMethodAction).
   *
   */


  _createClass(ByProjectKeyInStoreKeyByStoreKeyShippingMethodsMatchingCartRequestBuilder, [{
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/in-store/key={storeKey}/shipping-methods/matching-cart',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyInStoreKeyByStoreKeyShippingMethodsMatchingCartRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyInStoreKeyByStoreKeyShippingMethodsRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyInStoreKeyByStoreKeyShippingMethodsRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyInStoreKeyByStoreKeyShippingMethodsRequestBuilder);

    this.args = args;
  }
  /**
   *	Get ShippingMethods for a cart in a store
   */


  _createClass(ByProjectKeyInStoreKeyByStoreKeyShippingMethodsRequestBuilder, [{
    key: "matchingCart",
    value: function matchingCart() {
      return new ByProjectKeyInStoreKeyByStoreKeyShippingMethodsMatchingCartRequestBuilder({
        pathArgs: _objectSpread({}, this.args.pathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
  }]);

  return ByProjectKeyInStoreKeyByStoreKeyShippingMethodsRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyInStoreKeyByStoreKeyShoppingListsByIDRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyInStoreKeyByStoreKeyShoppingListsByIDRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyInStoreKeyByStoreKeyShoppingListsByIDRequestBuilder);

    this.args = args;
  }
  /**
   *	Gets a shopping list by ID.
   */


  _createClass(ByProjectKeyInStoreKeyByStoreKeyShoppingListsByIDRequestBuilder, [{
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/in-store/key={storeKey}/shopping-lists/{ID}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }, {
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/in-store/key={storeKey}/shopping-lists/{ID}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }, {
    key: "delete",
    value: function _delete(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'DELETE',
        uriTemplate: '/{projectKey}/in-store/key={storeKey}/shopping-lists/{ID}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyInStoreKeyByStoreKeyShoppingListsByIDRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyInStoreKeyByStoreKeyShoppingListsKeyByKeyRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyInStoreKeyByStoreKeyShoppingListsKeyByKeyRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyInStoreKeyByStoreKeyShoppingListsKeyByKeyRequestBuilder);

    this.args = args;
  }
  /**
   *	Gets a shopping list by Key.
   */


  _createClass(ByProjectKeyInStoreKeyByStoreKeyShoppingListsKeyByKeyRequestBuilder, [{
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/in-store/key={storeKey}/shopping-lists/key={key}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
    /**
     *	Update a shopping list found by its Key.
     */

  }, {
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/in-store/key={storeKey}/shopping-lists/key={key}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }, {
    key: "delete",
    value: function _delete(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'DELETE',
        uriTemplate: '/{projectKey}/in-store/key={storeKey}/shopping-lists/key={key}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyInStoreKeyByStoreKeyShoppingListsKeyByKeyRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyInStoreKeyByStoreKeyShoppingListsRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyInStoreKeyByStoreKeyShoppingListsRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyInStoreKeyByStoreKeyShoppingListsRequestBuilder);

    this.args = args;
  }

  _createClass(ByProjectKeyInStoreKeyByStoreKeyShoppingListsRequestBuilder, [{
    key: "withKey",
    value: function withKey(childPathArgs) {
      return new ByProjectKeyInStoreKeyByStoreKeyShoppingListsKeyByKeyRequestBuilder({
        pathArgs: _objectSpread(_objectSpread({}, this.args.pathArgs), childPathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
  }, {
    key: "withId",
    value: function withId(childPathArgs) {
      return new ByProjectKeyInStoreKeyByStoreKeyShoppingListsByIDRequestBuilder({
        pathArgs: _objectSpread(_objectSpread({}, this.args.pathArgs), childPathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
  }, {
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/in-store/key={storeKey}/shopping-lists',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }, {
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/in-store/key={storeKey}/shopping-lists',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyInStoreKeyByStoreKeyShoppingListsRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyInStoreKeyByStoreKeyRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyInStoreKeyByStoreKeyRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyInStoreKeyByStoreKeyRequestBuilder);

    this.args = args;
  }
  /**
   *	A shopping cart holds product variants and can be ordered.
   */


  _createClass(ByProjectKeyInStoreKeyByStoreKeyRequestBuilder, [{
    key: "carts",
    value: function carts() {
      return new ByProjectKeyInStoreKeyByStoreKeyCartsRequestBuilder({
        pathArgs: _objectSpread({}, this.args.pathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
    /**
     *	An order can be created from a cart, usually after a checkout process has been completed.
     */

  }, {
    key: "orders",
    value: function orders() {
      return new ByProjectKeyInStoreKeyByStoreKeyOrdersRequestBuilder({
        pathArgs: _objectSpread({}, this.args.pathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
  }, {
    key: "me",
    value: function me() {
      return new ByProjectKeyInStoreKeyByStoreKeyMeRequestBuilder({
        pathArgs: _objectSpread({}, this.args.pathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
    /**
     *	A Customer is a person purchasing products. Carts, Orders,
     *	Comments and Reviews can be associated to a Customer.
     *
     */

  }, {
    key: "customers",
    value: function customers() {
      return new ByProjectKeyInStoreKeyByStoreKeyCustomersRequestBuilder({
        pathArgs: _objectSpread({}, this.args.pathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
    /**
     *	Retrieves the authenticated customer.
     */

  }, {
    key: "login",
    value: function login() {
      return new ByProjectKeyInStoreKeyByStoreKeyLoginRequestBuilder({
        pathArgs: _objectSpread({}, this.args.pathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
  }, {
    key: "shippingMethods",
    value: function shippingMethods() {
      return new ByProjectKeyInStoreKeyByStoreKeyShippingMethodsRequestBuilder({
        pathArgs: _objectSpread({}, this.args.pathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
    /**
     *	shopping-lists e.g. for wishlist support
     *
     */

  }, {
    key: "shoppingLists",
    value: function shoppingLists() {
      return new ByProjectKeyInStoreKeyByStoreKeyShoppingListsRequestBuilder({
        pathArgs: _objectSpread({}, this.args.pathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
  }, {
    key: "productProjections",
    value: function productProjections() {
      return new ByProjectKeyInStoreKeyByStoreKeyProductProjectionsRequestBuilder({
        pathArgs: _objectSpread({}, this.args.pathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
  }, {
    key: "productSelectionAssignments",
    value: function productSelectionAssignments() {
      return new ByProjectKeyInStoreKeyByStoreKeyProductSelectionAssignmentsRequestBuilder({
        pathArgs: _objectSpread({}, this.args.pathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
  }]);

  return ByProjectKeyInStoreKeyByStoreKeyRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyInventoryByIDRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyInventoryByIDRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyInventoryByIDRequestBuilder);

    this.args = args;
  }

  _createClass(ByProjectKeyInventoryByIDRequestBuilder, [{
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/inventory/{ID}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }, {
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/inventory/{ID}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
    /**
     *	Produces the [InventoryEntryDeleted](ctp:api:type:InventoryEntryDeletedMessage) Message.
     */

  }, {
    key: "delete",
    value: function _delete(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'DELETE',
        uriTemplate: '/{projectKey}/inventory/{ID}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyInventoryByIDRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyInventoryKeyByKeyRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyInventoryKeyByKeyRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyInventoryKeyByKeyRequestBuilder);

    this.args = args;
  }

  _createClass(ByProjectKeyInventoryKeyByKeyRequestBuilder, [{
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/inventory/key={key}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }, {
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/inventory/key={key}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
    /**
     *	Produces the [InventoryEntryDeleted](ctp:api:type:InventoryEntryDeletedMessage) Message.
     */

  }, {
    key: "delete",
    value: function _delete(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'DELETE',
        uriTemplate: '/{projectKey}/inventory/key={key}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyInventoryKeyByKeyRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyInventoryRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyInventoryRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyInventoryRequestBuilder);

    this.args = args;
  }

  _createClass(ByProjectKeyInventoryRequestBuilder, [{
    key: "withId",
    value: function withId(childPathArgs) {
      return new ByProjectKeyInventoryByIDRequestBuilder({
        pathArgs: _objectSpread(_objectSpread({}, this.args.pathArgs), childPathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
  }, {
    key: "withKey",
    value: function withKey(childPathArgs) {
      return new ByProjectKeyInventoryKeyByKeyRequestBuilder({
        pathArgs: _objectSpread(_objectSpread({}, this.args.pathArgs), childPathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
  }, {
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/inventory',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
    /**
     *	Produces the [InventoryEntryCreated](ctp:api:type:InventoryEntryCreatedMessage) Message.
     */

  }, {
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/inventory',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyInventoryRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyLoginRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyLoginRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyLoginRequestBuilder);

    this.args = args;
  }
  /**
   *	Authenticates a global Customer not associated with a Store.
   *	For more information, see [Global versus Store-specific Customers](/../api/customers-overview#global-versus-store-specific-customers).
   *	If the Customer is registered in a Store, use the [Authenticate (sign in) Customer in Store](/../api/projects/customers#authenticate-sign-in-customer-in-store) method.
   *
   *	If an account with the given credentials is not found, an [InvalidCredentials](ctp:api:type:InvalidCredentialsError) error is returned.
   *
   */


  _createClass(ByProjectKeyLoginRequestBuilder, [{
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/login',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyLoginRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyMeActiveCartRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyMeActiveCartRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyMeActiveCartRequestBuilder);

    this.args = args;
  }

  _createClass(ByProjectKeyMeActiveCartRequestBuilder, [{
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/me/active-cart',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyMeActiveCartRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyMeBusinessUnitsByIDRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyMeBusinessUnitsByIDRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyMeBusinessUnitsByIDRequestBuilder);

    this.args = args;
  }

  _createClass(ByProjectKeyMeBusinessUnitsByIDRequestBuilder, [{
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/me/business-units/{ID}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }, {
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/me/business-units/{ID}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }, {
    key: "delete",
    value: function _delete(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'DELETE',
        uriTemplate: '/{projectKey}/me/business-units/{ID}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyMeBusinessUnitsByIDRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyMeBusinessUnitsKeyByKeyRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyMeBusinessUnitsKeyByKeyRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyMeBusinessUnitsKeyByKeyRequestBuilder);

    this.args = args;
  }

  _createClass(ByProjectKeyMeBusinessUnitsKeyByKeyRequestBuilder, [{
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/me/business-units/key={key}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }, {
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/me/business-units/key={key}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }, {
    key: "delete",
    value: function _delete(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'DELETE',
        uriTemplate: '/{projectKey}/me/business-units/key={key}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyMeBusinessUnitsKeyByKeyRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyMeBusinessUnitsRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyMeBusinessUnitsRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyMeBusinessUnitsRequestBuilder);

    this.args = args;
  }

  _createClass(ByProjectKeyMeBusinessUnitsRequestBuilder, [{
    key: "withId",
    value: function withId(childPathArgs) {
      return new ByProjectKeyMeBusinessUnitsByIDRequestBuilder({
        pathArgs: _objectSpread(_objectSpread({}, this.args.pathArgs), childPathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
  }, {
    key: "withKey",
    value: function withKey(childPathArgs) {
      return new ByProjectKeyMeBusinessUnitsKeyByKeyRequestBuilder({
        pathArgs: _objectSpread(_objectSpread({}, this.args.pathArgs), childPathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
  }, {
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/me/business-units',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }, {
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/me/business-units',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyMeBusinessUnitsRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyMeCartsReplicateRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyMeCartsReplicateRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyMeCartsReplicateRequestBuilder);

    this.args = args;
  }

  _createClass(ByProjectKeyMeCartsReplicateRequestBuilder, [{
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/me/carts/replicate',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyMeCartsReplicateRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyMeCartsByIDRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyMeCartsByIDRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyMeCartsByIDRequestBuilder);

    this.args = args;
  }

  _createClass(ByProjectKeyMeCartsByIDRequestBuilder, [{
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/me/carts/{ID}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }, {
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/me/carts/{ID}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }, {
    key: "delete",
    value: function _delete(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'DELETE',
        uriTemplate: '/{projectKey}/me/carts/{ID}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyMeCartsByIDRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyMeCartsKeyByKeyRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyMeCartsKeyByKeyRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyMeCartsKeyByKeyRequestBuilder);

    this.args = args;
  }

  _createClass(ByProjectKeyMeCartsKeyByKeyRequestBuilder, [{
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/me/carts/key={key}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }, {
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/me/carts/key={key}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }, {
    key: "delete",
    value: function _delete(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'DELETE',
        uriTemplate: '/{projectKey}/me/carts/key={key}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyMeCartsKeyByKeyRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyMeCartsRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyMeCartsRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyMeCartsRequestBuilder);

    this.args = args;
  }

  _createClass(ByProjectKeyMeCartsRequestBuilder, [{
    key: "withKey",
    value: function withKey(childPathArgs) {
      return new ByProjectKeyMeCartsKeyByKeyRequestBuilder({
        pathArgs: _objectSpread(_objectSpread({}, this.args.pathArgs), childPathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
  }, {
    key: "withId",
    value: function withId(childPathArgs) {
      return new ByProjectKeyMeCartsByIDRequestBuilder({
        pathArgs: _objectSpread(_objectSpread({}, this.args.pathArgs), childPathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
  }, {
    key: "replicate",
    value: function replicate() {
      return new ByProjectKeyMeCartsReplicateRequestBuilder({
        pathArgs: _objectSpread({}, this.args.pathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
  }, {
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/me/carts',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }, {
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/me/carts',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyMeCartsRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyMeEmailConfirmRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyMeEmailConfirmRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyMeEmailConfirmRequestBuilder);

    this.args = args;
  }
  /**
   *	This is the last step in the [email verification process of a Customer](/../api/projects/customers#email-verification-of-customer).
   *
   */


  _createClass(ByProjectKeyMeEmailConfirmRequestBuilder, [{
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/me/email/confirm',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyMeEmailConfirmRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyMeLoginRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyMeLoginRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyMeLoginRequestBuilder);

    this.args = args;
  }
  /**
   *	Retrieves the authenticated customer (that matches the given email/password pair).
   *
   *	If used with [an access token for an anonymous session](/../api/authorization#tokens-for-anonymous-sessions), all Orders and Carts that belong to the `anonymousId` are assigned to the newly logged-in Customer.
   *
   *	- If the Customer does not have a Cart yet, the most recently modified anonymous cart becomes the Customer's Cart.
   *	- If the Customer already has a Cart, the most recently modified anonymous cart is handled in accordance with [AnonymousCartSignInMode](ctp:api:type:AnonymousCartSignInMode).
   *
   *	A Cart returned as part of the [CustomerSignInResult](ctp:api:type:CustomerSignInResult) is [recalculated](ctp:api:type:Recalculate) with up-to-date prices, taxes, discounts, and invalid line items removed.
   *
   *	If an account with the given credentials is not found, an [InvalidCredentials](ctp:api:type:InvalidCredentialsError) error is returned.
   *
   */


  _createClass(ByProjectKeyMeLoginRequestBuilder, [{
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/me/login',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyMeLoginRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyMeOrdersByIDRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyMeOrdersByIDRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyMeOrdersByIDRequestBuilder);

    this.args = args;
  }

  _createClass(ByProjectKeyMeOrdersByIDRequestBuilder, [{
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/me/orders/{ID}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyMeOrdersByIDRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyMeOrdersRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyMeOrdersRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyMeOrdersRequestBuilder);

    this.args = args;
  }

  _createClass(ByProjectKeyMeOrdersRequestBuilder, [{
    key: "withId",
    value: function withId(childPathArgs) {
      return new ByProjectKeyMeOrdersByIDRequestBuilder({
        pathArgs: _objectSpread(_objectSpread({}, this.args.pathArgs), childPathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
  }, {
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/me/orders',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }, {
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/me/orders',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyMeOrdersRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyMePasswordResetRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyMePasswordResetRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyMePasswordResetRequestBuilder);

    this.args = args;
  }
  /**
   *	This is the last step in the [password reset process of a Customer](/../api/projects/customers#password-reset-of-customer).
   *
   *	Resetting a password of the Customer produces the [CustomerPasswordUpdated](ctp:api:type:CustomerPasswordUpdatedMessage) Message with `reset=true`.
   *
   */


  _createClass(ByProjectKeyMePasswordResetRequestBuilder, [{
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/me/password/reset',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyMePasswordResetRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyMePasswordRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyMePasswordRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyMePasswordRequestBuilder);

    this.args = args;
  }

  _createClass(ByProjectKeyMePasswordRequestBuilder, [{
    key: "reset",
    value: function reset() {
      return new ByProjectKeyMePasswordResetRequestBuilder({
        pathArgs: _objectSpread({}, this.args.pathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
    /**
     *	Changing the password of the Customer produces the [CustomerPasswordUpdated](ctp:api:type:CustomerPasswordUpdatedMessage) Message with `reset=false`.
     *
     *	If the current password does not match, an [InvalidCurrentPassword](ctp:api:type:InvalidCurrentPasswordError) error is returned.
     *
     */

  }, {
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/me/password',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyMePasswordRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyMePaymentsByIDRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyMePaymentsByIDRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyMePaymentsByIDRequestBuilder);

    this.args = args;
  }

  _createClass(ByProjectKeyMePaymentsByIDRequestBuilder, [{
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/me/payments/{ID}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }, {
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/me/payments/{ID}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }, {
    key: "delete",
    value: function _delete(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'DELETE',
        uriTemplate: '/{projectKey}/me/payments/{ID}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyMePaymentsByIDRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyMePaymentsKeyByKeyRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyMePaymentsKeyByKeyRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyMePaymentsKeyByKeyRequestBuilder);

    this.args = args;
  }

  _createClass(ByProjectKeyMePaymentsKeyByKeyRequestBuilder, [{
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/me/payments/key={key}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }, {
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/me/payments/key={key}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }, {
    key: "delete",
    value: function _delete(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'DELETE',
        uriTemplate: '/{projectKey}/me/payments/key={key}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyMePaymentsKeyByKeyRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyMePaymentsRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyMePaymentsRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyMePaymentsRequestBuilder);

    this.args = args;
  }

  _createClass(ByProjectKeyMePaymentsRequestBuilder, [{
    key: "withKey",
    value: function withKey(childPathArgs) {
      return new ByProjectKeyMePaymentsKeyByKeyRequestBuilder({
        pathArgs: _objectSpread(_objectSpread({}, this.args.pathArgs), childPathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
  }, {
    key: "withId",
    value: function withId(childPathArgs) {
      return new ByProjectKeyMePaymentsByIDRequestBuilder({
        pathArgs: _objectSpread(_objectSpread({}, this.args.pathArgs), childPathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
  }, {
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/me/payments',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }, {
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/me/payments',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyMePaymentsRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyMeQuoteRequestsByIDRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyMeQuoteRequestsByIDRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyMeQuoteRequestsByIDRequestBuilder);

    this.args = args;
  }

  _createClass(ByProjectKeyMeQuoteRequestsByIDRequestBuilder, [{
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/me/quote-requests/{ID}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }, {
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/me/quote-requests/{ID}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }, {
    key: "delete",
    value: function _delete(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'DELETE',
        uriTemplate: '/{projectKey}/me/quote-requests/{ID}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyMeQuoteRequestsByIDRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyMeQuoteRequestsKeyByKeyRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyMeQuoteRequestsKeyByKeyRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyMeQuoteRequestsKeyByKeyRequestBuilder);

    this.args = args;
  }

  _createClass(ByProjectKeyMeQuoteRequestsKeyByKeyRequestBuilder, [{
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/me/quote-requests/key={key}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }, {
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/me/quote-requests/key={key}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }, {
    key: "delete",
    value: function _delete(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'DELETE',
        uriTemplate: '/{projectKey}/me/quote-requests/key={key}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyMeQuoteRequestsKeyByKeyRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyMeQuoteRequestsRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyMeQuoteRequestsRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyMeQuoteRequestsRequestBuilder);

    this.args = args;
  }

  _createClass(ByProjectKeyMeQuoteRequestsRequestBuilder, [{
    key: "withId",
    value: function withId(childPathArgs) {
      return new ByProjectKeyMeQuoteRequestsByIDRequestBuilder({
        pathArgs: _objectSpread(_objectSpread({}, this.args.pathArgs), childPathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
  }, {
    key: "withKey",
    value: function withKey(childPathArgs) {
      return new ByProjectKeyMeQuoteRequestsKeyByKeyRequestBuilder({
        pathArgs: _objectSpread(_objectSpread({}, this.args.pathArgs), childPathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
  }, {
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/me/quote-requests',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }, {
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/me/quote-requests',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyMeQuoteRequestsRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyMeQuotesByIDRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyMeQuotesByIDRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyMeQuotesByIDRequestBuilder);

    this.args = args;
  }

  _createClass(ByProjectKeyMeQuotesByIDRequestBuilder, [{
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/me/quotes/{ID}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }, {
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/me/quotes/{ID}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyMeQuotesByIDRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyMeQuotesKeyByKeyRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyMeQuotesKeyByKeyRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyMeQuotesKeyByKeyRequestBuilder);

    this.args = args;
  }

  _createClass(ByProjectKeyMeQuotesKeyByKeyRequestBuilder, [{
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/me/quotes/key={key}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }, {
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/me/quotes/key={key}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyMeQuotesKeyByKeyRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyMeQuotesRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyMeQuotesRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyMeQuotesRequestBuilder);

    this.args = args;
  }

  _createClass(ByProjectKeyMeQuotesRequestBuilder, [{
    key: "withId",
    value: function withId(childPathArgs) {
      return new ByProjectKeyMeQuotesByIDRequestBuilder({
        pathArgs: _objectSpread(_objectSpread({}, this.args.pathArgs), childPathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
  }, {
    key: "withKey",
    value: function withKey(childPathArgs) {
      return new ByProjectKeyMeQuotesKeyByKeyRequestBuilder({
        pathArgs: _objectSpread(_objectSpread({}, this.args.pathArgs), childPathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
  }, {
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/me/quotes',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyMeQuotesRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyMeShoppingListsByIDRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyMeShoppingListsByIDRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyMeShoppingListsByIDRequestBuilder);

    this.args = args;
  }

  _createClass(ByProjectKeyMeShoppingListsByIDRequestBuilder, [{
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/me/shopping-lists/{ID}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }, {
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/me/shopping-lists/{ID}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }, {
    key: "delete",
    value: function _delete(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'DELETE',
        uriTemplate: '/{projectKey}/me/shopping-lists/{ID}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyMeShoppingListsByIDRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyMeShoppingListsKeyByKeyRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyMeShoppingListsKeyByKeyRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyMeShoppingListsKeyByKeyRequestBuilder);

    this.args = args;
  }

  _createClass(ByProjectKeyMeShoppingListsKeyByKeyRequestBuilder, [{
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/me/shopping-lists/key={key}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }, {
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/me/shopping-lists/key={key}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }, {
    key: "delete",
    value: function _delete(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'DELETE',
        uriTemplate: '/{projectKey}/me/shopping-lists/key={key}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyMeShoppingListsKeyByKeyRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyMeShoppingListsRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyMeShoppingListsRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyMeShoppingListsRequestBuilder);

    this.args = args;
  }

  _createClass(ByProjectKeyMeShoppingListsRequestBuilder, [{
    key: "withId",
    value: function withId(childPathArgs) {
      return new ByProjectKeyMeShoppingListsByIDRequestBuilder({
        pathArgs: _objectSpread(_objectSpread({}, this.args.pathArgs), childPathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
  }, {
    key: "withKey",
    value: function withKey(childPathArgs) {
      return new ByProjectKeyMeShoppingListsKeyByKeyRequestBuilder({
        pathArgs: _objectSpread(_objectSpread({}, this.args.pathArgs), childPathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
  }, {
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/me/shopping-lists',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }, {
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/me/shopping-lists',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyMeShoppingListsRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyMeSignupRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyMeSignupRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyMeSignupRequestBuilder);

    this.args = args;
  }
  /**
   *	If used with an [access token for an anonymous session](/../api/authorization#tokens-for-anonymous-sessions), all Orders and Carts that belong to the `anonymousId` are assigned to the newly created Customer.
   *
   *	Creating a Customer produces the [CustomerCreated](ctp:api:type:CustomerCreatedMessage) Message.
   *
   */


  _createClass(ByProjectKeyMeSignupRequestBuilder, [{
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/me/signup',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyMeSignupRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyMeRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyMeRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyMeRequestBuilder);

    this.args = args;
  }

  _createClass(ByProjectKeyMeRequestBuilder, [{
    key: "emailConfirm",
    value: function emailConfirm() {
      return new ByProjectKeyMeEmailConfirmRequestBuilder({
        pathArgs: _objectSpread({}, this.args.pathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
  }, {
    key: "password",
    value: function password() {
      return new ByProjectKeyMePasswordRequestBuilder({
        pathArgs: _objectSpread({}, this.args.pathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
  }, {
    key: "signup",
    value: function signup() {
      return new ByProjectKeyMeSignupRequestBuilder({
        pathArgs: _objectSpread({}, this.args.pathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
  }, {
    key: "login",
    value: function login() {
      return new ByProjectKeyMeLoginRequestBuilder({
        pathArgs: _objectSpread({}, this.args.pathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
  }, {
    key: "activeCart",
    value: function activeCart() {
      return new ByProjectKeyMeActiveCartRequestBuilder({
        pathArgs: _objectSpread({}, this.args.pathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
    /**
     *	MyBusinessUnit creates and provides access to Business Units scoped to a specific user.
     */

  }, {
    key: "businessUnits",
    value: function businessUnits() {
      return new ByProjectKeyMeBusinessUnitsRequestBuilder({
        pathArgs: _objectSpread({}, this.args.pathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
    /**
     *	A shopping cart holds product variants and can be ordered.
     */

  }, {
    key: "carts",
    value: function carts() {
      return new ByProjectKeyMeCartsRequestBuilder({
        pathArgs: _objectSpread({}, this.args.pathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
    /**
     *	An order can be created from a cart, usually after a checkout process has been completed.
     */

  }, {
    key: "orders",
    value: function orders() {
      return new ByProjectKeyMeOrdersRequestBuilder({
        pathArgs: _objectSpread({}, this.args.pathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
    /**
     *	The My Payments endpoint creates and provides access to payments scoped to a specific user.
     */

  }, {
    key: "payments",
    value: function payments() {
      return new ByProjectKeyMePaymentsRequestBuilder({
        pathArgs: _objectSpread({}, this.args.pathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
    /**
     *	The My Quote Requests endpoint creates and provides access to Quote Requests scoped to a specific user.
     */

  }, {
    key: "quoteRequests",
    value: function quoteRequests() {
      return new ByProjectKeyMeQuoteRequestsRequestBuilder({
        pathArgs: _objectSpread({}, this.args.pathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
    /**
     *	The My Quote endpoint provides access to Quotes scoped to a specific user.
     */

  }, {
    key: "quotes",
    value: function quotes() {
      return new ByProjectKeyMeQuotesRequestBuilder({
        pathArgs: _objectSpread({}, this.args.pathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
    /**
     *	The My Shopping Lists endpoint creates and provides access to shopping lists scoped to a specific user.
     */

  }, {
    key: "shoppingLists",
    value: function shoppingLists() {
      return new ByProjectKeyMeShoppingListsRequestBuilder({
        pathArgs: _objectSpread({}, this.args.pathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
  }, {
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/me',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }, {
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/me',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }, {
    key: "delete",
    value: function _delete(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'DELETE',
        uriTemplate: '/{projectKey}/me',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyMeRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyMessagesByIDRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyMessagesByIDRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyMessagesByIDRequestBuilder);

    this.args = args;
  }
  /**
   *	Deprecated scope: `view_orders:{projectKey}`
   */


  _createClass(ByProjectKeyMessagesByIDRequestBuilder, [{
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/messages/{ID}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyMessagesByIDRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyMessagesRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyMessagesRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyMessagesRequestBuilder);

    this.args = args;
  }

  _createClass(ByProjectKeyMessagesRequestBuilder, [{
    key: "withId",
    value: function withId(childPathArgs) {
      return new ByProjectKeyMessagesByIDRequestBuilder({
        pathArgs: _objectSpread(_objectSpread({}, this.args.pathArgs), childPathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
    /**
     *	Deprecated scope: `view_orders:{projectKey}`
     */

  }, {
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/messages',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyMessagesRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyOrdersEditsByIDApplyRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyOrdersEditsByIDApplyRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyOrdersEditsByIDApplyRequestBuilder);

    this.args = args;
  }

  _createClass(ByProjectKeyOrdersEditsByIDApplyRequestBuilder, [{
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/orders/edits/{ID}/apply',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyOrdersEditsByIDApplyRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyOrdersEditsByIDRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyOrdersEditsByIDRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyOrdersEditsByIDRequestBuilder);

    this.args = args;
  }

  _createClass(ByProjectKeyOrdersEditsByIDRequestBuilder, [{
    key: "apply",
    value: function apply() {
      return new ByProjectKeyOrdersEditsByIDApplyRequestBuilder({
        pathArgs: _objectSpread({}, this.args.pathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
  }, {
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/orders/edits/{ID}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }, {
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/orders/edits/{ID}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }, {
    key: "delete",
    value: function _delete(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'DELETE',
        uriTemplate: '/{projectKey}/orders/edits/{ID}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyOrdersEditsByIDRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyOrdersEditsKeyByKeyRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyOrdersEditsKeyByKeyRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyOrdersEditsKeyByKeyRequestBuilder);

    this.args = args;
  }

  _createClass(ByProjectKeyOrdersEditsKeyByKeyRequestBuilder, [{
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/orders/edits/key={key}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }, {
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/orders/edits/key={key}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }, {
    key: "delete",
    value: function _delete(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'DELETE',
        uriTemplate: '/{projectKey}/orders/edits/key={key}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyOrdersEditsKeyByKeyRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyOrdersEditsRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyOrdersEditsRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyOrdersEditsRequestBuilder);

    this.args = args;
  }

  _createClass(ByProjectKeyOrdersEditsRequestBuilder, [{
    key: "withKey",
    value: function withKey(childPathArgs) {
      return new ByProjectKeyOrdersEditsKeyByKeyRequestBuilder({
        pathArgs: _objectSpread(_objectSpread({}, this.args.pathArgs), childPathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
  }, {
    key: "withId",
    value: function withId(childPathArgs) {
      return new ByProjectKeyOrdersEditsByIDRequestBuilder({
        pathArgs: _objectSpread(_objectSpread({}, this.args.pathArgs), childPathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
  }, {
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/orders/edits',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }, {
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/orders/edits',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyOrdersEditsRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyOrdersImportRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyOrdersImportRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyOrdersImportRequestBuilder);

    this.args = args;
  }
  /**
   *	Create an Order by Import
   */


  _createClass(ByProjectKeyOrdersImportRequestBuilder, [{
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/orders/import',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyOrdersImportRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyOrdersQuotesRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyOrdersQuotesRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyOrdersQuotesRequestBuilder);

    this.args = args;
  }
  /**
   *	Create an Order from a Quote
   */


  _createClass(ByProjectKeyOrdersQuotesRequestBuilder, [{
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/orders/quotes',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyOrdersQuotesRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyOrdersSearchRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyOrdersSearchRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyOrdersSearchRequestBuilder);

    this.args = args;
  }

  _createClass(ByProjectKeyOrdersSearchRequestBuilder, [{
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/orders/search',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
    /**
     *	Checks whether a search index for the Project's Orders exists.
     */

  }, {
    key: "head",
    value: function head(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'HEAD',
        uriTemplate: '/{projectKey}/orders/search',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyOrdersSearchRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyOrdersByIDRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyOrdersByIDRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyOrdersByIDRequestBuilder);

    this.args = args;
  }

  _createClass(ByProjectKeyOrdersByIDRequestBuilder, [{
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/orders/{ID}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }, {
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/orders/{ID}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }, {
    key: "delete",
    value: function _delete(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'DELETE',
        uriTemplate: '/{projectKey}/orders/{ID}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyOrdersByIDRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyOrdersOrderNumberByOrderNumberRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyOrdersOrderNumberByOrderNumberRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyOrdersOrderNumberByOrderNumberRequestBuilder);

    this.args = args;
  }
  /**
   *	In case the orderNumber does not match the regular expression [a-zA-Z0-9_\-]+,
   *	it should be provided in URL-encoded format.
   *
   */


  _createClass(ByProjectKeyOrdersOrderNumberByOrderNumberRequestBuilder, [{
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/orders/order-number={orderNumber}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }, {
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/orders/order-number={orderNumber}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }, {
    key: "delete",
    value: function _delete(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'DELETE',
        uriTemplate: '/{projectKey}/orders/order-number={orderNumber}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyOrdersOrderNumberByOrderNumberRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyOrdersRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyOrdersRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyOrdersRequestBuilder);

    this.args = args;
  }

  _createClass(ByProjectKeyOrdersRequestBuilder, [{
    key: "importOrder",
    value: function importOrder() {
      return new ByProjectKeyOrdersImportRequestBuilder({
        pathArgs: _objectSpread({}, this.args.pathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
  }, {
    key: "orderQuote",
    value: function orderQuote() {
      return new ByProjectKeyOrdersQuotesRequestBuilder({
        pathArgs: _objectSpread({}, this.args.pathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
  }, {
    key: "withOrderNumber",
    value: function withOrderNumber(childPathArgs) {
      return new ByProjectKeyOrdersOrderNumberByOrderNumberRequestBuilder({
        pathArgs: _objectSpread(_objectSpread({}, this.args.pathArgs), childPathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
    /**
     *	OrderEdit are containers for financial changes after an Order has been placed.
     */

  }, {
    key: "edits",
    value: function edits() {
      return new ByProjectKeyOrdersEditsRequestBuilder({
        pathArgs: _objectSpread({}, this.args.pathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
  }, {
    key: "withId",
    value: function withId(childPathArgs) {
      return new ByProjectKeyOrdersByIDRequestBuilder({
        pathArgs: _objectSpread(_objectSpread({}, this.args.pathArgs), childPathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
    /**
     *	This endpoint provides high performance search queries over Orders. The order search allows searching through all orders (currently supporting a limit of the 10.000.000 newest orders) in your project.
     *
     */

  }, {
    key: "search",
    value: function search() {
      return new ByProjectKeyOrdersSearchRequestBuilder({
        pathArgs: _objectSpread({}, this.args.pathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
  }, {
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/orders',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
    /**
     *	Creates an order from a Cart.
     *	The cart must have a shipping address set before creating an order.
     *	When using the Platform TaxMode, the shipping address is used for tax calculation.
     *
     */

  }, {
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/orders',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyOrdersRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyPaymentsByIDRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyPaymentsByIDRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyPaymentsByIDRequestBuilder);

    this.args = args;
  }

  _createClass(ByProjectKeyPaymentsByIDRequestBuilder, [{
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/payments/{ID}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }, {
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/payments/{ID}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }, {
    key: "delete",
    value: function _delete(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'DELETE',
        uriTemplate: '/{projectKey}/payments/{ID}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyPaymentsByIDRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyPaymentsKeyByKeyRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyPaymentsKeyByKeyRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyPaymentsKeyByKeyRequestBuilder);

    this.args = args;
  }

  _createClass(ByProjectKeyPaymentsKeyByKeyRequestBuilder, [{
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/payments/key={key}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }, {
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/payments/key={key}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }, {
    key: "delete",
    value: function _delete(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'DELETE',
        uriTemplate: '/{projectKey}/payments/key={key}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyPaymentsKeyByKeyRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyPaymentsRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyPaymentsRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyPaymentsRequestBuilder);

    this.args = args;
  }

  _createClass(ByProjectKeyPaymentsRequestBuilder, [{
    key: "withKey",
    value: function withKey(childPathArgs) {
      return new ByProjectKeyPaymentsKeyByKeyRequestBuilder({
        pathArgs: _objectSpread(_objectSpread({}, this.args.pathArgs), childPathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
  }, {
    key: "withId",
    value: function withId(childPathArgs) {
      return new ByProjectKeyPaymentsByIDRequestBuilder({
        pathArgs: _objectSpread(_objectSpread({}, this.args.pathArgs), childPathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
  }, {
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/payments',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
    /**
     *	To create a payment object a payment draft object has to be given with the request.
     */

  }, {
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/payments',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyPaymentsRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyProductDiscountsMatchingRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyProductDiscountsMatchingRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyProductDiscountsMatchingRequestBuilder);

    this.args = args;
  }
  /**
   *	This endpoint can be used to simulate which Product Discounts would be applied if a specified Product Variant had a specified Price.
   *	Given Product and Product Variant IDs and a Price, this endpoint will return the [ProductDiscount](ctp:api:type:ProductDiscount) that would have been applied to that Price.
   *
   */


  _createClass(ByProjectKeyProductDiscountsMatchingRequestBuilder, [{
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/product-discounts/matching',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyProductDiscountsMatchingRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyProductDiscountsByIDRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyProductDiscountsByIDRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyProductDiscountsByIDRequestBuilder);

    this.args = args;
  }

  _createClass(ByProjectKeyProductDiscountsByIDRequestBuilder, [{
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/product-discounts/{ID}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }, {
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/product-discounts/{ID}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }, {
    key: "delete",
    value: function _delete(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'DELETE',
        uriTemplate: '/{projectKey}/product-discounts/{ID}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyProductDiscountsByIDRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyProductDiscountsKeyByKeyRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyProductDiscountsKeyByKeyRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyProductDiscountsKeyByKeyRequestBuilder);

    this.args = args;
  }

  _createClass(ByProjectKeyProductDiscountsKeyByKeyRequestBuilder, [{
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/product-discounts/key={key}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }, {
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/product-discounts/key={key}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }, {
    key: "delete",
    value: function _delete(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'DELETE',
        uriTemplate: '/{projectKey}/product-discounts/key={key}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyProductDiscountsKeyByKeyRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyProductDiscountsRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyProductDiscountsRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyProductDiscountsRequestBuilder);

    this.args = args;
  }

  _createClass(ByProjectKeyProductDiscountsRequestBuilder, [{
    key: "matching",
    value: function matching() {
      return new ByProjectKeyProductDiscountsMatchingRequestBuilder({
        pathArgs: _objectSpread({}, this.args.pathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
  }, {
    key: "withKey",
    value: function withKey(childPathArgs) {
      return new ByProjectKeyProductDiscountsKeyByKeyRequestBuilder({
        pathArgs: _objectSpread(_objectSpread({}, this.args.pathArgs), childPathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
  }, {
    key: "withId",
    value: function withId(childPathArgs) {
      return new ByProjectKeyProductDiscountsByIDRequestBuilder({
        pathArgs: _objectSpread(_objectSpread({}, this.args.pathArgs), childPathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
  }, {
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/product-discounts',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }, {
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/product-discounts',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyProductDiscountsRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyProductProjectionsSearchRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyProductProjectionsSearchRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyProductProjectionsSearchRequestBuilder);

    this.args = args;
  }
  /**
   *	Search Product Projection
   */


  _createClass(ByProjectKeyProductProjectionsSearchRequestBuilder, [{
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/product-projections/search',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/x-www-form-urlencoded'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
    /**
     *	Search Product Projection
     */

  }, {
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/product-projections/search',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyProductProjectionsSearchRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyProductProjectionsSuggestRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyProductProjectionsSuggestRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyProductProjectionsSuggestRequestBuilder);

    this.args = args;
  }

  _createClass(ByProjectKeyProductProjectionsSuggestRequestBuilder, [{
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/product-projections/suggest',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyProductProjectionsSuggestRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyProductProjectionsByIDRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyProductProjectionsByIDRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyProductProjectionsByIDRequestBuilder);

    this.args = args;
  }
  /**
   *	Gets the current or staged representation of a product in a catalog by ID.
   *	When used with an API client that has the view_published_products:{projectKey} scope,
   *	this endpoint only returns published (current) product projections.
   *
   */


  _createClass(ByProjectKeyProductProjectionsByIDRequestBuilder, [{
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/product-projections/{ID}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyProductProjectionsByIDRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyProductProjectionsKeyByKeyRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyProductProjectionsKeyByKeyRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyProductProjectionsKeyByKeyRequestBuilder);

    this.args = args;
  }
  /**
   *	Gets the current or staged representation of a product found by Key.
   *	When used with an API client that has the view_published_products:{projectKey} scope,
   *	this endpoint only returns published (current) product projections.
   *
   */


  _createClass(ByProjectKeyProductProjectionsKeyByKeyRequestBuilder, [{
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/product-projections/key={key}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyProductProjectionsKeyByKeyRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyProductProjectionsRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyProductProjectionsRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyProductProjectionsRequestBuilder);

    this.args = args;
  }
  /**
   *	This endpoint provides high performance search queries over ProductProjections. The query result contains the
   *	ProductProjections for which at least one ProductVariant matches the search query. This means that variants can
   *	be included in the result also for which the search query does not match. To determine which ProductVariants match
   *	the search query, the returned ProductProjections include the additional field isMatchingVariant.
   *
   */


  _createClass(ByProjectKeyProductProjectionsRequestBuilder, [{
    key: "search",
    value: function search() {
      return new ByProjectKeyProductProjectionsSearchRequestBuilder({
        pathArgs: _objectSpread({}, this.args.pathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
    /**
     *	The source of data for suggestions is the searchKeyword field in a product
     */

  }, {
    key: "suggest",
    value: function suggest() {
      return new ByProjectKeyProductProjectionsSuggestRequestBuilder({
        pathArgs: _objectSpread({}, this.args.pathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
  }, {
    key: "withKey",
    value: function withKey(childPathArgs) {
      return new ByProjectKeyProductProjectionsKeyByKeyRequestBuilder({
        pathArgs: _objectSpread(_objectSpread({}, this.args.pathArgs), childPathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
  }, {
    key: "withId",
    value: function withId(childPathArgs) {
      return new ByProjectKeyProductProjectionsByIDRequestBuilder({
        pathArgs: _objectSpread(_objectSpread({}, this.args.pathArgs), childPathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
    /**
     *	You can use the product projections query endpoint to get the current or staged representations of Products.
     *	When used with an API client that has the view_published_products:{projectKey} scope,
     *	this endpoint only returns published (current) product projections.
     *
     */

  }, {
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/product-projections',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyProductProjectionsRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyProductSelectionsByIDProductsRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyProductSelectionsByIDProductsRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyProductSelectionsByIDProductsRequestBuilder);

    this.args = args;
  }

  _createClass(ByProjectKeyProductSelectionsByIDProductsRequestBuilder, [{
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/product-selections/{ID}/products',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyProductSelectionsByIDProductsRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyProductSelectionsByIDRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyProductSelectionsByIDRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyProductSelectionsByIDRequestBuilder);

    this.args = args;
  }

  _createClass(ByProjectKeyProductSelectionsByIDRequestBuilder, [{
    key: "products",
    value: function products() {
      return new ByProjectKeyProductSelectionsByIDProductsRequestBuilder({
        pathArgs: _objectSpread({}, this.args.pathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
  }, {
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/product-selections/{ID}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }, {
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/product-selections/{ID}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
    /**
     *	Deletion will only succeed if the Product Selection is not assigned to any [Store](/../api/projects/stores#store).
     */

  }, {
    key: "delete",
    value: function _delete(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'DELETE',
        uriTemplate: '/{projectKey}/product-selections/{ID}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyProductSelectionsByIDRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyProductSelectionsKeyByKeyProductsRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyProductSelectionsKeyByKeyProductsRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyProductSelectionsKeyByKeyProductsRequestBuilder);

    this.args = args;
  }

  _createClass(ByProjectKeyProductSelectionsKeyByKeyProductsRequestBuilder, [{
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/product-selections/key={key}/products',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyProductSelectionsKeyByKeyProductsRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyProductSelectionsKeyByKeyRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyProductSelectionsKeyByKeyRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyProductSelectionsKeyByKeyRequestBuilder);

    this.args = args;
  }

  _createClass(ByProjectKeyProductSelectionsKeyByKeyRequestBuilder, [{
    key: "products",
    value: function products() {
      return new ByProjectKeyProductSelectionsKeyByKeyProductsRequestBuilder({
        pathArgs: _objectSpread({}, this.args.pathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
  }, {
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/product-selections/key={key}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }, {
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/product-selections/key={key}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
    /**
     *	Deletion will only succeed if the Product Selection is not assigned to any [Store](/../api/projects/stores#store).
     */

  }, {
    key: "delete",
    value: function _delete(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'DELETE',
        uriTemplate: '/{projectKey}/product-selections/key={key}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyProductSelectionsKeyByKeyRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyProductSelectionsRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyProductSelectionsRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyProductSelectionsRequestBuilder);

    this.args = args;
  }

  _createClass(ByProjectKeyProductSelectionsRequestBuilder, [{
    key: "withKey",
    value: function withKey(childPathArgs) {
      return new ByProjectKeyProductSelectionsKeyByKeyRequestBuilder({
        pathArgs: _objectSpread(_objectSpread({}, this.args.pathArgs), childPathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
  }, {
    key: "withId",
    value: function withId(childPathArgs) {
      return new ByProjectKeyProductSelectionsByIDRequestBuilder({
        pathArgs: _objectSpread(_objectSpread({}, this.args.pathArgs), childPathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
  }, {
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/product-selections',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }, {
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/product-selections',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyProductSelectionsRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyProductTypesByIDRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyProductTypesByIDRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyProductTypesByIDRequestBuilder);

    this.args = args;
  }

  _createClass(ByProjectKeyProductTypesByIDRequestBuilder, [{
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/product-types/{ID}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
    /**
     *	Checks if a Product Type with given `id` exists. Responds with a `200 OK` status if the `Product Type` exists or `404 Not Found` otherwise.
     */

  }, {
    key: "head",
    value: function head(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'HEAD',
        uriTemplate: '/{projectKey}/product-types/{ID}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      }, this.args.executeRequest);
    }
  }, {
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/product-types/{ID}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }, {
    key: "delete",
    value: function _delete(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'DELETE',
        uriTemplate: '/{projectKey}/product-types/{ID}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyProductTypesByIDRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyProductTypesKeyByKeyRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyProductTypesKeyByKeyRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyProductTypesKeyByKeyRequestBuilder);

    this.args = args;
  }

  _createClass(ByProjectKeyProductTypesKeyByKeyRequestBuilder, [{
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/product-types/key={key}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
    /**
     *	Checks if a Product Type with given `key` exists. Responds with a `200 OK` status if the `Product Type` exists or `404 Not Found` otherwise.
     */

  }, {
    key: "head",
    value: function head(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'HEAD',
        uriTemplate: '/{projectKey}/product-types/key={key}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      }, this.args.executeRequest);
    }
  }, {
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/product-types/key={key}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }, {
    key: "delete",
    value: function _delete(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'DELETE',
        uriTemplate: '/{projectKey}/product-types/key={key}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyProductTypesKeyByKeyRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyProductTypesRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyProductTypesRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyProductTypesRequestBuilder);

    this.args = args;
  }

  _createClass(ByProjectKeyProductTypesRequestBuilder, [{
    key: "withKey",
    value: function withKey(childPathArgs) {
      return new ByProjectKeyProductTypesKeyByKeyRequestBuilder({
        pathArgs: _objectSpread(_objectSpread({}, this.args.pathArgs), childPathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
  }, {
    key: "withId",
    value: function withId(childPathArgs) {
      return new ByProjectKeyProductTypesByIDRequestBuilder({
        pathArgs: _objectSpread(_objectSpread({}, this.args.pathArgs), childPathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
  }, {
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/product-types',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
    /**
     *	Check if Product Types exist. Responds with a `200 OK` status if any Product Types match the Query Predicate, or `404 Not Found` otherwise.
     */

  }, {
    key: "head",
    value: function head(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'HEAD',
        uriTemplate: '/{projectKey}/product-types',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }, {
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/product-types',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyProductTypesRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyProductsByIDImagesRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyProductsByIDImagesRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyProductsByIDImagesRequestBuilder);

    this.args = args;
  }
  /**
   *	Upload a JPEG, PNG and GIF file to a [ProductVariant](ctp:api:type:ProductVariant). The maximum file size of the image is 10MB. `variant` or `sku` is required to update a specific ProductVariant. The image is uploaded to the Master Variant if `variant` or `sku` are not included. Produces the [ProductImageAdded](/projects/messages#product-image-added) Message when the `Small` version of the image has been uploaded to the CDN.
   *
   */


  _createClass(ByProjectKeyProductsByIDImagesRequestBuilder, [{
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/products/{ID}/images',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyProductsByIDImagesRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyProductsByIDProductSelectionsRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyProductsByIDProductSelectionsRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyProductsByIDProductSelectionsRequestBuilder);

    this.args = args;
  }

  _createClass(ByProjectKeyProductsByIDProductSelectionsRequestBuilder, [{
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/products/{ID}/product-selections',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyProductsByIDProductSelectionsRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyProductsByIDRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyProductsByIDRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyProductsByIDRequestBuilder);

    this.args = args;
  }

  _createClass(ByProjectKeyProductsByIDRequestBuilder, [{
    key: "images",
    value: function images() {
      return new ByProjectKeyProductsByIDImagesRequestBuilder({
        pathArgs: _objectSpread({}, this.args.pathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
  }, {
    key: "productSelections",
    value: function productSelections() {
      return new ByProjectKeyProductsByIDProductSelectionsRequestBuilder({
        pathArgs: _objectSpread({}, this.args.pathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
    /**
     *	If [Price selection](ctp:api:type:ProductPriceSelection) query parameters are provided, the selected Prices are added to the response.
     */

  }, {
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/products/{ID}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
    /**
     *	Check if a Product exists with a specified `id`. Responds with a `200 OK` status if the Product exists or `404 Not Found` otherwise.
     */

  }, {
    key: "head",
    value: function head(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'HEAD',
        uriTemplate: '/{projectKey}/products/{ID}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      }, this.args.executeRequest);
    }
    /**
     *	If [Price selection](ctp:api:type:ProductPriceSelection) query parameters are provided, the selected Prices are added to the response.
     */

  }, {
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/products/{ID}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
    /**
     *	If [Price selection](ctp:api:type:ProductPriceSelection) query parameters are provided, the selected Prices are added to the response.
     *	Produces the [ProductDeleted](/projects/messages#product-deleted) Message.
     */

  }, {
    key: "delete",
    value: function _delete(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'DELETE',
        uriTemplate: '/{projectKey}/products/{ID}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyProductsByIDRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyProductsKeyByKeyProductSelectionsRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyProductsKeyByKeyProductSelectionsRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyProductsKeyByKeyProductSelectionsRequestBuilder);

    this.args = args;
  }

  _createClass(ByProjectKeyProductsKeyByKeyProductSelectionsRequestBuilder, [{
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/products/key={key}/product-selections',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyProductsKeyByKeyProductSelectionsRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyProductsKeyByKeyRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyProductsKeyByKeyRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyProductsKeyByKeyRequestBuilder);

    this.args = args;
  }

  _createClass(ByProjectKeyProductsKeyByKeyRequestBuilder, [{
    key: "productSelections",
    value: function productSelections() {
      return new ByProjectKeyProductsKeyByKeyProductSelectionsRequestBuilder({
        pathArgs: _objectSpread({}, this.args.pathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
    /**
     *	If [Price selection](ctp:api:type:ProductPriceSelection) query parameters are provided, the selected Prices are added to the response.
     */

  }, {
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/products/key={key}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
    /**
     *	Check if a Product exists with a specified `key`. Responds with a `200 OK` status if the Product exists or `404 Not Found` otherwise.
     */

  }, {
    key: "head",
    value: function head(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'HEAD',
        uriTemplate: '/{projectKey}/products/key={key}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      }, this.args.executeRequest);
    }
  }, {
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/products/key={key}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
    /**
     *	If [Price selection](ctp:api:type:ProductPriceSelection) query parameters are provided, the selected Prices are added to the response.
     *	Produces the [ProductDeleted](/projects/messages#product-deleted) Message.
     */

  }, {
    key: "delete",
    value: function _delete(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'DELETE',
        uriTemplate: '/{projectKey}/products/key={key}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyProductsKeyByKeyRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyProductsRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyProductsRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyProductsRequestBuilder);

    this.args = args;
  }

  _createClass(ByProjectKeyProductsRequestBuilder, [{
    key: "withKey",
    value: function withKey(childPathArgs) {
      return new ByProjectKeyProductsKeyByKeyRequestBuilder({
        pathArgs: _objectSpread(_objectSpread({}, this.args.pathArgs), childPathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
  }, {
    key: "withId",
    value: function withId(childPathArgs) {
      return new ByProjectKeyProductsByIDRequestBuilder({
        pathArgs: _objectSpread(_objectSpread({}, this.args.pathArgs), childPathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
    /**
     *	If [Price selection](ctp:api:type:ProductPriceSelection) query parameters are provided, the selected Prices are added to the response.
     */

  }, {
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/products',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
    /**
     *	Check if Products exist. Responds with a `200 OK` status if any Products match the Query Predicate, or `404 Not Found` otherwise.
     */

  }, {
    key: "head",
    value: function head(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'HEAD',
        uriTemplate: '/{projectKey}/products',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
    /**
     *	To create a new Product, send a representation that is going to become the initial _staged_ representation of the new Product in the master catalog.
     *	If [Price Selection](ctp:api:type:ProductPriceSelection) query parameters are provided, selected Prices will be added to the response.
     *	Produces the [ProductCreated](/projects/messages#product-created) Message.
     *
     */

  }, {
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/products',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyProductsRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyQuoteRequestsByIDRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyQuoteRequestsByIDRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyQuoteRequestsByIDRequestBuilder);

    this.args = args;
  }

  _createClass(ByProjectKeyQuoteRequestsByIDRequestBuilder, [{
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/quote-requests/{ID}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }, {
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/quote-requests/{ID}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }, {
    key: "delete",
    value: function _delete(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'DELETE',
        uriTemplate: '/{projectKey}/quote-requests/{ID}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyQuoteRequestsByIDRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyQuoteRequestsKeyByKeyRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyQuoteRequestsKeyByKeyRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyQuoteRequestsKeyByKeyRequestBuilder);

    this.args = args;
  }

  _createClass(ByProjectKeyQuoteRequestsKeyByKeyRequestBuilder, [{
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/quote-requests/key={key}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }, {
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/quote-requests/key={key}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }, {
    key: "delete",
    value: function _delete(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'DELETE',
        uriTemplate: '/{projectKey}/quote-requests/key={key}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyQuoteRequestsKeyByKeyRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyQuoteRequestsRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyQuoteRequestsRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyQuoteRequestsRequestBuilder);

    this.args = args;
  }

  _createClass(ByProjectKeyQuoteRequestsRequestBuilder, [{
    key: "withKey",
    value: function withKey(childPathArgs) {
      return new ByProjectKeyQuoteRequestsKeyByKeyRequestBuilder({
        pathArgs: _objectSpread(_objectSpread({}, this.args.pathArgs), childPathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
  }, {
    key: "withId",
    value: function withId(childPathArgs) {
      return new ByProjectKeyQuoteRequestsByIDRequestBuilder({
        pathArgs: _objectSpread(_objectSpread({}, this.args.pathArgs), childPathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
  }, {
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/quote-requests',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }, {
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/quote-requests',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyQuoteRequestsRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyQuotesByIDRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyQuotesByIDRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyQuotesByIDRequestBuilder);

    this.args = args;
  }

  _createClass(ByProjectKeyQuotesByIDRequestBuilder, [{
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/quotes/{ID}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }, {
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/quotes/{ID}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }, {
    key: "delete",
    value: function _delete(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'DELETE',
        uriTemplate: '/{projectKey}/quotes/{ID}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyQuotesByIDRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyQuotesKeyByKeyRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyQuotesKeyByKeyRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyQuotesKeyByKeyRequestBuilder);

    this.args = args;
  }

  _createClass(ByProjectKeyQuotesKeyByKeyRequestBuilder, [{
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/quotes/key={key}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }, {
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/quotes/key={key}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }, {
    key: "delete",
    value: function _delete(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'DELETE',
        uriTemplate: '/{projectKey}/quotes/key={key}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyQuotesKeyByKeyRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyQuotesRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyQuotesRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyQuotesRequestBuilder);

    this.args = args;
  }

  _createClass(ByProjectKeyQuotesRequestBuilder, [{
    key: "withKey",
    value: function withKey(childPathArgs) {
      return new ByProjectKeyQuotesKeyByKeyRequestBuilder({
        pathArgs: _objectSpread(_objectSpread({}, this.args.pathArgs), childPathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
  }, {
    key: "withId",
    value: function withId(childPathArgs) {
      return new ByProjectKeyQuotesByIDRequestBuilder({
        pathArgs: _objectSpread(_objectSpread({}, this.args.pathArgs), childPathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
  }, {
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/quotes',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }, {
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/quotes',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyQuotesRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyReviewsByIDRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyReviewsByIDRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyReviewsByIDRequestBuilder);

    this.args = args;
  }

  _createClass(ByProjectKeyReviewsByIDRequestBuilder, [{
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/reviews/{ID}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }, {
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/reviews/{ID}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }, {
    key: "delete",
    value: function _delete(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'DELETE',
        uriTemplate: '/{projectKey}/reviews/{ID}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyReviewsByIDRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyReviewsKeyByKeyRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyReviewsKeyByKeyRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyReviewsKeyByKeyRequestBuilder);

    this.args = args;
  }

  _createClass(ByProjectKeyReviewsKeyByKeyRequestBuilder, [{
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/reviews/key={key}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }, {
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/reviews/key={key}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }, {
    key: "delete",
    value: function _delete(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'DELETE',
        uriTemplate: '/{projectKey}/reviews/key={key}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyReviewsKeyByKeyRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyReviewsRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyReviewsRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyReviewsRequestBuilder);

    this.args = args;
  }

  _createClass(ByProjectKeyReviewsRequestBuilder, [{
    key: "withKey",
    value: function withKey(childPathArgs) {
      return new ByProjectKeyReviewsKeyByKeyRequestBuilder({
        pathArgs: _objectSpread(_objectSpread({}, this.args.pathArgs), childPathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
  }, {
    key: "withId",
    value: function withId(childPathArgs) {
      return new ByProjectKeyReviewsByIDRequestBuilder({
        pathArgs: _objectSpread(_objectSpread({}, this.args.pathArgs), childPathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
  }, {
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/reviews',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }, {
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/reviews',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyReviewsRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyShippingMethodsMatchingCartRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyShippingMethodsMatchingCartRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyShippingMethodsMatchingCartRequestBuilder);

    this.args = args;
  }
  /**
   *	Retrieves all the ShippingMethods that can ship to the shipping address of the given Cart.
   *	Each ShippingMethod contains exactly one ShippingRate with the flag `isMatching` set to `true`.
   *	This ShippingRate is used when the ShippingMethod is [added to the Cart](ctp:api:type:CartSetShippingMethodAction).
   *
   */


  _createClass(ByProjectKeyShippingMethodsMatchingCartRequestBuilder, [{
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/shipping-methods/matching-cart',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyShippingMethodsMatchingCartRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyShippingMethodsMatchingLocationRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyShippingMethodsMatchingLocationRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyShippingMethodsMatchingLocationRequestBuilder);

    this.args = args;
  }
  /**
   *	Retrieves all the ShippingMethods that can ship to the given [Location](/projects/zones#location).
   *	If the `currency` parameter is given, then the ShippingMethods must also have a rate defined in the specified currency.
   *	Each ShippingMethod contains at least one ShippingRate with the flag `isMatching` set to `true`.
   *	If the `currency` parameter is given, exactly one ShippingRate will contain it.
   *
   */


  _createClass(ByProjectKeyShippingMethodsMatchingLocationRequestBuilder, [{
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/shipping-methods/matching-location',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyShippingMethodsMatchingLocationRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyShippingMethodsMatchingOrdereditRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyShippingMethodsMatchingOrdereditRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyShippingMethodsMatchingOrdereditRequestBuilder);

    this.args = args;
  }
  /**
   *	Retrieves all the ShippingMethods that can ship to the given [Location](/projects/zones#location) for an [OrderEdit](/projects/order-edits).
   *	In case the OrderEdit preview cannot be created an [EditPreviewFailed](ctp:api:type:EditPreviewFailedError) error is raised.
   *
   */


  _createClass(ByProjectKeyShippingMethodsMatchingOrdereditRequestBuilder, [{
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/shipping-methods/matching-orderedit',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyShippingMethodsMatchingOrdereditRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyShippingMethodsByIDRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyShippingMethodsByIDRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyShippingMethodsByIDRequestBuilder);

    this.args = args;
  }

  _createClass(ByProjectKeyShippingMethodsByIDRequestBuilder, [{
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/shipping-methods/{ID}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }, {
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/shipping-methods/{ID}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }, {
    key: "delete",
    value: function _delete(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'DELETE',
        uriTemplate: '/{projectKey}/shipping-methods/{ID}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyShippingMethodsByIDRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyShippingMethodsKeyByKeyRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyShippingMethodsKeyByKeyRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyShippingMethodsKeyByKeyRequestBuilder);

    this.args = args;
  }

  _createClass(ByProjectKeyShippingMethodsKeyByKeyRequestBuilder, [{
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/shipping-methods/key={key}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }, {
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/shipping-methods/key={key}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }, {
    key: "delete",
    value: function _delete(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'DELETE',
        uriTemplate: '/{projectKey}/shipping-methods/key={key}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyShippingMethodsKeyByKeyRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyShippingMethodsRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyShippingMethodsRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyShippingMethodsRequestBuilder);

    this.args = args;
  }

  _createClass(ByProjectKeyShippingMethodsRequestBuilder, [{
    key: "withKey",
    value: function withKey(childPathArgs) {
      return new ByProjectKeyShippingMethodsKeyByKeyRequestBuilder({
        pathArgs: _objectSpread(_objectSpread({}, this.args.pathArgs), childPathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
    /**
     *	Get ShippingMethods for a cart
     */

  }, {
    key: "matchingCart",
    value: function matchingCart() {
      return new ByProjectKeyShippingMethodsMatchingCartRequestBuilder({
        pathArgs: _objectSpread({}, this.args.pathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
    /**
     *	Get ShippingMethods for an order edit
     */

  }, {
    key: "matchingOrderedit",
    value: function matchingOrderedit() {
      return new ByProjectKeyShippingMethodsMatchingOrdereditRequestBuilder({
        pathArgs: _objectSpread({}, this.args.pathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
    /**
     *	Get ShippingMethods for a location
     */

  }, {
    key: "matchingLocation",
    value: function matchingLocation() {
      return new ByProjectKeyShippingMethodsMatchingLocationRequestBuilder({
        pathArgs: _objectSpread({}, this.args.pathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
  }, {
    key: "withId",
    value: function withId(childPathArgs) {
      return new ByProjectKeyShippingMethodsByIDRequestBuilder({
        pathArgs: _objectSpread(_objectSpread({}, this.args.pathArgs), childPathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
  }, {
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/shipping-methods',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }, {
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/shipping-methods',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyShippingMethodsRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyShoppingListsByIDRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyShoppingListsByIDRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyShoppingListsByIDRequestBuilder);

    this.args = args;
  }
  /**
   *	Gets a shopping list by ID.
   */


  _createClass(ByProjectKeyShoppingListsByIDRequestBuilder, [{
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/shopping-lists/{ID}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }, {
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/shopping-lists/{ID}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }, {
    key: "delete",
    value: function _delete(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'DELETE',
        uriTemplate: '/{projectKey}/shopping-lists/{ID}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyShoppingListsByIDRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyShoppingListsKeyByKeyRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyShoppingListsKeyByKeyRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyShoppingListsKeyByKeyRequestBuilder);

    this.args = args;
  }
  /**
   *	Gets a shopping list by Key.
   */


  _createClass(ByProjectKeyShoppingListsKeyByKeyRequestBuilder, [{
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/shopping-lists/key={key}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
    /**
     *	Update a shopping list found by its Key.
     */

  }, {
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/shopping-lists/key={key}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }, {
    key: "delete",
    value: function _delete(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'DELETE',
        uriTemplate: '/{projectKey}/shopping-lists/key={key}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyShoppingListsKeyByKeyRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyShoppingListsRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyShoppingListsRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyShoppingListsRequestBuilder);

    this.args = args;
  }

  _createClass(ByProjectKeyShoppingListsRequestBuilder, [{
    key: "withKey",
    value: function withKey(childPathArgs) {
      return new ByProjectKeyShoppingListsKeyByKeyRequestBuilder({
        pathArgs: _objectSpread(_objectSpread({}, this.args.pathArgs), childPathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
  }, {
    key: "withId",
    value: function withId(childPathArgs) {
      return new ByProjectKeyShoppingListsByIDRequestBuilder({
        pathArgs: _objectSpread(_objectSpread({}, this.args.pathArgs), childPathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
  }, {
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/shopping-lists',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }, {
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/shopping-lists',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyShoppingListsRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyStagedQuotesByIDRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyStagedQuotesByIDRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyStagedQuotesByIDRequestBuilder);

    this.args = args;
  }

  _createClass(ByProjectKeyStagedQuotesByIDRequestBuilder, [{
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/staged-quotes/{ID}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }, {
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/staged-quotes/{ID}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }, {
    key: "delete",
    value: function _delete(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'DELETE',
        uriTemplate: '/{projectKey}/staged-quotes/{ID}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyStagedQuotesByIDRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyStagedQuotesKeyByKeyRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyStagedQuotesKeyByKeyRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyStagedQuotesKeyByKeyRequestBuilder);

    this.args = args;
  }

  _createClass(ByProjectKeyStagedQuotesKeyByKeyRequestBuilder, [{
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/staged-quotes/key={key}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }, {
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/staged-quotes/key={key}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }, {
    key: "delete",
    value: function _delete(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'DELETE',
        uriTemplate: '/{projectKey}/staged-quotes/key={key}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyStagedQuotesKeyByKeyRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyStagedQuotesRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyStagedQuotesRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyStagedQuotesRequestBuilder);

    this.args = args;
  }

  _createClass(ByProjectKeyStagedQuotesRequestBuilder, [{
    key: "withKey",
    value: function withKey(childPathArgs) {
      return new ByProjectKeyStagedQuotesKeyByKeyRequestBuilder({
        pathArgs: _objectSpread(_objectSpread({}, this.args.pathArgs), childPathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
  }, {
    key: "withId",
    value: function withId(childPathArgs) {
      return new ByProjectKeyStagedQuotesByIDRequestBuilder({
        pathArgs: _objectSpread(_objectSpread({}, this.args.pathArgs), childPathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
  }, {
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/staged-quotes',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }, {
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/staged-quotes',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyStagedQuotesRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyStandalonePricesByIDRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyStandalonePricesByIDRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyStandalonePricesByIDRequestBuilder);

    this.args = args;
  }

  _createClass(ByProjectKeyStandalonePricesByIDRequestBuilder, [{
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/standalone-prices/{ID}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }, {
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/standalone-prices/{ID}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
    /**
     *	Produces the [StandalonePriceDeleted](ctp:api:type:StandalonePriceDeletedMessage) Message.
     *
     */

  }, {
    key: "delete",
    value: function _delete(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'DELETE',
        uriTemplate: '/{projectKey}/standalone-prices/{ID}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyStandalonePricesByIDRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyStandalonePricesKeyByKeyRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyStandalonePricesKeyByKeyRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyStandalonePricesKeyByKeyRequestBuilder);

    this.args = args;
  }

  _createClass(ByProjectKeyStandalonePricesKeyByKeyRequestBuilder, [{
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/standalone-prices/key={key}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }, {
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/standalone-prices/key={key}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
    /**
     *	Produces the [StandalonePriceDeleted](ctp:api:type:StandalonePriceDeletedMessage) Message.
     *
     */

  }, {
    key: "delete",
    value: function _delete(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'DELETE',
        uriTemplate: '/{projectKey}/standalone-prices/key={key}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyStandalonePricesKeyByKeyRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyStandalonePricesRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyStandalonePricesRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyStandalonePricesRequestBuilder);

    this.args = args;
  }

  _createClass(ByProjectKeyStandalonePricesRequestBuilder, [{
    key: "withKey",
    value: function withKey(childPathArgs) {
      return new ByProjectKeyStandalonePricesKeyByKeyRequestBuilder({
        pathArgs: _objectSpread(_objectSpread({}, this.args.pathArgs), childPathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
  }, {
    key: "withId",
    value: function withId(childPathArgs) {
      return new ByProjectKeyStandalonePricesByIDRequestBuilder({
        pathArgs: _objectSpread(_objectSpread({}, this.args.pathArgs), childPathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
  }, {
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/standalone-prices',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
    /**
     *	Produces the [StandalonePriceCreated](ctp:api:type:StandalonePriceCreatedMessage) Message.
     *
     */

  }, {
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/standalone-prices',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyStandalonePricesRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyStatesByIDRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyStatesByIDRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyStatesByIDRequestBuilder);

    this.args = args;
  }

  _createClass(ByProjectKeyStatesByIDRequestBuilder, [{
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/states/{ID}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }, {
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/states/{ID}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }, {
    key: "delete",
    value: function _delete(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'DELETE',
        uriTemplate: '/{projectKey}/states/{ID}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyStatesByIDRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyStatesKeyByKeyRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyStatesKeyByKeyRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyStatesKeyByKeyRequestBuilder);

    this.args = args;
  }

  _createClass(ByProjectKeyStatesKeyByKeyRequestBuilder, [{
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/states/key={key}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }, {
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/states/key={key}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }, {
    key: "delete",
    value: function _delete(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'DELETE',
        uriTemplate: '/{projectKey}/states/key={key}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyStatesKeyByKeyRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyStatesRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyStatesRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyStatesRequestBuilder);

    this.args = args;
  }

  _createClass(ByProjectKeyStatesRequestBuilder, [{
    key: "withKey",
    value: function withKey(childPathArgs) {
      return new ByProjectKeyStatesKeyByKeyRequestBuilder({
        pathArgs: _objectSpread(_objectSpread({}, this.args.pathArgs), childPathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
  }, {
    key: "withId",
    value: function withId(childPathArgs) {
      return new ByProjectKeyStatesByIDRequestBuilder({
        pathArgs: _objectSpread(_objectSpread({}, this.args.pathArgs), childPathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
  }, {
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/states',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }, {
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/states',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyStatesRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyStoresByIDRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyStoresByIDRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyStoresByIDRequestBuilder);

    this.args = args;
  }

  _createClass(ByProjectKeyStoresByIDRequestBuilder, [{
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/stores/{ID}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }, {
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/stores/{ID}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }, {
    key: "delete",
    value: function _delete(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'DELETE',
        uriTemplate: '/{projectKey}/stores/{ID}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyStoresByIDRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyStoresKeyByKeyRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyStoresKeyByKeyRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyStoresKeyByKeyRequestBuilder);

    this.args = args;
  }

  _createClass(ByProjectKeyStoresKeyByKeyRequestBuilder, [{
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/stores/key={key}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }, {
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/stores/key={key}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }, {
    key: "delete",
    value: function _delete(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'DELETE',
        uriTemplate: '/{projectKey}/stores/key={key}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyStoresKeyByKeyRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyStoresRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyStoresRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyStoresRequestBuilder);

    this.args = args;
  }

  _createClass(ByProjectKeyStoresRequestBuilder, [{
    key: "withKey",
    value: function withKey(childPathArgs) {
      return new ByProjectKeyStoresKeyByKeyRequestBuilder({
        pathArgs: _objectSpread(_objectSpread({}, this.args.pathArgs), childPathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
  }, {
    key: "withId",
    value: function withId(childPathArgs) {
      return new ByProjectKeyStoresByIDRequestBuilder({
        pathArgs: _objectSpread(_objectSpread({}, this.args.pathArgs), childPathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
  }, {
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/stores',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }, {
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/stores',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyStoresRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeySubscriptionsByIDHealthRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeySubscriptionsByIDHealthRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeySubscriptionsByIDHealthRequestBuilder);

    this.args = args;
  }
  /**
   *	This endpoint can be polled by a monitoring or alerting system that checks the health of your Subscriptions. To ease integration with such systems this endpoint does not require [Authorization](/../api/authorization).
   *
   */


  _createClass(ByProjectKeySubscriptionsByIDHealthRequestBuilder, [{
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/subscriptions/{ID}/health',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeySubscriptionsByIDHealthRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeySubscriptionsByIDRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeySubscriptionsByIDRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeySubscriptionsByIDRequestBuilder);

    this.args = args;
  }

  _createClass(ByProjectKeySubscriptionsByIDRequestBuilder, [{
    key: "withIdHealth",
    value: function withIdHealth() {
      return new ByProjectKeySubscriptionsByIDHealthRequestBuilder({
        pathArgs: _objectSpread({}, this.args.pathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
  }, {
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/subscriptions/{ID}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }, {
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/subscriptions/{ID}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }, {
    key: "delete",
    value: function _delete(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'DELETE',
        uriTemplate: '/{projectKey}/subscriptions/{ID}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeySubscriptionsByIDRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeySubscriptionsKeyByKeyRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeySubscriptionsKeyByKeyRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeySubscriptionsKeyByKeyRequestBuilder);

    this.args = args;
  }

  _createClass(ByProjectKeySubscriptionsKeyByKeyRequestBuilder, [{
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/subscriptions/key={key}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }, {
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/subscriptions/key={key}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }, {
    key: "delete",
    value: function _delete(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'DELETE',
        uriTemplate: '/{projectKey}/subscriptions/key={key}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeySubscriptionsKeyByKeyRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeySubscriptionsRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeySubscriptionsRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeySubscriptionsRequestBuilder);

    this.args = args;
  }

  _createClass(ByProjectKeySubscriptionsRequestBuilder, [{
    key: "withKey",
    value: function withKey(childPathArgs) {
      return new ByProjectKeySubscriptionsKeyByKeyRequestBuilder({
        pathArgs: _objectSpread(_objectSpread({}, this.args.pathArgs), childPathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
  }, {
    key: "withId",
    value: function withId(childPathArgs) {
      return new ByProjectKeySubscriptionsByIDRequestBuilder({
        pathArgs: _objectSpread(_objectSpread({}, this.args.pathArgs), childPathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
  }, {
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/subscriptions',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
    /**
     *	A test message is sent to ensure the correct configuration of the Destination. If the message cannot be delivered, the Subscription will not be created. The payload of the test message is a notification of type [ResourceCreated](/../api/projects/subscriptions#resourcecreateddeliverypayload) for the `resourceTypeId` `subscription`.
     *
     */

  }, {
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/subscriptions',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeySubscriptionsRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyTaxCategoriesByIDRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyTaxCategoriesByIDRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyTaxCategoriesByIDRequestBuilder);

    this.args = args;
  }

  _createClass(ByProjectKeyTaxCategoriesByIDRequestBuilder, [{
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/tax-categories/{ID}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }, {
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/tax-categories/{ID}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }, {
    key: "delete",
    value: function _delete(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'DELETE',
        uriTemplate: '/{projectKey}/tax-categories/{ID}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyTaxCategoriesByIDRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyTaxCategoriesKeyByKeyRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyTaxCategoriesKeyByKeyRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyTaxCategoriesKeyByKeyRequestBuilder);

    this.args = args;
  }

  _createClass(ByProjectKeyTaxCategoriesKeyByKeyRequestBuilder, [{
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/tax-categories/key={key}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }, {
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/tax-categories/key={key}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }, {
    key: "delete",
    value: function _delete(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'DELETE',
        uriTemplate: '/{projectKey}/tax-categories/key={key}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyTaxCategoriesKeyByKeyRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyTaxCategoriesRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyTaxCategoriesRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyTaxCategoriesRequestBuilder);

    this.args = args;
  }

  _createClass(ByProjectKeyTaxCategoriesRequestBuilder, [{
    key: "withKey",
    value: function withKey(childPathArgs) {
      return new ByProjectKeyTaxCategoriesKeyByKeyRequestBuilder({
        pathArgs: _objectSpread(_objectSpread({}, this.args.pathArgs), childPathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
  }, {
    key: "withId",
    value: function withId(childPathArgs) {
      return new ByProjectKeyTaxCategoriesByIDRequestBuilder({
        pathArgs: _objectSpread(_objectSpread({}, this.args.pathArgs), childPathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
  }, {
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/tax-categories',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }, {
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/tax-categories',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyTaxCategoriesRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyTypesByIDRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyTypesByIDRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyTypesByIDRequestBuilder);

    this.args = args;
  }

  _createClass(ByProjectKeyTypesByIDRequestBuilder, [{
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/types/{ID}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }, {
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/types/{ID}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }, {
    key: "delete",
    value: function _delete(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'DELETE',
        uriTemplate: '/{projectKey}/types/{ID}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyTypesByIDRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyTypesKeyByKeyRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyTypesKeyByKeyRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyTypesKeyByKeyRequestBuilder);

    this.args = args;
  }

  _createClass(ByProjectKeyTypesKeyByKeyRequestBuilder, [{
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/types/key={key}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }, {
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/types/key={key}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }, {
    key: "delete",
    value: function _delete(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'DELETE',
        uriTemplate: '/{projectKey}/types/key={key}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyTypesKeyByKeyRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyTypesRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyTypesRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyTypesRequestBuilder);

    this.args = args;
  }

  _createClass(ByProjectKeyTypesRequestBuilder, [{
    key: "withKey",
    value: function withKey(childPathArgs) {
      return new ByProjectKeyTypesKeyByKeyRequestBuilder({
        pathArgs: _objectSpread(_objectSpread({}, this.args.pathArgs), childPathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
  }, {
    key: "withId",
    value: function withId(childPathArgs) {
      return new ByProjectKeyTypesByIDRequestBuilder({
        pathArgs: _objectSpread(_objectSpread({}, this.args.pathArgs), childPathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
  }, {
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/types',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }, {
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/types',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyTypesRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyZonesByIDRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyZonesByIDRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyZonesByIDRequestBuilder);

    this.args = args;
  }

  _createClass(ByProjectKeyZonesByIDRequestBuilder, [{
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/zones/{ID}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }, {
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/zones/{ID}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }, {
    key: "delete",
    value: function _delete(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'DELETE',
        uriTemplate: '/{projectKey}/zones/{ID}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyZonesByIDRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyZonesKeyByKeyRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyZonesKeyByKeyRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyZonesKeyByKeyRequestBuilder);

    this.args = args;
  }

  _createClass(ByProjectKeyZonesKeyByKeyRequestBuilder, [{
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/zones/key={key}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }, {
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/zones/key={key}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }, {
    key: "delete",
    value: function _delete(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'DELETE',
        uriTemplate: '/{projectKey}/zones/key={key}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyZonesKeyByKeyRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyZonesRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyZonesRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyZonesRequestBuilder);

    this.args = args;
  }

  _createClass(ByProjectKeyZonesRequestBuilder, [{
    key: "withKey",
    value: function withKey(childPathArgs) {
      return new ByProjectKeyZonesKeyByKeyRequestBuilder({
        pathArgs: _objectSpread(_objectSpread({}, this.args.pathArgs), childPathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
  }, {
    key: "withId",
    value: function withId(childPathArgs) {
      return new ByProjectKeyZonesByIDRequestBuilder({
        pathArgs: _objectSpread(_objectSpread({}, this.args.pathArgs), childPathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
  }, {
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}/zones',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs
      }, this.args.executeRequest);
    }
  }, {
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}/zones',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        queryParams: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.queryArgs,
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyZonesRequestBuilder;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate raml_file_path -o output_path -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */

/**
 **/


var ByProjectKeyRequestBuilder = /*#__PURE__*/function () {
  function ByProjectKeyRequestBuilder(args) {
    _classCallCheck(this, ByProjectKeyRequestBuilder);

    this.args = args;
  }
  /**
   *	A Business Unit can represent a Company or a Division.
   */


  _createClass(ByProjectKeyRequestBuilder, [{
    key: "businessUnits",
    value: function businessUnits() {
      return new ByProjectKeyBusinessUnitsRequestBuilder({
        pathArgs: _objectSpread({}, this.args.pathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
    /**
     *	Categories are used to organize products in a hierarchical structure.
     */

  }, {
    key: "categories",
    value: function categories() {
      return new ByProjectKeyCategoriesRequestBuilder({
        pathArgs: _objectSpread({}, this.args.pathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
    /**
     *	A shopping cart holds product variants and can be ordered.
     */

  }, {
    key: "carts",
    value: function carts() {
      return new ByProjectKeyCartsRequestBuilder({
        pathArgs: _objectSpread({}, this.args.pathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
    /**
     *	Cart discounts are used to change the prices of different elements within a cart.
     */

  }, {
    key: "cartDiscounts",
    value: function cartDiscounts() {
      return new ByProjectKeyCartDiscountsRequestBuilder({
        pathArgs: _objectSpread({}, this.args.pathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
    /**
     *	Channels represent a source or destination of different entities. They can be used to model warehouses or stores.
     *
     */

  }, {
    key: "channels",
    value: function channels() {
      return new ByProjectKeyChannelsRequestBuilder({
        pathArgs: _objectSpread({}, this.args.pathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
    /**
     *	A Customer is a person purchasing products. Carts, Orders, Quotes, Reviews and Payments can be associated to a Customer.
     *
     */

  }, {
    key: "customers",
    value: function customers() {
      return new ByProjectKeyCustomersRequestBuilder({
        pathArgs: _objectSpread({}, this.args.pathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
    /**
     *	customer-groups are used to evaluate products and channels.
     */

  }, {
    key: "customerGroups",
    value: function customerGroups() {
      return new ByProjectKeyCustomerGroupsRequestBuilder({
        pathArgs: _objectSpread({}, this.args.pathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
    /**
     *	Store custom JSON values.
     */

  }, {
    key: "customObjects",
    value: function customObjects() {
      return new ByProjectKeyCustomObjectsRequestBuilder({
        pathArgs: _objectSpread({}, this.args.pathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
    /**
     *	Discount Codes can be added to a discount-code to enable certain discount-code discounts.
     */

  }, {
    key: "discountCodes",
    value: function discountCodes() {
      return new ByProjectKeyDiscountCodesRequestBuilder({
        pathArgs: _objectSpread({}, this.args.pathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
    /**
     *	commercetools Composable Commerce provides a GraphQL API
     */

  }, {
    key: "graphql",
    value: function graphql() {
      return new ByProjectKeyGraphqlRequestBuilder({
        pathArgs: _objectSpread({}, this.args.pathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
    /**
     *	Inventory allows you to track stock quantities.
     */

  }, {
    key: "inventory",
    value: function inventory() {
      return new ByProjectKeyInventoryRequestBuilder({
        pathArgs: _objectSpread({}, this.args.pathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
    /**
     *	Retrieves the authenticated customer.
     */

  }, {
    key: "login",
    value: function login() {
      return new ByProjectKeyLoginRequestBuilder({
        pathArgs: _objectSpread({}, this.args.pathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
    /**
     *	A message represents a change or an action performed on a resource (like an Order or a Product).
     */

  }, {
    key: "messages",
    value: function messages() {
      return new ByProjectKeyMessagesRequestBuilder({
        pathArgs: _objectSpread({}, this.args.pathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
    /**
     *	An order can be created from a order, usually after a checkout process has been completed.
     */

  }, {
    key: "orders",
    value: function orders() {
      return new ByProjectKeyOrdersRequestBuilder({
        pathArgs: _objectSpread({}, this.args.pathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
    /**
     *	Payments hold information about the current state of receiving and/or refunding money
     */

  }, {
    key: "payments",
    value: function payments() {
      return new ByProjectKeyPaymentsRequestBuilder({
        pathArgs: _objectSpread({}, this.args.pathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
    /**
     *	Products themselves are not sellable. Instead, they act as a parent structure for sellable Product Variants.
     *
     */

  }, {
    key: "products",
    value: function products() {
      return new ByProjectKeyProductsRequestBuilder({
        pathArgs: _objectSpread({}, this.args.pathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
    /**
     *	Product discounts are used to change certain product prices.
     */

  }, {
    key: "productDiscounts",
    value: function productDiscounts() {
      return new ByProjectKeyProductDiscountsRequestBuilder({
        pathArgs: _objectSpread({}, this.args.pathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
    /**
     *	A projected representation of a product shows the product with its current or staged data. The current or staged
     *	representation of a product in a catalog is called a product projection.
     *
     */

  }, {
    key: "productProjections",
    value: function productProjections() {
      return new ByProjectKeyProductProjectionsRequestBuilder({
        pathArgs: _objectSpread({}, this.args.pathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
    /**
     *	Manage individual Store assortments through Product Selections.
     *
     *	After you have created Product Selections and populated them by Products,
     *	you can manage Store assortments by assigning Product Selections to Stores.
     *	Product Selections may be used by a single Store or shared across several Stores.
     *
     */

  }, {
    key: "productSelections",
    value: function productSelections() {
      return new ByProjectKeyProductSelectionsRequestBuilder({
        pathArgs: _objectSpread({}, this.args.pathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
    /**
     *	Product Types are used to describe common characteristics, most importantly common custom attributes,
     *	of many concrete products.
     *
     */

  }, {
    key: "productTypes",
    value: function productTypes() {
      return new ByProjectKeyProductTypesRequestBuilder({
        pathArgs: _objectSpread({}, this.args.pathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
    /**
     *	A quote holds the negotiated offer.
     */

  }, {
    key: "quotes",
    value: function quotes() {
      return new ByProjectKeyQuotesRequestBuilder({
        pathArgs: _objectSpread({}, this.args.pathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
    /**
     *	A request for a Quote holds product variants and can be ordered.
     */

  }, {
    key: "quoteRequests",
    value: function quoteRequests() {
      return new ByProjectKeyQuoteRequestsRequestBuilder({
        pathArgs: _objectSpread({}, this.args.pathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
    /**
     *	A staged quote holds the negotiation between the [Buyer](/../api/quotes-overview#buyer) and the [Seller](/../api/quotes-overview#seller).
     */

  }, {
    key: "stagedQuotes",
    value: function stagedQuotes() {
      return new ByProjectKeyStagedQuotesRequestBuilder({
        pathArgs: _objectSpread({}, this.args.pathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
    /**
     *	Reviews are used to evaluate products and channels.
     */

  }, {
    key: "reviews",
    value: function reviews() {
      return new ByProjectKeyReviewsRequestBuilder({
        pathArgs: _objectSpread({}, this.args.pathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
    /**
     *	ShippingMethods define where orders can be shipped and what the costs are.
     */

  }, {
    key: "shippingMethods",
    value: function shippingMethods() {
      return new ByProjectKeyShippingMethodsRequestBuilder({
        pathArgs: _objectSpread({}, this.args.pathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
    /**
     *	shopping-lists e.g. for wishlist support
     */

  }, {
    key: "shoppingLists",
    value: function shoppingLists() {
      return new ByProjectKeyShoppingListsRequestBuilder({
        pathArgs: _objectSpread({}, this.args.pathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
    /**
     *	commercetools Composable Commerce allows you to model states of certain objects, such as orders, line items, products,
     *	reviews, and payments in order to define finite state machines reflecting the business logic you'd like to
     *	implement.
     *
     */

  }, {
    key: "states",
    value: function states() {
      return new ByProjectKeyStatesRequestBuilder({
        pathArgs: _objectSpread({}, this.args.pathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
    /**
     *	Subscriptions allow you to be notified of new messages or changes via a Message Queue of your choice
     */

  }, {
    key: "subscriptions",
    value: function subscriptions() {
      return new ByProjectKeySubscriptionsRequestBuilder({
        pathArgs: _objectSpread({}, this.args.pathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
    /**
     *	Tax Categories define how products are to be taxed in different countries.
     */

  }, {
    key: "taxCategories",
    value: function taxCategories() {
      return new ByProjectKeyTaxCategoriesRequestBuilder({
        pathArgs: _objectSpread({}, this.args.pathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
    /**
     *	Types define custom fields that are used to enhance resources as you need.
     */

  }, {
    key: "types",
    value: function types() {
      return new ByProjectKeyTypesRequestBuilder({
        pathArgs: _objectSpread({}, this.args.pathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
    /**
     *	Zones allow defining ShippingRates for specific Locations.
     */

  }, {
    key: "zones",
    value: function zones() {
      return new ByProjectKeyZonesRequestBuilder({
        pathArgs: _objectSpread({}, this.args.pathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
  }, {
    key: "me",
    value: function me() {
      return new ByProjectKeyMeRequestBuilder({
        pathArgs: _objectSpread({}, this.args.pathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
    /**
     *	Extend the behavior of an API with your business logic
     */

  }, {
    key: "extensions",
    value: function extensions() {
      return new ByProjectKeyExtensionsRequestBuilder({
        pathArgs: _objectSpread({}, this.args.pathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
    /**
     *	Manage your API Clients via an API. Useful for Infrastructure-as-Code tooling, and regularly rotating API secrets.
     *
     */

  }, {
    key: "apiClients",
    value: function apiClients() {
      return new ByProjectKeyApiClientsRequestBuilder({
        pathArgs: _objectSpread({}, this.args.pathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
    /**
     *	Stores let you model the context your customers shop in.
     */

  }, {
    key: "stores",
    value: function stores() {
      return new ByProjectKeyStoresRequestBuilder({
        pathArgs: _objectSpread({}, this.args.pathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
  }, {
    key: "inStoreKeyWithStoreKeyValue",
    value: function inStoreKeyWithStoreKeyValue(childPathArgs) {
      return new ByProjectKeyInStoreKeyByStoreKeyRequestBuilder({
        pathArgs: _objectSpread(_objectSpread({}, this.args.pathArgs), childPathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
    /**
     *	A standalone price assigns a price to a product variant for a given scope. The API will use the standalone prices associated with a Product if its field [`priceMode`](/projects/products#pricemode) is set to `Standalone` [ProductPriceMode](ctp:api:type:ProductPriceModeEnum).
     */

  }, {
    key: "standalonePrices",
    value: function standalonePrices() {
      return new ByProjectKeyStandalonePricesRequestBuilder({
        pathArgs: _objectSpread({}, this.args.pathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
  }, {
    key: "inBusinessUnitKeyWithBusinessUnitKeyValue",
    value: function inBusinessUnitKeyWithBusinessUnitKeyValue(childPathArgs) {
      return new ByProjectKeyInBusinessUnitKeyByBusinessUnitKeyRequestBuilder({
        pathArgs: _objectSpread(_objectSpread({}, this.args.pathArgs), childPathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
    /**
     *	Attribute groups ... TODO
     */

  }, {
    key: "attributeGroups",
    value: function attributeGroups() {
      return new ByProjectKeyAttributeGroupsRequestBuilder({
        pathArgs: _objectSpread({}, this.args.pathArgs),
        executeRequest: this.args.executeRequest,
        baseUri: this.args.baseUri
      });
    }
  }, {
    key: "get",
    value: function get(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'GET',
        uriTemplate: '/{projectKey}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({}, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers)
      }, this.args.executeRequest);
    }
  }, {
    key: "post",
    value: function post(methodArgs) {
      return new ApiRequest({
        baseUri: this.args.baseUri,
        method: 'POST',
        uriTemplate: '/{projectKey}',
        pathVariables: this.args.pathArgs,
        headers: _objectSpread({
          'Content-Type': 'application/json'
        }, methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.headers),
        body: methodArgs === null || methodArgs === void 0 ? void 0 : methodArgs.body
      }, this.args.executeRequest);
    }
  }]);

  return ByProjectKeyRequestBuilder;
}();

var ApiRoot = /*#__PURE__*/function () {
  function ApiRoot(args) {
    _classCallCheck(this, ApiRoot);

    _defineProperty(this, "executeRequest", void 0);

    _defineProperty(this, "baseUri", void 0);

    this.executeRequest = args.executeRequest;
    this.baseUri = args.baseUri || 'https://api.europe-west1.gcp.commercetools.com';
  }
  /**
   *	The Project endpoint is used to retrieve certain information from a project.
   */


  _createClass(ApiRoot, [{
    key: "withProjectKey",
    value: function withProjectKey(childPathArgs) {
      return new ByProjectKeyRequestBuilder({
        pathArgs: _objectSpread({}, childPathArgs),
        executeRequest: this.executeRequest,
        baseUri: this.baseUri
      });
    }
  }]);

  return ApiRoot;
}();
/**
 * Code generated by [commercetools RMF-Codegen](https://github.com/commercetools/rmf-codegen). DO NOT EDIT.
 * Please don't change this file manually but run `rmf-codegen generate <raml_file_path> -o <output_path> -t typescript_client` to update it.
 * For more information about the commercetools platform APIs, visit https://docs.commercetools.com/.
 */


exports.ApiRoot = ApiRoot;

var createExecutorFromMiddlewares = function createExecutorFromMiddlewares(executor, midds) {
  if (!midds || midds.length == 0) {
    return executor;
  }

  var reduced = midds.reduce(reduceMiddleware);
  return middlewareToExecutor(reduced, executor);
};

exports.createExecutorFromMiddlewares = createExecutorFromMiddlewares;

function reduceMiddleware(middleware1, middleware2) {
  return function (request, executor) {
    return middleware1(request, middlewareToExecutor(middleware2, executor));
  };
}

function middlewareToExecutor(middleware, executor) {
  return function (request) {
    return middleware(request, executor);
  };
}

function createApiBuilderFromCtpClient(ctpClient, baseUri) {
  return new ApiRoot({
    executeRequest: ctpClient.execute,
    baseUri: baseUri
  });
}

/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ClientBuilder = void 0;
exports.Process = process$1;
exports.createAuthForAnonymousSessionFlow = createAuthMiddlewareForAnonymousSessionFlow$1;
exports.createAuthForClientCredentialsFlow = createAuthMiddlewareForClientCredentialsFlow$1;
exports.createAuthForPasswordFlow = createAuthMiddlewareForPasswordFlow$1;
exports.createAuthForRefreshTokenFlow = createAuthMiddlewareForRefreshTokenFlow$1;
exports.createAuthWithExistingToken = createAuthMiddlewareWithExistingToken$1;
exports.createClient = createClient;
exports.createCorrelationIdMiddleware = createCorrelationIdMiddleware;
exports.createHttpClient = createHttpMiddleware;
exports.createLoggerMiddleware = createLoggerMiddleware;
exports.createQueueMiddleware = createQueueMiddleware;
exports.createUserAgentMiddleware = createUserAgentMiddleware;
exports.getErrorByCode = getErrorByCode;

var _regenerator = _interopRequireDefault(__webpack_require__(13));

var _nodeFetch = _interopRequireDefault(__webpack_require__(22));

var _querystring = _interopRequireDefault(__webpack_require__(35));

var _buffer = __webpack_require__(24);

var _excluded = ["statusCode", "message"];

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty2(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

var METHODS = ['ACL', 'BIND', 'CHECKOUT', 'CONNECT', 'COPY', 'DELETE', 'GET', 'HEAD', 'LINK', 'LOCK', 'M-SEARCH', 'MERGE', 'MKACTIVITY', 'MKCALENDAR', 'MKCOL', 'MOVE', 'NOTIFY', 'OPTIONS', 'PATCH', 'POST', 'PROPFIND', 'PROPPATCH', 'PURGE', 'PUT', 'REBIND', 'REPORT', 'SEARCH', 'SOURCE', 'SUBSCRIBE', 'TRACE', 'UNBIND', 'UNLINK', 'UNLOCK', 'UNSUBSCRIBE'];
/**
 * @throws {Error}
 */

function validate(funcName, request) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {
    allowedMethods: METHODS
  };
  if (!request) throw new Error("The \"".concat(funcName, "\" function requires a \"Request\" object as an argument. See https://commercetools.github.io/nodejs/sdk/Glossary.html#clientrequest"));
  if (typeof request.uri !== 'string') throw new Error("The \"".concat(funcName, "\" Request object requires a valid uri. See https://commercetools.github.io/nodejs/sdk/Glossary.html#clientrequest"));
  if (!options.allowedMethods.includes(request.method)) throw new Error("The \"".concat(funcName, "\" Request object requires a valid method. See https://commercetools.github.io/nodejs/sdk/Glossary.html#clientrequest"));
}

var _options;

function compose() {
  for (var _len = arguments.length, funcs = new Array(_len), _key = 0; _key < _len; _key++) {
    funcs[_key] = arguments[_key];
  }

  funcs = funcs.filter(function (func) {
    return typeof func === 'function';
  });
  if (funcs.length === 1) return funcs[0];
  return funcs.reduce(function (a, b) {
    return function () {
      return a(b.apply(void 0, arguments));
    };
  });
}

function process$1(request, fn, processOpt) {
  validate('process', request, {
    allowedMethods: ['GET']
  });
  if (typeof fn !== 'function') throw new Error('The "process" function accepts a "Function" as a second argument that returns a Promise. See https://commercetools.github.io/nodejs/sdk/api/sdkClient.html#processrequest-processfn-options'); // Set default process options

  var opt = _objectSpread({
    total: Number.POSITIVE_INFINITY,
    accumulate: true
  }, processOpt);

  return new Promise(function (resolve, reject) {
    var _path,
        _queryString = '';

    if (request && request.uri) {
      var _request$uri$split = request.uri.split('?'),
          _request$uri$split2 = _slicedToArray(_request$uri$split, 2),
          path = _request$uri$split2[0],
          queryString = _request$uri$split2[1];

      _path = path;
      _queryString = queryString;
    }

    var requestQuery = _objectSpread({}, _querystring["default"].parse(_queryString));

    var query = _objectSpread({
      // defaults
      limit: 20
    }, requestQuery);

    var hasFirstPageBeenProcessed = false;
    var itemsToGet = opt.total;

    var processPage = /*#__PURE__*/function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/_regenerator["default"].mark(function _callee(lastId) {
        var acc,
            limit,
            originalQueryString,
            enhancedQuery,
            enhancedQueryString,
            enhancedRequest,
            payload,
            _payload$body,
            results,
            resultsLength,
            result,
            accumulated,
            last,
            newLastId,
            _args = arguments;

        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                acc = _args.length > 1 && _args[1] !== undefined ? _args[1] : [];
                // Use the lesser value between limit and itemsToGet in query
                limit = query.limit < itemsToGet ? query.limit : itemsToGet;
                originalQueryString = _querystring["default"].stringify(_objectSpread(_objectSpread({}, query), {}, {
                  limit: limit
                }));
                enhancedQuery = _objectSpread({
                  sort: 'id asc',
                  withTotal: false
                }, lastId ? {
                  where: "id > \"".concat(lastId, "\"")
                } : {});
                enhancedQueryString = _querystring["default"].stringify(enhancedQuery);
                enhancedRequest = _objectSpread(_objectSpread({}, request), {}, {
                  uri: "".concat(_path, "?").concat(enhancedQueryString, "&").concat(originalQueryString)
                });
                _context.prev = 6;
                _context.next = 9;
                return createClient(_options).execute(enhancedRequest);

              case 9:
                payload = _context.sent;
                _payload$body = payload.body, results = _payload$body.results, resultsLength = _payload$body.count;

                if (!(!resultsLength && hasFirstPageBeenProcessed)) {
                  _context.next = 13;
                  break;
                }

                return _context.abrupt("return", resolve(acc || []));

              case 13:
                _context.next = 15;
                return Promise.resolve(fn(payload));

              case 15:
                result = _context.sent;
                hasFirstPageBeenProcessed = true;
                if (opt.accumulate) accumulated = acc.concat(result || []);
                itemsToGet -= resultsLength; // If there are no more items to get, it means the total number
                // of items in the original request have been fetched so we
                // resolve the promise.
                // Also, if we get less results in a page then the limit set it
                // means that there are no more pages and that we can finally
                // resolve the promise.

                if (!(resultsLength < query.limit || !itemsToGet)) {
                  _context.next = 21;
                  break;
                }

                return _context.abrupt("return", resolve(accumulated || []));

              case 21:
                last = results[resultsLength - 1];
                newLastId = last && last.id;
                processPage(newLastId, accumulated);
                _context.next = 29;
                break;

              case 26:
                _context.prev = 26;
                _context.t0 = _context["catch"](6);
                reject(_context.t0);

              case 29:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, null, [[6, 26]]);
      }));

      return function processPage(_x) {
        return _ref.apply(this, arguments);
      };
    }(); // Start iterating through pages


    processPage();
  });
}

function createClient(options) {
  _options = options;
  if (!options) throw new Error('Missing required options');
  if (options.middlewares && !Array.isArray(options.middlewares)) throw new Error('Middlewares should be an array');
  if (!options.middlewares || !Array.isArray(options.middlewares) || !options.middlewares.length) throw new Error('You need to provide at least one middleware');
  return {
    /**
     * Given a request object,
     */
    process: process$1,
    execute: function execute(request) {
      validate('exec', request);
      return new Promise(function (resolve, reject) {
        var resolver = function resolver(rq, rs) {
          // Note: pick the promise `resolve` and `reject` function from
          // the response object. This is not necessary the same function
          // given from the `new Promise` constructor, as middlewares could
          // override those functions for custom behaviours.
          if (rs.error) rs.reject(rs.error);else {
            var resObj = {
              body: rs.body || {},
              statusCode: rs.statusCode
            };
            if (rs.headers) resObj.headers = rs.headers;
            if (rs.request) resObj.request = rs.request;
            rs.resolve(resObj);
          }
        };

        var dispatch = compose.apply(void 0, _toConsumableArray(options.middlewares))(resolver);
        dispatch(request, // Initial response shape
        {
          resolve: resolve,
          reject: reject,
          body: undefined,
          error: undefined
        });
      });
    }
  };
} // POST https://{host}/oauth/token?grant_type=client_credentials&scope={scope}
// Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==


var Buffer$1 = __webpack_require__(24).Buffer;

function buildRequestForClientCredentialsFlow(options) {
  if (!options) throw new Error('Missing required options');
  if (!options.host) throw new Error('Missing required option (host)');
  if (!options.projectKey) throw new Error('Missing required option (projectKey)');
  if (!options.credentials) throw new Error('Missing required option (credentials)');
  var _options$credentials = options.credentials,
      clientId = _options$credentials.clientId,
      clientSecret = _options$credentials.clientSecret;
  if (!(clientId && clientSecret)) throw new Error('Missing required credentials (clientId, clientSecret)');
  var scope = options.scopes ? options.scopes.join(' ') : undefined;
  var basicAuth = Buffer$1.from("".concat(clientId, ":").concat(clientSecret)).toString('base64'); // This is mostly useful for internal testing purposes to be able to check
  // other oauth endpoints.

  var oauthUri = options.oauthUri || '/oauth/token';
  var url = options.host.replace(/\/$/, '') + oauthUri;
  var body = "grant_type=client_credentials".concat(scope ? "&scope=".concat(scope) : '');
  return {
    basicAuth: basicAuth,
    url: url,
    body: body
  };
}

function buildRequestForPasswordFlow(options) {
  if (!options) throw new Error('Missing required options');
  if (!options.host) throw new Error('Missing required option (host)');
  if (!options.projectKey) throw new Error('Missing required option (projectKey)');
  if (!options.credentials) throw new Error('Missing required option (credentials)');
  var _options$credentials2 = options.credentials,
      clientId = _options$credentials2.clientId,
      clientSecret = _options$credentials2.clientSecret,
      user = _options$credentials2.user;
  var pKey = options.projectKey;
  if (!(clientId && clientSecret && user)) throw new Error('Missing required credentials (clientId, clientSecret, user)');
  var username = user.username,
      password = user.password;
  if (!(username && password)) throw new Error('Missing required user credentials (username, password)');
  var scope = (options.scopes || []).join(' ');
  var scopeStr = scope ? "&scope=".concat(scope) : '';
  var basicAuth = Buffer$1.from("".concat(clientId, ":").concat(clientSecret)).toString('base64');
  /**
   * This is mostly useful for internal testing purposes to be able to check
   * other oauth endpoints.
   */

  var oauthUri = options.oauthUri || "/oauth/".concat(pKey, "/customers/token");
  var url = options.host.replace(/\/$/, '') + oauthUri; // encode username and password as requested by the system

  var body = "grant_type=password&username=".concat(encodeURIComponent(username), "&password=").concat(encodeURIComponent(password)).concat(scopeStr);
  return {
    basicAuth: basicAuth,
    url: url,
    body: body
  };
}

function buildRequestForRefreshTokenFlow(options) {
  if (!options) throw new Error('Missing required options');
  if (!options.host) throw new Error('Missing required option (host)');
  if (!options.projectKey) throw new Error('Missing required option (projectKey)');
  if (!options.credentials) throw new Error('Missing required option (credentials)');
  if (!options.refreshToken) throw new Error('Missing required option (refreshToken)');
  var _options$credentials3 = options.credentials,
      clientId = _options$credentials3.clientId,
      clientSecret = _options$credentials3.clientSecret;
  if (!(clientId && clientSecret)) throw new Error('Missing required credentials (clientId, clientSecret)');
  var basicAuth = Buffer$1.from("".concat(clientId, ":").concat(clientSecret)).toString('base64'); // This is mostly useful for internal testing purposes to be able to check
  // other oauth endpoints.

  var oauthUri = options.oauthUri || '/oauth/token';
  var url = options.host.replace(/\/$/, '') + oauthUri;
  var body = "grant_type=refresh_token&refresh_token=".concat(encodeURIComponent(options.refreshToken));
  return {
    basicAuth: basicAuth,
    url: url,
    body: body
  };
}

function buildRequestForAnonymousSessionFlow(options) {
  if (!options) throw new Error('Missing required options');
  if (!options.projectKey) throw new Error('Missing required option (projectKey)');
  var pKey = options.projectKey;
  options.oauthUri = options.oauthUri || "/oauth/".concat(pKey, "/anonymous/token");
  var result = buildRequestForClientCredentialsFlow(options);
  if (options.credentials.anonymousId) result.body += "&anonymous_id=".concat(options.credentials.anonymousId);
  return _objectSpread({}, result);
}

var Buffer = __webpack_require__(24).Buffer;

function mergeAuthHeader(token, req) {
  return _objectSpread(_objectSpread({}, req), {}, {
    headers: _objectSpread(_objectSpread({}, req.headers), {}, {
      Authorization: "Bearer ".concat(token)
    })
  });
}

function calculateExpirationTime(expiresIn) {
  return Date.now() + // Add a gap of 5 minutes before expiration time.
  expiresIn * 1000 - 5 * 60 * 1000;
}

function executeRequest(_x2) {
  return _executeRequest.apply(this, arguments);
}

function _executeRequest() {
  _executeRequest = _asyncToGenerator( /*#__PURE__*/_regenerator["default"].mark(function _callee2(_ref2) {
    var fetcher, url, basicAuth, body, tokenCache, requestState, pendingTasks, response, tokenCacheKey, _res, _yield$_res$json, token, expiresIn, refreshToken, expirationTime, executionQueue, parsed, text, error;

    return _regenerator["default"].wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            fetcher = _ref2.fetcher, url = _ref2.url, basicAuth = _ref2.basicAuth, body = _ref2.body, tokenCache = _ref2.tokenCache, requestState = _ref2.requestState, pendingTasks = _ref2.pendingTasks, response = _ref2.response, tokenCacheKey = _ref2.tokenCacheKey;
            _context2.prev = 1;
            _context2.next = 4;
            return fetcher(url, {
              method: 'POST',
              headers: {
                Authorization: "Basic ".concat(basicAuth),
                'Content-Length': Buffer.byteLength(body).toString(),
                'Content-Type': 'application/x-www-form-urlencoded'
              },
              body: body
            });

          case 4:
            _res = _context2.sent;

            if (!_res.ok) {
              _context2.next = 19;
              break;
            }

            _context2.next = 8;
            return _res.json();

          case 8:
            _yield$_res$json = _context2.sent;
            token = _yield$_res$json.access_token;
            expiresIn = _yield$_res$json.expires_in;
            refreshToken = _yield$_res$json.refresh_token;
            expirationTime = calculateExpirationTime(expiresIn); // cache new generated token

            tokenCache.set({
              token: token,
              expirationTime: expirationTime,
              refreshToken: refreshToken
            }, tokenCacheKey); // Dispatch all pending requests

            requestState.set(false);
            /**
             * Freeze and copy pending queue, reset original one for accepting
             * new pending tasks
             */

            executionQueue = pendingTasks.slice();
            pendingTasks = [];
            executionQueue.forEach(function (task) {
              // Assign the new token in the request header
              var requestWithAuth = mergeAuthHeader(token, task.request);
              /**
               * console.log('test', cache, pendingTasks)
               * Continue by calling the task's own next function
               */

              task.next(requestWithAuth, task.response);
            });
            return _context2.abrupt("return");

          case 19:
            _context2.next = 21;
            return _res.text();

          case 21:
            text = _context2.sent;

            try {
              parsed = JSON.parse(text);
            } catch (error) {
              /* noop */
            }

            error = new Error(parsed ? parsed.message : text);
            if (parsed) error.body = parsed;
            /**
             * to notify that token is either fetched or failed
             * in the below case token failed to be fetched
             * and reset requestState to false
             * so requestState could be shared between multi authMiddlewareBase functions
             */

            requestState.set(false);
            response.reject(error);
            _context2.next = 33;
            break;

          case 29:
            _context2.prev = 29;
            _context2.t0 = _context2["catch"](1);

            /**
             * to notify that token is either fetched or failed
             * in the below case token failed to be fetched
             * and reset requestState to false
             * so requestState could be shared between multi authMiddlewareBase functions
             */
            requestState.set(false);
            if (response && typeof response.reject === 'function') response.reject(_context2.t0);

          case 33:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, null, [[1, 29]]);
  }));
  return _executeRequest.apply(this, arguments);
}

function authMiddlewareBase(_ref3, next, userOptions) {
  var request = _ref3.request,
      response = _ref3.response,
      url = _ref3.url,
      basicAuth = _ref3.basicAuth,
      body = _ref3.body,
      pendingTasks = _ref3.pendingTasks,
      requestState = _ref3.requestState,
      tokenCache = _ref3.tokenCache,
      tokenCacheKey = _ref3.tokenCacheKey,
      fetcher = _ref3.fetch;
  if (!fetcher && typeof fetch === 'undefined') throw new Error('`fetch` is not available. Please pass in `fetch` as an option or have it globally available.');
  if (!fetcher) fetcher = fetch; // Check if there is already a `Authorization` header in the request.
  // If so, then go directly to the next middleware.

  if (request.headers && request.headers.authorization || request.headers && request.headers.Authorization) {
    next(request, response);
    return;
  } // If there was a token in the tokenCache, and it's not expired, append
  // the token in the `Authorization` header.


  var tokenObj = tokenCache.get(tokenCacheKey);

  if (tokenObj && tokenObj.token && Date.now() < tokenObj.expirationTime) {
    var requestWithAuth = mergeAuthHeader(tokenObj.token, request);
    next(requestWithAuth, response);
    return;
  }
  /**
   * Keep pending tasks until a token is fetched
   * Save next function as well, to call it once the token has been fetched, which prevents
   * unexpected behaviour in a context in which the next function uses global vars
   * or Promises to capture the token to hand it to other libraries, e.g. Apollo
   */


  pendingTasks.push({
    request: request,
    response: response,
    next: next
  }); // If a token is currently being fetched, just wait ;)

  if (requestState.get()) return; // Mark that a token is being fetched

  requestState.set(true);
  /**
   * If there was a refreshToken in the tokenCache, and there was an expired
   * token or no token in the tokenCache, use the refreshToken flow
   */

  if (tokenObj && tokenObj.refreshToken && (!tokenObj.token || tokenObj.token && Date.now() > tokenObj.expirationTime)) {
    if (!userOptions) throw new Error('Missing required options');
    executeRequest(_objectSpread(_objectSpread({
      fetcher: fetcher
    }, buildRequestForRefreshTokenFlow(_objectSpread(_objectSpread({}, userOptions), {}, {
      refreshToken: tokenObj.refreshToken
    }))), {}, {
      tokenCacheKey: tokenCacheKey,
      tokenCache: tokenCache,
      requestState: requestState,
      pendingTasks: pendingTasks,
      response: response
    }));
    return;
  } // Token and refreshToken are not present or invalid. Request a new token...


  executeRequest({
    fetcher: fetcher,
    url: url,
    basicAuth: basicAuth,
    body: body,
    tokenCacheKey: tokenCacheKey,
    tokenCache: tokenCache,
    requestState: requestState,
    pendingTasks: pendingTasks,
    response: response
  });
}

function store(initVal) {
  var value = initVal;
  return {
    get: function get(TokenCacheOption) {
      return value;
    },
    set: function set(val, TokenCacheOption) {
      value = val;
    }
  };
}

function createAuthMiddlewareForAnonymousSessionFlow$1(options) {
  var tokenCache = options.tokenCache || store({
    token: '',
    expirationTime: -1
  });
  var pendingTasks = [];
  var requestState = store(false);
  return function (next) {
    return function (request, response) {
      // Check if there is already a `Authorization` header in the request.
      // If so, then go directly to the next middleware.
      if (request.headers && request.headers.authorization || request.headers && request.headers.Authorization) {
        next(request, response);
        return;
      }

      var params = _objectSpread(_objectSpread({
        request: request,
        response: response
      }, buildRequestForAnonymousSessionFlow(options)), {}, {
        pendingTasks: pendingTasks,
        requestState: requestState,
        tokenCache: tokenCache,
        fetch: options.fetch
      });

      authMiddlewareBase(params, next, options);
    };
  };
}

function buildTokenCacheKey(options) {
  return {
    clientId: options.credentials.clientId,
    host: options.host,
    projectKey: options.projectKey
  };
}

function createAuthMiddlewareForClientCredentialsFlow$1(options) {
  var tokenCache = options.tokenCache || store({
    token: '',
    expirationTime: -1
  });
  var requestState = store(false);
  var pendingTasks = [];
  return function (next) {
    return function (request, response) {
      // Check if there is already a `Authorization` header in the request.
      // If so, then go directly to the next middleware.
      if (request.headers && request.headers.authorization || request.headers && request.headers.Authorization) {
        next(request, response);
        return;
      }

      var params = _objectSpread(_objectSpread({
        request: request,
        response: response
      }, buildRequestForClientCredentialsFlow(options)), {}, {
        pendingTasks: pendingTasks,
        requestState: requestState,
        tokenCache: tokenCache,
        tokenCacheKey: buildTokenCacheKey(options),
        fetch: options.fetch
      });

      authMiddlewareBase(params, next);
    };
  };
}

function createAuthMiddlewareWithExistingToken$1() {
  var authorization = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  return function (next) {
    return function (request, response) {
      if (typeof authorization !== 'string') throw new Error('authorization must be a string');
      var force = options.force === undefined ? true : options.force;
      /** The request will not be modified if:
       *  1. no argument is passed
       *  2. force is false and authorization header exists
       */

      if (!authorization || (request.headers && request.headers.authorization || request.headers && request.headers.Authorization) && force === false) {
        return next(request, response);
      }

      var requestWithAuth = _objectSpread(_objectSpread({}, request), {}, {
        headers: _objectSpread(_objectSpread({}, request.headers), {}, {
          Authorization: authorization
        })
      });

      return next(requestWithAuth, response);
    };
  };
}

function createAuthMiddlewareForPasswordFlow$1(options) {
  var tokenCache = options.tokenCache || store({});
  var pendingTasks = [];
  var requestState = store(false);
  return function (next) {
    return function (request, response) {
      // Check if there is already a `Authorization` header in the request.
      // If so, then go directly to the next middleware.
      if (request.headers && request.headers.authorization || request.headers && request.headers.Authorization) {
        next(request, response);
        return;
      }

      var params = _objectSpread(_objectSpread({
        request: request,
        response: response
      }, buildRequestForPasswordFlow(options)), {}, {
        pendingTasks: pendingTasks,
        requestState: requestState,
        tokenCache: tokenCache,
        fetch: options.fetch
      });

      authMiddlewareBase(params, next, options);
    };
  };
}

function createAuthMiddlewareForRefreshTokenFlow$1(options) {
  var tokenCache = options.tokenCache || store({
    token: '',
    expirationTime: -1
  });
  var pendingTasks = [];
  var requestState = store(false);
  return function (next) {
    return function (request, response) {
      // Check if there is already a `Authorization` header in the request.
      // If so, then go directly to the next middleware.
      if (request.headers && request.headers.authorization || request.headers && request.headers.Authorization) {
        next(request, response);
        return;
      }

      var params = _objectSpread(_objectSpread({
        request: request,
        response: response
      }, buildRequestForRefreshTokenFlow(options)), {}, {
        pendingTasks: pendingTasks,
        requestState: requestState,
        tokenCache: tokenCache,
        fetch: options.fetch
      });

      authMiddlewareBase(params, next);
    };
  };
}

var authMiddlewares = /*#__PURE__*/Object.freeze({
  __proto__: null,
  createAuthMiddlewareForAnonymousSessionFlow: createAuthMiddlewareForAnonymousSessionFlow$1,
  createAuthMiddlewareForClientCredentialsFlow: createAuthMiddlewareForClientCredentialsFlow$1,
  createAuthMiddlewareWithExistingToken: createAuthMiddlewareWithExistingToken$1,
  createAuthMiddlewareForPasswordFlow: createAuthMiddlewareForPasswordFlow$1,
  createAuthMiddlewareForRefreshTokenFlow: createAuthMiddlewareForRefreshTokenFlow$1
});

function createCorrelationIdMiddleware(options) {
  return function (next) {
    return function (request, response) {
      var nextRequest = _objectSpread(_objectSpread({}, request), {}, {
        headers: _objectSpread(_objectSpread({}, request.headers), {}, {
          'X-Correlation-ID': options.generate()
        })
      });

      next(nextRequest, response);
    };
  };
}

function defineError(statusCode, message) {
  var meta = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  this.status = this.statusCode = this.code = statusCode;
  this.message = message;
  Object.assign(this, meta);
  this.name = this.constructor.name;
  this.constructor.prototype.__proto__ = Error.prototype;
  if (Error.captureStackTrace) Error.captureStackTrace(this, this.constructor);
}

function NetworkError() {
  for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
    args[_key2] = arguments[_key2];
  }

  defineError.call.apply(defineError, [this, 0
  /* special code to indicate network errors */
  ].concat(args));
}

function HttpError() {
  for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
    args[_key3] = arguments[_key3];
  }

  defineError.call.apply(defineError, [this].concat(args));
}

function BadRequest() {
  for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
    args[_key4] = arguments[_key4];
  }

  defineError.call.apply(defineError, [this, 400].concat(args));
}

function Unauthorized() {
  for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
    args[_key5] = arguments[_key5];
  }

  defineError.call.apply(defineError, [this, 401].concat(args));
}

function Forbidden() {
  for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
    args[_key6] = arguments[_key6];
  }

  defineError.call.apply(defineError, [this, 403].concat(args));
}

function NotFound() {
  for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
    args[_key7] = arguments[_key7];
  }

  defineError.call.apply(defineError, [this, 404].concat(args));
}

function ConcurrentModification() {
  for (var _len8 = arguments.length, args = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {
    args[_key8] = arguments[_key8];
  }

  defineError.call.apply(defineError, [this, 409].concat(args));
}

function InternalServerError() {
  for (var _len9 = arguments.length, args = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {
    args[_key9] = arguments[_key9];
  }

  defineError.call.apply(defineError, [this, 500].concat(args));
}

function ServiceUnavailable() {
  for (var _len10 = arguments.length, args = new Array(_len10), _key10 = 0; _key10 < _len10; _key10++) {
    args[_key10] = arguments[_key10];
  }

  defineError.call.apply(defineError, [this, 503].concat(args));
}

function getErrorByCode(code) {
  switch (code) {
    case 0:
      return NetworkError;

    case 400:
      return BadRequest;

    case 401:
      return Unauthorized;

    case 403:
      return Forbidden;

    case 404:
      return NotFound;

    case 409:
      return ConcurrentModification;

    case 500:
      return InternalServerError;

    case 503:
      return ServiceUnavailable;

    default:
      return undefined;
  }
}

function parseHeaders(headers) {
  if (headers.raw) // node-fetch
    return headers.raw(); // Tmp fix for Firefox until it supports iterables

  if (!headers.forEach) return {}; // whatwg-fetch

  var map = {};
  headers.forEach(function (value, name) {
    map[name] = value;
  });
  return map;
} // performs a proper buffer check


function isBuffer(obj) {
  return obj != null && obj.constructor != null && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj);
}

function createError(_ref4) {
  var statusCode = _ref4.statusCode,
      message = _ref4.message,
      rest = _objectWithoutProperties(_ref4, _excluded);

  var errorMessage = message || 'Unexpected non-JSON error response';
  if (statusCode === 404) errorMessage = "URI not found: ".concat(rest.originalRequest.uri);
  var ResponseError = getErrorByCode(statusCode);
  if (ResponseError) return new ResponseError(errorMessage, rest);
  return new HttpError(statusCode, errorMessage, rest);
} // calculates the delay duration exponentially
// More info about the algorithm use here https://goo.gl/Xk8h5f


function calcDelayDuration(retryCount, retryDelay, maxRetries, backoff, maxDelay) {
  if (backoff) return retryCount !== 0 // do not increase if it's the first retry
  ? Math.min(Math.round((Math.random() + 1) * retryDelay * Math.pow(2, retryCount)), maxDelay) : retryDelay;
  return retryDelay;
}

function maskAuthData(request, maskSensitiveHeaderData) {
  if (maskSensitiveHeaderData) {
    if (request && request.headers && request.headers.authorization) request.headers.authorization = 'Bearer ********';
    if (request && request.headers && request.headers.Authorization) request.headers.Authorization = 'Bearer ********';
  }
}

function createHttpMiddleware(_ref5) {
  var host = _ref5.host,
      credentialsMode = _ref5.credentialsMode,
      includeResponseHeaders = _ref5.includeResponseHeaders,
      includeOriginalRequest = _ref5.includeOriginalRequest,
      _ref5$includeRequestI = _ref5.includeRequestInErrorResponse,
      includeRequestInErrorResponse = _ref5$includeRequestI === void 0 ? true : _ref5$includeRequestI,
      _ref5$maskSensitiveHe = _ref5.maskSensitiveHeaderData,
      maskSensitiveHeaderData = _ref5$maskSensitiveHe === void 0 ? true : _ref5$maskSensitiveHe,
      enableRetry = _ref5.enableRetry,
      timeout = _ref5.timeout,
      _ref5$retryConfig = _ref5.retryConfig;
  _ref5$retryConfig = _ref5$retryConfig === void 0 ? {} : _ref5$retryConfig;
  var _ref5$retryConfig$max = _ref5$retryConfig.maxRetries,
      maxRetries = _ref5$retryConfig$max === void 0 ? 10 : _ref5$retryConfig$max,
      _ref5$retryConfig$bac = _ref5$retryConfig.backoff,
      backoff = _ref5$retryConfig$bac === void 0 ? true : _ref5$retryConfig$bac,
      _ref5$retryConfig$ret = _ref5$retryConfig.retryDelay,
      retryDelay = _ref5$retryConfig$ret === void 0 ? 200 : _ref5$retryConfig$ret,
      _ref5$retryConfig$max2 = _ref5$retryConfig.maxDelay,
      maxDelay = _ref5$retryConfig$max2 === void 0 ? Infinity : _ref5$retryConfig$max2,
      _ref5$retryConfig$ret2 = _ref5$retryConfig.retryOnAbort,
      retryOnAbort = _ref5$retryConfig$ret2 === void 0 ? false : _ref5$retryConfig$ret2,
      _ref5$retryConfig$ret3 = _ref5$retryConfig.retryCodes,
      retryCodes = _ref5$retryConfig$ret3 === void 0 ? [503] : _ref5$retryConfig$ret3,
      fetcher = _ref5.fetch,
      getAbortController = _ref5.getAbortController;
  //nodejs v18 has the fetch available and not the version 16
  if (!fetcher) throw new Error('`fetch` is not available. Please pass in `fetch` as an option or have it globally available.');
  if (timeout && !getAbortController) throw new Error('`AbortController` is not available. Please pass in `getAbortController` as an option or have AbortController globally available when using timeout.');
  var fetchFunction;

  if (fetcher) {
    fetchFunction = fetcher;
  } else {
    // `fetcher` is set here rather than the destructuring to ensure fetch is
    // declared before referencing it otherwise it would cause a `ReferenceError`.
    // For reference of this pattern: https://github.com/apollographql/apollo-link/blob/498b413a5b5199b0758ce898b3bb55451f57a2fa/packages/apollo-link-http/src/httpLink.ts#L49
    fetchFunction = fetch;
  }

  if (!Array.isArray(retryCodes)) {
    throw new Error('`retryCodes` option must be an array of retry status (error) codes.');
  }

  return function (next) {
    return function (request, response) {
      var url = host.replace(/\/$/, '') + request.uri;

      var requestHeader = _objectSpread({}, request.headers); // Unset the content-type header if explicitly asked to (passing `null` as value).


      if (requestHeader['Content-Type'] === null) {
        delete requestHeader['Content-Type'];
      }

      if (!(Object.prototype.hasOwnProperty.call(requestHeader, 'Content-Type') || Object.prototype.hasOwnProperty.call(requestHeader, 'content-type'))) {
        requestHeader['Content-Type'] = 'application/json';
      } // Ensure body is a string if content type is application/json


      var body = ['application/json', 'application/graphql'].indexOf(requestHeader['Content-Type']) > -1 && typeof request.body === 'string' || isBuffer(request.body) ? request.body : JSON.stringify(request.body || undefined);

      if (body && (typeof body === 'string' || isBuffer(body))) {
        requestHeader['Content-Length'] = _buffer.Buffer.byteLength(body).toString();
      }

      var fetchOptions = {
        method: request.method,
        headers: requestHeader
      };

      if (credentialsMode) {
        fetchOptions.credentialsMode = credentialsMode;
      }

      if (body) {
        fetchOptions.body = body;
      }

      var retryCount = 0; // wrap in a fn so we can retry if error occur

      function executeFetch() {
        // Kick off timer for abortController directly before fetch.
        var timer;
        var abortController;

        if (timeout) {
          // Initialize the abort controller in case we do a retry on an aborted request to rest the signal
          abortController = (getAbortController ? getAbortController() : null) || new AbortController();
          fetchOptions.signal = abortController.signal; // Set the timer

          timer = setTimeout(function () {
            abortController.abort();
          }, timeout);
        }

        fetchFunction(url, fetchOptions).then(function (res) {
          if (res.ok) {
            if (fetchOptions.method === 'HEAD') {
              next(request, _objectSpread(_objectSpread({}, response), {}, {
                statusCode: res.status
              }));
              return;
            }

            res.text().then(function (result) {
              // Try to parse the response as JSON
              var parsed;

              try {
                parsed = result.length > 0 ? JSON.parse(result) : {};
              } catch (err) {
                if (enableRetry && retryCount < maxRetries) {
                  setTimeout(executeFetch, calcDelayDuration(retryCount, retryDelay, maxRetries, backoff, maxDelay));
                  retryCount += 1;
                  return;
                }

                parsed = result;
              }

              var parsedResponse = _objectSpread(_objectSpread({}, response), {}, {
                body: parsed,
                statusCode: res.status
              });

              if (includeResponseHeaders) parsedResponse.headers = parseHeaders(res.headers);

              if (includeOriginalRequest) {
                parsedResponse.request = _objectSpread({}, fetchOptions);
                maskAuthData(parsedResponse.request, maskSensitiveHeaderData);
              }

              next(request, parsedResponse);
            });
            return;
          } // Server responded with an error. Try to parse it as JSON, then
          // return a proper error type with all necessary meta information.


          res.text().then(function (text) {
            // Try to parse the error response as JSON
            var parsed;

            try {
              parsed = JSON.parse(text);
            } catch (error) {
              parsed = text;
            }

            var error = createError(_objectSpread(_objectSpread({
              statusCode: res.status
            }, includeRequestInErrorResponse ? {
              originalRequest: request
            } : {}), {}, {
              retryCount: retryCount,
              headers: parseHeaders(res.headers)
            }, _typeof(parsed) === 'object' ? {
              message: parsed.message,
              body: parsed
            } : {
              message: parsed,
              body: parsed
            }));

            if (enableRetry && (retryCodes.indexOf(error.statusCode) !== -1 || (retryCodes === null || retryCodes === void 0 ? void 0 : retryCodes.indexOf(error.message)) !== -1)) {
              if (retryCount < maxRetries) {
                setTimeout(executeFetch, calcDelayDuration(retryCount, retryDelay, maxRetries, backoff, maxDelay));
                retryCount += 1;
                return;
              }
            }

            maskAuthData(error.originalRequest, maskSensitiveHeaderData); // Let the final resolver to reject the promise

            var parsedResponse = _objectSpread(_objectSpread({}, response), {}, {
              error: error,
              statusCode: res.status
            });

            next(request, parsedResponse);
          });
        }, // We know that this is a "network" error thrown by the `fetch` library
        function (e) {
          // Retry when enabled and either the request was not aborted or retryOnAbort is enabled
          if (enableRetry && (retryOnAbort || !abortController || !abortController.signal)) {
            if (retryCount < maxRetries) {
              setTimeout(executeFetch, calcDelayDuration(retryCount, retryDelay, maxRetries, backoff, maxDelay));
              retryCount += 1;
              return;
            }
          }

          var error = new NetworkError(e.message, _objectSpread(_objectSpread({}, includeRequestInErrorResponse ? {
            originalRequest: request
          } : {}), {}, {
            retryCount: retryCount
          }));
          maskAuthData(error.originalRequest, maskSensitiveHeaderData);
          next(request, _objectSpread(_objectSpread({}, response), {}, {
            error: error,
            statusCode: 0
          }));
        })["finally"](function () {
          clearTimeout(timer);
        });
      }

      executeFetch();
    };
  };
}

function createLoggerMiddleware() {
  return function (next) {
    return function (request, response) {
      var error = response.error,
          body = response.body,
          statusCode = response.statusCode;
      console.log('Request: ', request);
      console.log('Response: ', {
        error: error,
        body: body,
        statusCode: statusCode
      });
      next(request, response);
    };
  };
}

function createQueueMiddleware(_ref6) {
  var _ref6$concurrency = _ref6.concurrency,
      concurrency = _ref6$concurrency === void 0 ? 20 : _ref6$concurrency;
  var queue = [];
  var runningCount = 0;

  var dequeue = function dequeue(next) {
    // We assume here that this task has been completed
    runningCount -= 1; // Check if there are any other pending tasks and execute them

    if (queue.length && runningCount <= concurrency) {
      var nextTask = queue.shift();
      runningCount += 1;
      next(nextTask.request, nextTask.response);
    }
  };

  return function (next) {
    return function (request, response) {
      // Override response `resolve` and `reject` to know when the request has
      // been completed and therefore trigger a pending task in the queue.
      var patchedResponse = _objectSpread(_objectSpread({}, response), {}, {
        resolve: function resolve(data) {
          // Resolve original promise
          response.resolve(data);
          dequeue(next);
        },
        reject: function reject(error) {
          // Reject original promise
          response.reject(error);
          dequeue(next);
        }
      }); // Add task to the queue


      queue.push({
        request: request,
        response: patchedResponse
      }); // If possible, run the task straight away

      if (runningCount < concurrency) {
        var nextTask = queue.shift();
        runningCount += 1;
        next(nextTask.request, nextTask.response);
      }
    };
  };
}

var packageJson = {
  name: "@commercetools/sdk-client-v2",
  version: "2.1.0",
  engines: {
    node: ">=14"
  },
  description: "commercetools Composable Commerce TypeScript SDK client.",
  keywords: ["commercetools", "composable commerce", "sdk", "typescript", "client", "middleware", "http", "oauth", "auth"],
  homepage: "https://github.com/commercetools/commercetools-sdk-typescript",
  license: "MIT",
  directories: {
    lib: "lib",
    test: "test"
  },
  publishConfig: {
    access: "public"
  },
  repository: {
    type: "git",
    url: "git+https://github.com/commercetools/commercetools-sdk-typescript.git"
  },
  bugs: {
    url: "https://github.com/commercetools/commercetools-sdk-typescript/issues"
  },
  dependencies: {
    buffer: "^6.0.3",
    "node-fetch": "^2.6.1",
    querystring: "^0.2.1"
  },
  files: ["dist", "CHANGELOG.md"],
  author: "Chukwuemeka Ajima <meeky.ae@gmail.com>",
  main: "dist/commercetools-sdk-client-v2.cjs.js",
  module: "dist/commercetools-sdk-client-v2.esm.js",
  browser: {
    "./dist/commercetools-sdk-client-v2.cjs.js": "./dist/commercetools-sdk-client-v2.browser.cjs.js",
    "./dist/commercetools-sdk-client-v2.esm.js": "./dist/commercetools-sdk-client-v2.browser.esm.js"
  },
  devDependencies: {
    "abort-controller": "3.0.0",
    "common-tags": "1.8.2",
    dotenv: "16.0.3",
    jest: "29.3.0",
    nock: "12.0.3",
    "organize-imports-cli": "0.10.0"
  },
  scripts: {
    organize_imports: "find src -type f -name '*.ts' | xargs organize-imports-cli",
    postbuild: "yarn organize_imports",
    post_process_generate: "yarn organize_imports"
  }
};
/*
  This is the easiest way, for this use case, to detect if we're running in
  Node.js or in a browser environment. In other cases, this won't be even a
  problem as Rollup will provide the correct polyfill in the bundle.
  The main advantage by doing it this way is that it allows to easily test
  the code running in both environments, by overriding `global.window` in
  the specific test.
*/

var isBrowser = function isBrowser() {
  return typeof window !== 'undefined' && window.document && window.document.nodeType === 9;
};

function getSystemInfo() {
  var _process;

  if (isBrowser()) return window.navigator.userAgent;
  var nodeVersion = ((_process = process) === null || _process === void 0 ? void 0 : _process.version.slice(1)) || '12'; // temporary fix for rn environment
  // const platformInfo = `(${process.platform}; ${process.arch})`
  // return `Node.js/${nodeVersion} ${platformInfo}`

  return "node.js/".concat(nodeVersion);
}

function createUserAgent(options) {
  if (!options || Object.keys(options).length === 0 || !{}.hasOwnProperty.call(options, 'name')) throw new Error('Missing required option `name`'); // Main info

  var baseInfo = options.version ? "".concat(options.name, "/").concat(options.version) : options.name; // Library info

  var libraryInfo = null;
  if (options.libraryName && !options.libraryVersion) libraryInfo = options.libraryName;else if (options.libraryName && options.libraryVersion) libraryInfo = "".concat(options.libraryName, "/").concat(options.libraryVersion); // Contact info

  var contactInfo = null;
  if (options.contactUrl && !options.contactEmail) contactInfo = "(+".concat(options.contactUrl, ")");else if (!options.contactUrl && options.contactEmail) contactInfo = "(+".concat(options.contactEmail, ")");else if (options.contactUrl && options.contactEmail) contactInfo = "(+".concat(options.contactUrl, "; +").concat(options.contactEmail, ")"); // System info

  var systemInfo = getSystemInfo(); // customName

  var customAgent = options.customAgent || '';
  return [baseInfo, systemInfo, libraryInfo, contactInfo, customAgent].filter(Boolean).join(' ');
}

function createUserAgentMiddleware(options) {
  var userAgent = createUserAgent(_objectSpread(_objectSpread({}, options), {}, {
    name: "commercetools-sdk-javascript-v2/".concat(packageJson.version)
  }));
  return function (next) {
    return function (request, response) {
      var requestWithUserAgent = _objectSpread(_objectSpread({}, request), {}, {
        headers: _objectSpread(_objectSpread({}, request.headers), {}, {
          'User-Agent': userAgent
        })
      });

      next(requestWithUserAgent, response);
    };
  };
}

var createAuthMiddlewareForPasswordFlow = authMiddlewares.createAuthMiddlewareForPasswordFlow,
    createAuthMiddlewareForAnonymousSessionFlow = authMiddlewares.createAuthMiddlewareForAnonymousSessionFlow,
    createAuthMiddlewareForClientCredentialsFlow = authMiddlewares.createAuthMiddlewareForClientCredentialsFlow,
    createAuthMiddlewareForRefreshTokenFlow = authMiddlewares.createAuthMiddlewareForRefreshTokenFlow,
    createAuthMiddlewareWithExistingToken = authMiddlewares.createAuthMiddlewareWithExistingToken;

var ClientBuilder = /*#__PURE__*/function () {
  function ClientBuilder() {
    _classCallCheck(this, ClientBuilder);

    _defineProperty(this, "projectKey", void 0);

    _defineProperty(this, "authMiddleware", void 0);

    _defineProperty(this, "httpMiddleware", void 0);

    _defineProperty(this, "userAgentMiddleware", void 0);

    _defineProperty(this, "correlationIdMiddleware", void 0);

    _defineProperty(this, "loggerMiddleware", void 0);

    _defineProperty(this, "queueMiddleware", void 0);

    _defineProperty(this, "middlewares", []);
  }

  _createClass(ClientBuilder, [{
    key: "withProjectKey",
    value: function withProjectKey(key) {
      this.projectKey = key;
      return this;
    }
  }, {
    key: "defaultClient",
    value: function defaultClient(baseUri, credentials, oauthUri, projectKey) {
      return this.withClientCredentialsFlow({
        host: oauthUri,
        projectKey: projectKey || this.projectKey,
        credentials: credentials
      }).withHttpMiddleware({
        host: baseUri,
        fetch: _nodeFetch["default"]
      }).withLoggerMiddleware();
    }
  }, {
    key: "withAuthMiddleware",
    value: function withAuthMiddleware(authMiddleware) {
      this.authMiddleware = authMiddleware;
      return this;
    }
  }, {
    key: "withMiddleware",
    value: function withMiddleware(middleware) {
      this.middlewares.push(middleware);
      return this;
    }
  }, {
    key: "withClientCredentialsFlow",
    value: function withClientCredentialsFlow(options) {
      return this.withAuthMiddleware(createAuthMiddlewareForClientCredentialsFlow(_objectSpread({
        host: options.host || 'https://auth.europe-west1.gcp.commercetools.com',
        projectKey: options.projectKey || this.projectKey,
        credentials: {
          clientId: options.credentials.clientId || '',
          clientSecret: options.credentials.clientSecret || ''
        },
        oauthUri: options.oauthUri || '',
        scopes: options.scopes,
        fetch: options.fetch || _nodeFetch["default"]
      }, options)));
    }
  }, {
    key: "withPasswordFlow",
    value: function withPasswordFlow(options) {
      return this.withAuthMiddleware(createAuthMiddlewareForPasswordFlow(_objectSpread({
        host: options.host || 'https://auth.europe-west1.gcp.commercetools.com',
        projectKey: options.projectKey || this.projectKey,
        credentials: {
          clientId: options.credentials.clientId || '',
          clientSecret: options.credentials.clientSecret || '',
          user: {
            username: options.credentials.user.username || '',
            password: options.credentials.user.password || ''
          }
        },
        fetch: options.fetch || _nodeFetch["default"]
      }, options)));
    }
  }, {
    key: "withAnonymousSessionFlow",
    value: function withAnonymousSessionFlow(options) {
      return this.withAuthMiddleware(createAuthMiddlewareForAnonymousSessionFlow(_objectSpread({
        host: options.host || 'https://auth.europe-west1.gcp.commercetools.com',
        projectKey: this.projectKey || options.projectKey,
        credentials: {
          clientId: options.credentials.clientId || '',
          clientSecret: options.credentials.clientSecret || '',
          anonymousId: options.credentials.anonymousId || ''
        },
        fetch: options.fetch || _nodeFetch["default"]
      }, options)));
    }
  }, {
    key: "withRefreshTokenFlow",
    value: function withRefreshTokenFlow(options) {
      return this.withAuthMiddleware(createAuthMiddlewareForRefreshTokenFlow(_objectSpread({
        host: options.host || 'https://auth.europe-west1.gcp.commercetools.com',
        projectKey: this.projectKey || options.projectKey,
        credentials: {
          clientId: options.credentials.clientId || '',
          clientSecret: options.credentials.clientSecret || ''
        },
        fetch: options.fetch || _nodeFetch["default"],
        refreshToken: options.refreshToken || ''
      }, options)));
    }
  }, {
    key: "withExistingTokenFlow",
    value: function withExistingTokenFlow(authorization, options) {
      return this.withAuthMiddleware(createAuthMiddlewareWithExistingToken(authorization, _objectSpread({
        force: options.force || true
      }, options)));
    }
  }, {
    key: "withHttpMiddleware",
    value: function withHttpMiddleware(options) {
      this.httpMiddleware = createHttpMiddleware(_objectSpread({
        host: options.host || 'https://api.europe-west1.gcp.commercetools.com',
        fetch: options.fetch || _nodeFetch["default"]
      }, options));
      return this;
    }
  }, {
    key: "withUserAgentMiddleware",
    value: function withUserAgentMiddleware(options) {
      this.userAgentMiddleware = createUserAgentMiddleware(options);
      return this;
    }
  }, {
    key: "withQueueMiddleware",
    value: function withQueueMiddleware(options) {
      this.queueMiddleware = createQueueMiddleware(_objectSpread({
        concurrency: options.concurrency || 20
      }, options));
      return this;
    }
  }, {
    key: "withLoggerMiddleware",
    value: function withLoggerMiddleware() {
      this.loggerMiddleware = createLoggerMiddleware();
      return this;
    }
  }, {
    key: "withCorrelationIdMiddleware",
    value: function withCorrelationIdMiddleware(options) {
      this.correlationIdMiddleware = createCorrelationIdMiddleware(_objectSpread({
        generate: options.generate || null
      }, options));
      return this;
    }
  }, {
    key: "build",
    value: function build() {
      var middlewares = this.middlewares.slice();
      if (this.correlationIdMiddleware) middlewares.push(this.correlationIdMiddleware);
      if (this.userAgentMiddleware) middlewares.push(this.userAgentMiddleware);
      if (this.authMiddleware) middlewares.push(this.authMiddleware);
      if (this.queueMiddleware) middlewares.push(this.queueMiddleware);
      if (this.httpMiddleware) middlewares.push(this.httpMiddleware);
      if (this.loggerMiddleware) middlewares.push(this.loggerMiddleware);
      return createClient({
        middlewares: middlewares
      });
    }
  }]);

  return ClientBuilder;
}();

exports.ClientBuilder = ClientBuilder;

/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createClient = createClient;

var _axios = _interopRequireDefault(__webpack_require__(34));

var _contentfulSdkCore = __webpack_require__(4);

var _createContentfulApi = _interopRequireDefault(__webpack_require__(146));

var _createGlobalOptions = _interopRequireDefault(__webpack_require__(159));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}
/**
 * Create a client instance
 * @func
 * @name createClient
 * @memberof contentful
 * @param {Object} params - Client initialization parameters
 * @prop {string} params.space - Space ID
 * @prop {string} params.accessToken - Contentful CDA Access Token
 * @prop {string} [params.environment="master"] - Contentful Environment ID
 * @prop {boolean=} params.insecure - Requests will be made over http instead of the default https (default: true)
 * @prop {string=} params.host - API host (default: cdn.contentful.com). Also usable with preview.contentful.com.
 * @prop {string=} params.basePath - Path appended to the host to support gateways/proxies with custom urls.
 * @prop {Object=} params.httpAgent - Optional Node.js HTTP agent for proxying (see <a href="https://nodejs.org/api/http.html#http_class_http_agent">Node.js docs</a> and <a href="https://www.npmjs.com/package/https-proxy-agent">https-proxy-agent</a>)
 * @prop {Object=} params.httpsAgent - Optional Node.js HTTP agent for proxying (see <a href="https://nodejs.org/api/http.html#http_class_http_agent">Node.js docs</a> and <a href="https://www.npmjs.com/package/https-proxy-agent">https-proxy-agent</a>)
 * @prop {Object=} params.proxy - Optional Axios proxy (see <a href="https://github.com/mzabriskie/axios#request-config"> axios docs </a>)
 * @prop {Object=} params.headers - Optional additional headers
 * @prop {function=} params.adapter - Optional axios request adapter (see <a href="https://github.com/mzabriskie/axios#request-config"> axios docs </a>)
 * @prop {boolean=?} params.resolveLinks - If we should resolve links between entries (default: true)
 * @prop {boolean=?} params.removeUnresolved - If we should remove links to entries which could not be resolved (default: false)
 * @prop {boolean=?} params.retryOnError - If we should retry on errors and 429 rate limit exceptions (default: true)
 * @prop {function=} params.logHandler - A log handler function to process given log messages & errors. Receives the log level (error, warning & info) and the actual log data (Error object or string). (The default can be found at: https://github.com/contentful/contentful-sdk-core/blob/master/src/create-http-client.ts)
 * @prop {string=?} params.application - Application name and version e.g myApp/version
 * @prop {string=?} params.integration - Integration name and version e.g react/version
 * @prop {number=} params.timeout in milliseconds - connection timeout (default:30000)
 * @prop {number=} params.retryLimit - Optional number of retries before failure. Default is 5
 * @returns {ContentfulClientAPI.ClientAPI}
 * @example
 * const contentful = require('contentful')
 * const client = contentful.createClient({
 *  accessToken: 'myAccessToken',
 *  space: 'mySpaceId'
 * })
 */


function createClient(params) {
  if (!params.accessToken) {
    throw new TypeError('Expected parameter accessToken');
  }

  if (!params.space) {
    throw new TypeError('Expected parameter space');
  }

  var defaultConfig = {
    resolveLinks: true,
    removeUnresolved: false,
    defaultHostname: 'cdn.contentful.com',
    environment: 'master'
  };

  var config = _objectSpread(_objectSpread({}, defaultConfig), params);

  var userAgentHeader = (0, _contentfulSdkCore.getUserAgentHeader)("contentful.js/".concat("9.1.32"), config.application, config.integration);
  config.headers = _objectSpread(_objectSpread({}, config.headers), {}, {
    'Content-Type': 'application/vnd.contentful.delivery.v1+json',
    'X-Contentful-User-Agent': userAgentHeader
  });
  var http = (0, _contentfulSdkCore.createHttpClient)(_axios["default"], config);
  var getGlobalOptions = (0, _createGlobalOptions["default"])({
    resolveLinks: config.resolveLinks,
    environment: config.environment,
    removeUnresolved: config.removeUnresolved,
    spaceBaseUrl: http.defaults.baseURL,
    environmentBaseUrl: "".concat(http.defaults.baseURL, "environments/").concat(config.environment)
  }); // Append environment to baseURL

  http.defaults.baseURL = getGlobalOptions().environmentBaseUrl;
  return (0, _createContentfulApi["default"])({
    http: http,
    getGlobalOptions: getGlobalOptions
  });
}

/***/ }),
/* 67 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(module) {

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var runtime = function (exports) {
  "use strict";

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined; // More compressible than void 0.

  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  function define(obj, key, value) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
    return obj[key];
  }

  try {
    // IE 8 has a broken Object.defineProperty that only works on DOM objects.
    define({}, "");
  } catch (err) {
    define = function define(obj, key, value) {
      return obj[key] = value;
    };
  }

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []); // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.

    generator._invoke = makeInvokeMethod(innerFn, self, context);
    return generator;
  }

  exports.wrap = wrap; // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.

  function tryCatch(fn, obj, arg) {
    try {
      return {
        type: "normal",
        arg: fn.call(obj, arg)
      };
    } catch (err) {
      return {
        type: "throw",
        arg: err
      };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed"; // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.

  var ContinueSentinel = {}; // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.

  function Generator() {}

  function GeneratorFunction() {}

  function GeneratorFunctionPrototype() {} // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.


  var IteratorPrototype = {};
  define(IteratorPrototype, iteratorSymbol, function () {
    return this;
  });
  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));

  if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = GeneratorFunctionPrototype;
  define(Gp, "constructor", GeneratorFunctionPrototype);
  define(GeneratorFunctionPrototype, "constructor", GeneratorFunction);
  GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"); // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.

  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function (method) {
      define(prototype, method, function (arg) {
        return this._invoke(method, arg);
      });
    });
  }

  exports.isGeneratorFunction = function (genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor ? ctor === GeneratorFunction || // For the native GeneratorFunction constructor, the best we can
    // do is to check its .name property.
    (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
  };

  exports.mark = function (genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      define(genFun, toStringTagSymbol, "GeneratorFunction");
    }

    genFun.prototype = Object.create(Gp);
    return genFun;
  }; // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.


  exports.awrap = function (arg) {
    return {
      __await: arg
    };
  };

  function AsyncIterator(generator, PromiseImpl) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);

      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;

        if (value && _typeof(value) === "object" && hasOwn.call(value, "__await")) {
          return PromiseImpl.resolve(value.__await).then(function (value) {
            invoke("next", value, resolve, reject);
          }, function (err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return PromiseImpl.resolve(value).then(function (unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration.
          result.value = unwrapped;
          resolve(result);
        }, function (error) {
          // If a rejected Promise was yielded, throw the rejection back
          // into the async generator function so it can be handled there.
          return invoke("throw", error, resolve, reject);
        });
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new PromiseImpl(function (resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise = // If enqueue has been called before, then we want to wait until
      // all previous Promises have been resolved before calling invoke,
      // so that results are always delivered in the correct order. If
      // enqueue has not been called before, then it is important to
      // call invoke immediately, without waiting on a callback to fire,
      // so that the async generator function has the opportunity to do
      // any necessary setup in a predictable way. This predictability
      // is why the Promise constructor synchronously invokes its
      // executor callback, and why async functions synchronously
      // execute code before the first await. Since we implement simple
      // async functions in terms of async generators, it is especially
      // important to get this right, even though it requires care.
      previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, // Avoid propagating failures to Promises returned by later
      // invocations of the iterator.
      callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
    } // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).


    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
    return this;
  });
  exports.AsyncIterator = AsyncIterator; // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.

  exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
    if (PromiseImpl === void 0) PromiseImpl = Promise;
    var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
    return exports.isGeneratorFunction(outerFn) ? iter // If outerFn is a generator, return the full iterator.
    : iter.next().then(function (result) {
      return result.done ? result.value : iter.next();
    });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;
    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        } // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume


        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;

        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);

          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;
        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);
        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;
        var record = tryCatch(innerFn, self, context);

        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done ? GenStateCompleted : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };
        } else if (record.type === "throw") {
          state = GenStateCompleted; // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.

          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  } // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.


  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];

    if (method === undefined) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        // Note: ["return"] must be used for ES3 parsing compatibility.
        if (delegate.iterator["return"]) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError("The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (!info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value; // Resume execution at the desired location (see delegateYield).

      context.next = delegate.nextLoc; // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.

      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined;
      }
    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    } // The delegate iterator is finished, so forget it and continue with
    // the outer generator.


    context.delegate = null;
    return ContinueSentinel;
  } // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.


  defineIteratorMethods(Gp);
  define(Gp, toStringTagSymbol, "Generator"); // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.

  define(Gp, iteratorSymbol, function () {
    return this;
  });
  define(Gp, "toString", function () {
    return "[object Generator]";
  });

  function pushTryEntry(locs) {
    var entry = {
      tryLoc: locs[0]
    };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{
      tryLoc: "root"
    }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  exports.keys = function (object) {
    var keys = [];

    for (var key in object) {
      keys.push(key);
    }

    keys.reverse(); // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.

    return function next() {
      while (keys.length) {
        var key = keys.pop();

        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      } // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.


      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];

      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1,
            next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;
          return next;
        };

        return next.next = next;
      }
    } // Return an iterator with no values.


    return {
      next: doneResult
    };
  }

  exports.values = values;

  function doneResult() {
    return {
      value: undefined,
      done: true
    };
  }

  Context.prototype = {
    constructor: Context,
    reset: function reset(skipTempReset) {
      this.prev = 0;
      this.next = 0; // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.

      this.sent = this._sent = undefined;
      this.done = false;
      this.delegate = null;
      this.method = "next";
      this.arg = undefined;
      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },
    stop: function stop() {
      this.done = true;
      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;

      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },
    dispatchException: function dispatchException(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;

      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined;
        }

        return !!caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }
          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }
          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }
          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },
    abrupt: function abrupt(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];

        if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },
    complete: function complete(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" || record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },
    finish: function finish(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];

        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },
    "catch": function _catch(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];

        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;

          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }

          return thrown;
        }
      } // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.


      throw new Error("illegal catch attempt");
    },
    delegateYield: function delegateYield(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined;
      }

      return ContinueSentinel;
    }
  }; // Regardless of whether this script is executing as a CommonJS module
  // or not, return the runtime object so that we can declare the variable
  // regeneratorRuntime in the outer scope, which allows this module to be
  // injected easily by `bin/regenerator --include-runtime script.js`.

  return exports;
}( // If this script is executing as a CommonJS module, use module.exports
// as the regeneratorRuntime namespace. Otherwise create a new empty
// object. Either way, the resulting object will be used to initialize
// the regeneratorRuntime variable at the top of this file.
( false ? undefined : _typeof(module)) === "object" ? module.exports : {});

try {
  regeneratorRuntime = runtime;
} catch (accidentalStrictMode) {
  // This module should not be running in strict mode, so the above
  // assignment should always work unless something is misconfigured. Just
  // in case runtime.js accidentally runs in strict mode, in modern engines
  // we can explicitly access globalThis. In older engines we can escape
  // strict mode using a global Function call. This could conceivably fail
  // if a Content Security Policy forbids using Function, but in that case
  // the proper solution is to fix the accidental strict mode problem. If
  // you've misconfigured your bundler to force strict mode and applied a
  // CSP to forbid Function, and you're not willing to fix either of those
  // problems, please detail your unique predicament in a GitHub issue.
  if ((typeof globalThis === "undefined" ? "undefined" : _typeof(globalThis)) === "object") {
    globalThis.regeneratorRuntime = runtime;
  } else {
    Function("r", "regeneratorRuntime = r")(runtime);
  }
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(68)(module)))

/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function (module) {
  if (!module.webpackPolyfill) {
    module.deprecate = function () {};

    module.paths = []; // module.parent = undefined by default

    if (!module.children) module.children = [];
    Object.defineProperty(module, "loaded", {
      enumerable: true,
      get: function get() {
        return module.l;
      }
    });
    Object.defineProperty(module, "id", {
      enumerable: true,
      get: function get() {
        return module.i;
      }
    });
    module.webpackPolyfill = 1;
  }

  return module;
};

/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.byteLength = byteLength;
exports.toByteArray = toByteArray;
exports.fromByteArray = fromByteArray;
var lookup = [];
var revLookup = [];
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i];
  revLookup[code.charCodeAt(i)] = i;
} // Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications


revLookup['-'.charCodeAt(0)] = 62;
revLookup['_'.charCodeAt(0)] = 63;

function getLens(b64) {
  var len = b64.length;

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4');
  } // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42


  var validLen = b64.indexOf('=');
  if (validLen === -1) validLen = len;
  var placeHoldersLen = validLen === len ? 0 : 4 - validLen % 4;
  return [validLen, placeHoldersLen];
} // base64 is 4/3 + up to two characters of the original data


function byteLength(b64) {
  var lens = getLens(b64);
  var validLen = lens[0];
  var placeHoldersLen = lens[1];
  return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}

function _byteLength(b64, validLen, placeHoldersLen) {
  return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}

function toByteArray(b64) {
  var tmp;
  var lens = getLens(b64);
  var validLen = lens[0];
  var placeHoldersLen = lens[1];
  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
  var curByte = 0; // if there are placeholders, only get up to the last complete 4 chars

  var len = placeHoldersLen > 0 ? validLen - 4 : validLen;
  var i;

  for (i = 0; i < len; i += 4) {
    tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];
    arr[curByte++] = tmp >> 16 & 0xFF;
    arr[curByte++] = tmp >> 8 & 0xFF;
    arr[curByte++] = tmp & 0xFF;
  }

  if (placeHoldersLen === 2) {
    tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;
    arr[curByte++] = tmp & 0xFF;
  }

  if (placeHoldersLen === 1) {
    tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;
    arr[curByte++] = tmp >> 8 & 0xFF;
    arr[curByte++] = tmp & 0xFF;
  }

  return arr;
}

function tripletToBase64(num) {
  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F];
}

function encodeChunk(uint8, start, end) {
  var tmp;
  var output = [];

  for (var i = start; i < end; i += 3) {
    tmp = (uint8[i] << 16 & 0xFF0000) + (uint8[i + 1] << 8 & 0xFF00) + (uint8[i + 2] & 0xFF);
    output.push(tripletToBase64(tmp));
  }

  return output.join('');
}

function fromByteArray(uint8) {
  var tmp;
  var len = uint8.length;
  var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes

  var parts = [];
  var maxChunkLength = 16383; // must be multiple of 3
  // go through the array every three bytes, we'll deal with trailing stuff later

  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
  } // pad the end with zeros, but make sure to not forget the extra bytes


  if (extraBytes === 1) {
    tmp = uint8[len - 1];
    parts.push(lookup[tmp >> 2] + lookup[tmp << 4 & 0x3F] + '==');
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1];
    parts.push(lookup[tmp >> 10] + lookup[tmp >> 4 & 0x3F] + lookup[tmp << 2 & 0x3F] + '=');
  }

  return parts.join('');
}

/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m;
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var nBits = -7;
  var i = isLE ? nBytes - 1 : 0;
  var d = isLE ? -1 : 1;
  var s = buffer[offset + i];
  i += d;
  e = s & (1 << -nBits) - 1;
  s >>= -nBits;
  nBits += eLen;

  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & (1 << -nBits) - 1;
  e >>= -nBits;
  nBits += mLen;

  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias;
  } else if (e === eMax) {
    return m ? NaN : (s ? -1 : 1) * Infinity;
  } else {
    m = m + Math.pow(2, mLen);
    e = e - eBias;
  }

  return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
};

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c;
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
  var i = isLE ? 0 : nBytes - 1;
  var d = isLE ? 1 : -1;
  var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
  value = Math.abs(value);

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0;
    e = eMax;
  } else {
    e = Math.floor(Math.log(value) / Math.LN2);

    if (value * (c = Math.pow(2, -e)) < 1) {
      e--;
      c *= 2;
    }

    if (e + eBias >= 1) {
      value += rt / c;
    } else {
      value += rt * Math.pow(2, 1 - eBias);
    }

    if (value * c >= 2) {
      e++;
      c /= 2;
    }

    if (e + eBias >= eMax) {
      m = 0;
      e = eMax;
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * Math.pow(2, mLen);
      e = e + eBias;
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
      e = 0;
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = e << mLen | m;
  eLen += mLen;

  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128;
};

/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } Object.defineProperty(subClass, "prototype", { value: Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }), writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var EventEmitter = __webpack_require__(10);

var shared = __webpack_require__(2);

var mimeTypes = __webpack_require__(38);

var MailComposer = __webpack_require__(73);

var DKIM = __webpack_require__(77);

var httpProxyClient = __webpack_require__(81);

var util = __webpack_require__(7);

var urllib = __webpack_require__(5);

var packageData = __webpack_require__(3);

var MailMessage = __webpack_require__(82);

var net = __webpack_require__(18);

var dns = __webpack_require__(37);

var crypto = __webpack_require__(8);
/**
 * Creates an object for exposing the Mail API
 *
 * @constructor
 * @param {Object} transporter Transport object instance to pass the mails to
 */


var Mail = /*#__PURE__*/function (_EventEmitter) {
  _inherits(Mail, _EventEmitter);

  var _super = _createSuper(Mail);

  function Mail(transporter, options, defaults) {
    var _this;

    _classCallCheck(this, Mail);

    _this = _super.call(this);
    _this.options = options || {};
    _this._defaults = defaults || {};
    _this._defaultPlugins = {
      compile: [function () {
        var _this2;

        return (_this2 = _this)._convertDataImages.apply(_this2, arguments);
      }],
      stream: []
    };
    _this._userPlugins = {
      compile: [],
      stream: []
    };
    _this.meta = new Map();
    _this.dkim = _this.options.dkim ? new DKIM(_this.options.dkim) : false;
    _this.transporter = transporter;
    _this.transporter.mailer = _assertThisInitialized(_this);
    _this.logger = shared.getLogger(_this.options, {
      component: _this.options.component || 'mail'
    });

    _this.logger.debug({
      tnx: 'create'
    }, 'Creating transport: %s', _this.getVersionString()); // setup emit handlers for the transporter


    if (typeof _this.transporter.on === 'function') {
      // deprecated log interface
      _this.transporter.on('log', function (log) {
        _this.logger.debug({
          tnx: 'transport'
        }, '%s: %s', log.type, log.message);
      }); // transporter errors


      _this.transporter.on('error', function (err) {
        _this.logger.error({
          err: err,
          tnx: 'transport'
        }, 'Transport Error: %s', err.message);

        _this.emit('error', err);
      }); // indicates if the sender has became idle


      _this.transporter.on('idle', function () {
        var _this3;

        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        (_this3 = _this).emit.apply(_this3, ['idle'].concat(args));
      });
    }
    /**
     * Optional methods passed to the underlying transport object
     */


    ['close', 'isIdle', 'verify'].forEach(function (method) {
      _this[method] = function () {
        if (typeof _this.transporter[method] === 'function') {
          var _this$transporter;

          if (method === 'verify' && typeof _this.getSocket === 'function') {
            _this.transporter.getSocket = _this.getSocket;
            _this.getSocket = false;
          }

          return (_this$transporter = _this.transporter)[method].apply(_this$transporter, arguments);
        } else {
          _this.logger.warn({
            tnx: 'transport',
            methodName: method
          }, 'Non existing method %s called for transport', method);

          return false;
        }
      };
    }); // setup proxy handling

    if (_this.options.proxy && typeof _this.options.proxy === 'string') {
      _this.setupProxy(_this.options.proxy);
    }

    return _this;
  }

  _createClass(Mail, [{
    key: "use",
    value: function use(step, plugin) {
      step = (step || '').toString();

      if (!this._userPlugins.hasOwnProperty(step)) {
        this._userPlugins[step] = [plugin];
      } else {
        this._userPlugins[step].push(plugin);
      }

      return this;
    }
    /**
     * Sends an email using the preselected transport object
     *
     * @param {Object} data E-data description
     * @param {Function?} callback Callback to run once the sending succeeded or failed
     */

  }, {
    key: "sendMail",
    value: function sendMail(data, callback) {
      var _this4 = this;

      var promise;

      if (!callback) {
        promise = new Promise(function (resolve, reject) {
          callback = shared.callbackPromise(resolve, reject);
        });
      }

      if (typeof this.getSocket === 'function') {
        this.transporter.getSocket = this.getSocket;
        this.getSocket = false;
      }

      var mail = new MailMessage(this, data);
      this.logger.debug({
        tnx: 'transport',
        name: this.transporter.name,
        version: this.transporter.version,
        action: 'send'
      }, 'Sending mail using %s/%s', this.transporter.name, this.transporter.version);

      this._processPlugins('compile', mail, function (err) {
        if (err) {
          _this4.logger.error({
            err: err,
            tnx: 'plugin',
            action: 'compile'
          }, 'PluginCompile Error: %s', err.message);

          return callback(err);
        }

        mail.message = new MailComposer(mail.data).compile();
        mail.setMailerHeader();
        mail.setPriorityHeaders();
        mail.setListHeaders();

        _this4._processPlugins('stream', mail, function (err) {
          if (err) {
            _this4.logger.error({
              err: err,
              tnx: 'plugin',
              action: 'stream'
            }, 'PluginStream Error: %s', err.message);

            return callback(err);
          }

          if (mail.data.dkim || _this4.dkim) {
            mail.message.processFunc(function (input) {
              var dkim = mail.data.dkim ? new DKIM(mail.data.dkim) : _this4.dkim;

              _this4.logger.debug({
                tnx: 'DKIM',
                messageId: mail.message.messageId(),
                dkimDomains: dkim.keys.map(function (key) {
                  return key.keySelector + '.' + key.domainName;
                }).join(', ')
              }, 'Signing outgoing message with %s keys', dkim.keys.length);

              return dkim.sign(input, mail.data._dkim);
            });
          }

          _this4.transporter.send(mail, function () {
            for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
              args[_key2] = arguments[_key2];
            }

            if (args[0]) {
              _this4.logger.error({
                err: args[0],
                tnx: 'transport',
                action: 'send'
              }, 'Send Error: %s', args[0].message);
            }

            callback.apply(void 0, args);
          });
        });
      });

      return promise;
    }
  }, {
    key: "getVersionString",
    value: function getVersionString() {
      return util.format('%s (%s; +%s; %s/%s)', packageData.name, packageData.version, packageData.homepage, this.transporter.name, this.transporter.version);
    }
  }, {
    key: "_processPlugins",
    value: function _processPlugins(step, mail, callback) {
      step = (step || '').toString();

      if (!this._userPlugins.hasOwnProperty(step)) {
        return callback();
      }

      var userPlugins = this._userPlugins[step] || [];
      var defaultPlugins = this._defaultPlugins[step] || [];

      if (userPlugins.length) {
        this.logger.debug({
          tnx: 'transaction',
          pluginCount: userPlugins.length,
          step: step
        }, 'Using %s plugins for %s', userPlugins.length, step);
      }

      if (userPlugins.length + defaultPlugins.length === 0) {
        return callback();
      }

      var pos = 0;
      var block = 'default';

      var processPlugins = function processPlugins() {
        var curplugins = block === 'default' ? defaultPlugins : userPlugins;

        if (pos >= curplugins.length) {
          if (block === 'default' && userPlugins.length) {
            block = 'user';
            pos = 0;
            curplugins = userPlugins;
          } else {
            return callback();
          }
        }

        var plugin = curplugins[pos++];
        plugin(mail, function (err) {
          if (err) {
            return callback(err);
          }

          processPlugins();
        });
      };

      processPlugins();
    }
    /**
     * Sets up proxy handler for a Nodemailer object
     *
     * @param {String} proxyUrl Proxy configuration url
     */

  }, {
    key: "setupProxy",
    value: function setupProxy(proxyUrl) {
      var _this5 = this;

      var proxy = urllib.parse(proxyUrl); // setup socket handler for the mailer object

      this.getSocket = function (options, callback) {
        var protocol = proxy.protocol.replace(/:$/, '').toLowerCase();

        if (_this5.meta.has('proxy_handler_' + protocol)) {
          return _this5.meta.get('proxy_handler_' + protocol)(proxy, options, callback);
        }

        switch (protocol) {
          // Connect using a HTTP CONNECT method
          case 'http':
          case 'https':
            httpProxyClient(proxy.href, options.port, options.host, function (err, socket) {
              if (err) {
                return callback(err);
              }

              return callback(null, {
                connection: socket
              });
            });
            return;

          case 'socks':
          case 'socks5':
          case 'socks4':
          case 'socks4a':
            {
              if (!_this5.meta.has('proxy_socks_module')) {
                return callback(new Error('Socks module not loaded'));
              }

              var connect = function connect(ipaddress) {
                var _connectionOpts;

                var proxyV2 = !!_this5.meta.get('proxy_socks_module').SocksClient;
                var socksClient = proxyV2 ? _this5.meta.get('proxy_socks_module').SocksClient : _this5.meta.get('proxy_socks_module');
                var proxyType = Number(proxy.protocol.replace(/\D/g, '')) || 5;
                var connectionOpts = (_connectionOpts = {
                  proxy: {
                    ipaddress: ipaddress,
                    port: Number(proxy.port),
                    type: proxyType
                  }
                }, _defineProperty(_connectionOpts, proxyV2 ? 'destination' : 'target', {
                  host: options.host,
                  port: options.port
                }), _defineProperty(_connectionOpts, "command", 'connect'), _connectionOpts);

                if (proxy.auth) {
                  var username = decodeURIComponent(proxy.auth.split(':').shift());
                  var password = decodeURIComponent(proxy.auth.split(':').pop());

                  if (proxyV2) {
                    connectionOpts.proxy.userId = username;
                    connectionOpts.proxy.password = password;
                  } else if (proxyType === 4) {
                    connectionOpts.userid = username;
                  } else {
                    connectionOpts.authentication = {
                      username: username,
                      password: password
                    };
                  }
                }

                socksClient.createConnection(connectionOpts, function (err, info) {
                  if (err) {
                    return callback(err);
                  }

                  return callback(null, {
                    connection: info.socket || info
                  });
                });
              };

              if (net.isIP(proxy.hostname)) {
                return connect(proxy.hostname);
              }

              return dns.resolve(proxy.hostname, function (err, address) {
                if (err) {
                  return callback(err);
                }

                connect(Array.isArray(address) ? address[0] : address);
              });
            }
        }

        callback(new Error('Unknown proxy configuration'));
      };
    }
  }, {
    key: "_convertDataImages",
    value: function _convertDataImages(mail, callback) {
      if (!this.options.attachDataUrls && !mail.data.attachDataUrls || !mail.data.html) {
        return callback();
      }

      mail.resolveContent(mail.data, 'html', function (err, html) {
        if (err) {
          return callback(err);
        }

        var cidCounter = 0;
        html = (html || '').toString().replace(/(<img\b[^>]* src\s*=[\s"']*)(data:([^;]+);[^"'>\s]+)/gi, function (match, prefix, dataUri, mimeType) {
          var cid = crypto.randomBytes(10).toString('hex') + '@localhost';

          if (!mail.data.attachments) {
            mail.data.attachments = [];
          }

          if (!Array.isArray(mail.data.attachments)) {
            mail.data.attachments = [].concat(mail.data.attachments || []);
          }

          mail.data.attachments.push({
            path: dataUri,
            cid: cid,
            filename: 'image-' + ++cidCounter + '.' + mimeTypes.detectExtension(mimeType)
          });
          return prefix + 'cid:' + cid;
        });
        mail.data.html = html;
        callback();
      });
    }
  }, {
    key: "set",
    value: function set(key, value) {
      return this.meta.set(key, value);
    }
  }, {
    key: "get",
    value: function get(key) {
      return this.meta.get(key);
    }
  }]);

  return Mail;
}(EventEmitter);

module.exports = Mail;

/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // module to handle cookies

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

var urllib = __webpack_require__(5);

var SESSION_TIMEOUT = 1800; // 30 min

/**
 * Creates a biskviit cookie jar for managing cookie values in memory
 *
 * @constructor
 * @param {Object} [options] Optional options object
 */

var Cookies = /*#__PURE__*/function () {
  function Cookies(options) {
    _classCallCheck(this, Cookies);

    this.options = options || {};
    this.cookies = [];
  }
  /**
   * Stores a cookie string to the cookie storage
   *
   * @param {String} cookieStr Value from the 'Set-Cookie:' header
   * @param {String} url Current URL
   */


  _createClass(Cookies, [{
    key: "set",
    value: function set(cookieStr, url) {
      var urlparts = urllib.parse(url || '');
      var cookie = this.parse(cookieStr);
      var domain;

      if (cookie.domain) {
        domain = cookie.domain.replace(/^\./, ''); // do not allow cross origin cookies

        if ( // can't be valid if the requested domain is shorter than current hostname
        urlparts.hostname.length < domain.length || // prefix domains with dot to be sure that partial matches are not used
        ('.' + urlparts.hostname).substr(-domain.length + 1) !== '.' + domain) {
          cookie.domain = urlparts.hostname;
        }
      } else {
        cookie.domain = urlparts.hostname;
      }

      if (!cookie.path) {
        cookie.path = this.getPath(urlparts.pathname);
      } // if no expire date, then use sessionTimeout value


      if (!cookie.expires) {
        cookie.expires = new Date(Date.now() + (Number(this.options.sessionTimeout || SESSION_TIMEOUT) || SESSION_TIMEOUT) * 1000);
      }

      return this.add(cookie);
    }
    /**
     * Returns cookie string for the 'Cookie:' header.
     *
     * @param {String} url URL to check for
     * @returns {String} Cookie header or empty string if no matches were found
     */

  }, {
    key: "get",
    value: function get(url) {
      return this.list(url).map(function (cookie) {
        return cookie.name + '=' + cookie.value;
      }).join('; ');
    }
    /**
     * Lists all valied cookie objects for the specified URL
     *
     * @param {String} url URL to check for
     * @returns {Array} An array of cookie objects
     */

  }, {
    key: "list",
    value: function list(url) {
      var result = [];
      var i;
      var cookie;

      for (i = this.cookies.length - 1; i >= 0; i--) {
        cookie = this.cookies[i];

        if (this.isExpired(cookie)) {
          this.cookies.splice(i, i);
          continue;
        }

        if (this.match(cookie, url)) {
          result.unshift(cookie);
        }
      }

      return result;
    }
    /**
     * Parses cookie string from the 'Set-Cookie:' header
     *
     * @param {String} cookieStr String from the 'Set-Cookie:' header
     * @returns {Object} Cookie object
     */

  }, {
    key: "parse",
    value: function parse(cookieStr) {
      var cookie = {};
      (cookieStr || '').toString().split(';').forEach(function (cookiePart) {
        var valueParts = cookiePart.split('=');
        var key = valueParts.shift().trim().toLowerCase();
        var value = valueParts.join('=').trim();
        var domain;

        if (!key) {
          // skip empty parts
          return;
        }

        switch (key) {
          case 'expires':
            value = new Date(value); // ignore date if can not parse it

            if (value.toString() !== 'Invalid Date') {
              cookie.expires = value;
            }

            break;

          case 'path':
            cookie.path = value;
            break;

          case 'domain':
            domain = value.toLowerCase();

            if (domain.length && domain.charAt(0) !== '.') {
              domain = '.' + domain; // ensure preceeding dot for user set domains
            }

            cookie.domain = domain;
            break;

          case 'max-age':
            cookie.expires = new Date(Date.now() + (Number(value) || 0) * 1000);
            break;

          case 'secure':
            cookie.secure = true;
            break;

          case 'httponly':
            cookie.httponly = true;
            break;

          default:
            if (!cookie.name) {
              cookie.name = key;
              cookie.value = value;
            }

        }
      });
      return cookie;
    }
    /**
     * Checks if a cookie object is valid for a specified URL
     *
     * @param {Object} cookie Cookie object
     * @param {String} url URL to check for
     * @returns {Boolean} true if cookie is valid for specifiec URL
     */

  }, {
    key: "match",
    value: function match(cookie, url) {
      var urlparts = urllib.parse(url || ''); // check if hostname matches
      // .foo.com also matches subdomains, foo.com does not

      if (urlparts.hostname !== cookie.domain && (cookie.domain.charAt(0) !== '.' || ('.' + urlparts.hostname).substr(-cookie.domain.length) !== cookie.domain)) {
        return false;
      } // check if path matches


      var path = this.getPath(urlparts.pathname);

      if (path.substr(0, cookie.path.length) !== cookie.path) {
        return false;
      } // check secure argument


      if (cookie.secure && urlparts.protocol !== 'https:') {
        return false;
      }

      return true;
    }
    /**
     * Adds (or updates/removes if needed) a cookie object to the cookie storage
     *
     * @param {Object} cookie Cookie value to be stored
     */

  }, {
    key: "add",
    value: function add(cookie) {
      var i;
      var len; // nothing to do here

      if (!cookie || !cookie.name) {
        return false;
      } // overwrite if has same params


      for (i = 0, len = this.cookies.length; i < len; i++) {
        if (this.compare(this.cookies[i], cookie)) {
          // check if the cookie needs to be removed instead
          if (this.isExpired(cookie)) {
            this.cookies.splice(i, 1); // remove expired/unset cookie

            return false;
          }

          this.cookies[i] = cookie;
          return true;
        }
      } // add as new if not already expired


      if (!this.isExpired(cookie)) {
        this.cookies.push(cookie);
      }

      return true;
    }
    /**
     * Checks if two cookie objects are the same
     *
     * @param {Object} a Cookie to check against
     * @param {Object} b Cookie to check against
     * @returns {Boolean} True, if the cookies are the same
     */

  }, {
    key: "compare",
    value: function compare(a, b) {
      return a.name === b.name && a.path === b.path && a.domain === b.domain && a.secure === b.secure && a.httponly === a.httponly;
    }
    /**
     * Checks if a cookie is expired
     *
     * @param {Object} cookie Cookie object to check against
     * @returns {Boolean} True, if the cookie is expired
     */

  }, {
    key: "isExpired",
    value: function isExpired(cookie) {
      return cookie.expires && cookie.expires < new Date() || !cookie.value;
    }
    /**
     * Returns normalized cookie path for an URL path argument
     *
     * @param {String} pathname
     * @returns {String} Normalized path
     */

  }, {
    key: "getPath",
    value: function getPath(pathname) {
      var path = (pathname || '/').split('/');
      path.pop(); // remove filename part

      path = path.join('/').trim(); // ensure path prefix /

      if (path.charAt(0) !== '/') {
        path = '/' + path;
      } // ensure path suffix /


      if (path.substr(-1) !== '/') {
        path += '/';
      }

      return path;
    }
  }]);

  return Cookies;
}();

module.exports = Cookies;

/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* eslint no-undefined: 0 */


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

var MimeNode = __webpack_require__(39);

var mimeFuncs = __webpack_require__(21);
/**
 * Creates the object for composing a MimeNode instance out from the mail options
 *
 * @constructor
 * @param {Object} mail Mail options
 */


var MailComposer = /*#__PURE__*/function () {
  function MailComposer(mail) {
    _classCallCheck(this, MailComposer);

    this.mail = mail || {};
    this.message = false;
  }
  /**
   * Builds MimeNode instance
   */


  _createClass(MailComposer, [{
    key: "compile",
    value: function compile() {
      var _this = this;

      this._alternatives = this.getAlternatives();
      this._htmlNode = this._alternatives.filter(function (alternative) {
        return /^text\/html\b/i.test(alternative.contentType);
      }).pop();
      this._attachments = this.getAttachments(!!this._htmlNode);
      this._useRelated = !!(this._htmlNode && this._attachments.related.length);
      this._useAlternative = this._alternatives.length > 1;
      this._useMixed = this._attachments.attached.length > 1 || this._alternatives.length && this._attachments.attached.length === 1; // Compose MIME tree

      if (this.mail.raw) {
        this.message = new MimeNode('message/rfc822', {
          newline: this.mail.newline
        }).setRaw(this.mail.raw);
      } else if (this._useMixed) {
        this.message = this._createMixed();
      } else if (this._useAlternative) {
        this.message = this._createAlternative();
      } else if (this._useRelated) {
        this.message = this._createRelated();
      } else {
        this.message = this._createContentNode(false, [].concat(this._alternatives || []).concat(this._attachments.attached || []).shift() || {
          contentType: 'text/plain',
          content: ''
        });
      } // Add custom headers


      if (this.mail.headers) {
        this.message.addHeader(this.mail.headers);
      } // Add headers to the root node, always overrides custom headers


      ['from', 'sender', 'to', 'cc', 'bcc', 'reply-to', 'in-reply-to', 'references', 'subject', 'message-id', 'date'].forEach(function (header) {
        var key = header.replace(/-(\w)/g, function (o, c) {
          return c.toUpperCase();
        });

        if (_this.mail[key]) {
          _this.message.setHeader(header, _this.mail[key]);
        }
      }); // Sets custom envelope

      if (this.mail.envelope) {
        this.message.setEnvelope(this.mail.envelope);
      } // ensure Message-Id value


      this.message.messageId();
      return this.message;
    }
    /**
     * List all attachments. Resulting attachment objects can be used as input for MimeNode nodes
     *
     * @param {Boolean} findRelated If true separate related attachments from attached ones
     * @returns {Object} An object of arrays (`related` and `attached`)
     */

  }, {
    key: "getAttachments",
    value: function getAttachments(findRelated) {
      var _this2 = this;

      var icalEvent, eventObject;
      var attachments = [].concat(this.mail.attachments || []).map(function (attachment, i) {
        var data;
        var isMessageNode = /^message\//i.test(attachment.contentType);

        if (/^data:/i.test(attachment.path || attachment.href)) {
          attachment = _this2._processDataUrl(attachment);
        }

        data = {
          contentType: attachment.contentType || mimeFuncs.detectMimeType(attachment.filename || attachment.path || attachment.href || 'bin'),
          contentDisposition: attachment.contentDisposition || (isMessageNode ? 'inline' : 'attachment'),
          contentTransferEncoding: 'contentTransferEncoding' in attachment ? attachment.contentTransferEncoding : 'base64'
        };

        if (attachment.filename) {
          data.filename = attachment.filename;
        } else if (!isMessageNode && attachment.filename !== false) {
          data.filename = (attachment.path || attachment.href || '').split('/').pop().split('?').shift() || 'attachment-' + (i + 1);

          if (data.filename.indexOf('.') < 0) {
            data.filename += '.' + mimeFuncs.detectExtension(data.contentType);
          }
        }

        if (/^https?:\/\//i.test(attachment.path)) {
          attachment.href = attachment.path;
          attachment.path = undefined;
        }

        if (attachment.cid) {
          data.cid = attachment.cid;
        }

        if (attachment.raw) {
          data.raw = attachment.raw;
        } else if (attachment.path) {
          data.content = {
            path: attachment.path
          };
        } else if (attachment.href) {
          data.content = {
            href: attachment.href,
            httpHeaders: attachment.httpHeaders
          };
        } else {
          data.content = attachment.content || '';
        }

        if (attachment.encoding) {
          data.encoding = attachment.encoding;
        }

        if (attachment.headers) {
          data.headers = attachment.headers;
        }

        return data;
      });

      if (this.mail.icalEvent) {
        if (_typeof(this.mail.icalEvent) === 'object' && (this.mail.icalEvent.content || this.mail.icalEvent.path || this.mail.icalEvent.href || this.mail.icalEvent.raw)) {
          icalEvent = this.mail.icalEvent;
        } else {
          icalEvent = {
            content: this.mail.icalEvent
          };
        }

        eventObject = {};
        Object.keys(icalEvent).forEach(function (key) {
          eventObject[key] = icalEvent[key];
        });
        eventObject.contentType = 'application/ics';

        if (!eventObject.headers) {
          eventObject.headers = {};
        }

        eventObject.filename = eventObject.filename || 'invite.ics';
        eventObject.headers['Content-Disposition'] = 'attachment';
        eventObject.headers['Content-Transfer-Encoding'] = 'base64';
      }

      if (!findRelated) {
        return {
          attached: attachments.concat(eventObject || []),
          related: []
        };
      } else {
        return {
          attached: attachments.filter(function (attachment) {
            return !attachment.cid;
          }).concat(eventObject || []),
          related: attachments.filter(function (attachment) {
            return !!attachment.cid;
          })
        };
      }
    }
    /**
     * List alternatives. Resulting objects can be used as input for MimeNode nodes
     *
     * @returns {Array} An array of alternative elements. Includes the `text` and `html` values as well
     */

  }, {
    key: "getAlternatives",
    value: function getAlternatives() {
      var _this3 = this;

      var alternatives = [],
          text,
          html,
          watchHtml,
          amp,
          icalEvent,
          eventObject;

      if (this.mail.text) {
        if (_typeof(this.mail.text) === 'object' && (this.mail.text.content || this.mail.text.path || this.mail.text.href || this.mail.text.raw)) {
          text = this.mail.text;
        } else {
          text = {
            content: this.mail.text
          };
        }

        text.contentType = 'text/plain; charset=utf-8';
      }

      if (this.mail.watchHtml) {
        if (_typeof(this.mail.watchHtml) === 'object' && (this.mail.watchHtml.content || this.mail.watchHtml.path || this.mail.watchHtml.href || this.mail.watchHtml.raw)) {
          watchHtml = this.mail.watchHtml;
        } else {
          watchHtml = {
            content: this.mail.watchHtml
          };
        }

        watchHtml.contentType = 'text/watch-html; charset=utf-8';
      }

      if (this.mail.amp) {
        if (_typeof(this.mail.amp) === 'object' && (this.mail.amp.content || this.mail.amp.path || this.mail.amp.href || this.mail.amp.raw)) {
          amp = this.mail.amp;
        } else {
          amp = {
            content: this.mail.amp
          };
        }

        amp.contentType = 'text/x-amp-html; charset=utf-8';
      } // NB! when including attachments with a calendar alternative you might end up in a blank screen on some clients


      if (this.mail.icalEvent) {
        if (_typeof(this.mail.icalEvent) === 'object' && (this.mail.icalEvent.content || this.mail.icalEvent.path || this.mail.icalEvent.href || this.mail.icalEvent.raw)) {
          icalEvent = this.mail.icalEvent;
        } else {
          icalEvent = {
            content: this.mail.icalEvent
          };
        }

        eventObject = {};
        Object.keys(icalEvent).forEach(function (key) {
          eventObject[key] = icalEvent[key];
        });

        if (eventObject.content && _typeof(eventObject.content) === 'object') {
          // we are going to have the same attachment twice, so mark this to be
          // resolved just once
          eventObject.content._resolve = true;
        }

        eventObject.filename = false;
        eventObject.contentType = 'text/calendar; charset=utf-8; method=' + (eventObject.method || 'PUBLISH').toString().trim().toUpperCase();

        if (!eventObject.headers) {
          eventObject.headers = {};
        }
      }

      if (this.mail.html) {
        if (_typeof(this.mail.html) === 'object' && (this.mail.html.content || this.mail.html.path || this.mail.html.href || this.mail.html.raw)) {
          html = this.mail.html;
        } else {
          html = {
            content: this.mail.html
          };
        }

        html.contentType = 'text/html; charset=utf-8';
      }

      [].concat(text || []).concat(watchHtml || []).concat(amp || []).concat(html || []).concat(eventObject || []).concat(this.mail.alternatives || []).forEach(function (alternative) {
        var data;

        if (/^data:/i.test(alternative.path || alternative.href)) {
          alternative = _this3._processDataUrl(alternative);
        }

        data = {
          contentType: alternative.contentType || mimeFuncs.detectMimeType(alternative.filename || alternative.path || alternative.href || 'txt'),
          contentTransferEncoding: alternative.contentTransferEncoding
        };

        if (alternative.filename) {
          data.filename = alternative.filename;
        }

        if (/^https?:\/\//i.test(alternative.path)) {
          alternative.href = alternative.path;
          alternative.path = undefined;
        }

        if (alternative.raw) {
          data.raw = alternative.raw;
        } else if (alternative.path) {
          data.content = {
            path: alternative.path
          };
        } else if (alternative.href) {
          data.content = {
            href: alternative.href
          };
        } else {
          data.content = alternative.content || '';
        }

        if (alternative.encoding) {
          data.encoding = alternative.encoding;
        }

        if (alternative.headers) {
          data.headers = alternative.headers;
        }

        alternatives.push(data);
      });
      return alternatives;
    }
    /**
     * Builds multipart/mixed node. It should always contain different type of elements on the same level
     * eg. text + attachments
     *
     * @param {Object} parentNode Parent for this note. If it does not exist, a root node is created
     * @returns {Object} MimeNode node element
     */

  }, {
    key: "_createMixed",
    value: function _createMixed(parentNode) {
      var _this4 = this;

      var node;

      if (!parentNode) {
        node = new MimeNode('multipart/mixed', {
          baseBoundary: this.mail.baseBoundary,
          textEncoding: this.mail.textEncoding,
          boundaryPrefix: this.mail.boundaryPrefix,
          disableUrlAccess: this.mail.disableUrlAccess,
          disableFileAccess: this.mail.disableFileAccess,
          normalizeHeaderKey: this.mail.normalizeHeaderKey,
          newline: this.mail.newline
        });
      } else {
        node = parentNode.createChild('multipart/mixed', {
          disableUrlAccess: this.mail.disableUrlAccess,
          disableFileAccess: this.mail.disableFileAccess,
          normalizeHeaderKey: this.mail.normalizeHeaderKey,
          newline: this.mail.newline
        });
      }

      if (this._useAlternative) {
        this._createAlternative(node);
      } else if (this._useRelated) {
        this._createRelated(node);
      }

      [].concat(!this._useAlternative && this._alternatives || []).concat(this._attachments.attached || []).forEach(function (element) {
        // if the element is a html node from related subpart then ignore it
        if (!_this4._useRelated || element !== _this4._htmlNode) {
          _this4._createContentNode(node, element);
        }
      });
      return node;
    }
    /**
     * Builds multipart/alternative node. It should always contain same type of elements on the same level
     * eg. text + html view of the same data
     *
     * @param {Object} parentNode Parent for this note. If it does not exist, a root node is created
     * @returns {Object} MimeNode node element
     */

  }, {
    key: "_createAlternative",
    value: function _createAlternative(parentNode) {
      var _this5 = this;

      var node;

      if (!parentNode) {
        node = new MimeNode('multipart/alternative', {
          baseBoundary: this.mail.baseBoundary,
          textEncoding: this.mail.textEncoding,
          boundaryPrefix: this.mail.boundaryPrefix,
          disableUrlAccess: this.mail.disableUrlAccess,
          disableFileAccess: this.mail.disableFileAccess,
          normalizeHeaderKey: this.mail.normalizeHeaderKey,
          newline: this.mail.newline
        });
      } else {
        node = parentNode.createChild('multipart/alternative', {
          disableUrlAccess: this.mail.disableUrlAccess,
          disableFileAccess: this.mail.disableFileAccess,
          normalizeHeaderKey: this.mail.normalizeHeaderKey,
          newline: this.mail.newline
        });
      }

      this._alternatives.forEach(function (alternative) {
        if (_this5._useRelated && _this5._htmlNode === alternative) {
          _this5._createRelated(node);
        } else {
          _this5._createContentNode(node, alternative);
        }
      });

      return node;
    }
    /**
     * Builds multipart/related node. It should always contain html node with related attachments
     *
     * @param {Object} parentNode Parent for this note. If it does not exist, a root node is created
     * @returns {Object} MimeNode node element
     */

  }, {
    key: "_createRelated",
    value: function _createRelated(parentNode) {
      var _this6 = this;

      var node;

      if (!parentNode) {
        node = new MimeNode('multipart/related; type="text/html"', {
          baseBoundary: this.mail.baseBoundary,
          textEncoding: this.mail.textEncoding,
          boundaryPrefix: this.mail.boundaryPrefix,
          disableUrlAccess: this.mail.disableUrlAccess,
          disableFileAccess: this.mail.disableFileAccess,
          normalizeHeaderKey: this.mail.normalizeHeaderKey,
          newline: this.mail.newline
        });
      } else {
        node = parentNode.createChild('multipart/related; type="text/html"', {
          disableUrlAccess: this.mail.disableUrlAccess,
          disableFileAccess: this.mail.disableFileAccess,
          normalizeHeaderKey: this.mail.normalizeHeaderKey,
          newline: this.mail.newline
        });
      }

      this._createContentNode(node, this._htmlNode);

      this._attachments.related.forEach(function (alternative) {
        return _this6._createContentNode(node, alternative);
      });

      return node;
    }
    /**
     * Creates a regular node with contents
     *
     * @param {Object} parentNode Parent for this note. If it does not exist, a root node is created
     * @param {Object} element Node data
     * @returns {Object} MimeNode node element
     */

  }, {
    key: "_createContentNode",
    value: function _createContentNode(parentNode, element) {
      element = element || {};
      element.content = element.content || '';
      var node;
      var encoding = (element.encoding || 'utf8').toString().toLowerCase().replace(/[-_\s]/g, '');

      if (!parentNode) {
        node = new MimeNode(element.contentType, {
          filename: element.filename,
          baseBoundary: this.mail.baseBoundary,
          textEncoding: this.mail.textEncoding,
          boundaryPrefix: this.mail.boundaryPrefix,
          disableUrlAccess: this.mail.disableUrlAccess,
          disableFileAccess: this.mail.disableFileAccess,
          normalizeHeaderKey: this.mail.normalizeHeaderKey,
          newline: this.mail.newline
        });
      } else {
        node = parentNode.createChild(element.contentType, {
          filename: element.filename,
          textEncoding: this.mail.textEncoding,
          disableUrlAccess: this.mail.disableUrlAccess,
          disableFileAccess: this.mail.disableFileAccess,
          normalizeHeaderKey: this.mail.normalizeHeaderKey,
          newline: this.mail.newline
        });
      } // add custom headers


      if (element.headers) {
        node.addHeader(element.headers);
      }

      if (element.cid) {
        node.setHeader('Content-Id', '<' + element.cid.replace(/[<>]/g, '') + '>');
      }

      if (element.contentTransferEncoding) {
        node.setHeader('Content-Transfer-Encoding', element.contentTransferEncoding);
      } else if (this.mail.encoding && /^text\//i.test(element.contentType)) {
        node.setHeader('Content-Transfer-Encoding', this.mail.encoding);
      }

      if (!/^text\//i.test(element.contentType) || element.contentDisposition) {
        node.setHeader('Content-Disposition', element.contentDisposition || (element.cid ? 'inline' : 'attachment'));
      }

      if (typeof element.content === 'string' && !['utf8', 'usascii', 'ascii'].includes(encoding)) {
        element.content = Buffer.from(element.content, encoding);
      } // prefer pregenerated raw content


      if (element.raw) {
        node.setRaw(element.raw);
      } else {
        node.setContent(element.content);
      }

      return node;
    }
    /**
     * Parses data uri and converts it to a Buffer
     *
     * @param {Object} element Content element
     * @return {Object} Parsed element
     */

  }, {
    key: "_processDataUrl",
    value: function _processDataUrl(element) {
      var parts = (element.path || element.href).match(/^data:((?:[^;]*;)*(?:[^,]*)),(.*)$/i);

      if (!parts) {
        return element;
      }

      element.content = /\bbase64$/i.test(parts[1]) ? Buffer.from(parts[2], 'base64') : Buffer.from(decodeURIComponent(parts[2]));

      if ('path' in element) {
        element.path = false;
      }

      if ('href' in element) {
        element.href = false;
      }

      parts[1].split(';').forEach(function (item) {
        if (/^\w+\/[^/]+$/i.test(item)) {
          element.contentType = element.contentType || item.toLowerCase();
        }
      });
      return element;
    }
  }]);

  return MailComposer;
}();

module.exports = MailComposer;

/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Converts tokens for a single address into an address object
 *
 * @param {Array} tokens Tokens object
 * @return {Object} Address object
 */

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _handleAddress(tokens) {
  var token;
  var isGroup = false;
  var state = 'text';
  var address;
  var addresses = [];
  var data = {
    address: [],
    comment: [],
    group: [],
    text: []
  };
  var i;
  var len; // Filter out <addresses>, (comments) and regular text

  for (i = 0, len = tokens.length; i < len; i++) {
    token = tokens[i];

    if (token.type === 'operator') {
      switch (token.value) {
        case '<':
          state = 'address';
          break;

        case '(':
          state = 'comment';
          break;

        case ':':
          state = 'group';
          isGroup = true;
          break;

        default:
          state = 'text';
      }
    } else if (token.value) {
      if (state === 'address') {
        // handle use case where unquoted name includes a "<"
        // Apple Mail truncates everything between an unexpected < and an address
        // and so will we
        token.value = token.value.replace(/^[^<]*<\s*/, '');
      }

      data[state].push(token.value);
    }
  } // If there is no text but a comment, replace the two


  if (!data.text.length && data.comment.length) {
    data.text = data.comment;
    data.comment = [];
  }

  if (isGroup) {
    // http://tools.ietf.org/html/rfc2822#appendix-A.1.3
    data.text = data.text.join(' ');
    addresses.push({
      name: data.text || address && address.name,
      group: data.group.length ? addressparser(data.group.join(',')) : []
    });
  } else {
    // If no address was found, try to detect one from regular text
    if (!data.address.length && data.text.length) {
      for (i = data.text.length - 1; i >= 0; i--) {
        if (data.text[i].match(/^[^@\s]+@[^@\s]+$/)) {
          data.address = data.text.splice(i, 1);
          break;
        }
      }

      var _regexHandler = function _regexHandler(address) {
        if (!data.address.length) {
          data.address = [address.trim()];
          return ' ';
        } else {
          return address;
        }
      }; // still no address


      if (!data.address.length) {
        for (i = data.text.length - 1; i >= 0; i--) {
          // fixed the regex to parse email address correctly when email address has more than one @
          data.text[i] = data.text[i].replace(/\s*\b[^@\s]+@[^\s]+\b\s*/, _regexHandler).trim();

          if (data.address.length) {
            break;
          }
        }
      }
    } // If there's still is no text but a comment exixts, replace the two


    if (!data.text.length && data.comment.length) {
      data.text = data.comment;
      data.comment = [];
    } // Keep only the first address occurence, push others to regular text


    if (data.address.length > 1) {
      data.text = data.text.concat(data.address.splice(1));
    } // Join values with spaces


    data.text = data.text.join(' ');
    data.address = data.address.join(' ');

    if (!data.address && isGroup) {
      return [];
    } else {
      address = {
        address: data.address || data.text || '',
        name: data.text || data.address || ''
      };

      if (address.address === address.name) {
        if ((address.address || '').match(/@/)) {
          address.name = '';
        } else {
          address.address = '';
        }
      }

      addresses.push(address);
    }
  }

  return addresses;
}
/**
 * Creates a Tokenizer object for tokenizing address field strings
 *
 * @constructor
 * @param {String} str Address field string
 */


var Tokenizer = /*#__PURE__*/function () {
  function Tokenizer(str) {
    _classCallCheck(this, Tokenizer);

    this.str = (str || '').toString();
    this.operatorCurrent = '';
    this.operatorExpecting = '';
    this.node = null;
    this.escaped = false;
    this.list = [];
    /**
     * Operator tokens and which tokens are expected to end the sequence
     */

    this.operators = {
      '"': '"',
      '(': ')',
      '<': '>',
      ',': '',
      ':': ';',
      // Semicolons are not a legal delimiter per the RFC2822 grammar other
      // than for terminating a group, but they are also not valid for any
      // other use in this context.  Given that some mail clients have
      // historically allowed the semicolon as a delimiter equivalent to the
      // comma in their UI, it makes sense to treat them the same as a comma
      // when used outside of a group.
      ';': ''
    };
  }
  /**
   * Tokenizes the original input string
   *
   * @return {Array} An array of operator|text tokens
   */


  _createClass(Tokenizer, [{
    key: "tokenize",
    value: function tokenize() {
      var chr,
          list = [];

      for (var i = 0, len = this.str.length; i < len; i++) {
        chr = this.str.charAt(i);
        this.checkChar(chr);
      }

      this.list.forEach(function (node) {
        node.value = (node.value || '').toString().trim();

        if (node.value) {
          list.push(node);
        }
      });
      return list;
    }
    /**
     * Checks if a character is an operator or text and acts accordingly
     *
     * @param {String} chr Character from the address field
     */

  }, {
    key: "checkChar",
    value: function checkChar(chr) {
      if (this.escaped) {// ignore next condition blocks
      } else if (chr === this.operatorExpecting) {
        this.node = {
          type: 'operator',
          value: chr
        };
        this.list.push(this.node);
        this.node = null;
        this.operatorExpecting = '';
        this.escaped = false;
        return;
      } else if (!this.operatorExpecting && chr in this.operators) {
        this.node = {
          type: 'operator',
          value: chr
        };
        this.list.push(this.node);
        this.node = null;
        this.operatorExpecting = this.operators[chr];
        this.escaped = false;
        return;
      } else if (['"', "'"].includes(this.operatorExpecting) && chr === '\\') {
        this.escaped = true;
        return;
      }

      if (!this.node) {
        this.node = {
          type: 'text',
          value: ''
        };
        this.list.push(this.node);
      }

      if (chr === '\n') {
        // Convert newlines to spaces. Carriage return is ignored as \r and \n usually
        // go together anyway and there already is a WS for \n. Lone \r means something is fishy.
        chr = ' ';
      }

      if (chr.charCodeAt(0) >= 0x21 || [' ', '\t'].includes(chr)) {
        // skip command bytes
        this.node.value += chr;
      }

      this.escaped = false;
    }
  }]);

  return Tokenizer;
}();
/**
 * Parses structured e-mail addresses from an address field
 *
 * Example:
 *
 *    'Name <address@domain>'
 *
 * will be converted to
 *
 *     [{name: 'Name', address: 'address@domain'}]
 *
 * @param {String} str Address field
 * @return {Array} An array of address objects
 */


function addressparser(str, options) {
  options = options || {};
  var tokenizer = new Tokenizer(str);
  var tokens = tokenizer.tokenize();
  var addresses = [];
  var address = [];
  var parsedAddresses = [];
  tokens.forEach(function (token) {
    if (token.type === 'operator' && (token.value === ',' || token.value === ';')) {
      if (address.length) {
        addresses.push(address);
      }

      address = [];
    } else {
      address.push(token);
    }
  });

  if (address.length) {
    addresses.push(address);
  }

  addresses.forEach(function (address) {
    address = _handleAddress(address);

    if (address.length) {
      parsedAddresses = parsedAddresses.concat(address);
    }
  });

  if (options.flatten) {
    var _addresses = [];

    var walkAddressList = function walkAddressList(list) {
      list.forEach(function (address) {
        if (address.group) {
          return walkAddressList(address.group);
        } else {
          _addresses.push(address);
        }
      });
    };

    walkAddressList(parsedAddresses);
    return _addresses;
  }

  return parsedAddresses;
} // expose to the world


module.exports = addressparser;

/***/ }),
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } Object.defineProperty(subClass, "prototype", { value: Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }), writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Transform = __webpack_require__(1).Transform;

var LastNewline = /*#__PURE__*/function (_Transform) {
  _inherits(LastNewline, _Transform);

  var _super = _createSuper(LastNewline);

  function LastNewline() {
    var _this;

    _classCallCheck(this, LastNewline);

    _this = _super.call(this);
    _this.lastByte = false;
    return _this;
  }

  _createClass(LastNewline, [{
    key: "_transform",
    value: function _transform(chunk, encoding, done) {
      if (chunk.length) {
        this.lastByte = chunk[chunk.length - 1];
      }

      this.push(chunk);
      done();
    }
  }, {
    key: "_flush",
    value: function _flush(done) {
      if (this.lastByte === 0x0a) {
        return done();
      }

      if (this.lastByte === 0x0d) {
        this.push(Buffer.from('\n'));
        return done();
      }

      this.push(Buffer.from('\r\n'));
      return done();
    }
  }]);

  return LastNewline;
}(Transform);

module.exports = LastNewline;

/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } Object.defineProperty(subClass, "prototype", { value: Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }), writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var stream = __webpack_require__(1);

var Transform = stream.Transform;
/**
 * Ensures that only <LF> is used for linebreaks
 *
 * @param {Object} options Stream options
 */

var LeWindows = /*#__PURE__*/function (_Transform) {
  _inherits(LeWindows, _Transform);

  var _super = _createSuper(LeWindows);

  function LeWindows(options) {
    var _this;

    _classCallCheck(this, LeWindows);

    _this = _super.call(this, options); // init Transform

    _this.options = options || {};
    return _this;
  }
  /**
   * Escapes dots
   */


  _createClass(LeWindows, [{
    key: "_transform",
    value: function _transform(chunk, encoding, done) {
      var buf;
      var lastPos = 0;

      for (var i = 0, len = chunk.length; i < len; i++) {
        if (chunk[i] === 0x0d) {
          // \n
          buf = chunk.slice(lastPos, i);
          lastPos = i + 1;
          this.push(buf);
        }
      }

      if (lastPos && lastPos < chunk.length) {
        buf = chunk.slice(lastPos);
        this.push(buf);
      } else if (!lastPos) {
        this.push(chunk);
      }

      done();
    }
  }]);

  return LeWindows;
}(Transform);

module.exports = LeWindows;

/***/ }),
/* 77 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // FIXME:
// replace this Transform mess with a method that pipes input argument to output argument

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

var MessageParser = __webpack_require__(78);

var RelaxedBody = __webpack_require__(79);

var sign = __webpack_require__(80);

var PassThrough = __webpack_require__(1).PassThrough;

var fs = __webpack_require__(14);

var path = __webpack_require__(20);

var crypto = __webpack_require__(8);

var DKIM_ALGO = 'sha256';
var MAX_MESSAGE_SIZE = 128 * 1024; // buffer messages larger than this to disk

/*
// Usage:

let dkim = new DKIM({
    domainName: 'example.com',
    keySelector: 'key-selector',
    privateKey,
    cacheDir: '/tmp'
});
dkim.sign(input).pipe(process.stdout);

// Where inputStream is a rfc822 message (either a stream, string or Buffer)
// and outputStream is a DKIM signed rfc822 message
*/

var DKIMSigner = /*#__PURE__*/function () {
  function DKIMSigner(options, keys, input, output) {
    var _this = this;

    _classCallCheck(this, DKIMSigner);

    this.options = options || {};
    this.keys = keys;
    this.cacheTreshold = Number(this.options.cacheTreshold) || MAX_MESSAGE_SIZE;
    this.hashAlgo = this.options.hashAlgo || DKIM_ALGO;
    this.cacheDir = this.options.cacheDir || false;
    this.chunks = [];
    this.chunklen = 0;
    this.readPos = 0;
    this.cachePath = this.cacheDir ? path.join(this.cacheDir, 'message.' + Date.now() + '-' + crypto.randomBytes(14).toString('hex')) : false;
    this.cache = false;
    this.headers = false;
    this.bodyHash = false;
    this.parser = false;
    this.relaxedBody = false;
    this.input = input;
    this.output = output;
    this.output.usingCache = false;
    this.errored = false;
    this.input.on('error', function (err) {
      _this.errored = true;

      _this.cleanup();

      output.emit('error', err);
    });
  }

  _createClass(DKIMSigner, [{
    key: "cleanup",
    value: function cleanup() {
      if (!this.cache || !this.cachePath) {
        return;
      }

      fs.unlink(this.cachePath, function () {
        return false;
      });
    }
  }, {
    key: "createReadCache",
    value: function createReadCache() {
      var _this2 = this;

      // pipe remainings to cache file
      this.cache = fs.createReadStream(this.cachePath);
      this.cache.once('error', function (err) {
        _this2.cleanup();

        _this2.output.emit('error', err);
      });
      this.cache.once('close', function () {
        _this2.cleanup();
      });
      this.cache.pipe(this.output);
    }
  }, {
    key: "sendNextChunk",
    value: function sendNextChunk() {
      var _this3 = this;

      if (this.errored) {
        return;
      }

      if (this.readPos >= this.chunks.length) {
        if (!this.cache) {
          return this.output.end();
        }

        return this.createReadCache();
      }

      var chunk = this.chunks[this.readPos++];

      if (this.output.write(chunk) === false) {
        return this.output.once('drain', function () {
          _this3.sendNextChunk();
        });
      }

      setImmediate(function () {
        return _this3.sendNextChunk();
      });
    }
  }, {
    key: "sendSignedOutput",
    value: function sendSignedOutput() {
      var _this4 = this;

      var keyPos = 0;

      var signNextKey = function signNextKey() {
        if (keyPos >= _this4.keys.length) {
          _this4.output.write(_this4.parser.rawHeaders);

          return setImmediate(function () {
            return _this4.sendNextChunk();
          });
        }

        var key = _this4.keys[keyPos++];
        var dkimField = sign(_this4.headers, _this4.hashAlgo, _this4.bodyHash, {
          domainName: key.domainName,
          keySelector: key.keySelector,
          privateKey: key.privateKey,
          headerFieldNames: _this4.options.headerFieldNames,
          skipFields: _this4.options.skipFields
        });

        if (dkimField) {
          _this4.output.write(Buffer.from(dkimField + '\r\n'));
        }

        return setImmediate(signNextKey);
      };

      if (this.bodyHash && this.headers) {
        return signNextKey();
      }

      this.output.write(this.parser.rawHeaders);
      this.sendNextChunk();
    }
  }, {
    key: "createWriteCache",
    value: function createWriteCache() {
      var _this5 = this;

      this.output.usingCache = true; // pipe remainings to cache file

      this.cache = fs.createWriteStream(this.cachePath);
      this.cache.once('error', function (err) {
        _this5.cleanup(); // drain input


        _this5.relaxedBody.unpipe(_this5.cache);

        _this5.relaxedBody.on('readable', function () {
          while (_this5.relaxedBody.read() !== null) {// do nothing
          }
        });

        _this5.errored = true; // emit error

        _this5.output.emit('error', err);
      });
      this.cache.once('close', function () {
        _this5.sendSignedOutput();
      });
      this.relaxedBody.removeAllListeners('readable');
      this.relaxedBody.pipe(this.cache);
    }
  }, {
    key: "signStream",
    value: function signStream() {
      var _this6 = this;

      this.parser = new MessageParser();
      this.relaxedBody = new RelaxedBody({
        hashAlgo: this.hashAlgo
      });
      this.parser.on('headers', function (value) {
        _this6.headers = value;
      });
      this.relaxedBody.on('hash', function (value) {
        _this6.bodyHash = value;
      });
      this.relaxedBody.on('readable', function () {
        var chunk;

        if (_this6.cache) {
          return;
        }

        while ((chunk = _this6.relaxedBody.read()) !== null) {
          _this6.chunks.push(chunk);

          _this6.chunklen += chunk.length;

          if (_this6.chunklen >= _this6.cacheTreshold && _this6.cachePath) {
            return _this6.createWriteCache();
          }
        }
      });
      this.relaxedBody.on('end', function () {
        if (_this6.cache) {
          return;
        }

        _this6.sendSignedOutput();
      });
      this.parser.pipe(this.relaxedBody);
      setImmediate(function () {
        return _this6.input.pipe(_this6.parser);
      });
    }
  }]);

  return DKIMSigner;
}();

var DKIM = /*#__PURE__*/function () {
  function DKIM(options) {
    _classCallCheck(this, DKIM);

    this.options = options || {};
    this.keys = [].concat(this.options.keys || {
      domainName: options.domainName,
      keySelector: options.keySelector,
      privateKey: options.privateKey
    });
  }

  _createClass(DKIM, [{
    key: "sign",
    value: function sign(input, extraOptions) {
      var _this7 = this;

      var output = new PassThrough();
      var inputStream = input;
      var writeValue = false;

      if (Buffer.isBuffer(input)) {
        writeValue = input;
        inputStream = new PassThrough();
      } else if (typeof input === 'string') {
        writeValue = Buffer.from(input);
        inputStream = new PassThrough();
      }

      var options = this.options;

      if (extraOptions && Object.keys(extraOptions).length) {
        options = {};
        Object.keys(this.options || {}).forEach(function (key) {
          options[key] = _this7.options[key];
        });
        Object.keys(extraOptions || {}).forEach(function (key) {
          if (!(key in options)) {
            options[key] = extraOptions[key];
          }
        });
      }

      var signer = new DKIMSigner(options, this.keys, inputStream, output);
      setImmediate(function () {
        signer.signStream();

        if (writeValue) {
          setImmediate(function () {
            inputStream.end(writeValue);
          });
        }
      });
      return output;
    }
  }]);

  return DKIM;
}();

module.exports = DKIM;

/***/ }),
/* 78 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } Object.defineProperty(subClass, "prototype", { value: Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }), writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Transform = __webpack_require__(1).Transform;
/**
 * MessageParser instance is a transform stream that separates message headers
 * from the rest of the body. Headers are emitted with the 'headers' event. Message
 * body is passed on as the resulting stream.
 */


var MessageParser = /*#__PURE__*/function (_Transform) {
  _inherits(MessageParser, _Transform);

  var _super = _createSuper(MessageParser);

  function MessageParser(options) {
    var _this;

    _classCallCheck(this, MessageParser);

    _this = _super.call(this, options);
    _this.lastBytes = Buffer.alloc(4);
    _this.headersParsed = false;
    _this.headerBytes = 0;
    _this.headerChunks = [];
    _this.rawHeaders = false;
    _this.bodySize = 0;
    return _this;
  }
  /**
   * Keeps count of the last 4 bytes in order to detect line breaks on chunk boundaries
   *
   * @param {Buffer} data Next data chunk from the stream
   */


  _createClass(MessageParser, [{
    key: "updateLastBytes",
    value: function updateLastBytes(data) {
      var lblen = this.lastBytes.length;
      var nblen = Math.min(data.length, lblen); // shift existing bytes

      for (var i = 0, len = lblen - nblen; i < len; i++) {
        this.lastBytes[i] = this.lastBytes[i + nblen];
      } // add new bytes


      for (var _i = 1; _i <= nblen; _i++) {
        this.lastBytes[lblen - _i] = data[data.length - _i];
      }
    }
    /**
     * Finds and removes message headers from the remaining body. We want to keep
     * headers separated until final delivery to be able to modify these
     *
     * @param {Buffer} data Next chunk of data
     * @return {Boolean} Returns true if headers are already found or false otherwise
     */

  }, {
    key: "checkHeaders",
    value: function checkHeaders(data) {
      var _this2 = this;

      if (this.headersParsed) {
        return true;
      }

      var lblen = this.lastBytes.length;
      var headerPos = 0;
      this.curLinePos = 0;

      for (var i = 0, len = this.lastBytes.length + data.length; i < len; i++) {
        var chr = void 0;

        if (i < lblen) {
          chr = this.lastBytes[i];
        } else {
          chr = data[i - lblen];
        }

        if (chr === 0x0a && i) {
          var pr1 = i - 1 < lblen ? this.lastBytes[i - 1] : data[i - 1 - lblen];
          var pr2 = i > 1 ? i - 2 < lblen ? this.lastBytes[i - 2] : data[i - 2 - lblen] : false;

          if (pr1 === 0x0a) {
            this.headersParsed = true;
            headerPos = i - lblen + 1;
            this.headerBytes += headerPos;
            break;
          } else if (pr1 === 0x0d && pr2 === 0x0a) {
            this.headersParsed = true;
            headerPos = i - lblen + 1;
            this.headerBytes += headerPos;
            break;
          }
        }
      }

      if (this.headersParsed) {
        this.headerChunks.push(data.slice(0, headerPos));
        this.rawHeaders = Buffer.concat(this.headerChunks, this.headerBytes);
        this.headerChunks = null;
        this.emit('headers', this.parseHeaders());

        if (data.length - 1 > headerPos) {
          var chunk = data.slice(headerPos);
          this.bodySize += chunk.length; // this would be the first chunk of data sent downstream

          setImmediate(function () {
            return _this2.push(chunk);
          });
        }

        return false;
      } else {
        this.headerBytes += data.length;
        this.headerChunks.push(data);
      } // store last 4 bytes to catch header break


      this.updateLastBytes(data);
      return false;
    }
  }, {
    key: "_transform",
    value: function _transform(chunk, encoding, callback) {
      if (!chunk || !chunk.length) {
        return callback();
      }

      if (typeof chunk === 'string') {
        chunk = Buffer.from(chunk, encoding);
      }

      var headersFound;

      try {
        headersFound = this.checkHeaders(chunk);
      } catch (E) {
        return callback(E);
      }

      if (headersFound) {
        this.bodySize += chunk.length;
        this.push(chunk);
      }

      setImmediate(callback);
    }
  }, {
    key: "_flush",
    value: function _flush(callback) {
      if (this.headerChunks) {
        var chunk = Buffer.concat(this.headerChunks, this.headerBytes);
        this.bodySize += chunk.length;
        this.push(chunk);
        this.headerChunks = null;
      }

      callback();
    }
  }, {
    key: "parseHeaders",
    value: function parseHeaders() {
      var lines = (this.rawHeaders || '').toString().split(/\r?\n/);

      for (var i = lines.length - 1; i > 0; i--) {
        if (/^\s/.test(lines[i])) {
          lines[i - 1] += '\n' + lines[i];
          lines.splice(i, 1);
        }
      }

      return lines.filter(function (line) {
        return line.trim();
      }).map(function (line) {
        return {
          key: line.substr(0, line.indexOf(':')).trim().toLowerCase(),
          line: line
        };
      });
    }
  }]);

  return MessageParser;
}(Transform);

module.exports = MessageParser;

/***/ }),
/* 79 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // streams through a message body and calculates relaxed body hash

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } Object.defineProperty(subClass, "prototype", { value: Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }), writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Transform = __webpack_require__(1).Transform;

var crypto = __webpack_require__(8);

var RelaxedBody = /*#__PURE__*/function (_Transform) {
  _inherits(RelaxedBody, _Transform);

  var _super = _createSuper(RelaxedBody);

  function RelaxedBody(options) {
    var _this;

    _classCallCheck(this, RelaxedBody);

    _this = _super.call(this);
    options = options || {};
    _this.chunkBuffer = [];
    _this.chunkBufferLen = 0;
    _this.bodyHash = crypto.createHash(options.hashAlgo || 'sha1');
    _this.remainder = '';
    _this.byteLength = 0;
    _this.debug = options.debug;
    _this._debugBody = options.debug ? [] : false;
    return _this;
  }

  _createClass(RelaxedBody, [{
    key: "updateHash",
    value: function updateHash(chunk) {
      var bodyStr; // find next remainder

      var nextRemainder = ''; // This crux finds and removes the spaces from the last line and the newline characters after the last non-empty line
      // If we get another chunk that does not match this description then we can restore the previously processed data

      var state = 'file';

      for (var i = chunk.length - 1; i >= 0; i--) {
        var c = chunk[i];

        if (state === 'file' && (c === 0x0a || c === 0x0d)) {// do nothing, found \n or \r at the end of chunk, stil end of file
        } else if (state === 'file' && (c === 0x09 || c === 0x20)) {
          // switch to line ending mode, this is the last non-empty line
          state = 'line';
        } else if (state === 'line' && (c === 0x09 || c === 0x20)) {// do nothing, found ' ' or \t at the end of line, keep processing the last non-empty line
        } else if (state === 'file' || state === 'line') {
          // non line/file ending character found, switch to body mode
          state = 'body';

          if (i === chunk.length - 1) {
            // final char is not part of line end or file end, so do nothing
            break;
          }
        }

        if (i === 0) {
          // reached to the beginning of the chunk, check if it is still about the ending
          // and if the remainder also matches
          if (state === 'file' && (!this.remainder || /[\r\n]$/.test(this.remainder)) || state === 'line' && (!this.remainder || /[ \t]$/.test(this.remainder))) {
            // keep everything
            this.remainder += chunk.toString('binary');
            return;
          } else if (state === 'line' || state === 'file') {
            // process existing remainder as normal line but store the current chunk
            nextRemainder = chunk.toString('binary');
            chunk = false;
            break;
          }
        }

        if (state !== 'body') {
          continue;
        } // reached first non ending byte


        nextRemainder = chunk.slice(i + 1).toString('binary');
        chunk = chunk.slice(0, i + 1);
        break;
      }

      var needsFixing = !!this.remainder;

      if (chunk && !needsFixing) {
        // check if we even need to change anything
        for (var _i = 0, len = chunk.length; _i < len; _i++) {
          if (_i && chunk[_i] === 0x0a && chunk[_i - 1] !== 0x0d) {
            // missing \r before \n
            needsFixing = true;
            break;
          } else if (_i && chunk[_i] === 0x0d && chunk[_i - 1] === 0x20) {
            // trailing WSP found
            needsFixing = true;
            break;
          } else if (_i && chunk[_i] === 0x20 && chunk[_i - 1] === 0x20) {
            // multiple spaces found, needs to be replaced with just one
            needsFixing = true;
            break;
          } else if (chunk[_i] === 0x09) {
            // TAB found, needs to be replaced with a space
            needsFixing = true;
            break;
          }
        }
      }

      if (needsFixing) {
        bodyStr = this.remainder + (chunk ? chunk.toString('binary') : '');
        this.remainder = nextRemainder;
        bodyStr = bodyStr.replace(/\r?\n/g, '\n') // use js line endings
        .replace(/[ \t]*$/gm, '') // remove line endings, rtrim
        .replace(/[ \t]+/gm, ' ') // single spaces
        .replace(/\n/g, '\r\n'); // restore rfc822 line endings

        chunk = Buffer.from(bodyStr, 'binary');
      } else if (nextRemainder) {
        this.remainder = nextRemainder;
      }

      if (this.debug) {
        this._debugBody.push(chunk);
      }

      this.bodyHash.update(chunk);
    }
  }, {
    key: "_transform",
    value: function _transform(chunk, encoding, callback) {
      if (!chunk || !chunk.length) {
        return callback();
      }

      if (typeof chunk === 'string') {
        chunk = Buffer.from(chunk, encoding);
      }

      this.updateHash(chunk);
      this.byteLength += chunk.length;
      this.push(chunk);
      callback();
    }
  }, {
    key: "_flush",
    value: function _flush(callback) {
      // generate final hash and emit it
      if (/[\r\n]$/.test(this.remainder) && this.byteLength > 2) {
        // add terminating line end
        this.bodyHash.update(Buffer.from('\r\n'));
      }

      if (!this.byteLength) {
        // emit empty line buffer to keep the stream flowing
        this.push(Buffer.from('\r\n')); // this.bodyHash.update(Buffer.from('\r\n'));
      }

      this.emit('hash', this.bodyHash.digest('base64'), this.debug ? Buffer.concat(this._debugBody) : false);
      callback();
    }
  }]);

  return RelaxedBody;
}(Transform);

module.exports = RelaxedBody;

/***/ }),
/* 80 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var punycode = __webpack_require__(40);

var mimeFuncs = __webpack_require__(21);

var crypto = __webpack_require__(8);
/**
 * Returns DKIM signature header line
 *
 * @param {Object} headers Parsed headers object from MessageParser
 * @param {String} bodyHash Base64 encoded hash of the message
 * @param {Object} options DKIM options
 * @param {String} options.domainName Domain name to be signed for
 * @param {String} options.keySelector DKIM key selector to use
 * @param {String} options.privateKey DKIM private key to use
 * @return {String} Complete header line
 */


module.exports = function (headers, hashAlgo, bodyHash, options) {
  options = options || {}; // all listed fields from RFC4871 #5.5

  var defaultFieldNames = 'From:Sender:Reply-To:Subject:Date:Message-ID:To:' + 'Cc:MIME-Version:Content-Type:Content-Transfer-Encoding:Content-ID:' + 'Content-Description:Resent-Date:Resent-From:Resent-Sender:' + 'Resent-To:Resent-Cc:Resent-Message-ID:In-Reply-To:References:' + 'List-Id:List-Help:List-Unsubscribe:List-Subscribe:List-Post:' + 'List-Owner:List-Archive';
  var fieldNames = options.headerFieldNames || defaultFieldNames;
  var canonicalizedHeaderData = relaxedHeaders(headers, fieldNames, options.skipFields);
  var dkimHeader = generateDKIMHeader(options.domainName, options.keySelector, canonicalizedHeaderData.fieldNames, hashAlgo, bodyHash);
  var signer, signature;
  canonicalizedHeaderData.headers += 'dkim-signature:' + relaxedHeaderLine(dkimHeader);
  signer = crypto.createSign(('rsa-' + hashAlgo).toUpperCase());
  signer.update(canonicalizedHeaderData.headers);

  try {
    signature = signer.sign(options.privateKey, 'base64');
  } catch (E) {
    return false;
  }

  return dkimHeader + signature.replace(/(^.{73}|.{75}(?!\r?\n|\r))/g, '$&\r\n ').trim();
};

module.exports.relaxedHeaders = relaxedHeaders;

function generateDKIMHeader(domainName, keySelector, fieldNames, hashAlgo, bodyHash) {
  var dkim = ['v=1', 'a=rsa-' + hashAlgo, 'c=relaxed/relaxed', 'd=' + punycode.toASCII(domainName), 'q=dns/txt', 's=' + keySelector, 'bh=' + bodyHash, 'h=' + fieldNames].join('; ');
  return mimeFuncs.foldLines('DKIM-Signature: ' + dkim, 76) + ';\r\n b=';
}

function relaxedHeaders(headers, fieldNames, skipFields) {
  var includedFields = new Set();
  var skip = new Set();
  var headerFields = new Map();
  (skipFields || '').toLowerCase().split(':').forEach(function (field) {
    skip.add(field.trim());
  });
  (fieldNames || '').toLowerCase().split(':').filter(function (field) {
    return !skip.has(field.trim());
  }).forEach(function (field) {
    includedFields.add(field.trim());
  });

  for (var i = headers.length - 1; i >= 0; i--) {
    var line = headers[i]; // only include the first value from bottom to top

    if (includedFields.has(line.key) && !headerFields.has(line.key)) {
      headerFields.set(line.key, relaxedHeaderLine(line.line));
    }
  }

  var headersList = [];
  var fields = [];
  includedFields.forEach(function (field) {
    if (headerFields.has(field)) {
      fields.push(field);
      headersList.push(field + ':' + headerFields.get(field));
    }
  });
  return {
    headers: headersList.join('\r\n') + '\r\n',
    fieldNames: fields.join(':')
  };
}

function relaxedHeaderLine(line) {
  return line.substr(line.indexOf(':') + 1).replace(/\r?\n/g, '').replace(/\s+/g, ' ').trim();
}

/***/ }),
/* 81 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Minimal HTTP/S proxy client
 */

var net = __webpack_require__(18);

var tls = __webpack_require__(44);

var urllib = __webpack_require__(5);
/**
 * Establishes proxied connection to destinationPort
 *
 * httpProxyClient("http://localhost:3128/", 80, "google.com", function(err, socket){
 *     socket.write("GET / HTTP/1.0\r\n\r\n");
 * });
 *
 * @param {String} proxyUrl proxy configuration, etg "http://proxy.host:3128/"
 * @param {Number} destinationPort Port to open in destination host
 * @param {String} destinationHost Destination hostname
 * @param {Function} callback Callback to run with the rocket object once connection is established
 */


function httpProxyClient(proxyUrl, destinationPort, destinationHost, callback) {
  var proxy = urllib.parse(proxyUrl); // create a socket connection to the proxy server

  var options;
  var connect;
  var socket;
  options = {
    host: proxy.hostname,
    port: Number(proxy.port) ? Number(proxy.port) : proxy.protocol === 'https:' ? 443 : 80
  };

  if (proxy.protocol === 'https:') {
    // we can use untrusted proxies as long as we verify actual SMTP certificates
    options.rejectUnauthorized = false;
    connect = tls.connect.bind(tls);
  } else {
    connect = net.connect.bind(net);
  } // Error harness for initial connection. Once connection is established, the responsibility
  // to handle errors is passed to whoever uses this socket


  var finished = false;

  var tempSocketErr = function tempSocketErr(err) {
    if (finished) {
      return;
    }

    finished = true;

    try {
      socket.destroy();
    } catch (E) {// ignore
    }

    callback(err);
  };

  socket = connect(options, function () {
    if (finished) {
      return;
    }

    var reqHeaders = {
      Host: destinationHost + ':' + destinationPort,
      Connection: 'close'
    };

    if (proxy.auth) {
      reqHeaders['Proxy-Authorization'] = 'Basic ' + Buffer.from(proxy.auth).toString('base64');
    }

    socket.write( // HTTP method
    'CONNECT ' + destinationHost + ':' + destinationPort + ' HTTP/1.1\r\n' + // HTTP request headers
    Object.keys(reqHeaders).map(function (key) {
      return key + ': ' + reqHeaders[key];
    }).join('\r\n') + // End request
    '\r\n\r\n');
    var headers = '';

    var onSocketData = function onSocketData(chunk) {
      var match;
      var remainder;

      if (finished) {
        return;
      }

      headers += chunk.toString('binary');

      if (match = headers.match(/\r\n\r\n/)) {
        socket.removeListener('data', onSocketData);
        remainder = headers.substr(match.index + match[0].length);
        headers = headers.substr(0, match.index);

        if (remainder) {
          socket.unshift(Buffer.from(remainder, 'binary'));
        } // proxy connection is now established


        finished = true; // check response code

        match = headers.match(/^HTTP\/\d+\.\d+ (\d+)/i);

        if (!match || (match[1] || '').charAt(0) !== '2') {
          try {
            socket.destroy();
          } catch (E) {// ignore
          }

          return callback(new Error('Invalid response from proxy' + (match && ': ' + match[1] || '')));
        }

        socket.removeListener('error', tempSocketErr);
        return callback(null, socket);
      }
    };

    socket.on('data', onSocketData);
  });
  socket.once('error', tempSocketErr);
}

module.exports = httpProxyClient;

/***/ }),
/* 82 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

var shared = __webpack_require__(2);

var MimeNode = __webpack_require__(39);

var mimeFuncs = __webpack_require__(21);

var MailMessage = /*#__PURE__*/function () {
  function MailMessage(mailer, data) {
    var _this = this;

    _classCallCheck(this, MailMessage);

    this.mailer = mailer;
    this.data = {};
    this.message = null;
    data = data || {};
    var options = mailer.options || {};
    var defaults = mailer._defaults || {};
    Object.keys(data).forEach(function (key) {
      _this.data[key] = data[key];
    });
    this.data.headers = this.data.headers || {}; // apply defaults

    Object.keys(defaults).forEach(function (key) {
      if (!(key in _this.data)) {
        _this.data[key] = defaults[key];
      } else if (key === 'headers') {
        // headers is a special case. Allow setting individual default headers
        Object.keys(defaults.headers).forEach(function (key) {
          if (!(key in _this.data.headers)) {
            _this.data.headers[key] = defaults.headers[key];
          }
        });
      }
    }); // force specific keys from transporter options

    ['disableFileAccess', 'disableUrlAccess', 'normalizeHeaderKey'].forEach(function (key) {
      if (key in options) {
        _this.data[key] = options[key];
      }
    });
  }

  _createClass(MailMessage, [{
    key: "resolveContent",
    value: function resolveContent() {
      return shared.resolveContent.apply(shared, arguments);
    }
  }, {
    key: "resolveAll",
    value: function resolveAll(callback) {
      var _this2 = this;

      var keys = [[this.data, 'html'], [this.data, 'text'], [this.data, 'watchHtml'], [this.data, 'amp'], [this.data, 'icalEvent']];

      if (this.data.alternatives && this.data.alternatives.length) {
        this.data.alternatives.forEach(function (alternative, i) {
          keys.push([_this2.data.alternatives, i]);
        });
      }

      if (this.data.attachments && this.data.attachments.length) {
        this.data.attachments.forEach(function (attachment, i) {
          if (!attachment.filename) {
            attachment.filename = (attachment.path || attachment.href || '').split('/').pop().split('?').shift() || 'attachment-' + (i + 1);

            if (attachment.filename.indexOf('.') < 0) {
              attachment.filename += '.' + mimeFuncs.detectExtension(attachment.contentType);
            }
          }

          if (!attachment.contentType) {
            attachment.contentType = mimeFuncs.detectMimeType(attachment.filename || attachment.path || attachment.href || 'bin');
          }

          keys.push([_this2.data.attachments, i]);
        });
      }

      var mimeNode = new MimeNode();
      var addressKeys = ['from', 'to', 'cc', 'bcc', 'sender', 'replyTo'];
      addressKeys.forEach(function (address) {
        var value;

        if (_this2.message) {
          value = [].concat(mimeNode._parseAddresses(_this2.message.getHeader(address === 'replyTo' ? 'reply-to' : address)) || []);
        } else if (_this2.data[address]) {
          value = [].concat(mimeNode._parseAddresses(_this2.data[address]) || []);
        }

        if (value && value.length) {
          _this2.data[address] = value;
        } else if (address in _this2.data) {
          _this2.data[address] = null;
        }
      });
      var singleKeys = ['from', 'sender', 'replyTo'];
      singleKeys.forEach(function (address) {
        if (_this2.data[address]) {
          _this2.data[address] = _this2.data[address].shift();
        }
      });
      var pos = 0;

      var resolveNext = function resolveNext() {
        if (pos >= keys.length) {
          return callback(null, _this2.data);
        }

        var args = keys[pos++];

        if (!args[0] || !args[0][args[1]]) {
          return resolveNext();
        }

        shared.resolveContent.apply(shared, _toConsumableArray(args).concat([function (err, value) {
          if (err) {
            return callback(err);
          }

          var node = {
            content: value
          };

          if (args[0][args[1]] && _typeof(args[0][args[1]]) === 'object' && !Buffer.isBuffer(args[0][args[1]])) {
            Object.keys(args[0][args[1]]).forEach(function (key) {
              if (!(key in node) && !['content', 'path', 'href', 'raw'].includes(key)) {
                node[key] = args[0][args[1]][key];
              }
            });
          }

          args[0][args[1]] = node;
          resolveNext();
        }]));
      };

      setImmediate(function () {
        return resolveNext();
      });
    }
  }, {
    key: "normalize",
    value: function normalize(callback) {
      var _this3 = this;

      var envelope = this.data.envelope || this.message.getEnvelope();
      var messageId = this.message.messageId();
      this.resolveAll(function (err, data) {
        if (err) {
          return callback(err);
        }

        data.envelope = envelope;
        data.messageId = messageId;
        ['html', 'text', 'watchHtml', 'amp'].forEach(function (key) {
          if (data[key] && data[key].content) {
            if (typeof data[key].content === 'string') {
              data[key] = data[key].content;
            } else if (Buffer.isBuffer(data[key].content)) {
              data[key] = data[key].content.toString();
            }
          }
        });

        if (data.icalEvent && Buffer.isBuffer(data.icalEvent.content)) {
          data.icalEvent.content = data.icalEvent.content.toString('base64');
          data.icalEvent.encoding = 'base64';
        }

        if (data.alternatives && data.alternatives.length) {
          data.alternatives.forEach(function (alternative) {
            if (alternative && alternative.content && Buffer.isBuffer(alternative.content)) {
              alternative.content = alternative.content.toString('base64');
              alternative.encoding = 'base64';
            }
          });
        }

        if (data.attachments && data.attachments.length) {
          data.attachments.forEach(function (attachment) {
            if (attachment && attachment.content && Buffer.isBuffer(attachment.content)) {
              attachment.content = attachment.content.toString('base64');
              attachment.encoding = 'base64';
            }
          });
        }

        data.normalizedHeaders = {};
        Object.keys(data.headers || {}).forEach(function (key) {
          var value = [].concat(data.headers[key] || []).shift();
          value = value && value.value || value;

          if (value) {
            if (['references', 'in-reply-to', 'message-id', 'content-id'].includes(key)) {
              value = _this3.message._encodeHeaderValue(key, value);
            }

            data.normalizedHeaders[key] = value;
          }
        });

        if (data.list && _typeof(data.list) === 'object') {
          var listHeaders = _this3._getListHeaders(data.list);

          listHeaders.forEach(function (entry) {
            data.normalizedHeaders[entry.key] = entry.value.map(function (val) {
              return val && val.value || val;
            }).join(', ');
          });
        }

        if (data.references) {
          data.normalizedHeaders.references = _this3.message._encodeHeaderValue('references', data.references);
        }

        if (data.inReplyTo) {
          data.normalizedHeaders['in-reply-to'] = _this3.message._encodeHeaderValue('in-reply-to', data.inReplyTo);
        }

        return callback(null, data);
      });
    }
  }, {
    key: "setMailerHeader",
    value: function setMailerHeader() {
      if (!this.message || !this.data.xMailer) {
        return;
      }

      this.message.setHeader('X-Mailer', this.data.xMailer);
    }
  }, {
    key: "setPriorityHeaders",
    value: function setPriorityHeaders() {
      if (!this.message || !this.data.priority) {
        return;
      }

      switch ((this.data.priority || '').toString().toLowerCase()) {
        case 'high':
          this.message.setHeader('X-Priority', '1 (Highest)');
          this.message.setHeader('X-MSMail-Priority', 'High');
          this.message.setHeader('Importance', 'High');
          break;

        case 'low':
          this.message.setHeader('X-Priority', '5 (Lowest)');
          this.message.setHeader('X-MSMail-Priority', 'Low');
          this.message.setHeader('Importance', 'Low');
          break;

        default: // do not add anything, since all messages are 'Normal' by default

      }
    }
  }, {
    key: "setListHeaders",
    value: function setListHeaders() {
      var _this4 = this;

      if (!this.message || !this.data.list || _typeof(this.data.list) !== 'object') {
        return;
      } // add optional List-* headers


      if (this.data.list && _typeof(this.data.list) === 'object') {
        this._getListHeaders(this.data.list).forEach(function (listHeader) {
          listHeader.value.forEach(function (value) {
            _this4.message.addHeader(listHeader.key, value);
          });
        });
      }
    }
  }, {
    key: "_getListHeaders",
    value: function _getListHeaders(listData) {
      var _this5 = this;

      // make sure an url looks like <protocol:url>
      return Object.keys(listData).map(function (key) {
        return {
          key: 'list-' + key.toLowerCase().trim(),
          value: [].concat(listData[key] || []).map(function (value) {
            return {
              prepared: true,
              foldLines: true,
              value: [].concat(value || []).map(function (value) {
                if (typeof value === 'string') {
                  value = {
                    url: value
                  };
                }

                if (value && value.url) {
                  if (key.toLowerCase().trim() === 'id') {
                    // List-ID: "comment" <domain>
                    var _comment = value.comment || '';

                    if (mimeFuncs.isPlainText(_comment)) {
                      _comment = '"' + _comment + '"';
                    } else {
                      _comment = mimeFuncs.encodeWord(_comment);
                    }

                    return (value.comment ? _comment + ' ' : '') + _this5._formatListUrl(value.url).replace(/^<[^:]+\/{,2}/, '');
                  } // List-*: <http://domain> (comment)


                  var comment = value.comment || '';

                  if (!mimeFuncs.isPlainText(comment)) {
                    comment = mimeFuncs.encodeWord(comment);
                  }

                  return _this5._formatListUrl(value.url) + (value.comment ? ' (' + comment + ')' : '');
                }

                return '';
              }).filter(function (value) {
                return value;
              }).join(', ')
            };
          })
        };
      });
    }
  }, {
    key: "_formatListUrl",
    value: function _formatListUrl(url) {
      url = url.replace(/[\s<]+|[\s>]+/g, '');

      if (/^(https?|mailto|ftp):/.test(url)) {
        return '<' + url + '>';
      }

      if (/^[^@]+@[^@]+$/.test(url)) {
        return '<mailto:' + url + '>';
      }

      return '<http://' + url + '>';
    }
  }]);

  return MailMessage;
}();

module.exports = MailMessage;

/***/ }),
/* 83 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } Object.defineProperty(subClass, "prototype", { value: Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }), writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var EventEmitter = __webpack_require__(10);

var PoolResource = __webpack_require__(84);

var SMTPConnection = __webpack_require__(25);

var wellKnown = __webpack_require__(46);

var shared = __webpack_require__(2);

var packageData = __webpack_require__(3);
/**
 * Creates a SMTP pool transport object for Nodemailer
 *
 * @constructor
 * @param {Object} options SMTP Connection options
 */


var SMTPPool = /*#__PURE__*/function (_EventEmitter) {
  _inherits(SMTPPool, _EventEmitter);

  var _super = _createSuper(SMTPPool);

  function SMTPPool(options) {
    var _this;

    _classCallCheck(this, SMTPPool);

    _this = _super.call(this);
    options = options || {};

    if (typeof options === 'string') {
      options = {
        url: options
      };
    }

    var urlData;
    var service = options.service;

    if (typeof options.getSocket === 'function') {
      _this.getSocket = options.getSocket;
    }

    if (options.url) {
      urlData = shared.parseConnectionUrl(options.url);
      service = service || urlData.service;
    }

    _this.options = shared.assign(false, // create new object
    options, // regular options
    urlData, // url options
    service && wellKnown(service) // wellknown options
    );
    _this.options.maxConnections = _this.options.maxConnections || 5;
    _this.options.maxMessages = _this.options.maxMessages || 100;
    _this.logger = shared.getLogger(_this.options, {
      component: _this.options.component || 'smtp-pool'
    }); // temporary object

    var connection = new SMTPConnection(_this.options);
    _this.name = 'SMTP (pool)';
    _this.version = packageData.version + '[client:' + connection.version + ']';
    _this._rateLimit = {
      counter: 0,
      timeout: null,
      waiting: [],
      checkpoint: false,
      delta: Number(_this.options.rateDelta) || 1000,
      limit: Number(_this.options.rateLimit) || 0
    };
    _this._closed = false;
    _this._queue = [];
    _this._connections = [];
    _this._connectionCounter = 0;
    _this.idling = true;
    setImmediate(function () {
      if (_this.idling) {
        _this.emit('idle');
      }
    });
    return _this;
  }
  /**
   * Placeholder function for creating proxy sockets. This method immediatelly returns
   * without a socket
   *
   * @param {Object} options Connection options
   * @param {Function} callback Callback function to run with the socket keys
   */


  _createClass(SMTPPool, [{
    key: "getSocket",
    value: function getSocket(options, callback) {
      // return immediatelly
      return setImmediate(function () {
        return callback(null, false);
      });
    }
    /**
     * Queues an e-mail to be sent using the selected settings
     *
     * @param {Object} mail Mail object
     * @param {Function} callback Callback function
     */

  }, {
    key: "send",
    value: function send(mail, callback) {
      var _this2 = this;

      if (this._closed) {
        return false;
      }

      this._queue.push({
        mail: mail,
        requeueAttempts: 0,
        callback: callback
      });

      if (this.idling && this._queue.length >= this.options.maxConnections) {
        this.idling = false;
      }

      setImmediate(function () {
        return _this2._processMessages();
      });
      return true;
    }
    /**
     * Closes all connections in the pool. If there is a message being sent, the connection
     * is closed later
     */

  }, {
    key: "close",
    value: function close() {
      var _this3 = this;

      var connection;
      var len = this._connections.length;
      this._closed = true; // clear rate limit timer if it exists

      clearTimeout(this._rateLimit.timeout);

      if (!len && !this._queue.length) {
        return;
      } // remove all available connections


      for (var i = len - 1; i >= 0; i--) {
        if (this._connections[i] && this._connections[i].available) {
          connection = this._connections[i];
          connection.close();
          this.logger.info({
            tnx: 'connection',
            cid: connection.id,
            action: 'removed'
          }, 'Connection #%s removed', connection.id);
        }
      }

      if (len && !this._connections.length) {
        this.logger.debug({
          tnx: 'connection'
        }, 'All connections removed');
      }

      if (!this._queue.length) {
        return;
      } // make sure that entire queue would be cleaned


      var invokeCallbacks = function invokeCallbacks() {
        if (!_this3._queue.length) {
          _this3.logger.debug({
            tnx: 'connection'
          }, 'Pending queue entries cleared');

          return;
        }

        var entry = _this3._queue.shift();

        if (entry && typeof entry.callback === 'function') {
          try {
            entry.callback(new Error('Connection pool was closed'));
          } catch (E) {
            _this3.logger.error({
              err: E,
              tnx: 'callback',
              cid: connection.id
            }, 'Callback error for #%s: %s', connection.id, E.message);
          }
        }

        setImmediate(invokeCallbacks);
      };

      setImmediate(invokeCallbacks);
    }
    /**
     * Check the queue and available connections. If there is a message to be sent and there is
     * an available connection, then use this connection to send the mail
     */

  }, {
    key: "_processMessages",
    value: function _processMessages() {
      var _this4 = this;

      var connection;
      var i, len; // do nothing if already closed

      if (this._closed) {
        return;
      } // do nothing if queue is empty


      if (!this._queue.length) {
        if (!this.idling) {
          // no pending jobs
          this.idling = true;
          this.emit('idle');
        }

        return;
      } // find first available connection


      for (i = 0, len = this._connections.length; i < len; i++) {
        if (this._connections[i].available) {
          connection = this._connections[i];
          break;
        }
      }

      if (!connection && this._connections.length < this.options.maxConnections) {
        connection = this._createConnection();
      }

      if (!connection) {
        // no more free connection slots available
        this.idling = false;
        return;
      } // check if there is free space in the processing queue


      if (!this.idling && this._queue.length < this.options.maxConnections) {
        this.idling = true;
        this.emit('idle');
      }

      var entry = connection.queueEntry = this._queue.shift();

      entry.messageId = (connection.queueEntry.mail.message.getHeader('message-id') || '').replace(/[<>\s]/g, '');
      connection.available = false;
      this.logger.debug({
        tnx: 'pool',
        cid: connection.id,
        messageId: entry.messageId,
        action: 'assign'
      }, 'Assigned message <%s> to #%s (%s)', entry.messageId, connection.id, connection.messages + 1);

      if (this._rateLimit.limit) {
        this._rateLimit.counter++;

        if (!this._rateLimit.checkpoint) {
          this._rateLimit.checkpoint = Date.now();
        }
      }

      connection.send(entry.mail, function (err, info) {
        // only process callback if current handler is not changed
        if (entry === connection.queueEntry) {
          try {
            entry.callback(err, info);
          } catch (E) {
            _this4.logger.error({
              err: E,
              tnx: 'callback',
              cid: connection.id
            }, 'Callback error for #%s: %s', connection.id, E.message);
          }

          connection.queueEntry = false;
        }
      });
    }
    /**
     * Creates a new pool resource
     */

  }, {
    key: "_createConnection",
    value: function _createConnection() {
      var _this5 = this;

      var connection = new PoolResource(this);
      connection.id = ++this._connectionCounter;
      this.logger.info({
        tnx: 'pool',
        cid: connection.id,
        action: 'conection'
      }, 'Created new pool resource #%s', connection.id); // resource comes available

      connection.on('available', function () {
        _this5.logger.debug({
          tnx: 'connection',
          cid: connection.id,
          action: 'available'
        }, 'Connection #%s became available', connection.id);

        if (_this5._closed) {
          // if already closed run close() that will remove this connections from connections list
          _this5.close();
        } else {
          // check if there's anything else to send
          _this5._processMessages();
        }
      }); // resource is terminated with an error

      connection.once('error', function (err) {
        if (err.code !== 'EMAXLIMIT') {
          _this5.logger.error({
            err: err,
            tnx: 'pool',
            cid: connection.id
          }, 'Pool Error for #%s: %s', connection.id, err.message);
        } else {
          _this5.logger.debug({
            tnx: 'pool',
            cid: connection.id,
            action: 'maxlimit'
          }, 'Max messages limit exchausted for #%s', connection.id);
        }

        if (connection.queueEntry) {
          try {
            connection.queueEntry.callback(err);
          } catch (E) {
            _this5.logger.error({
              err: E,
              tnx: 'callback',
              cid: connection.id
            }, 'Callback error for #%s: %s', connection.id, E.message);
          }

          connection.queueEntry = false;
        } // remove the erroneus connection from connections list


        _this5._removeConnection(connection);

        _this5._continueProcessing();
      });
      connection.once('close', function () {
        _this5.logger.info({
          tnx: 'connection',
          cid: connection.id,
          action: 'closed'
        }, 'Connection #%s was closed', connection.id);

        _this5._removeConnection(connection);

        if (connection.queueEntry) {
          // If the connection closed when sending, add the message to the queue again
          // if max number of requeues is not reached yet
          // Note that we must wait a bit.. because the callback of the 'error' handler might be called
          // in the next event loop
          setTimeout(function () {
            if (connection.queueEntry) {
              if (_this5._shouldRequeuOnConnectionClose(connection.queueEntry)) {
                _this5._requeueEntryOnConnectionClose(connection);
              } else {
                _this5._failDeliveryOnConnectionClose(connection);
              }
            }

            _this5._continueProcessing();
          }, 50);
        } else {
          _this5._continueProcessing();
        }
      });

      this._connections.push(connection);

      return connection;
    }
  }, {
    key: "_shouldRequeuOnConnectionClose",
    value: function _shouldRequeuOnConnectionClose(queueEntry) {
      if (this.options.maxRequeues === undefined || this.options.maxRequeues < 0) {
        return true;
      }

      return queueEntry.requeueAttempts < this.options.maxRequeues;
    }
  }, {
    key: "_failDeliveryOnConnectionClose",
    value: function _failDeliveryOnConnectionClose(connection) {
      if (connection.queueEntry && connection.queueEntry.callback) {
        try {
          connection.queueEntry.callback(new Error('Reached maximum number of retries after connection was closed'));
        } catch (E) {
          this.logger.error({
            err: E,
            tnx: 'callback',
            messageId: connection.queueEntry.messageId,
            cid: connection.id
          }, 'Callback error for #%s: %s', connection.id, E.message);
        }

        connection.queueEntry = false;
      }
    }
  }, {
    key: "_requeueEntryOnConnectionClose",
    value: function _requeueEntryOnConnectionClose(connection) {
      connection.queueEntry.requeueAttempts = connection.queueEntry.requeueAttempts + 1;
      this.logger.debug({
        tnx: 'pool',
        cid: connection.id,
        messageId: connection.queueEntry.messageId,
        action: 'requeue'
      }, 'Re-queued message <%s> for #%s. Attempt: #%s', connection.queueEntry.messageId, connection.id, connection.queueEntry.requeueAttempts);

      this._queue.unshift(connection.queueEntry);

      connection.queueEntry = false;
    }
    /**
     * Continue to process message if the pool hasn't closed
     */

  }, {
    key: "_continueProcessing",
    value: function _continueProcessing() {
      var _this6 = this;

      if (this._closed) {
        this.close();
      } else {
        setTimeout(function () {
          return _this6._processMessages();
        }, 100);
      }
    }
    /**
     * Remove resource from pool
     *
     * @param {Object} connection The PoolResource to remove
     */

  }, {
    key: "_removeConnection",
    value: function _removeConnection(connection) {
      var index = this._connections.indexOf(connection);

      if (index !== -1) {
        this._connections.splice(index, 1);
      }
    }
    /**
     * Checks if connections have hit current rate limit and if so, queues the availability callback
     *
     * @param {Function} callback Callback function to run once rate limiter has been cleared
     */

  }, {
    key: "_checkRateLimit",
    value: function _checkRateLimit(callback) {
      var _this7 = this;

      if (!this._rateLimit.limit) {
        return callback();
      }

      var now = Date.now();

      if (this._rateLimit.counter < this._rateLimit.limit) {
        return callback();
      }

      this._rateLimit.waiting.push(callback);

      if (this._rateLimit.checkpoint <= now - this._rateLimit.delta) {
        return this._clearRateLimit();
      } else if (!this._rateLimit.timeout) {
        this._rateLimit.timeout = setTimeout(function () {
          return _this7._clearRateLimit();
        }, this._rateLimit.delta - (now - this._rateLimit.checkpoint));
        this._rateLimit.checkpoint = now;
      }
    }
    /**
     * Clears current rate limit limitation and runs paused callback
     */

  }, {
    key: "_clearRateLimit",
    value: function _clearRateLimit() {
      clearTimeout(this._rateLimit.timeout);
      this._rateLimit.timeout = null;
      this._rateLimit.counter = 0;
      this._rateLimit.checkpoint = false; // resume all paused connections

      while (this._rateLimit.waiting.length) {
        var cb = this._rateLimit.waiting.shift();

        setImmediate(cb);
      }
    }
    /**
     * Returns true if there are free slots in the queue
     */

  }, {
    key: "isIdle",
    value: function isIdle() {
      return this.idling;
    }
    /**
     * Verifies SMTP configuration
     *
     * @param {Function} callback Callback function
     */

  }, {
    key: "verify",
    value: function verify(callback) {
      var _this8 = this;

      var promise;

      if (!callback) {
        promise = new Promise(function (resolve, reject) {
          callback = shared.callbackPromise(resolve, reject);
        });
      }

      var auth = new PoolResource(this).auth;
      this.getSocket(this.options, function (err, socketOptions) {
        if (err) {
          return callback(err);
        }

        var options = _this8.options;

        if (socketOptions && socketOptions.connection) {
          _this8.logger.info({
            tnx: 'proxy',
            remoteAddress: socketOptions.connection.remoteAddress,
            remotePort: socketOptions.connection.remotePort,
            destHost: options.host || '',
            destPort: options.port || '',
            action: 'connected'
          }, 'Using proxied socket from %s:%s to %s:%s', socketOptions.connection.remoteAddress, socketOptions.connection.remotePort, options.host || '', options.port || '');

          options = shared.assign(false, options);
          Object.keys(socketOptions).forEach(function (key) {
            options[key] = socketOptions[key];
          });
        }

        var connection = new SMTPConnection(options);
        var returned = false;
        connection.once('error', function (err) {
          if (returned) {
            return;
          }

          returned = true;
          connection.close();
          return callback(err);
        });
        connection.once('end', function () {
          if (returned) {
            return;
          }

          returned = true;
          return callback(new Error('Connection closed'));
        });

        var finalize = function finalize() {
          if (returned) {
            return;
          }

          returned = true;
          connection.quit();
          return callback(null, true);
        };

        connection.connect(function () {
          if (returned) {
            return;
          }

          if (auth && (connection.allowsAuth || options.forceAuth)) {
            connection.login(auth, function (err) {
              if (returned) {
                return;
              }

              if (err) {
                returned = true;
                connection.close();
                return callback(err);
              }

              finalize();
            });
          } else {
            finalize();
          }
        });
      });
      return promise;
    }
  }]);

  return SMTPPool;
}(EventEmitter); // expose to the world


module.exports = SMTPPool;

/***/ }),
/* 84 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } Object.defineProperty(subClass, "prototype", { value: Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }), writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var SMTPConnection = __webpack_require__(25);

var assign = __webpack_require__(2).assign;

var XOAuth2 = __webpack_require__(45);

var EventEmitter = __webpack_require__(10);
/**
 * Creates an element for the pool
 *
 * @constructor
 * @param {Object} options SMTPPool instance
 */


var PoolResource = /*#__PURE__*/function (_EventEmitter) {
  _inherits(PoolResource, _EventEmitter);

  var _super = _createSuper(PoolResource);

  function PoolResource(pool) {
    var _this;

    _classCallCheck(this, PoolResource);

    _this = _super.call(this);
    _this.pool = pool;
    _this.options = pool.options;
    _this.logger = _this.pool.logger;

    if (_this.options.auth) {
      switch ((_this.options.auth.type || '').toString().toUpperCase()) {
        case 'OAUTH2':
          {
            var oauth2 = new XOAuth2(_this.options.auth, _this.logger);
            oauth2.provisionCallback = _this.pool.mailer && _this.pool.mailer.get('oauth2_provision_cb') || oauth2.provisionCallback;
            _this.auth = {
              type: 'OAUTH2',
              user: _this.options.auth.user,
              oauth2: oauth2,
              method: 'XOAUTH2'
            };
            oauth2.on('token', function (token) {
              return _this.pool.mailer.emit('token', token);
            });
            oauth2.on('error', function (err) {
              return _this.emit('error', err);
            });
            break;
          }

        default:
          if (!_this.options.auth.user && !_this.options.auth.pass) {
            break;
          }

          _this.auth = {
            type: (_this.options.auth.type || '').toString().toUpperCase() || 'LOGIN',
            user: _this.options.auth.user,
            credentials: {
              user: _this.options.auth.user || '',
              pass: _this.options.auth.pass,
              options: _this.options.auth.options
            },
            method: (_this.options.auth.method || '').trim().toUpperCase() || _this.options.authMethod || false
          };
      }
    }

    _this._connection = false;
    _this._connected = false;
    _this.messages = 0;
    _this.available = true;
    return _this;
  }
  /**
   * Initiates a connection to the SMTP server
   *
   * @param {Function} callback Callback function to run once the connection is established or failed
   */


  _createClass(PoolResource, [{
    key: "connect",
    value: function connect(callback) {
      var _this2 = this;

      this.pool.getSocket(this.options, function (err, socketOptions) {
        if (err) {
          return callback(err);
        }

        var returned = false;
        var options = _this2.options;

        if (socketOptions && socketOptions.connection) {
          _this2.logger.info({
            tnx: 'proxy',
            remoteAddress: socketOptions.connection.remoteAddress,
            remotePort: socketOptions.connection.remotePort,
            destHost: options.host || '',
            destPort: options.port || '',
            action: 'connected'
          }, 'Using proxied socket from %s:%s to %s:%s', socketOptions.connection.remoteAddress, socketOptions.connection.remotePort, options.host || '', options.port || '');

          options = assign(false, options);
          Object.keys(socketOptions).forEach(function (key) {
            options[key] = socketOptions[key];
          });
        }

        _this2.connection = new SMTPConnection(options);

        _this2.connection.once('error', function (err) {
          _this2.emit('error', err);

          if (returned) {
            return;
          }

          returned = true;
          return callback(err);
        });

        _this2.connection.once('end', function () {
          _this2.close();

          if (returned) {
            return;
          }

          returned = true;
          var timer = setTimeout(function () {
            if (returned) {
              return;
            } // still have not returned, this means we have an unexpected connection close


            var err = new Error('Unexpected socket close');

            if (_this2.connection && _this2.connection._socket && _this2.connection._socket.upgrading) {
              // starttls connection errors
              err.code = 'ETLS';
            }

            callback(err);
          }, 1000);

          try {
            timer.unref();
          } catch (E) {// Ignore. Happens on envs with non-node timer implementation
          }
        });

        _this2.connection.connect(function () {
          if (returned) {
            return;
          }

          if (_this2.auth && (_this2.connection.allowsAuth || options.forceAuth)) {
            _this2.connection.login(_this2.auth, function (err) {
              if (returned) {
                return;
              }

              returned = true;

              if (err) {
                _this2.connection.close();

                _this2.emit('error', err);

                return callback(err);
              }

              _this2._connected = true;
              callback(null, true);
            });
          } else {
            returned = true;
            _this2._connected = true;
            return callback(null, true);
          }
        });
      });
    }
    /**
     * Sends an e-mail to be sent using the selected settings
     *
     * @param {Object} mail Mail object
     * @param {Function} callback Callback function
     */

  }, {
    key: "send",
    value: function send(mail, callback) {
      var _this3 = this;

      if (!this._connected) {
        return this.connect(function (err) {
          if (err) {
            return callback(err);
          }

          return _this3.send(mail, callback);
        });
      }

      var envelope = mail.message.getEnvelope();
      var messageId = mail.message.messageId();
      var recipients = [].concat(envelope.to || []);

      if (recipients.length > 3) {
        recipients.push('...and ' + recipients.splice(2).length + ' more');
      }

      this.logger.info({
        tnx: 'send',
        messageId: messageId,
        cid: this.id
      }, 'Sending message %s using #%s to <%s>', messageId, this.id, recipients.join(', '));

      if (mail.data.dsn) {
        envelope.dsn = mail.data.dsn;
      }

      this.connection.send(envelope, mail.message.createReadStream(), function (err, info) {
        _this3.messages++;

        if (err) {
          _this3.connection.close();

          _this3.emit('error', err);

          return callback(err);
        }

        info.envelope = {
          from: envelope.from,
          to: envelope.to
        };
        info.messageId = messageId;
        setImmediate(function () {
          var err;

          if (_this3.messages >= _this3.options.maxMessages) {
            err = new Error('Resource exhausted');
            err.code = 'EMAXLIMIT';

            _this3.connection.close();

            _this3.emit('error', err);
          } else {
            _this3.pool._checkRateLimit(function () {
              _this3.available = true;

              _this3.emit('available');
            });
          }
        });
        callback(null, info);
      });
    }
    /**
     * Closes the connection
     */

  }, {
    key: "close",
    value: function close() {
      this._connected = false;

      if (this.auth && this.auth.oauth2) {
        this.auth.oauth2.removeAllListeners();
      }

      if (this.connection) {
        this.connection.close();
      }

      this.emit('close');
    }
  }]);

  return PoolResource;
}(EventEmitter);

module.exports = PoolResource;

/***/ }),
/* 85 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } Object.defineProperty(subClass, "prototype", { value: Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }), writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var stream = __webpack_require__(1);

var Transform = stream.Transform;
/**
 * Escapes dots in the beginning of lines. Ends the stream with <CR><LF>.<CR><LF>
 * Also makes sure that only <CR><LF> sequences are used for linebreaks
 *
 * @param {Object} options Stream options
 */

var DataStream = /*#__PURE__*/function (_Transform) {
  _inherits(DataStream, _Transform);

  var _super = _createSuper(DataStream);

  function DataStream(options) {
    var _this;

    _classCallCheck(this, DataStream);

    _this = _super.call(this, options); // init Transform

    _this.options = options || {};
    _this._curLine = '';
    _this.inByteCount = 0;
    _this.outByteCount = 0;
    _this.lastByte = false;
    return _this;
  }
  /**
   * Escapes dots
   */


  _createClass(DataStream, [{
    key: "_transform",
    value: function _transform(chunk, encoding, done) {
      var chunks = [];
      var chunklen = 0;
      var i,
          len,
          lastPos = 0;
      var buf;

      if (!chunk || !chunk.length) {
        return done();
      }

      if (typeof chunk === 'string') {
        chunk = Buffer.from(chunk);
      }

      this.inByteCount += chunk.length;

      for (i = 0, len = chunk.length; i < len; i++) {
        if (chunk[i] === 0x2e) {
          // .
          if (i && chunk[i - 1] === 0x0a || !i && (!this.lastByte || this.lastByte === 0x0a)) {
            buf = chunk.slice(lastPos, i + 1);
            chunks.push(buf);
            chunks.push(Buffer.from('.'));
            chunklen += buf.length + 1;
            lastPos = i + 1;
          }
        } else if (chunk[i] === 0x0a) {
          // .
          if (i && chunk[i - 1] !== 0x0d || !i && this.lastByte !== 0x0d) {
            if (i > lastPos) {
              buf = chunk.slice(lastPos, i);
              chunks.push(buf);
              chunklen += buf.length + 2;
            } else {
              chunklen += 2;
            }

            chunks.push(Buffer.from('\r\n'));
            lastPos = i + 1;
          }
        }
      }

      if (chunklen) {
        // add last piece
        if (lastPos < chunk.length) {
          buf = chunk.slice(lastPos);
          chunks.push(buf);
          chunklen += buf.length;
        }

        this.outByteCount += chunklen;
        this.push(Buffer.concat(chunks, chunklen));
      } else {
        this.outByteCount += chunk.length;
        this.push(chunk);
      }

      this.lastByte = chunk[chunk.length - 1];
      done();
    }
    /**
     * Finalizes the stream with a dot on a single line
     */

  }, {
    key: "_flush",
    value: function _flush(done) {
      var buf;

      if (this.lastByte === 0x0a) {
        buf = Buffer.from('.\r\n');
      } else if (this.lastByte === 0x0d) {
        buf = Buffer.from('\n.\r\n');
      } else {
        buf = Buffer.from('\r\n.\r\n');
      }

      this.outByteCount += buf.length;
      this.push(buf);
      done();
    }
  }]);

  return DataStream;
}(Transform);

module.exports = DataStream;

/***/ }),
/* 86 */
/***/ (function(module) {

module.exports = JSON.parse("{\"126\":{\"host\":\"smtp.126.com\",\"port\":465,\"secure\":true},\"163\":{\"host\":\"smtp.163.com\",\"port\":465,\"secure\":true},\"1und1\":{\"host\":\"smtp.1und1.de\",\"port\":465,\"secure\":true,\"authMethod\":\"LOGIN\"},\"AOL\":{\"domains\":[\"aol.com\"],\"host\":\"smtp.aol.com\",\"port\":587},\"DebugMail\":{\"host\":\"debugmail.io\",\"port\":25},\"DynectEmail\":{\"aliases\":[\"Dynect\"],\"host\":\"smtp.dynect.net\",\"port\":25},\"Ethereal\":{\"aliases\":[\"ethereal.email\"],\"host\":\"smtp.ethereal.email\",\"port\":587},\"FastMail\":{\"domains\":[\"fastmail.fm\"],\"host\":\"smtp.fastmail.com\",\"port\":465,\"secure\":true},\"GandiMail\":{\"aliases\":[\"Gandi\",\"Gandi Mail\"],\"host\":\"mail.gandi.net\",\"port\":587},\"Gmail\":{\"aliases\":[\"Google Mail\"],\"domains\":[\"gmail.com\",\"googlemail.com\"],\"host\":\"smtp.gmail.com\",\"port\":465,\"secure\":true},\"Godaddy\":{\"host\":\"smtpout.secureserver.net\",\"port\":25},\"GodaddyAsia\":{\"host\":\"smtp.asia.secureserver.net\",\"port\":25},\"GodaddyEurope\":{\"host\":\"smtp.europe.secureserver.net\",\"port\":25},\"hot.ee\":{\"host\":\"mail.hot.ee\"},\"Hotmail\":{\"aliases\":[\"Outlook\",\"Outlook.com\",\"Hotmail.com\"],\"domains\":[\"hotmail.com\",\"outlook.com\"],\"host\":\"smtp-mail.outlook.com\",\"port\":587},\"iCloud\":{\"aliases\":[\"Me\",\"Mac\"],\"domains\":[\"me.com\",\"mac.com\"],\"host\":\"smtp.mail.me.com\",\"port\":587},\"Infomaniak\":{\"host\":\"mail.infomaniak.com\",\"domains\":[\"ik.me\",\"ikmail.com\",\"etik.com\"],\"port\":587},\"mail.ee\":{\"host\":\"smtp.mail.ee\"},\"Mail.ru\":{\"host\":\"smtp.mail.ru\",\"port\":465,\"secure\":true},\"Maildev\":{\"port\":1025,\"ignoreTLS\":true},\"Mailgun\":{\"host\":\"smtp.mailgun.org\",\"port\":465,\"secure\":true},\"Mailjet\":{\"host\":\"in.mailjet.com\",\"port\":587},\"Mailosaur\":{\"host\":\"mailosaur.io\",\"port\":25},\"Mailtrap\":{\"host\":\"smtp.mailtrap.io\",\"port\":2525},\"Mandrill\":{\"host\":\"smtp.mandrillapp.com\",\"port\":587},\"Naver\":{\"host\":\"smtp.naver.com\",\"port\":587},\"One\":{\"host\":\"send.one.com\",\"port\":465,\"secure\":true},\"OpenMailBox\":{\"aliases\":[\"OMB\",\"openmailbox.org\"],\"host\":\"smtp.openmailbox.org\",\"port\":465,\"secure\":true},\"Outlook365\":{\"host\":\"smtp.office365.com\",\"port\":587,\"secure\":false},\"OhMySMTP\":{\"host\":\"smtp.ohmysmtp.com\",\"port\":587,\"secure\":false},\"Postmark\":{\"aliases\":[\"PostmarkApp\"],\"host\":\"smtp.postmarkapp.com\",\"port\":2525},\"qiye.aliyun\":{\"host\":\"smtp.mxhichina.com\",\"port\":\"465\",\"secure\":true},\"QQ\":{\"domains\":[\"qq.com\"],\"host\":\"smtp.qq.com\",\"port\":465,\"secure\":true},\"QQex\":{\"aliases\":[\"QQ Enterprise\"],\"domains\":[\"exmail.qq.com\"],\"host\":\"smtp.exmail.qq.com\",\"port\":465,\"secure\":true},\"SendCloud\":{\"host\":\"smtpcloud.sohu.com\",\"port\":25},\"SendGrid\":{\"host\":\"smtp.sendgrid.net\",\"port\":587},\"SendinBlue\":{\"host\":\"smtp-relay.sendinblue.com\",\"port\":587},\"SendPulse\":{\"host\":\"smtp-pulse.com\",\"port\":465,\"secure\":true},\"SES\":{\"host\":\"email-smtp.us-east-1.amazonaws.com\",\"port\":465,\"secure\":true},\"SES-US-EAST-1\":{\"host\":\"email-smtp.us-east-1.amazonaws.com\",\"port\":465,\"secure\":true},\"SES-US-WEST-2\":{\"host\":\"email-smtp.us-west-2.amazonaws.com\",\"port\":465,\"secure\":true},\"SES-EU-WEST-1\":{\"host\":\"email-smtp.eu-west-1.amazonaws.com\",\"port\":465,\"secure\":true},\"Sparkpost\":{\"aliases\":[\"SparkPost\",\"SparkPost Mail\"],\"domains\":[\"sparkpost.com\"],\"host\":\"smtp.sparkpostmail.com\",\"port\":587,\"secure\":false},\"Tipimail\":{\"host\":\"smtp.tipimail.com\",\"port\":587},\"Yahoo\":{\"domains\":[\"yahoo.com\"],\"host\":\"smtp.mail.yahoo.com\",\"port\":465,\"secure\":true},\"Yandex\":{\"domains\":[\"yandex.ru\"],\"host\":\"smtp.yandex.ru\",\"port\":465,\"secure\":true},\"Zoho\":{\"host\":\"smtp.zoho.com\",\"port\":465,\"secure\":true,\"authMethod\":\"LOGIN\"}}");

/***/ }),
/* 87 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } Object.defineProperty(subClass, "prototype", { value: Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }), writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var EventEmitter = __webpack_require__(10);

var SMTPConnection = __webpack_require__(25);

var wellKnown = __webpack_require__(46);

var shared = __webpack_require__(2);

var XOAuth2 = __webpack_require__(45);

var packageData = __webpack_require__(3);
/**
 * Creates a SMTP transport object for Nodemailer
 *
 * @constructor
 * @param {Object} options Connection options
 */


var SMTPTransport = /*#__PURE__*/function (_EventEmitter) {
  _inherits(SMTPTransport, _EventEmitter);

  var _super = _createSuper(SMTPTransport);

  function SMTPTransport(options) {
    var _this;

    _classCallCheck(this, SMTPTransport);

    _this = _super.call(this);
    options = options || {};

    if (typeof options === 'string') {
      options = {
        url: options
      };
    }

    var urlData;
    var service = options.service;

    if (typeof options.getSocket === 'function') {
      _this.getSocket = options.getSocket;
    }

    if (options.url) {
      urlData = shared.parseConnectionUrl(options.url);
      service = service || urlData.service;
    }

    _this.options = shared.assign(false, // create new object
    options, // regular options
    urlData, // url options
    service && wellKnown(service) // wellknown options
    );
    _this.logger = shared.getLogger(_this.options, {
      component: _this.options.component || 'smtp-transport'
    }); // temporary object

    var connection = new SMTPConnection(_this.options);
    _this.name = 'SMTP';
    _this.version = packageData.version + '[client:' + connection.version + ']';

    if (_this.options.auth) {
      _this.auth = _this.getAuth({});
    }

    return _this;
  }
  /**
   * Placeholder function for creating proxy sockets. This method immediatelly returns
   * without a socket
   *
   * @param {Object} options Connection options
   * @param {Function} callback Callback function to run with the socket keys
   */


  _createClass(SMTPTransport, [{
    key: "getSocket",
    value: function getSocket(options, callback) {
      // return immediatelly
      return setImmediate(function () {
        return callback(null, false);
      });
    }
  }, {
    key: "getAuth",
    value: function getAuth(authOpts) {
      var _this2 = this;

      if (!authOpts) {
        return this.auth;
      }

      var hasAuth = false;
      var authData = {};

      if (this.options.auth && _typeof(this.options.auth) === 'object') {
        Object.keys(this.options.auth).forEach(function (key) {
          hasAuth = true;
          authData[key] = _this2.options.auth[key];
        });
      }

      if (authOpts && _typeof(authOpts) === 'object') {
        Object.keys(authOpts).forEach(function (key) {
          hasAuth = true;
          authData[key] = authOpts[key];
        });
      }

      if (!hasAuth) {
        return false;
      }

      switch ((authData.type || '').toString().toUpperCase()) {
        case 'OAUTH2':
          {
            if (!authData.service && !authData.user) {
              return false;
            }

            var oauth2 = new XOAuth2(authData, this.logger);
            oauth2.provisionCallback = this.mailer && this.mailer.get('oauth2_provision_cb') || oauth2.provisionCallback;
            oauth2.on('token', function (token) {
              return _this2.mailer.emit('token', token);
            });
            oauth2.on('error', function (err) {
              return _this2.emit('error', err);
            });
            return {
              type: 'OAUTH2',
              user: authData.user,
              oauth2: oauth2,
              method: 'XOAUTH2'
            };
          }

        default:
          return {
            type: (authData.type || '').toString().toUpperCase() || 'LOGIN',
            user: authData.user,
            credentials: {
              user: authData.user || '',
              pass: authData.pass,
              options: authData.options
            },
            method: (authData.method || '').trim().toUpperCase() || this.options.authMethod || false
          };
      }
    }
    /**
     * Sends an e-mail using the selected settings
     *
     * @param {Object} mail Mail object
     * @param {Function} callback Callback function
     */

  }, {
    key: "send",
    value: function send(mail, callback) {
      var _this3 = this;

      this.getSocket(this.options, function (err, socketOptions) {
        if (err) {
          return callback(err);
        }

        var returned = false;
        var options = _this3.options;

        if (socketOptions && socketOptions.connection) {
          _this3.logger.info({
            tnx: 'proxy',
            remoteAddress: socketOptions.connection.remoteAddress,
            remotePort: socketOptions.connection.remotePort,
            destHost: options.host || '',
            destPort: options.port || '',
            action: 'connected'
          }, 'Using proxied socket from %s:%s to %s:%s', socketOptions.connection.remoteAddress, socketOptions.connection.remotePort, options.host || '', options.port || ''); // only copy options if we need to modify it


          options = shared.assign(false, options);
          Object.keys(socketOptions).forEach(function (key) {
            options[key] = socketOptions[key];
          });
        }

        var connection = new SMTPConnection(options);
        connection.once('error', function (err) {
          if (returned) {
            return;
          }

          returned = true;
          connection.close();
          return callback(err);
        });
        connection.once('end', function () {
          if (returned) {
            return;
          }

          var timer = setTimeout(function () {
            if (returned) {
              return;
            }

            returned = true; // still have not returned, this means we have an unexpected connection close

            var err = new Error('Unexpected socket close');

            if (connection && connection._socket && connection._socket.upgrading) {
              // starttls connection errors
              err.code = 'ETLS';
            }

            callback(err);
          }, 1000);

          try {
            timer.unref();
          } catch (E) {// Ignore. Happens on envs with non-node timer implementation
          }
        });

        var sendMessage = function sendMessage() {
          var envelope = mail.message.getEnvelope();
          var messageId = mail.message.messageId();
          var recipients = [].concat(envelope.to || []);

          if (recipients.length > 3) {
            recipients.push('...and ' + recipients.splice(2).length + ' more');
          }

          if (mail.data.dsn) {
            envelope.dsn = mail.data.dsn;
          }

          _this3.logger.info({
            tnx: 'send',
            messageId: messageId
          }, 'Sending message %s to <%s>', messageId, recipients.join(', '));

          connection.send(envelope, mail.message.createReadStream(), function (err, info) {
            returned = true;
            connection.close();

            if (err) {
              _this3.logger.error({
                err: err,
                tnx: 'send'
              }, 'Send error for %s: %s', messageId, err.message);

              return callback(err);
            }

            info.envelope = {
              from: envelope.from,
              to: envelope.to
            };
            info.messageId = messageId;

            try {
              return callback(null, info);
            } catch (E) {
              _this3.logger.error({
                err: E,
                tnx: 'callback'
              }, 'Callback error for %s: %s', messageId, E.message);
            }
          });
        };

        connection.connect(function () {
          if (returned) {
            return;
          }

          var auth = _this3.getAuth(mail.data.auth);

          if (auth && (connection.allowsAuth || options.forceAuth)) {
            connection.login(auth, function (err) {
              if (auth && auth !== _this3.auth && auth.oauth2) {
                auth.oauth2.removeAllListeners();
              }

              if (returned) {
                return;
              }

              if (err) {
                returned = true;
                connection.close();
                return callback(err);
              }

              sendMessage();
            });
          } else {
            sendMessage();
          }
        });
      });
    }
    /**
     * Verifies SMTP configuration
     *
     * @param {Function} callback Callback function
     */

  }, {
    key: "verify",
    value: function verify(callback) {
      var _this4 = this;

      var promise;

      if (!callback) {
        promise = new Promise(function (resolve, reject) {
          callback = shared.callbackPromise(resolve, reject);
        });
      }

      this.getSocket(this.options, function (err, socketOptions) {
        if (err) {
          return callback(err);
        }

        var options = _this4.options;

        if (socketOptions && socketOptions.connection) {
          _this4.logger.info({
            tnx: 'proxy',
            remoteAddress: socketOptions.connection.remoteAddress,
            remotePort: socketOptions.connection.remotePort,
            destHost: options.host || '',
            destPort: options.port || '',
            action: 'connected'
          }, 'Using proxied socket from %s:%s to %s:%s', socketOptions.connection.remoteAddress, socketOptions.connection.remotePort, options.host || '', options.port || '');

          options = shared.assign(false, options);
          Object.keys(socketOptions).forEach(function (key) {
            options[key] = socketOptions[key];
          });
        }

        var connection = new SMTPConnection(options);
        var returned = false;
        connection.once('error', function (err) {
          if (returned) {
            return;
          }

          returned = true;
          connection.close();
          return callback(err);
        });
        connection.once('end', function () {
          if (returned) {
            return;
          }

          returned = true;
          return callback(new Error('Connection closed'));
        });

        var finalize = function finalize() {
          if (returned) {
            return;
          }

          returned = true;
          connection.quit();
          return callback(null, true);
        };

        connection.connect(function () {
          if (returned) {
            return;
          }

          var authData = _this4.getAuth({});

          if (authData && (connection.allowsAuth || options.forceAuth)) {
            connection.login(authData, function (err) {
              if (returned) {
                return;
              }

              if (err) {
                returned = true;
                connection.close();
                return callback(err);
              }

              finalize();
            });
          } else {
            finalize();
          }
        });
      });
      return promise;
    }
    /**
     * Releases resources
     */

  }, {
    key: "close",
    value: function close() {
      if (this.auth && this.auth.oauth2) {
        this.auth.oauth2.removeAllListeners();
      }

      this.emit('close');
    }
  }]);

  return SMTPTransport;
}(EventEmitter); // expose to the world


module.exports = SMTPTransport;

/***/ }),
/* 88 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

var spawn = __webpack_require__(89).spawn;

var packageData = __webpack_require__(3);

var shared = __webpack_require__(2);
/**
 * Generates a Transport object for Sendmail
 *
 * Possible options can be the following:
 *
 *  * **path** optional path to sendmail binary
 *  * **newline** either 'windows' or 'unix'
 *  * **args** an array of arguments for the sendmail binary
 *
 * @constructor
 * @param {Object} optional config parameter for Sendmail
 */


var SendmailTransport = /*#__PURE__*/function () {
  function SendmailTransport(options) {
    _classCallCheck(this, SendmailTransport);

    options = options || {}; // use a reference to spawn for mocking purposes

    this._spawn = spawn;
    this.options = options || {};
    this.name = 'Sendmail';
    this.version = packageData.version;
    this.path = 'sendmail';
    this.args = false;
    this.winbreak = false;
    this.logger = shared.getLogger(this.options, {
      component: this.options.component || 'sendmail'
    });

    if (options) {
      if (typeof options === 'string') {
        this.path = options;
      } else if (_typeof(options) === 'object') {
        if (options.path) {
          this.path = options.path;
        }

        if (Array.isArray(options.args)) {
          this.args = options.args;
        }

        this.winbreak = ['win', 'windows', 'dos', '\r\n'].includes((options.newline || '').toString().toLowerCase());
      }
    }
  }
  /**
   * <p>Compiles a mailcomposer message and forwards it to handler that sends it.</p>
   *
   * @param {Object} emailMessage MailComposer object
   * @param {Function} callback Callback function to run when the sending is completed
   */


  _createClass(SendmailTransport, [{
    key: "send",
    value: function send(mail, done) {
      var _this = this;

      // Sendmail strips this header line by itself
      mail.message.keepBcc = true;
      var envelope = mail.data.envelope || mail.message.getEnvelope();
      var messageId = mail.message.messageId();
      var args;
      var sendmail;
      var returned;
      var hasInvalidAddresses = [].concat(envelope.from || []).concat(envelope.to || []).some(function (addr) {
        return /^-/.test(addr);
      });

      if (hasInvalidAddresses) {
        return done(new Error('Can not send mail. Invalid envelope addresses.'));
      }

      if (this.args) {
        // force -i to keep single dots
        args = ['-i'].concat(this.args).concat(envelope.to);
      } else {
        args = ['-i'].concat(envelope.from ? ['-f', envelope.from] : []).concat(envelope.to);
      }

      var callback = function callback(err) {
        if (returned) {
          // ignore any additional responses, already done
          return;
        }

        returned = true;

        if (typeof done === 'function') {
          if (err) {
            return done(err);
          } else {
            return done(null, {
              envelope: mail.data.envelope || mail.message.getEnvelope(),
              messageId: messageId,
              response: 'Messages queued for delivery'
            });
          }
        }
      };

      try {
        sendmail = this._spawn(this.path, args);
      } catch (E) {
        this.logger.error({
          err: E,
          tnx: 'spawn',
          messageId: messageId
        }, 'Error occurred while spawning sendmail. %s', E.message);
        return callback(E);
      }

      if (sendmail) {
        sendmail.on('error', function (err) {
          _this.logger.error({
            err: err,
            tnx: 'spawn',
            messageId: messageId
          }, 'Error occurred when sending message %s. %s', messageId, err.message);

          callback(err);
        });
        sendmail.once('exit', function (code) {
          if (!code) {
            return callback();
          }

          var err;

          if (code === 127) {
            err = new Error('Sendmail command not found, process exited with code ' + code);
          } else {
            err = new Error('Sendmail exited with code ' + code);
          }

          _this.logger.error({
            err: err,
            tnx: 'stdin',
            messageId: messageId
          }, 'Error sending message %s to sendmail. %s', messageId, err.message);

          callback(err);
        });
        sendmail.once('close', callback);
        sendmail.stdin.on('error', function (err) {
          _this.logger.error({
            err: err,
            tnx: 'stdin',
            messageId: messageId
          }, 'Error occurred when piping message %s to sendmail. %s', messageId, err.message);

          callback(err);
        });
        var recipients = [].concat(envelope.to || []);

        if (recipients.length > 3) {
          recipients.push('...and ' + recipients.splice(2).length + ' more');
        }

        this.logger.info({
          tnx: 'send',
          messageId: messageId
        }, 'Sending message %s to <%s>', messageId, recipients.join(', '));
        var sourceStream = mail.message.createReadStream();
        sourceStream.once('error', function (err) {
          _this.logger.error({
            err: err,
            tnx: 'stdin',
            messageId: messageId
          }, 'Error occurred when generating message %s. %s', messageId, err.message);

          sendmail.kill('SIGINT'); // do not deliver the message

          callback(err);
        });
        sourceStream.pipe(sendmail.stdin);
      } else {
        return callback(new Error('sendmail was not found'));
      }
    }
  }]);

  return SendmailTransport;
}();

module.exports = SendmailTransport;

/***/ }),
/* 89 */
/***/ (function(module, exports) {

module.exports = require("child_process");

/***/ }),
/* 90 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

var packageData = __webpack_require__(3);

var shared = __webpack_require__(2);
/**
 * Generates a Transport object for streaming
 *
 * Possible options can be the following:
 *
 *  * **buffer** if true, then returns the message as a Buffer object instead of a stream
 *  * **newline** either 'windows' or 'unix'
 *
 * @constructor
 * @param {Object} optional config parameter
 */


var StreamTransport = /*#__PURE__*/function () {
  function StreamTransport(options) {
    _classCallCheck(this, StreamTransport);

    options = options || {};
    this.options = options || {};
    this.name = 'StreamTransport';
    this.version = packageData.version;
    this.logger = shared.getLogger(this.options, {
      component: this.options.component || 'stream-transport'
    });
    this.winbreak = ['win', 'windows', 'dos', '\r\n'].includes((options.newline || '').toString().toLowerCase());
  }
  /**
   * Compiles a mailcomposer message and forwards it to handler that sends it
   *
   * @param {Object} emailMessage MailComposer object
   * @param {Function} callback Callback function to run when the sending is completed
   */


  _createClass(StreamTransport, [{
    key: "send",
    value: function send(mail, done) {
      var _this = this;

      // We probably need this in the output
      mail.message.keepBcc = true;
      var envelope = mail.data.envelope || mail.message.getEnvelope();
      var messageId = mail.message.messageId();
      var recipients = [].concat(envelope.to || []);

      if (recipients.length > 3) {
        recipients.push('...and ' + recipients.splice(2).length + ' more');
      }

      this.logger.info({
        tnx: 'send',
        messageId: messageId
      }, 'Sending message %s to <%s> using %s line breaks', messageId, recipients.join(', '), this.winbreak ? '<CR><LF>' : '<LF>');
      setImmediate(function () {
        var stream;

        try {
          stream = mail.message.createReadStream();
        } catch (E) {
          _this.logger.error({
            err: E,
            tnx: 'send',
            messageId: messageId
          }, 'Creating send stream failed for %s. %s', messageId, E.message);

          return done(E);
        }

        if (!_this.options.buffer) {
          stream.once('error', function (err) {
            _this.logger.error({
              err: err,
              tnx: 'send',
              messageId: messageId
            }, 'Failed creating message for %s. %s', messageId, err.message);
          });
          return done(null, {
            envelope: mail.data.envelope || mail.message.getEnvelope(),
            messageId: messageId,
            message: stream
          });
        }

        var chunks = [];
        var chunklen = 0;
        stream.on('readable', function () {
          var chunk;

          while ((chunk = stream.read()) !== null) {
            chunks.push(chunk);
            chunklen += chunk.length;
          }
        });
        stream.once('error', function (err) {
          _this.logger.error({
            err: err,
            tnx: 'send',
            messageId: messageId
          }, 'Failed creating message for %s. %s', messageId, err.message);

          return done(err);
        });
        stream.on('end', function () {
          return done(null, {
            envelope: mail.data.envelope || mail.message.getEnvelope(),
            messageId: messageId,
            message: Buffer.concat(chunks, chunklen)
          });
        });
      });
    }
  }]);

  return StreamTransport;
}();

module.exports = StreamTransport;

/***/ }),
/* 91 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

var packageData = __webpack_require__(3);

var shared = __webpack_require__(2);
/**
 * Generates a Transport object to generate JSON output
 *
 * @constructor
 * @param {Object} optional config parameter
 */


var JSONTransport = /*#__PURE__*/function () {
  function JSONTransport(options) {
    _classCallCheck(this, JSONTransport);

    options = options || {};
    this.options = options || {};
    this.name = 'JSONTransport';
    this.version = packageData.version;
    this.logger = shared.getLogger(this.options, {
      component: this.options.component || 'json-transport'
    });
  }
  /**
   * <p>Compiles a mailcomposer message and forwards it to handler that sends it.</p>
   *
   * @param {Object} emailMessage MailComposer object
   * @param {Function} callback Callback function to run when the sending is completed
   */


  _createClass(JSONTransport, [{
    key: "send",
    value: function send(mail, done) {
      var _this = this;

      // Sendmail strips this header line by itself
      mail.message.keepBcc = true;
      var envelope = mail.data.envelope || mail.message.getEnvelope();
      var messageId = mail.message.messageId();
      var recipients = [].concat(envelope.to || []);

      if (recipients.length > 3) {
        recipients.push('...and ' + recipients.splice(2).length + ' more');
      }

      this.logger.info({
        tnx: 'send',
        messageId: messageId
      }, 'Composing JSON structure of %s to <%s>', messageId, recipients.join(', '));
      setImmediate(function () {
        mail.normalize(function (err, data) {
          if (err) {
            _this.logger.error({
              err: err,
              tnx: 'send',
              messageId: messageId
            }, 'Failed building JSON structure for %s. %s', messageId, err.message);

            return done(err);
          }

          delete data.envelope;
          delete data.normalizedHeaders;
          return done(null, {
            envelope: envelope,
            messageId: messageId,
            message: _this.options.skipEncoding ? data : JSON.stringify(data)
          });
        });
      });
    }
  }]);

  return JSONTransport;
}();

module.exports = JSONTransport;

/***/ }),
/* 92 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } Object.defineProperty(subClass, "prototype", { value: Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }), writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var EventEmitter = __webpack_require__(10);

var packageData = __webpack_require__(3);

var shared = __webpack_require__(2);

var LeWindows = __webpack_require__(43);
/**
 * Generates a Transport object for AWS SES
 *
 * Possible options can be the following:
 *
 *  * **sendingRate** optional Number specifying how many messages per second should be delivered to SES
 *  * **maxConnections** optional Number specifying max number of parallel connections to SES
 *
 * @constructor
 * @param {Object} optional config parameter
 */


var SESTransport = /*#__PURE__*/function (_EventEmitter) {
  _inherits(SESTransport, _EventEmitter);

  var _super = _createSuper(SESTransport);

  function SESTransport(options) {
    var _this;

    _classCallCheck(this, SESTransport);

    _this = _super.call(this);
    options = options || {};
    _this.options = options || {};
    _this.ses = _this.options.SES;
    _this.name = 'SESTransport';
    _this.version = packageData.version;
    _this.logger = shared.getLogger(_this.options, {
      component: _this.options.component || 'ses-transport'
    }); // parallel sending connections

    _this.maxConnections = Number(_this.options.maxConnections) || Infinity;
    _this.connections = 0; // max messages per second

    _this.sendingRate = Number(_this.options.sendingRate) || Infinity;
    _this.sendingRateTTL = null;
    _this.rateInterval = 1000; // milliseconds

    _this.rateMessages = [];
    _this.pending = [];
    _this.idling = true;
    setImmediate(function () {
      if (_this.idling) {
        _this.emit('idle');
      }
    });
    return _this;
  }
  /**
   * Schedules a sending of a message
   *
   * @param {Object} emailMessage MailComposer object
   * @param {Function} callback Callback function to run when the sending is completed
   */


  _createClass(SESTransport, [{
    key: "send",
    value: function send(mail, callback) {
      var _this2 = this;

      if (this.connections >= this.maxConnections) {
        this.idling = false;
        return this.pending.push({
          mail: mail,
          callback: callback
        });
      }

      if (!this._checkSendingRate()) {
        this.idling = false;
        return this.pending.push({
          mail: mail,
          callback: callback
        });
      }

      this._send(mail, function () {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        setImmediate(function () {
          return callback.apply(void 0, args);
        });

        _this2._sent();
      });
    }
  }, {
    key: "_checkRatedQueue",
    value: function _checkRatedQueue() {
      var _this3 = this;

      if (this.connections >= this.maxConnections || !this._checkSendingRate()) {
        return;
      }

      if (!this.pending.length) {
        if (!this.idling) {
          this.idling = true;
          this.emit('idle');
        }

        return;
      }

      var next = this.pending.shift();

      this._send(next.mail, function () {
        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }

        setImmediate(function () {
          return next.callback.apply(next, args);
        });

        _this3._sent();
      });
    }
  }, {
    key: "_checkSendingRate",
    value: function _checkSendingRate() {
      var _this4 = this;

      clearTimeout(this.sendingRateTTL);
      var now = Date.now();
      var oldest = false; // delete older messages

      for (var i = this.rateMessages.length - 1; i >= 0; i--) {
        if (this.rateMessages[i].ts >= now - this.rateInterval && (!oldest || this.rateMessages[i].ts < oldest)) {
          oldest = this.rateMessages[i].ts;
        }

        if (this.rateMessages[i].ts < now - this.rateInterval && !this.rateMessages[i].pending) {
          this.rateMessages.splice(i, 1);
        }
      }

      if (this.rateMessages.length < this.sendingRate) {
        return true;
      }

      var delay = Math.max(oldest + 1001, now + 20);
      this.sendingRateTTL = setTimeout(function () {
        return _this4._checkRatedQueue();
      }, now - delay);

      try {
        this.sendingRateTTL.unref();
      } catch (E) {// Ignore. Happens on envs with non-node timer implementation
      }

      return false;
    }
  }, {
    key: "_sent",
    value: function _sent() {
      this.connections--;

      this._checkRatedQueue();
    }
    /**
     * Returns true if there are free slots in the queue
     */

  }, {
    key: "isIdle",
    value: function isIdle() {
      return this.idling;
    }
    /**
     * Compiles a mailcomposer message and forwards it to SES
     *
     * @param {Object} emailMessage MailComposer object
     * @param {Function} callback Callback function to run when the sending is completed
     */

  }, {
    key: "_send",
    value: function _send(mail, callback) {
      var _this5 = this;

      var statObject = {
        ts: Date.now(),
        pending: true
      };
      this.connections++;
      this.rateMessages.push(statObject);
      var envelope = mail.data.envelope || mail.message.getEnvelope();
      var messageId = mail.message.messageId();
      var recipients = [].concat(envelope.to || []);

      if (recipients.length > 3) {
        recipients.push('...and ' + recipients.splice(2).length + ' more');
      }

      this.logger.info({
        tnx: 'send',
        messageId: messageId
      }, 'Sending message %s to <%s>', messageId, recipients.join(', '));

      var getRawMessage = function getRawMessage(next) {
        // do not use Message-ID and Date in DKIM signature
        if (!mail.data._dkim) {
          mail.data._dkim = {};
        }

        if (mail.data._dkim.skipFields && typeof mail.data._dkim.skipFields === 'string') {
          mail.data._dkim.skipFields += ':date:message-id';
        } else {
          mail.data._dkim.skipFields = 'date:message-id';
        }

        var sourceStream = mail.message.createReadStream();
        var stream = sourceStream.pipe(new LeWindows());
        var chunks = [];
        var chunklen = 0;
        stream.on('readable', function () {
          var chunk;

          while ((chunk = stream.read()) !== null) {
            chunks.push(chunk);
            chunklen += chunk.length;
          }
        });
        sourceStream.once('error', function (err) {
          return stream.emit('error', err);
        });
        stream.once('error', function (err) {
          next(err);
        });
        stream.once('end', function () {
          return next(null, Buffer.concat(chunks, chunklen));
        });
      };

      setImmediate(function () {
        return getRawMessage(function (err, raw) {
          if (err) {
            _this5.logger.error({
              err: err,
              tnx: 'send',
              messageId: messageId
            }, 'Failed creating message for %s. %s', messageId, err.message);

            statObject.pending = false;
            return callback(err);
          }

          var sesMessage = {
            RawMessage: {
              // required
              Data: raw // required

            },
            Source: envelope.from,
            Destinations: envelope.to
          };
          Object.keys(mail.data.ses || {}).forEach(function (key) {
            sesMessage[key] = mail.data.ses[key];
          });
          var ses = (_this5.ses.aws ? _this5.ses.ses : _this5.ses) || {};
          var aws = _this5.ses.aws || {};

          var getRegion = function getRegion(cb) {
            if (ses.config && typeof ses.config.region === 'function') {
              // promise
              return ses.config.region().then(function (region) {
                return cb(null, region);
              })["catch"](function (err) {
                return cb(err);
              });
            }

            return cb(null, ses.config && ses.config.region || 'us-east-1');
          };

          getRegion(function (err, region) {
            if (err || !region) {
              region = 'us-east-1';
            }

            var sendPromise;

            if (typeof ses.send === 'function' && aws.SendRawEmailCommand) {
              // v3 API
              sendPromise = ses.send(new aws.SendRawEmailCommand(sesMessage));
            } else {
              // v2 API
              sendPromise = ses.sendRawEmail(sesMessage).promise();
            }

            sendPromise.then(function (data) {
              if (region === 'us-east-1') {
                region = 'email';
              }

              statObject.pending = false;
              callback(null, {
                envelope: {
                  from: envelope.from,
                  to: envelope.to
                },
                messageId: '<' + data.MessageId + (!/@/.test(data.MessageId) ? '@' + region + '.amazonses.com' : '') + '>',
                response: data.MessageId,
                raw: raw
              });
            })["catch"](function (err) {
              _this5.logger.error({
                err: err,
                tnx: 'send'
              }, 'Send error for %s: %s', messageId, err.message);

              statObject.pending = false;
              callback(err);
            });
          });
        });
      });
    }
    /**
     * Verifies SES configuration
     *
     * @param {Function} callback Callback function
     */

  }, {
    key: "verify",
    value: function verify(callback) {
      var promise;
      var ses = (this.ses.aws ? this.ses.ses : this.ses) || {};
      var aws = this.ses.aws || {};
      var sesMessage = {
        RawMessage: {
          // required
          Data: 'From: invalid@invalid\r\nTo: invalid@invalid\r\n Subject: Invalid\r\n\r\nInvalid'
        },
        Source: 'invalid@invalid',
        Destinations: ['invalid@invalid']
      };

      if (!callback) {
        promise = new Promise(function (resolve, reject) {
          callback = shared.callbackPromise(resolve, reject);
        });
      }

      var cb = function cb(err) {
        if (err && (err.code || err.Code) !== 'InvalidParameterValue') {
          return callback(err);
        }

        return callback(null, true);
      };

      if (typeof ses.send === 'function' && aws.SendRawEmailCommand) {
        // v3 API
        sesMessage.RawMessage.Data = Buffer.from(sesMessage.RawMessage.Data);
        ses.send(new aws.SendRawEmailCommand(sesMessage), cb);
      } else {
        // v2 API
        ses.sendRawEmail(sesMessage, cb);
      }

      return promise;
    }
  }]);

  return SESTransport;
}(EventEmitter);

module.exports = SESTransport;

/***/ }),
/* 93 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(0);

var bind = __webpack_require__(47);

var Axios = __webpack_require__(94);

var mergeConfig = __webpack_require__(60);

var defaults = __webpack_require__(27);
/**
 * Create an instance of Axios
 *
 * @param {Object} defaultConfig The default config for the instance
 * @return {Axios} A new instance of Axios
 */


function createInstance(defaultConfig) {
  var context = new Axios(defaultConfig);
  var instance = bind(Axios.prototype.request, context); // Copy axios.prototype to instance

  utils.extend(instance, Axios.prototype, context); // Copy context to instance

  utils.extend(instance, context); // Factory for creating new instances

  instance.create = function create(instanceConfig) {
    return createInstance(mergeConfig(defaultConfig, instanceConfig));
  };

  return instance;
} // Create the default instance to be exported


var axios = createInstance(defaults); // Expose Axios class to allow class inheritance

axios.Axios = Axios; // Expose Cancel & CancelToken

axios.CanceledError = __webpack_require__(12);
axios.CancelToken = __webpack_require__(128);
axios.isCancel = __webpack_require__(59);
axios.VERSION = __webpack_require__(30).version;
axios.toFormData = __webpack_require__(48); // Expose AxiosError class

axios.AxiosError = __webpack_require__(9); // alias for CanceledError for backward compatibility

axios.Cancel = axios.CanceledError; // Expose all/spread

axios.all = function all(promises) {
  return Promise.all(promises);
};

axios.spread = __webpack_require__(129); // Expose isAxiosError

axios.isAxiosError = __webpack_require__(130);
module.exports = axios; // Allow use of default import syntax in TypeScript

module.exports["default"] = axios;

/***/ }),
/* 94 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(0);

var buildURL = __webpack_require__(26);

var InterceptorManager = __webpack_require__(95);

var dispatchRequest = __webpack_require__(96);

var mergeConfig = __webpack_require__(60);

var buildFullPath = __webpack_require__(29);

var validator = __webpack_require__(127);

var validators = validator.validators;
/**
 * Create a new instance of Axios
 *
 * @param {Object} instanceConfig The default config for the instance
 */

function Axios(instanceConfig) {
  this.defaults = instanceConfig;
  this.interceptors = {
    request: new InterceptorManager(),
    response: new InterceptorManager()
  };
}
/**
 * Dispatch a request
 *
 * @param {Object} config The config specific for this request (merged with this.defaults)
 */


Axios.prototype.request = function request(configOrUrl, config) {
  /*eslint no-param-reassign:0*/
  // Allow for axios('example/url'[, config]) a la fetch API
  if (typeof configOrUrl === 'string') {
    config = config || {};
    config.url = configOrUrl;
  } else {
    config = configOrUrl || {};
  }

  config = mergeConfig(this.defaults, config); // Set config.method

  if (config.method) {
    config.method = config.method.toLowerCase();
  } else if (this.defaults.method) {
    config.method = this.defaults.method.toLowerCase();
  } else {
    config.method = 'get';
  }

  var transitional = config.transitional;

  if (transitional !== undefined) {
    validator.assertOptions(transitional, {
      silentJSONParsing: validators.transitional(validators["boolean"]),
      forcedJSONParsing: validators.transitional(validators["boolean"]),
      clarifyTimeoutError: validators.transitional(validators["boolean"])
    }, false);
  } // filter out skipped interceptors


  var requestInterceptorChain = [];
  var synchronousRequestInterceptors = true;
  this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
    if (typeof interceptor.runWhen === 'function' && interceptor.runWhen(config) === false) {
      return;
    }

    synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;
    requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
  });
  var responseInterceptorChain = [];
  this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
    responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
  });
  var promise;

  if (!synchronousRequestInterceptors) {
    var chain = [dispatchRequest, undefined];
    Array.prototype.unshift.apply(chain, requestInterceptorChain);
    chain = chain.concat(responseInterceptorChain);
    promise = Promise.resolve(config);

    while (chain.length) {
      promise = promise.then(chain.shift(), chain.shift());
    }

    return promise;
  }

  var newConfig = config;

  while (requestInterceptorChain.length) {
    var onFulfilled = requestInterceptorChain.shift();
    var onRejected = requestInterceptorChain.shift();

    try {
      newConfig = onFulfilled(newConfig);
    } catch (error) {
      onRejected(error);
      break;
    }
  }

  try {
    promise = dispatchRequest(newConfig);
  } catch (error) {
    return Promise.reject(error);
  }

  while (responseInterceptorChain.length) {
    promise = promise.then(responseInterceptorChain.shift(), responseInterceptorChain.shift());
  }

  return promise;
};

Axios.prototype.getUri = function getUri(config) {
  config = mergeConfig(this.defaults, config);
  var fullPath = buildFullPath(config.baseURL, config.url);
  return buildURL(fullPath, config.params, config.paramsSerializer);
}; // Provide aliases for supported request methods


utils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {
  /*eslint func-names:0*/
  Axios.prototype[method] = function (url, config) {
    return this.request(mergeConfig(config || {}, {
      method: method,
      url: url,
      data: (config || {}).data
    }));
  };
});
utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  /*eslint func-names:0*/
  function generateHTTPMethod(isForm) {
    return function httpMethod(url, data, config) {
      return this.request(mergeConfig(config || {}, {
        method: method,
        headers: isForm ? {
          'Content-Type': 'multipart/form-data'
        } : {},
        url: url,
        data: data
      }));
    };
  }

  Axios.prototype[method] = generateHTTPMethod();
  Axios.prototype[method + 'Form'] = generateHTTPMethod(true);
});
module.exports = Axios;

/***/ }),
/* 95 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(0);

function InterceptorManager() {
  this.handlers = [];
}
/**
 * Add a new interceptor to the stack
 *
 * @param {Function} fulfilled The function to handle `then` for a `Promise`
 * @param {Function} rejected The function to handle `reject` for a `Promise`
 *
 * @return {Number} An ID used to remove interceptor later
 */


InterceptorManager.prototype.use = function use(fulfilled, rejected, options) {
  this.handlers.push({
    fulfilled: fulfilled,
    rejected: rejected,
    synchronous: options ? options.synchronous : false,
    runWhen: options ? options.runWhen : null
  });
  return this.handlers.length - 1;
};
/**
 * Remove an interceptor from the stack
 *
 * @param {Number} id The ID that was returned by `use`
 */


InterceptorManager.prototype.eject = function eject(id) {
  if (this.handlers[id]) {
    this.handlers[id] = null;
  }
};
/**
 * Iterate over all the registered interceptors
 *
 * This method is particularly useful for skipping over any
 * interceptors that may have become `null` calling `eject`.
 *
 * @param {Function} fn The function to call for each interceptor
 */


InterceptorManager.prototype.forEach = function forEach(fn) {
  utils.forEach(this.handlers, function forEachHandler(h) {
    if (h !== null) {
      fn(h);
    }
  });
};

module.exports = InterceptorManager;

/***/ }),
/* 96 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(0);

var transformData = __webpack_require__(97);

var isCancel = __webpack_require__(59);

var defaults = __webpack_require__(27);

var CanceledError = __webpack_require__(12);
/**
 * Throws a `CanceledError` if cancellation has been requested.
 */


function throwIfCancellationRequested(config) {
  if (config.cancelToken) {
    config.cancelToken.throwIfRequested();
  }

  if (config.signal && config.signal.aborted) {
    throw new CanceledError();
  }
}
/**
 * Dispatch a request to the server using the configured adapter.
 *
 * @param {object} config The config that is to be used for the request
 * @returns {Promise} The Promise to be fulfilled
 */


module.exports = function dispatchRequest(config) {
  throwIfCancellationRequested(config); // Ensure headers exist

  config.headers = config.headers || {}; // Transform request data

  config.data = transformData.call(config, config.data, config.headers, config.transformRequest); // Flatten headers

  config.headers = utils.merge(config.headers.common || {}, config.headers[config.method] || {}, config.headers);
  utils.forEach(['delete', 'get', 'head', 'post', 'put', 'patch', 'common'], function cleanHeaderConfig(method) {
    delete config.headers[method];
  });
  var adapter = config.adapter || defaults.adapter;
  return adapter(config).then(function onAdapterResolution(response) {
    throwIfCancellationRequested(config); // Transform response data

    response.data = transformData.call(config, response.data, response.headers, config.transformResponse);
    return response;
  }, function onAdapterRejection(reason) {
    if (!isCancel(reason)) {
      throwIfCancellationRequested(config); // Transform response data

      if (reason && reason.response) {
        reason.response.data = transformData.call(config, reason.response.data, reason.response.headers, config.transformResponse);
      }
    }

    return Promise.reject(reason);
  });
};

/***/ }),
/* 97 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(0);

var defaults = __webpack_require__(27);
/**
 * Transform the data for a request or a response
 *
 * @param {Object|String} data The data to be transformed
 * @param {Array} headers The headers for the request or response
 * @param {Array|Function} fns A single function or Array of functions
 * @returns {*} The resulting transformed data
 */


module.exports = function transformData(data, headers, fns) {
  var context = this || defaults;
  /*eslint no-param-reassign:0*/

  utils.forEach(fns, function transform(fn) {
    data = fn.call(context, data, headers);
  });
  return data;
};

/***/ }),
/* 98 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(0);

module.exports = function normalizeHeaderName(headers, normalizedName) {
  utils.forEach(headers, function processHeader(value, name) {
    if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
      headers[normalizedName] = value;
      delete headers[name];
    }
  });
};

/***/ }),
/* 99 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(0);

var settle = __webpack_require__(49);

var cookies = __webpack_require__(100);

var buildURL = __webpack_require__(26);

var buildFullPath = __webpack_require__(29);

var parseHeaders = __webpack_require__(103);

var isURLSameOrigin = __webpack_require__(104);

var transitionalDefaults = __webpack_require__(28);

var AxiosError = __webpack_require__(9);

var CanceledError = __webpack_require__(12);

var parseProtocol = __webpack_require__(105);

module.exports = function xhrAdapter(config) {
  return new Promise(function dispatchXhrRequest(resolve, reject) {
    var requestData = config.data;
    var requestHeaders = config.headers;
    var responseType = config.responseType;
    var onCanceled;

    function done() {
      if (config.cancelToken) {
        config.cancelToken.unsubscribe(onCanceled);
      }

      if (config.signal) {
        config.signal.removeEventListener('abort', onCanceled);
      }
    }

    if (utils.isFormData(requestData) && utils.isStandardBrowserEnv()) {
      delete requestHeaders['Content-Type']; // Let the browser set it
    }

    var request = new XMLHttpRequest(); // HTTP basic authentication

    if (config.auth) {
      var username = config.auth.username || '';
      var password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : '';
      requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);
    }

    var fullPath = buildFullPath(config.baseURL, config.url);
    request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true); // Set the request timeout in MS

    request.timeout = config.timeout;

    function onloadend() {
      if (!request) {
        return;
      } // Prepare the response


      var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;
      var responseData = !responseType || responseType === 'text' || responseType === 'json' ? request.responseText : request.response;
      var response = {
        data: responseData,
        status: request.status,
        statusText: request.statusText,
        headers: responseHeaders,
        config: config,
        request: request
      };
      settle(function _resolve(value) {
        resolve(value);
        done();
      }, function _reject(err) {
        reject(err);
        done();
      }, response); // Clean up request

      request = null;
    }

    if ('onloadend' in request) {
      // Use onloadend if available
      request.onloadend = onloadend;
    } else {
      // Listen for ready state to emulate onloadend
      request.onreadystatechange = function handleLoad() {
        if (!request || request.readyState !== 4) {
          return;
        } // The request errored out and we didn't get a response, this will be
        // handled by onerror instead
        // With one exception: request that using file: protocol, most browsers
        // will return status as 0 even though it's a successful request


        if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
          return;
        } // readystate handler is calling before onerror or ontimeout handlers,
        // so we should call onloadend on the next 'tick'


        setTimeout(onloadend);
      };
    } // Handle browser request cancellation (as opposed to a manual cancellation)


    request.onabort = function handleAbort() {
      if (!request) {
        return;
      }

      reject(new AxiosError('Request aborted', AxiosError.ECONNABORTED, config, request)); // Clean up request

      request = null;
    }; // Handle low level network errors


    request.onerror = function handleError() {
      // Real errors are hidden from us by the browser
      // onerror should only fire if it's a network error
      reject(new AxiosError('Network Error', AxiosError.ERR_NETWORK, config, request, request)); // Clean up request

      request = null;
    }; // Handle timeout


    request.ontimeout = function handleTimeout() {
      var timeoutErrorMessage = config.timeout ? 'timeout of ' + config.timeout + 'ms exceeded' : 'timeout exceeded';
      var transitional = config.transitional || transitionalDefaults;

      if (config.timeoutErrorMessage) {
        timeoutErrorMessage = config.timeoutErrorMessage;
      }

      reject(new AxiosError(timeoutErrorMessage, transitional.clarifyTimeoutError ? AxiosError.ETIMEDOUT : AxiosError.ECONNABORTED, config, request)); // Clean up request

      request = null;
    }; // Add xsrf header
    // This is only done if running in a standard browser environment.
    // Specifically not if we're in a web worker, or react-native.


    if (utils.isStandardBrowserEnv()) {
      // Add xsrf header
      var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ? cookies.read(config.xsrfCookieName) : undefined;

      if (xsrfValue) {
        requestHeaders[config.xsrfHeaderName] = xsrfValue;
      }
    } // Add headers to the request


    if ('setRequestHeader' in request) {
      utils.forEach(requestHeaders, function setRequestHeader(val, key) {
        if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {
          // Remove Content-Type if data is undefined
          delete requestHeaders[key];
        } else {
          // Otherwise add header to the request
          request.setRequestHeader(key, val);
        }
      });
    } // Add withCredentials to request if needed


    if (!utils.isUndefined(config.withCredentials)) {
      request.withCredentials = !!config.withCredentials;
    } // Add responseType to request if needed


    if (responseType && responseType !== 'json') {
      request.responseType = config.responseType;
    } // Handle progress if needed


    if (typeof config.onDownloadProgress === 'function') {
      request.addEventListener('progress', config.onDownloadProgress);
    } // Not all browsers support upload events


    if (typeof config.onUploadProgress === 'function' && request.upload) {
      request.upload.addEventListener('progress', config.onUploadProgress);
    }

    if (config.cancelToken || config.signal) {
      // Handle cancellation
      // eslint-disable-next-line func-names
      onCanceled = function onCanceled(cancel) {
        if (!request) {
          return;
        }

        reject(!cancel || cancel && cancel.type ? new CanceledError() : cancel);
        request.abort();
        request = null;
      };

      config.cancelToken && config.cancelToken.subscribe(onCanceled);

      if (config.signal) {
        config.signal.aborted ? onCanceled() : config.signal.addEventListener('abort', onCanceled);
      }
    }

    if (!requestData) {
      requestData = null;
    }

    var protocol = parseProtocol(fullPath);

    if (protocol && ['http', 'https', 'file'].indexOf(protocol) === -1) {
      reject(new AxiosError('Unsupported protocol ' + protocol + ':', AxiosError.ERR_BAD_REQUEST, config));
      return;
    } // Send the request


    request.send(requestData);
  });
};

/***/ }),
/* 100 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(0);

module.exports = utils.isStandardBrowserEnv() ? // Standard browser envs support document.cookie
function standardBrowserEnv() {
  return {
    write: function write(name, value, expires, path, domain, secure) {
      var cookie = [];
      cookie.push(name + '=' + encodeURIComponent(value));

      if (utils.isNumber(expires)) {
        cookie.push('expires=' + new Date(expires).toGMTString());
      }

      if (utils.isString(path)) {
        cookie.push('path=' + path);
      }

      if (utils.isString(domain)) {
        cookie.push('domain=' + domain);
      }

      if (secure === true) {
        cookie.push('secure');
      }

      document.cookie = cookie.join('; ');
    },
    read: function read(name) {
      var match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
      return match ? decodeURIComponent(match[3]) : null;
    },
    remove: function remove(name) {
      this.write(name, '', Date.now() - 86400000);
    }
  };
}() : // Non standard browser env (web workers, react-native) lack needed support.
function nonStandardBrowserEnv() {
  return {
    write: function write() {},
    read: function read() {
      return null;
    },
    remove: function remove() {}
  };
}();

/***/ }),
/* 101 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Determines whether the specified URL is absolute
 *
 * @param {string} url The URL to test
 * @returns {boolean} True if the specified URL is absolute, otherwise false
 */

module.exports = function isAbsoluteURL(url) {
  // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
  // by any combination of letters, digits, plus, period, or hyphen.
  return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url);
};

/***/ }),
/* 102 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Creates a new URL by combining the specified URLs
 *
 * @param {string} baseURL The base URL
 * @param {string} relativeURL The relative URL
 * @returns {string} The combined URL
 */

module.exports = function combineURLs(baseURL, relativeURL) {
  return relativeURL ? baseURL.replace(/\/+$/, '') + '/' + relativeURL.replace(/^\/+/, '') : baseURL;
};

/***/ }),
/* 103 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(0); // Headers whose duplicates are ignored by node
// c.f. https://nodejs.org/api/http.html#http_message_headers


var ignoreDuplicateOf = ['age', 'authorization', 'content-length', 'content-type', 'etag', 'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since', 'last-modified', 'location', 'max-forwards', 'proxy-authorization', 'referer', 'retry-after', 'user-agent'];
/**
 * Parse headers into an object
 *
 * ```
 * Date: Wed, 27 Aug 2014 08:58:49 GMT
 * Content-Type: application/json
 * Connection: keep-alive
 * Transfer-Encoding: chunked
 * ```
 *
 * @param {String} headers Headers needing to be parsed
 * @returns {Object} Headers parsed into an object
 */

module.exports = function parseHeaders(headers) {
  var parsed = {};
  var key;
  var val;
  var i;

  if (!headers) {
    return parsed;
  }

  utils.forEach(headers.split('\n'), function parser(line) {
    i = line.indexOf(':');
    key = utils.trim(line.substr(0, i)).toLowerCase();
    val = utils.trim(line.substr(i + 1));

    if (key) {
      if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
        return;
      }

      if (key === 'set-cookie') {
        parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
      } else {
        parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
      }
    }
  });
  return parsed;
};

/***/ }),
/* 104 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(0);

module.exports = utils.isStandardBrowserEnv() ? // Standard browser envs have full support of the APIs needed to test
// whether the request URL is of the same origin as current location.
function standardBrowserEnv() {
  var msie = /(msie|trident)/i.test(navigator.userAgent);
  var urlParsingNode = document.createElement('a');
  var originURL;
  /**
  * Parse a URL to discover it's components
  *
  * @param {String} url The URL to be parsed
  * @returns {Object}
  */

  function resolveURL(url) {
    var href = url;

    if (msie) {
      // IE needs attribute set twice to normalize properties
      urlParsingNode.setAttribute('href', href);
      href = urlParsingNode.href;
    }

    urlParsingNode.setAttribute('href', href); // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils

    return {
      href: urlParsingNode.href,
      protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
      host: urlParsingNode.host,
      search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
      hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
      hostname: urlParsingNode.hostname,
      port: urlParsingNode.port,
      pathname: urlParsingNode.pathname.charAt(0) === '/' ? urlParsingNode.pathname : '/' + urlParsingNode.pathname
    };
  }

  originURL = resolveURL(window.location.href);
  /**
  * Determine if a URL shares the same origin as the current location
  *
  * @param {String} requestURL The URL to test
  * @returns {boolean} True if URL shares the same origin, otherwise false
  */

  return function isURLSameOrigin(requestURL) {
    var parsed = utils.isString(requestURL) ? resolveURL(requestURL) : requestURL;
    return parsed.protocol === originURL.protocol && parsed.host === originURL.host;
  };
}() : // Non standard browser envs (web workers, react-native) lack needed support.
function nonStandardBrowserEnv() {
  return function isURLSameOrigin() {
    return true;
  };
}();

/***/ }),
/* 105 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function parseProtocol(url) {
  var match = /^([-+\w]{1,25})(:?\/\/|:)/.exec(url);
  return match && match[1] || '';
};

/***/ }),
/* 106 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(0);

var settle = __webpack_require__(49);

var buildFullPath = __webpack_require__(29);

var buildURL = __webpack_require__(26);

var http = __webpack_require__(16);

var https = __webpack_require__(17);

var httpFollow = __webpack_require__(50).http;

var httpsFollow = __webpack_require__(50).https;

var url = __webpack_require__(5);

var zlib = __webpack_require__(36);

var VERSION = __webpack_require__(30).version;

var transitionalDefaults = __webpack_require__(28);

var AxiosError = __webpack_require__(9);

var CanceledError = __webpack_require__(12);

var isHttps = /https:?/;
var supportedProtocols = ['http:', 'https:', 'file:'];
/**
 *
 * @param {http.ClientRequestArgs} options
 * @param {AxiosProxyConfig} proxy
 * @param {string} location
 */

function setProxy(options, proxy, location) {
  options.hostname = proxy.host;
  options.host = proxy.host;
  options.port = proxy.port;
  options.path = location; // Basic proxy authorization

  if (proxy.auth) {
    var base64 = Buffer.from(proxy.auth.username + ':' + proxy.auth.password, 'utf8').toString('base64');
    options.headers['Proxy-Authorization'] = 'Basic ' + base64;
  } // If a proxy is used, any redirects must also pass through the proxy


  options.beforeRedirect = function beforeRedirect(redirection) {
    redirection.headers.host = redirection.host;
    setProxy(redirection, proxy, redirection.href);
  };
}
/*eslint consistent-return:0*/


module.exports = function httpAdapter(config) {
  return new Promise(function dispatchHttpRequest(resolvePromise, rejectPromise) {
    var onCanceled;

    function done() {
      if (config.cancelToken) {
        config.cancelToken.unsubscribe(onCanceled);
      }

      if (config.signal) {
        config.signal.removeEventListener('abort', onCanceled);
      }
    }

    var resolve = function resolve(value) {
      done();
      resolvePromise(value);
    };

    var rejected = false;

    var reject = function reject(value) {
      done();
      rejected = true;
      rejectPromise(value);
    };

    var data = config.data;
    var headers = config.headers;
    var headerNames = {};
    Object.keys(headers).forEach(function storeLowerName(name) {
      headerNames[name.toLowerCase()] = name;
    }); // Set User-Agent (required by some servers)
    // See https://github.com/axios/axios/issues/69

    if ('user-agent' in headerNames) {
      // User-Agent is specified; handle case where no UA header is desired
      if (!headers[headerNames['user-agent']]) {
        delete headers[headerNames['user-agent']];
      } // Otherwise, use specified value

    } else {
      // Only set header if it hasn't been set in config
      headers['User-Agent'] = 'axios/' + VERSION;
    } // support for https://www.npmjs.com/package/form-data api


    if (utils.isFormData(data) && utils.isFunction(data.getHeaders)) {
      Object.assign(headers, data.getHeaders());
    } else if (data && !utils.isStream(data)) {
      if (Buffer.isBuffer(data)) {// Nothing to do...
      } else if (utils.isArrayBuffer(data)) {
        data = Buffer.from(new Uint8Array(data));
      } else if (utils.isString(data)) {
        data = Buffer.from(data, 'utf-8');
      } else {
        return reject(new AxiosError('Data after transformation must be a string, an ArrayBuffer, a Buffer, or a Stream', AxiosError.ERR_BAD_REQUEST, config));
      }

      if (config.maxBodyLength > -1 && data.length > config.maxBodyLength) {
        return reject(new AxiosError('Request body larger than maxBodyLength limit', AxiosError.ERR_BAD_REQUEST, config));
      } // Add Content-Length header if data exists


      if (!headerNames['content-length']) {
        headers['Content-Length'] = data.length;
      }
    } // HTTP basic authentication


    var auth = undefined;

    if (config.auth) {
      var username = config.auth.username || '';
      var password = config.auth.password || '';
      auth = username + ':' + password;
    } // Parse url


    var fullPath = buildFullPath(config.baseURL, config.url);
    var parsed = url.parse(fullPath);
    var protocol = parsed.protocol || supportedProtocols[0];

    if (supportedProtocols.indexOf(protocol) === -1) {
      return reject(new AxiosError('Unsupported protocol ' + protocol, AxiosError.ERR_BAD_REQUEST, config));
    }

    if (!auth && parsed.auth) {
      var urlAuth = parsed.auth.split(':');
      var urlUsername = urlAuth[0] || '';
      var urlPassword = urlAuth[1] || '';
      auth = urlUsername + ':' + urlPassword;
    }

    if (auth && headerNames.authorization) {
      delete headers[headerNames.authorization];
    }

    var isHttpsRequest = isHttps.test(protocol);
    var agent = isHttpsRequest ? config.httpsAgent : config.httpAgent;

    try {
      buildURL(parsed.path, config.params, config.paramsSerializer).replace(/^\?/, '');
    } catch (err) {
      var customErr = new Error(err.message);
      customErr.config = config;
      customErr.url = config.url;
      customErr.exists = true;
      reject(customErr);
    }

    var options = {
      path: buildURL(parsed.path, config.params, config.paramsSerializer).replace(/^\?/, ''),
      method: config.method.toUpperCase(),
      headers: headers,
      agent: agent,
      agents: {
        http: config.httpAgent,
        https: config.httpsAgent
      },
      auth: auth
    };

    if (config.socketPath) {
      options.socketPath = config.socketPath;
    } else {
      options.hostname = parsed.hostname;
      options.port = parsed.port;
    }

    var proxy = config.proxy;

    if (!proxy && proxy !== false) {
      var proxyEnv = protocol.slice(0, -1) + '_proxy';
      var proxyUrl = process.env[proxyEnv] || process.env[proxyEnv.toUpperCase()];

      if (proxyUrl) {
        var parsedProxyUrl = url.parse(proxyUrl);
        var noProxyEnv = process.env.no_proxy || process.env.NO_PROXY;
        var shouldProxy = true;

        if (noProxyEnv) {
          var noProxy = noProxyEnv.split(',').map(function trim(s) {
            return s.trim();
          });
          shouldProxy = !noProxy.some(function proxyMatch(proxyElement) {
            if (!proxyElement) {
              return false;
            }

            if (proxyElement === '*') {
              return true;
            }

            if (proxyElement[0] === '.' && parsed.hostname.substr(parsed.hostname.length - proxyElement.length) === proxyElement) {
              return true;
            }

            return parsed.hostname === proxyElement;
          });
        }

        if (shouldProxy) {
          proxy = {
            host: parsedProxyUrl.hostname,
            port: parsedProxyUrl.port,
            protocol: parsedProxyUrl.protocol
          };

          if (parsedProxyUrl.auth) {
            var proxyUrlAuth = parsedProxyUrl.auth.split(':');
            proxy.auth = {
              username: proxyUrlAuth[0],
              password: proxyUrlAuth[1]
            };
          }
        }
      }
    }

    if (proxy) {
      options.headers.host = parsed.hostname + (parsed.port ? ':' + parsed.port : '');
      setProxy(options, proxy, protocol + '//' + parsed.hostname + (parsed.port ? ':' + parsed.port : '') + options.path);
    }

    var transport;
    var isHttpsProxy = isHttpsRequest && (proxy ? isHttps.test(proxy.protocol) : true);

    if (config.transport) {
      transport = config.transport;
    } else if (config.maxRedirects === 0) {
      transport = isHttpsProxy ? https : http;
    } else {
      if (config.maxRedirects) {
        options.maxRedirects = config.maxRedirects;
      }

      if (config.beforeRedirect) {
        options.beforeRedirect = config.beforeRedirect;
      }

      transport = isHttpsProxy ? httpsFollow : httpFollow;
    }

    if (config.maxBodyLength > -1) {
      options.maxBodyLength = config.maxBodyLength;
    }

    if (config.insecureHTTPParser) {
      options.insecureHTTPParser = config.insecureHTTPParser;
    } // Create the request


    var req = transport.request(options, function handleResponse(res) {
      if (req.aborted) return; // uncompress the response body transparently if required

      var stream = res; // return the last request in case of redirects

      var lastRequest = res.req || req; // if no content, is HEAD request or decompress disabled we should not decompress

      if (res.statusCode !== 204 && lastRequest.method !== 'HEAD' && config.decompress !== false) {
        switch (res.headers['content-encoding']) {
          /*eslint default-case:0*/
          case 'gzip':
          case 'compress':
          case 'deflate':
            // add the unzipper to the body stream processing pipeline
            stream = stream.pipe(zlib.createUnzip()); // remove the content-encoding in order to not confuse downstream operations

            delete res.headers['content-encoding'];
            break;
        }
      }

      var response = {
        status: res.statusCode,
        statusText: res.statusMessage,
        headers: res.headers,
        config: config,
        request: lastRequest
      };

      if (config.responseType === 'stream') {
        response.data = stream;
        settle(resolve, reject, response);
      } else {
        var responseBuffer = [];
        var totalResponseBytes = 0;
        stream.on('data', function handleStreamData(chunk) {
          responseBuffer.push(chunk);
          totalResponseBytes += chunk.length; // make sure the content length is not over the maxContentLength if specified

          if (config.maxContentLength > -1 && totalResponseBytes > config.maxContentLength) {
            // stream.destoy() emit aborted event before calling reject() on Node.js v16
            rejected = true;
            stream.destroy();
            reject(new AxiosError('maxContentLength size of ' + config.maxContentLength + ' exceeded', AxiosError.ERR_BAD_RESPONSE, config, lastRequest));
          }
        });
        stream.on('aborted', function handlerStreamAborted() {
          if (rejected) {
            return;
          }

          stream.destroy();
          reject(new AxiosError('maxContentLength size of ' + config.maxContentLength + ' exceeded', AxiosError.ERR_BAD_RESPONSE, config, lastRequest));
        });
        stream.on('error', function handleStreamError(err) {
          if (req.aborted) return;
          reject(AxiosError.from(err, null, config, lastRequest));
        });
        stream.on('end', function handleStreamEnd() {
          try {
            var responseData = responseBuffer.length === 1 ? responseBuffer[0] : Buffer.concat(responseBuffer);

            if (config.responseType !== 'arraybuffer') {
              responseData = responseData.toString(config.responseEncoding);

              if (!config.responseEncoding || config.responseEncoding === 'utf8') {
                responseData = utils.stripBOM(responseData);
              }
            }

            response.data = responseData;
          } catch (err) {
            reject(AxiosError.from(err, null, config, response.request, response));
          }

          settle(resolve, reject, response);
        });
      }
    }); // Handle errors

    req.on('error', function handleRequestError(err) {
      // @todo remove
      // if (req.aborted && err.code !== AxiosError.ERR_FR_TOO_MANY_REDIRECTS) return;
      reject(AxiosError.from(err, null, config, req));
    }); // set tcp keep alive to prevent drop connection by peer

    req.on('socket', function handleRequestSocket(socket) {
      // default interval of sending ack packet is 1 minute
      socket.setKeepAlive(true, 1000 * 60);
    }); // Handle request timeout

    if (config.timeout) {
      // This is forcing a int timeout to avoid problems if the `req` interface doesn't handle other types.
      var timeout = parseInt(config.timeout, 10);

      if (isNaN(timeout)) {
        reject(new AxiosError('error trying to parse `config.timeout` to int', AxiosError.ERR_BAD_OPTION_VALUE, config, req));
        return;
      } // Sometime, the response will be very slow, and does not respond, the connect event will be block by event loop system.
      // And timer callback will be fired, and abort() will be invoked before connection, then get "socket hang up" and code ECONNRESET.
      // At this time, if we have a large number of request, nodejs will hang up some socket on background. and the number will up and up.
      // And then these socket which be hang up will devoring CPU little by little.
      // ClientRequest.setTimeout will be fired on the specify milliseconds, and can make sure that abort() will be fired after connect.


      req.setTimeout(timeout, function handleRequestTimeout() {
        req.abort();
        var transitional = config.transitional || transitionalDefaults;
        reject(new AxiosError('timeout of ' + timeout + 'ms exceeded', transitional.clarifyTimeoutError ? AxiosError.ETIMEDOUT : AxiosError.ECONNABORTED, config, req));
      });
    }

    if (config.cancelToken || config.signal) {
      // Handle cancellation
      // eslint-disable-next-line func-names
      onCanceled = function onCanceled(cancel) {
        if (req.aborted) return;
        req.abort();
        reject(!cancel || cancel && cancel.type ? new CanceledError() : cancel);
      };

      config.cancelToken && config.cancelToken.subscribe(onCanceled);

      if (config.signal) {
        config.signal.aborted ? onCanceled() : config.signal.addEventListener('abort', onCanceled);
      }
    } // Send the request


    if (utils.isStream(data)) {
      data.on('error', function handleStreamError(err) {
        reject(AxiosError.from(err, config, null, req));
      }).pipe(req);
    } else {
      req.end(data);
    }
  });
};

/***/ }),
/* 107 */
/***/ (function(module, exports) {

module.exports = require("assert");

/***/ }),
/* 108 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var debug;

module.exports = function () {
  if (!debug) {
    try {
      /* eslint global-require: off */
      debug = __webpack_require__(109)("follow-redirects");
    } catch (error) {
      /* */
    }

    if (typeof debug !== "function") {
      debug = function debug() {
        /* */
      };
    }
  }

  debug.apply(null, arguments);
};

/***/ }),
/* 109 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Detect Electron renderer / nwjs process, which is node, but we should
 * treat as a browser.
 */
if (typeof process === 'undefined' || process.type === 'renderer' || process.browser === true || process.__nwjs) {
  module.exports = __webpack_require__(110);
} else {
  module.exports = __webpack_require__(112);
}

/***/ }),
/* 110 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/* eslint-env browser */

/**
 * This is the web browser implementation of `debug()`.
 */
exports.formatArgs = formatArgs;
exports.save = save;
exports.load = load;
exports.useColors = useColors;
exports.storage = localstorage();

exports.destroy = function () {
  var warned = false;
  return function () {
    if (!warned) {
      warned = true;
      console.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');
    }
  };
}();
/**
 * Colors.
 */


exports.colors = ['#0000CC', '#0000FF', '#0033CC', '#0033FF', '#0066CC', '#0066FF', '#0099CC', '#0099FF', '#00CC00', '#00CC33', '#00CC66', '#00CC99', '#00CCCC', '#00CCFF', '#3300CC', '#3300FF', '#3333CC', '#3333FF', '#3366CC', '#3366FF', '#3399CC', '#3399FF', '#33CC00', '#33CC33', '#33CC66', '#33CC99', '#33CCCC', '#33CCFF', '#6600CC', '#6600FF', '#6633CC', '#6633FF', '#66CC00', '#66CC33', '#9900CC', '#9900FF', '#9933CC', '#9933FF', '#99CC00', '#99CC33', '#CC0000', '#CC0033', '#CC0066', '#CC0099', '#CC00CC', '#CC00FF', '#CC3300', '#CC3333', '#CC3366', '#CC3399', '#CC33CC', '#CC33FF', '#CC6600', '#CC6633', '#CC9900', '#CC9933', '#CCCC00', '#CCCC33', '#FF0000', '#FF0033', '#FF0066', '#FF0099', '#FF00CC', '#FF00FF', '#FF3300', '#FF3333', '#FF3366', '#FF3399', '#FF33CC', '#FF33FF', '#FF6600', '#FF6633', '#FF9900', '#FF9933', '#FFCC00', '#FFCC33'];
/**
 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
 * and the Firebug extension (any Firefox version) are known
 * to support "%c" CSS customizations.
 *
 * TODO: add a `localStorage` variable to explicitly enable/disable colors
 */
// eslint-disable-next-line complexity

function useColors() {
  // NB: In an Electron preload script, document will be defined but not fully
  // initialized. Since we know we're in Chrome, we'll just detect this case
  // explicitly
  if (typeof window !== 'undefined' && window.process && (window.process.type === 'renderer' || window.process.__nwjs)) {
    return true;
  } // Internet Explorer and Edge do not support colors.


  if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
    return false;
  } // Is webkit? http://stackoverflow.com/a/16459606/376773
  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632


  return typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || // Is firebug? http://stackoverflow.com/a/398120/376773
  typeof window !== 'undefined' && window.console && (window.console.firebug || window.console.exception && window.console.table) || // Is firefox >= v31?
  // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
  typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 || // Double check webkit in userAgent just in case we are in a worker
  typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
}
/**
 * Colorize log arguments if enabled.
 *
 * @api public
 */


function formatArgs(args) {
  args[0] = (this.useColors ? '%c' : '') + this.namespace + (this.useColors ? ' %c' : ' ') + args[0] + (this.useColors ? '%c ' : ' ') + '+' + module.exports.humanize(this.diff);

  if (!this.useColors) {
    return;
  }

  var c = 'color: ' + this.color;
  args.splice(1, 0, c, 'color: inherit'); // The final "%c" is somewhat tricky, because there could be other
  // arguments passed either before or after the %c, so we need to
  // figure out the correct index to insert the CSS into

  var index = 0;
  var lastC = 0;
  args[0].replace(/%[a-zA-Z%]/g, function (match) {
    if (match === '%%') {
      return;
    }

    index++;

    if (match === '%c') {
      // We only are interested in the *last* %c
      // (the user may have provided their own)
      lastC = index;
    }
  });
  args.splice(lastC, 0, c);
}
/**
 * Invokes `console.debug()` when available.
 * No-op when `console.debug` is not a "function".
 * If `console.debug` is not available, falls back
 * to `console.log`.
 *
 * @api public
 */


exports.log = console.debug || console.log || function () {};
/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */


function save(namespaces) {
  try {
    if (namespaces) {
      exports.storage.setItem('debug', namespaces);
    } else {
      exports.storage.removeItem('debug');
    }
  } catch (error) {// Swallow
    // XXX (@Qix-) should we be logging these?
  }
}
/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */


function load() {
  var r;

  try {
    r = exports.storage.getItem('debug');
  } catch (error) {// Swallow
    // XXX (@Qix-) should we be logging these?
  } // If debug isn't set in LS, and we're in Electron, try to load $DEBUG


  if (!r && typeof process !== 'undefined' && 'env' in process) {
    r = process.env.DEBUG;
  }

  return r;
}
/**
 * Localstorage attempts to return the localstorage.
 *
 * This is necessary because safari throws
 * when a user disables cookies/localstorage
 * and you attempt to access it.
 *
 * @return {LocalStorage}
 * @api private
 */


function localstorage() {
  try {
    // TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context
    // The Browser also has localStorage in the global context.
    return localStorage;
  } catch (error) {// Swallow
    // XXX (@Qix-) should we be logging these?
  }
}

module.exports = __webpack_require__(51)(exports);
var formatters = module.exports.formatters;
/**
 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
 */

formatters.j = function (v) {
  try {
    return JSON.stringify(v);
  } catch (error) {
    return '[UnexpectedJSONParseError]: ' + error.message;
  }
};

/***/ }),
/* 111 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

/**
 * Helpers.
 */
var s = 1000;
var m = s * 60;
var h = m * 60;
var d = h * 24;
var w = d * 7;
var y = d * 365.25;
/**
 * Parse or format the given `val`.
 *
 * Options:
 *
 *  - `long` verbose formatting [false]
 *
 * @param {String|Number} val
 * @param {Object} [options]
 * @throws {Error} throw an error if val is not a non-empty string or a number
 * @return {String|Number}
 * @api public
 */

module.exports = function (val, options) {
  options = options || {};

  var type = _typeof(val);

  if (type === 'string' && val.length > 0) {
    return parse(val);
  } else if (type === 'number' && isFinite(val)) {
    return options["long"] ? fmtLong(val) : fmtShort(val);
  }

  throw new Error('val is not a non-empty string or a valid number. val=' + JSON.stringify(val));
};
/**
 * Parse the given `str` and return milliseconds.
 *
 * @param {String} str
 * @return {Number}
 * @api private
 */


function parse(str) {
  str = String(str);

  if (str.length > 100) {
    return;
  }

  var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(str);

  if (!match) {
    return;
  }

  var n = parseFloat(match[1]);
  var type = (match[2] || 'ms').toLowerCase();

  switch (type) {
    case 'years':
    case 'year':
    case 'yrs':
    case 'yr':
    case 'y':
      return n * y;

    case 'weeks':
    case 'week':
    case 'w':
      return n * w;

    case 'days':
    case 'day':
    case 'd':
      return n * d;

    case 'hours':
    case 'hour':
    case 'hrs':
    case 'hr':
    case 'h':
      return n * h;

    case 'minutes':
    case 'minute':
    case 'mins':
    case 'min':
    case 'm':
      return n * m;

    case 'seconds':
    case 'second':
    case 'secs':
    case 'sec':
    case 's':
      return n * s;

    case 'milliseconds':
    case 'millisecond':
    case 'msecs':
    case 'msec':
    case 'ms':
      return n;

    default:
      return undefined;
  }
}
/**
 * Short format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */


function fmtShort(ms) {
  var msAbs = Math.abs(ms);

  if (msAbs >= d) {
    return Math.round(ms / d) + 'd';
  }

  if (msAbs >= h) {
    return Math.round(ms / h) + 'h';
  }

  if (msAbs >= m) {
    return Math.round(ms / m) + 'm';
  }

  if (msAbs >= s) {
    return Math.round(ms / s) + 's';
  }

  return ms + 'ms';
}
/**
 * Long format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */


function fmtLong(ms) {
  var msAbs = Math.abs(ms);

  if (msAbs >= d) {
    return plural(ms, msAbs, d, 'day');
  }

  if (msAbs >= h) {
    return plural(ms, msAbs, h, 'hour');
  }

  if (msAbs >= m) {
    return plural(ms, msAbs, m, 'minute');
  }

  if (msAbs >= s) {
    return plural(ms, msAbs, s, 'second');
  }

  return ms + ' ms';
}
/**
 * Pluralization helper.
 */


function plural(ms, msAbs, n, name) {
  var isPlural = msAbs >= n * 1.5;
  return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');
}

/***/ }),
/* 112 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Module dependencies.
 */
var tty = __webpack_require__(52);

var util = __webpack_require__(7);
/**
 * This is the Node.js implementation of `debug()`.
 */


exports.init = init;
exports.log = log;
exports.formatArgs = formatArgs;
exports.save = save;
exports.load = load;
exports.useColors = useColors;
exports.destroy = util.deprecate(function () {}, 'Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');
/**
 * Colors.
 */

exports.colors = [6, 2, 3, 4, 5, 1];

try {
  // Optional dependency (as in, doesn't need to be installed, NOT like optionalDependencies in package.json)
  // eslint-disable-next-line import/no-extraneous-dependencies
  var supportsColor = __webpack_require__(113);

  if (supportsColor && (supportsColor.stderr || supportsColor).level >= 2) {
    exports.colors = [20, 21, 26, 27, 32, 33, 38, 39, 40, 41, 42, 43, 44, 45, 56, 57, 62, 63, 68, 69, 74, 75, 76, 77, 78, 79, 80, 81, 92, 93, 98, 99, 112, 113, 128, 129, 134, 135, 148, 149, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 178, 179, 184, 185, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 214, 215, 220, 221];
  }
} catch (error) {// Swallow - we only care if `supports-color` is available; it doesn't have to be.
}
/**
 * Build up the default `inspectOpts` object from the environment variables.
 *
 *   $ DEBUG_COLORS=no DEBUG_DEPTH=10 DEBUG_SHOW_HIDDEN=enabled node script.js
 */


exports.inspectOpts = Object.keys(process.env).filter(function (key) {
  return /^debug_/i.test(key);
}).reduce(function (obj, key) {
  // Camel-case
  var prop = key.substring(6).toLowerCase().replace(/_([a-z])/g, function (_, k) {
    return k.toUpperCase();
  }); // Coerce string value into JS value

  var val = process.env[key];

  if (/^(yes|on|true|enabled)$/i.test(val)) {
    val = true;
  } else if (/^(no|off|false|disabled)$/i.test(val)) {
    val = false;
  } else if (val === 'null') {
    val = null;
  } else {
    val = Number(val);
  }

  obj[prop] = val;
  return obj;
}, {});
/**
 * Is stdout a TTY? Colored output is enabled when `true`.
 */

function useColors() {
  return 'colors' in exports.inspectOpts ? Boolean(exports.inspectOpts.colors) : tty.isatty(process.stderr.fd);
}
/**
 * Adds ANSI color escape codes if enabled.
 *
 * @api public
 */


function formatArgs(args) {
  var name = this.namespace,
      useColors = this.useColors;

  if (useColors) {
    var c = this.color;
    var colorCode = "\x1B[3" + (c < 8 ? c : '8;5;' + c);
    var prefix = "  ".concat(colorCode, ";1m").concat(name, " \x1B[0m");
    args[0] = prefix + args[0].split('\n').join('\n' + prefix);
    args.push(colorCode + 'm+' + module.exports.humanize(this.diff) + "\x1B[0m");
  } else {
    args[0] = getDate() + name + ' ' + args[0];
  }
}

function getDate() {
  if (exports.inspectOpts.hideDate) {
    return '';
  }

  return new Date().toISOString() + ' ';
}
/**
 * Invokes `util.format()` with the specified arguments and writes to stderr.
 */


function log() {
  return process.stderr.write(util.format.apply(util, arguments) + '\n');
}
/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */


function save(namespaces) {
  if (namespaces) {
    process.env.DEBUG = namespaces;
  } else {
    // If you set a process.env field to null or undefined, it gets cast to the
    // string 'null' or 'undefined'. Just delete instead.
    delete process.env.DEBUG;
  }
}
/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */


function load() {
  return process.env.DEBUG;
}
/**
 * Init logic for `debug` instances.
 *
 * Create a new `inspectOpts` object in case `useColors` is set
 * differently for a particular `debug` instance.
 */


function init(debug) {
  debug.inspectOpts = {};
  var keys = Object.keys(exports.inspectOpts);

  for (var i = 0; i < keys.length; i++) {
    debug.inspectOpts[keys[i]] = exports.inspectOpts[keys[i]];
  }
}

module.exports = __webpack_require__(51)(exports);
var formatters = module.exports.formatters;
/**
 * Map %o to `util.inspect()`, all on a single line.
 */

formatters.o = function (v) {
  this.inspectOpts.colors = this.useColors;
  return util.inspect(v, this.inspectOpts).split('\n').map(function (str) {
    return str.trim();
  }).join(' ');
};
/**
 * Map %O to `util.inspect()`, allowing multiple lines if needed.
 */


formatters.O = function (v) {
  this.inspectOpts.colors = this.useColors;
  return util.inspect(v, this.inspectOpts);
};

/***/ }),
/* 113 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var os = __webpack_require__(19);

var tty = __webpack_require__(52);

var hasFlag = __webpack_require__(114);

var _process = process,
    env = _process.env;
var forceColor;

if (hasFlag('no-color') || hasFlag('no-colors') || hasFlag('color=false') || hasFlag('color=never')) {
  forceColor = 0;
} else if (hasFlag('color') || hasFlag('colors') || hasFlag('color=true') || hasFlag('color=always')) {
  forceColor = 1;
}

if ('FORCE_COLOR' in env) {
  if (env.FORCE_COLOR === 'true') {
    forceColor = 1;
  } else if (env.FORCE_COLOR === 'false') {
    forceColor = 0;
  } else {
    forceColor = env.FORCE_COLOR.length === 0 ? 1 : Math.min(parseInt(env.FORCE_COLOR, 10), 3);
  }
}

function translateLevel(level) {
  if (level === 0) {
    return false;
  }

  return {
    level: level,
    hasBasic: true,
    has256: level >= 2,
    has16m: level >= 3
  };
}

function supportsColor(haveStream, streamIsTTY) {
  if (forceColor === 0) {
    return 0;
  }

  if (hasFlag('color=16m') || hasFlag('color=full') || hasFlag('color=truecolor')) {
    return 3;
  }

  if (hasFlag('color=256')) {
    return 2;
  }

  if (haveStream && !streamIsTTY && forceColor === undefined) {
    return 0;
  }

  var min = forceColor || 0;

  if (env.TERM === 'dumb') {
    return min;
  }

  if (process.platform === 'win32') {
    // Windows 10 build 10586 is the first Windows release that supports 256 colors.
    // Windows 10 build 14931 is the first release that supports 16m/TrueColor.
    var osRelease = os.release().split('.');

    if (Number(osRelease[0]) >= 10 && Number(osRelease[2]) >= 10586) {
      return Number(osRelease[2]) >= 14931 ? 3 : 2;
    }

    return 1;
  }

  if ('CI' in env) {
    if (['TRAVIS', 'CIRCLECI', 'APPVEYOR', 'GITLAB_CI', 'GITHUB_ACTIONS', 'BUILDKITE'].some(function (sign) {
      return sign in env;
    }) || env.CI_NAME === 'codeship') {
      return 1;
    }

    return min;
  }

  if ('TEAMCITY_VERSION' in env) {
    return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(env.TEAMCITY_VERSION) ? 1 : 0;
  }

  if (env.COLORTERM === 'truecolor') {
    return 3;
  }

  if ('TERM_PROGRAM' in env) {
    var version = parseInt((env.TERM_PROGRAM_VERSION || '').split('.')[0], 10);

    switch (env.TERM_PROGRAM) {
      case 'iTerm.app':
        return version >= 3 ? 3 : 2;

      case 'Apple_Terminal':
        return 2;
      // No default
    }
  }

  if (/-256(color)?$/i.test(env.TERM)) {
    return 2;
  }

  if (/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(env.TERM)) {
    return 1;
  }

  if ('COLORTERM' in env) {
    return 1;
  }

  return min;
}

function getSupportLevel(stream) {
  var level = supportsColor(stream, stream && stream.isTTY);
  return translateLevel(level);
}

module.exports = {
  supportsColor: getSupportLevel,
  stdout: translateLevel(supportsColor(true, tty.isatty(1))),
  stderr: translateLevel(supportsColor(true, tty.isatty(2)))
};

/***/ }),
/* 114 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function (flag) {
  var argv = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : process.argv;
  var prefix = flag.startsWith('-') ? '' : flag.length === 1 ? '-' : '--';
  var position = argv.indexOf(prefix + flag);
  var terminatorPosition = argv.indexOf('--');
  return position !== -1 && (terminatorPosition === -1 || position < terminatorPosition);
};

/***/ }),
/* 115 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// eslint-disable-next-line strict
module.exports = __webpack_require__(116);

/***/ }),
/* 116 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

var CombinedStream = __webpack_require__(117);

var util = __webpack_require__(7);

var path = __webpack_require__(20);

var http = __webpack_require__(16);

var https = __webpack_require__(17);

var parseUrl = __webpack_require__(5).parse;

var fs = __webpack_require__(14);

var Stream = __webpack_require__(1).Stream;

var mime = __webpack_require__(119);

var asynckit = __webpack_require__(122);

var populate = __webpack_require__(126); // Public API


module.exports = FormData; // make it a Stream

util.inherits(FormData, CombinedStream);
/**
 * Create readable "multipart/form-data" streams.
 * Can be used to submit forms
 * and file uploads to other web applications.
 *
 * @constructor
 * @param {Object} options - Properties to be added/overriden for FormData and CombinedStream
 */

function FormData(options) {
  if (!(this instanceof FormData)) {
    return new FormData(options);
  }

  this._overheadLength = 0;
  this._valueLength = 0;
  this._valuesToMeasure = [];
  CombinedStream.call(this);
  options = options || {};

  for (var option in options) {
    this[option] = options[option];
  }
}

FormData.LINE_BREAK = '\r\n';
FormData.DEFAULT_CONTENT_TYPE = 'application/octet-stream';

FormData.prototype.append = function (field, value, options) {
  options = options || {}; // allow filename as single option

  if (typeof options == 'string') {
    options = {
      filename: options
    };
  }

  var append = CombinedStream.prototype.append.bind(this); // all that streamy business can't handle numbers

  if (typeof value == 'number') {
    value = '' + value;
  } // https://github.com/felixge/node-form-data/issues/38


  if (util.isArray(value)) {
    // Please convert your array into string
    // the way web server expects it
    this._error(new Error('Arrays are not supported.'));

    return;
  }

  var header = this._multiPartHeader(field, value, options);

  var footer = this._multiPartFooter();

  append(header);
  append(value);
  append(footer); // pass along options.knownLength

  this._trackLength(header, value, options);
};

FormData.prototype._trackLength = function (header, value, options) {
  var valueLength = 0; // used w/ getLengthSync(), when length is known.
  // e.g. for streaming directly from a remote server,
  // w/ a known file a size, and not wanting to wait for
  // incoming file to finish to get its size.

  if (options.knownLength != null) {
    valueLength += +options.knownLength;
  } else if (Buffer.isBuffer(value)) {
    valueLength = value.length;
  } else if (typeof value === 'string') {
    valueLength = Buffer.byteLength(value);
  }

  this._valueLength += valueLength; // @check why add CRLF? does this account for custom/multiple CRLFs?

  this._overheadLength += Buffer.byteLength(header) + FormData.LINE_BREAK.length; // empty or either doesn't have path or not an http response or not a stream

  if (!value || !value.path && !(value.readable && value.hasOwnProperty('httpVersion')) && !(value instanceof Stream)) {
    return;
  } // no need to bother with the length


  if (!options.knownLength) {
    this._valuesToMeasure.push(value);
  }
};

FormData.prototype._lengthRetriever = function (value, callback) {
  if (value.hasOwnProperty('fd')) {
    // take read range into a account
    // `end` = Infinity –> read file till the end
    //
    // TODO: Looks like there is bug in Node fs.createReadStream
    // it doesn't respect `end` options without `start` options
    // Fix it when node fixes it.
    // https://github.com/joyent/node/issues/7819
    if (value.end != undefined && value.end != Infinity && value.start != undefined) {
      // when end specified
      // no need to calculate range
      // inclusive, starts with 0
      callback(null, value.end + 1 - (value.start ? value.start : 0)); // not that fast snoopy
    } else {
      // still need to fetch file size from fs
      fs.stat(value.path, function (err, stat) {
        var fileSize;

        if (err) {
          callback(err);
          return;
        } // update final size based on the range options


        fileSize = stat.size - (value.start ? value.start : 0);
        callback(null, fileSize);
      });
    } // or http response

  } else if (value.hasOwnProperty('httpVersion')) {
    callback(null, +value.headers['content-length']); // or request stream http://github.com/mikeal/request
  } else if (value.hasOwnProperty('httpModule')) {
    // wait till response come back
    value.on('response', function (response) {
      value.pause();
      callback(null, +response.headers['content-length']);
    });
    value.resume(); // something else
  } else {
    callback('Unknown stream');
  }
};

FormData.prototype._multiPartHeader = function (field, value, options) {
  // custom header specified (as string)?
  // it becomes responsible for boundary
  // (e.g. to handle extra CRLFs on .NET servers)
  if (typeof options.header == 'string') {
    return options.header;
  }

  var contentDisposition = this._getContentDisposition(value, options);

  var contentType = this._getContentType(value, options);

  var contents = '';
  var headers = {
    // add custom disposition as third element or keep it two elements if not
    'Content-Disposition': ['form-data', 'name="' + field + '"'].concat(contentDisposition || []),
    // if no content type. allow it to be empty array
    'Content-Type': [].concat(contentType || [])
  }; // allow custom headers.

  if (_typeof(options.header) == 'object') {
    populate(headers, options.header);
  }

  var header;

  for (var prop in headers) {
    if (!headers.hasOwnProperty(prop)) continue;
    header = headers[prop]; // skip nullish headers.

    if (header == null) {
      continue;
    } // convert all headers to arrays.


    if (!Array.isArray(header)) {
      header = [header];
    } // add non-empty headers.


    if (header.length) {
      contents += prop + ': ' + header.join('; ') + FormData.LINE_BREAK;
    }
  }

  return '--' + this.getBoundary() + FormData.LINE_BREAK + contents + FormData.LINE_BREAK;
};

FormData.prototype._getContentDisposition = function (value, options) {
  var filename, contentDisposition;

  if (typeof options.filepath === 'string') {
    // custom filepath for relative paths
    filename = path.normalize(options.filepath).replace(/\\/g, '/');
  } else if (options.filename || value.name || value.path) {
    // custom filename take precedence
    // formidable and the browser add a name property
    // fs- and request- streams have path property
    filename = path.basename(options.filename || value.name || value.path);
  } else if (value.readable && value.hasOwnProperty('httpVersion')) {
    // or try http response
    filename = path.basename(value.client._httpMessage.path || '');
  }

  if (filename) {
    contentDisposition = 'filename="' + filename + '"';
  }

  return contentDisposition;
};

FormData.prototype._getContentType = function (value, options) {
  // use custom content-type above all
  var contentType = options.contentType; // or try `name` from formidable, browser

  if (!contentType && value.name) {
    contentType = mime.lookup(value.name);
  } // or try `path` from fs-, request- streams


  if (!contentType && value.path) {
    contentType = mime.lookup(value.path);
  } // or if it's http-reponse


  if (!contentType && value.readable && value.hasOwnProperty('httpVersion')) {
    contentType = value.headers['content-type'];
  } // or guess it from the filepath or filename


  if (!contentType && (options.filepath || options.filename)) {
    contentType = mime.lookup(options.filepath || options.filename);
  } // fallback to the default content type if `value` is not simple value


  if (!contentType && _typeof(value) == 'object') {
    contentType = FormData.DEFAULT_CONTENT_TYPE;
  }

  return contentType;
};

FormData.prototype._multiPartFooter = function () {
  return function (next) {
    var footer = FormData.LINE_BREAK;
    var lastPart = this._streams.length === 0;

    if (lastPart) {
      footer += this._lastBoundary();
    }

    next(footer);
  }.bind(this);
};

FormData.prototype._lastBoundary = function () {
  return '--' + this.getBoundary() + '--' + FormData.LINE_BREAK;
};

FormData.prototype.getHeaders = function (userHeaders) {
  var header;
  var formHeaders = {
    'content-type': 'multipart/form-data; boundary=' + this.getBoundary()
  };

  for (header in userHeaders) {
    if (userHeaders.hasOwnProperty(header)) {
      formHeaders[header.toLowerCase()] = userHeaders[header];
    }
  }

  return formHeaders;
};

FormData.prototype.setBoundary = function (boundary) {
  this._boundary = boundary;
};

FormData.prototype.getBoundary = function () {
  if (!this._boundary) {
    this._generateBoundary();
  }

  return this._boundary;
};

FormData.prototype.getBuffer = function () {
  var dataBuffer = new Buffer.alloc(0);
  var boundary = this.getBoundary(); // Create the form content. Add Line breaks to the end of data.

  for (var i = 0, len = this._streams.length; i < len; i++) {
    if (typeof this._streams[i] !== 'function') {
      // Add content to the buffer.
      if (Buffer.isBuffer(this._streams[i])) {
        dataBuffer = Buffer.concat([dataBuffer, this._streams[i]]);
      } else {
        dataBuffer = Buffer.concat([dataBuffer, Buffer.from(this._streams[i])]);
      } // Add break after content.


      if (typeof this._streams[i] !== 'string' || this._streams[i].substring(2, boundary.length + 2) !== boundary) {
        dataBuffer = Buffer.concat([dataBuffer, Buffer.from(FormData.LINE_BREAK)]);
      }
    }
  } // Add the footer and return the Buffer object.


  return Buffer.concat([dataBuffer, Buffer.from(this._lastBoundary())]);
};

FormData.prototype._generateBoundary = function () {
  // This generates a 50 character boundary similar to those used by Firefox.
  // They are optimized for boyer-moore parsing.
  var boundary = '--------------------------';

  for (var i = 0; i < 24; i++) {
    boundary += Math.floor(Math.random() * 10).toString(16);
  }

  this._boundary = boundary;
}; // Note: getLengthSync DOESN'T calculate streams length
// As workaround one can calculate file size manually
// and add it as knownLength option


FormData.prototype.getLengthSync = function () {
  var knownLength = this._overheadLength + this._valueLength; // Don't get confused, there are 3 "internal" streams for each keyval pair
  // so it basically checks if there is any value added to the form

  if (this._streams.length) {
    knownLength += this._lastBoundary().length;
  } // https://github.com/form-data/form-data/issues/40


  if (!this.hasKnownLength()) {
    // Some async length retrievers are present
    // therefore synchronous length calculation is false.
    // Please use getLength(callback) to get proper length
    this._error(new Error('Cannot calculate proper length in synchronous way.'));
  }

  return knownLength;
}; // Public API to check if length of added values is known
// https://github.com/form-data/form-data/issues/196
// https://github.com/form-data/form-data/issues/262


FormData.prototype.hasKnownLength = function () {
  var hasKnownLength = true;

  if (this._valuesToMeasure.length) {
    hasKnownLength = false;
  }

  return hasKnownLength;
};

FormData.prototype.getLength = function (cb) {
  var knownLength = this._overheadLength + this._valueLength;

  if (this._streams.length) {
    knownLength += this._lastBoundary().length;
  }

  if (!this._valuesToMeasure.length) {
    process.nextTick(cb.bind(this, null, knownLength));
    return;
  }

  asynckit.parallel(this._valuesToMeasure, this._lengthRetriever, function (err, values) {
    if (err) {
      cb(err);
      return;
    }

    values.forEach(function (length) {
      knownLength += length;
    });
    cb(null, knownLength);
  });
};

FormData.prototype.submit = function (params, cb) {
  var request,
      options,
      defaults = {
    method: 'post'
  }; // parse provided url if it's string
  // or treat it as options object

  if (typeof params == 'string') {
    params = parseUrl(params);
    options = populate({
      port: params.port,
      path: params.pathname,
      host: params.hostname,
      protocol: params.protocol
    }, defaults); // use custom params
  } else {
    options = populate(params, defaults); // if no port provided use default one

    if (!options.port) {
      options.port = options.protocol == 'https:' ? 443 : 80;
    }
  } // put that good code in getHeaders to some use


  options.headers = this.getHeaders(params.headers); // https if specified, fallback to http in any other case

  if (options.protocol == 'https:') {
    request = https.request(options);
  } else {
    request = http.request(options);
  } // get content length and fire away


  this.getLength(function (err, length) {
    if (err && err !== 'Unknown stream') {
      this._error(err);

      return;
    } // add content length


    if (length) {
      request.setHeader('Content-Length', length);
    }

    this.pipe(request);

    if (cb) {
      var onResponse;

      var callback = function callback(error, responce) {
        request.removeListener('error', callback);
        request.removeListener('response', onResponse);
        return cb.call(this, error, responce);
      };

      onResponse = callback.bind(this, null);
      request.on('error', callback);
      request.on('response', onResponse);
    }
  }.bind(this));
  return request;
};

FormData.prototype._error = function (err) {
  if (!this.error) {
    this.error = err;
    this.pause();
    this.emit('error', err);
  }
};

FormData.prototype.toString = function () {
  return '[object FormData]';
};

/***/ }),
/* 117 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var util = __webpack_require__(7);

var Stream = __webpack_require__(1).Stream;

var DelayedStream = __webpack_require__(118);

module.exports = CombinedStream;

function CombinedStream() {
  this.writable = false;
  this.readable = true;
  this.dataSize = 0;
  this.maxDataSize = 2 * 1024 * 1024;
  this.pauseStreams = true;
  this._released = false;
  this._streams = [];
  this._currentStream = null;
  this._insideLoop = false;
  this._pendingNext = false;
}

util.inherits(CombinedStream, Stream);

CombinedStream.create = function (options) {
  var combinedStream = new this();
  options = options || {};

  for (var option in options) {
    combinedStream[option] = options[option];
  }

  return combinedStream;
};

CombinedStream.isStreamLike = function (stream) {
  return typeof stream !== 'function' && typeof stream !== 'string' && typeof stream !== 'boolean' && typeof stream !== 'number' && !Buffer.isBuffer(stream);
};

CombinedStream.prototype.append = function (stream) {
  var isStreamLike = CombinedStream.isStreamLike(stream);

  if (isStreamLike) {
    if (!(stream instanceof DelayedStream)) {
      var newStream = DelayedStream.create(stream, {
        maxDataSize: Infinity,
        pauseStream: this.pauseStreams
      });
      stream.on('data', this._checkDataSize.bind(this));
      stream = newStream;
    }

    this._handleErrors(stream);

    if (this.pauseStreams) {
      stream.pause();
    }
  }

  this._streams.push(stream);

  return this;
};

CombinedStream.prototype.pipe = function (dest, options) {
  Stream.prototype.pipe.call(this, dest, options);
  this.resume();
  return dest;
};

CombinedStream.prototype._getNext = function () {
  this._currentStream = null;

  if (this._insideLoop) {
    this._pendingNext = true;
    return; // defer call
  }

  this._insideLoop = true;

  try {
    do {
      this._pendingNext = false;

      this._realGetNext();
    } while (this._pendingNext);
  } finally {
    this._insideLoop = false;
  }
};

CombinedStream.prototype._realGetNext = function () {
  var stream = this._streams.shift();

  if (typeof stream == 'undefined') {
    this.end();
    return;
  }

  if (typeof stream !== 'function') {
    this._pipeNext(stream);

    return;
  }

  var getStream = stream;
  getStream(function (stream) {
    var isStreamLike = CombinedStream.isStreamLike(stream);

    if (isStreamLike) {
      stream.on('data', this._checkDataSize.bind(this));

      this._handleErrors(stream);
    }

    this._pipeNext(stream);
  }.bind(this));
};

CombinedStream.prototype._pipeNext = function (stream) {
  this._currentStream = stream;
  var isStreamLike = CombinedStream.isStreamLike(stream);

  if (isStreamLike) {
    stream.on('end', this._getNext.bind(this));
    stream.pipe(this, {
      end: false
    });
    return;
  }

  var value = stream;
  this.write(value);

  this._getNext();
};

CombinedStream.prototype._handleErrors = function (stream) {
  var self = this;
  stream.on('error', function (err) {
    self._emitError(err);
  });
};

CombinedStream.prototype.write = function (data) {
  this.emit('data', data);
};

CombinedStream.prototype.pause = function () {
  if (!this.pauseStreams) {
    return;
  }

  if (this.pauseStreams && this._currentStream && typeof this._currentStream.pause == 'function') this._currentStream.pause();
  this.emit('pause');
};

CombinedStream.prototype.resume = function () {
  if (!this._released) {
    this._released = true;
    this.writable = true;

    this._getNext();
  }

  if (this.pauseStreams && this._currentStream && typeof this._currentStream.resume == 'function') this._currentStream.resume();
  this.emit('resume');
};

CombinedStream.prototype.end = function () {
  this._reset();

  this.emit('end');
};

CombinedStream.prototype.destroy = function () {
  this._reset();

  this.emit('close');
};

CombinedStream.prototype._reset = function () {
  this.writable = false;
  this._streams = [];
  this._currentStream = null;
};

CombinedStream.prototype._checkDataSize = function () {
  this._updateDataSize();

  if (this.dataSize <= this.maxDataSize) {
    return;
  }

  var message = 'DelayedStream#maxDataSize of ' + this.maxDataSize + ' bytes exceeded.';

  this._emitError(new Error(message));
};

CombinedStream.prototype._updateDataSize = function () {
  this.dataSize = 0;
  var self = this;

  this._streams.forEach(function (stream) {
    if (!stream.dataSize) {
      return;
    }

    self.dataSize += stream.dataSize;
  });

  if (this._currentStream && this._currentStream.dataSize) {
    this.dataSize += this._currentStream.dataSize;
  }
};

CombinedStream.prototype._emitError = function (err) {
  this._reset();

  this.emit('error', err);
};

/***/ }),
/* 118 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Stream = __webpack_require__(1).Stream;

var util = __webpack_require__(7);

module.exports = DelayedStream;

function DelayedStream() {
  this.source = null;
  this.dataSize = 0;
  this.maxDataSize = 1024 * 1024;
  this.pauseStream = true;
  this._maxDataSizeExceeded = false;
  this._released = false;
  this._bufferedEvents = [];
}

util.inherits(DelayedStream, Stream);

DelayedStream.create = function (source, options) {
  var delayedStream = new this();
  options = options || {};

  for (var option in options) {
    delayedStream[option] = options[option];
  }

  delayedStream.source = source;
  var realEmit = source.emit;

  source.emit = function () {
    delayedStream._handleEmit(arguments);

    return realEmit.apply(source, arguments);
  };

  source.on('error', function () {});

  if (delayedStream.pauseStream) {
    source.pause();
  }

  return delayedStream;
};

Object.defineProperty(DelayedStream.prototype, 'readable', {
  configurable: true,
  enumerable: true,
  get: function get() {
    return this.source.readable;
  }
});

DelayedStream.prototype.setEncoding = function () {
  return this.source.setEncoding.apply(this.source, arguments);
};

DelayedStream.prototype.resume = function () {
  if (!this._released) {
    this.release();
  }

  this.source.resume();
};

DelayedStream.prototype.pause = function () {
  this.source.pause();
};

DelayedStream.prototype.release = function () {
  this._released = true;

  this._bufferedEvents.forEach(function (args) {
    this.emit.apply(this, args);
  }.bind(this));

  this._bufferedEvents = [];
};

DelayedStream.prototype.pipe = function () {
  var r = Stream.prototype.pipe.apply(this, arguments);
  this.resume();
  return r;
};

DelayedStream.prototype._handleEmit = function (args) {
  if (this._released) {
    this.emit.apply(this, args);
    return;
  }

  if (args[0] === 'data') {
    this.dataSize += args[1].length;

    this._checkIfMaxDataSizeExceeded();
  }

  this._bufferedEvents.push(args);
};

DelayedStream.prototype._checkIfMaxDataSizeExceeded = function () {
  if (this._maxDataSizeExceeded) {
    return;
  }

  if (this.dataSize <= this.maxDataSize) {
    return;
  }

  this._maxDataSizeExceeded = true;
  var message = 'DelayedStream#maxDataSize of ' + this.maxDataSize + ' bytes exceeded.';
  this.emit('error', new Error(message));
};

/***/ }),
/* 119 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*!
 * mime-types
 * Copyright(c) 2014 Jonathan Ong
 * Copyright(c) 2015 Douglas Christopher Wilson
 * MIT Licensed
 */

/**
 * Module dependencies.
 * @private
 */

var db = __webpack_require__(120);

var extname = __webpack_require__(20).extname;
/**
 * Module variables.
 * @private
 */


var EXTRACT_TYPE_REGEXP = /^\s*([^;\s]*)(?:;|\s|$)/;
var TEXT_TYPE_REGEXP = /^text\//i;
/**
 * Module exports.
 * @public
 */

exports.charset = charset;
exports.charsets = {
  lookup: charset
};
exports.contentType = contentType;
exports.extension = extension;
exports.extensions = Object.create(null);
exports.lookup = lookup;
exports.types = Object.create(null); // Populate the extensions/types maps

populateMaps(exports.extensions, exports.types);
/**
 * Get the default charset for a MIME type.
 *
 * @param {string} type
 * @return {boolean|string}
 */

function charset(type) {
  if (!type || typeof type !== 'string') {
    return false;
  } // TODO: use media-typer


  var match = EXTRACT_TYPE_REGEXP.exec(type);
  var mime = match && db[match[1].toLowerCase()];

  if (mime && mime.charset) {
    return mime.charset;
  } // default text/* to utf-8


  if (match && TEXT_TYPE_REGEXP.test(match[1])) {
    return 'UTF-8';
  }

  return false;
}
/**
 * Create a full Content-Type header given a MIME type or extension.
 *
 * @param {string} str
 * @return {boolean|string}
 */


function contentType(str) {
  // TODO: should this even be in this module?
  if (!str || typeof str !== 'string') {
    return false;
  }

  var mime = str.indexOf('/') === -1 ? exports.lookup(str) : str;

  if (!mime) {
    return false;
  } // TODO: use content-type or other module


  if (mime.indexOf('charset') === -1) {
    var charset = exports.charset(mime);
    if (charset) mime += '; charset=' + charset.toLowerCase();
  }

  return mime;
}
/**
 * Get the default extension for a MIME type.
 *
 * @param {string} type
 * @return {boolean|string}
 */


function extension(type) {
  if (!type || typeof type !== 'string') {
    return false;
  } // TODO: use media-typer


  var match = EXTRACT_TYPE_REGEXP.exec(type); // get extensions

  var exts = match && exports.extensions[match[1].toLowerCase()];

  if (!exts || !exts.length) {
    return false;
  }

  return exts[0];
}
/**
 * Lookup the MIME type for a file path/extension.
 *
 * @param {string} path
 * @return {boolean|string}
 */


function lookup(path) {
  if (!path || typeof path !== 'string') {
    return false;
  } // get the extension ("ext" or ".ext" or full path)


  var extension = extname('x.' + path).toLowerCase().substr(1);

  if (!extension) {
    return false;
  }

  return exports.types[extension] || false;
}
/**
 * Populate the extensions and types maps.
 * @private
 */


function populateMaps(extensions, types) {
  // source preference (least -> most)
  var preference = ['nginx', 'apache', undefined, 'iana'];
  Object.keys(db).forEach(function forEachMimeType(type) {
    var mime = db[type];
    var exts = mime.extensions;

    if (!exts || !exts.length) {
      return;
    } // mime -> extensions


    extensions[type] = exts; // extension -> mime

    for (var i = 0; i < exts.length; i++) {
      var extension = exts[i];

      if (types[extension]) {
        var from = preference.indexOf(db[types[extension]].source);
        var to = preference.indexOf(mime.source);

        if (types[extension] !== 'application/octet-stream' && (from > to || from === to && types[extension].substr(0, 12) === 'application/')) {
          // skip the remapping
          continue;
        }
      } // set the extension -> mime


      types[extension] = type;
    }
  });
}

/***/ }),
/* 120 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*!
 * mime-db
 * Copyright(c) 2014 Jonathan Ong
 * MIT Licensed
 */

/**
 * Module exports.
 */
module.exports = __webpack_require__(121);

/***/ }),
/* 121 */
/***/ (function(module) {

module.exports = JSON.parse("{\"application/1d-interleaved-parityfec\":{\"source\":\"iana\"},\"application/3gpdash-qoe-report+xml\":{\"source\":\"iana\",\"charset\":\"UTF-8\",\"compressible\":true},\"application/3gpp-ims+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/3gpphal+json\":{\"source\":\"iana\",\"compressible\":true},\"application/3gpphalforms+json\":{\"source\":\"iana\",\"compressible\":true},\"application/a2l\":{\"source\":\"iana\"},\"application/ace+cbor\":{\"source\":\"iana\"},\"application/activemessage\":{\"source\":\"iana\"},\"application/activity+json\":{\"source\":\"iana\",\"compressible\":true},\"application/alto-costmap+json\":{\"source\":\"iana\",\"compressible\":true},\"application/alto-costmapfilter+json\":{\"source\":\"iana\",\"compressible\":true},\"application/alto-directory+json\":{\"source\":\"iana\",\"compressible\":true},\"application/alto-endpointcost+json\":{\"source\":\"iana\",\"compressible\":true},\"application/alto-endpointcostparams+json\":{\"source\":\"iana\",\"compressible\":true},\"application/alto-endpointprop+json\":{\"source\":\"iana\",\"compressible\":true},\"application/alto-endpointpropparams+json\":{\"source\":\"iana\",\"compressible\":true},\"application/alto-error+json\":{\"source\":\"iana\",\"compressible\":true},\"application/alto-networkmap+json\":{\"source\":\"iana\",\"compressible\":true},\"application/alto-networkmapfilter+json\":{\"source\":\"iana\",\"compressible\":true},\"application/alto-updatestreamcontrol+json\":{\"source\":\"iana\",\"compressible\":true},\"application/alto-updatestreamparams+json\":{\"source\":\"iana\",\"compressible\":true},\"application/aml\":{\"source\":\"iana\"},\"application/andrew-inset\":{\"source\":\"iana\",\"extensions\":[\"ez\"]},\"application/applefile\":{\"source\":\"iana\"},\"application/applixware\":{\"source\":\"apache\",\"extensions\":[\"aw\"]},\"application/at+jwt\":{\"source\":\"iana\"},\"application/atf\":{\"source\":\"iana\"},\"application/atfx\":{\"source\":\"iana\"},\"application/atom+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"atom\"]},\"application/atomcat+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"atomcat\"]},\"application/atomdeleted+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"atomdeleted\"]},\"application/atomicmail\":{\"source\":\"iana\"},\"application/atomsvc+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"atomsvc\"]},\"application/atsc-dwd+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"dwd\"]},\"application/atsc-dynamic-event-message\":{\"source\":\"iana\"},\"application/atsc-held+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"held\"]},\"application/atsc-rdt+json\":{\"source\":\"iana\",\"compressible\":true},\"application/atsc-rsat+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"rsat\"]},\"application/atxml\":{\"source\":\"iana\"},\"application/auth-policy+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/bacnet-xdd+zip\":{\"source\":\"iana\",\"compressible\":false},\"application/batch-smtp\":{\"source\":\"iana\"},\"application/bdoc\":{\"compressible\":false,\"extensions\":[\"bdoc\"]},\"application/beep+xml\":{\"source\":\"iana\",\"charset\":\"UTF-8\",\"compressible\":true},\"application/calendar+json\":{\"source\":\"iana\",\"compressible\":true},\"application/calendar+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"xcs\"]},\"application/call-completion\":{\"source\":\"iana\"},\"application/cals-1840\":{\"source\":\"iana\"},\"application/captive+json\":{\"source\":\"iana\",\"compressible\":true},\"application/cbor\":{\"source\":\"iana\"},\"application/cbor-seq\":{\"source\":\"iana\"},\"application/cccex\":{\"source\":\"iana\"},\"application/ccmp+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/ccxml+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"ccxml\"]},\"application/cdfx+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"cdfx\"]},\"application/cdmi-capability\":{\"source\":\"iana\",\"extensions\":[\"cdmia\"]},\"application/cdmi-container\":{\"source\":\"iana\",\"extensions\":[\"cdmic\"]},\"application/cdmi-domain\":{\"source\":\"iana\",\"extensions\":[\"cdmid\"]},\"application/cdmi-object\":{\"source\":\"iana\",\"extensions\":[\"cdmio\"]},\"application/cdmi-queue\":{\"source\":\"iana\",\"extensions\":[\"cdmiq\"]},\"application/cdni\":{\"source\":\"iana\"},\"application/cea\":{\"source\":\"iana\"},\"application/cea-2018+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/cellml+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/cfw\":{\"source\":\"iana\"},\"application/clr\":{\"source\":\"iana\"},\"application/clue+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/clue_info+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/cms\":{\"source\":\"iana\"},\"application/cnrp+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/coap-group+json\":{\"source\":\"iana\",\"compressible\":true},\"application/coap-payload\":{\"source\":\"iana\"},\"application/commonground\":{\"source\":\"iana\"},\"application/conference-info+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/cose\":{\"source\":\"iana\"},\"application/cose-key\":{\"source\":\"iana\"},\"application/cose-key-set\":{\"source\":\"iana\"},\"application/cpl+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/csrattrs\":{\"source\":\"iana\"},\"application/csta+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/cstadata+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/csvm+json\":{\"source\":\"iana\",\"compressible\":true},\"application/cu-seeme\":{\"source\":\"apache\",\"extensions\":[\"cu\"]},\"application/cwt\":{\"source\":\"iana\"},\"application/cybercash\":{\"source\":\"iana\"},\"application/dart\":{\"compressible\":true},\"application/dash+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"mpd\"]},\"application/dashdelta\":{\"source\":\"iana\"},\"application/davmount+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"davmount\"]},\"application/dca-rft\":{\"source\":\"iana\"},\"application/dcd\":{\"source\":\"iana\"},\"application/dec-dx\":{\"source\":\"iana\"},\"application/dialog-info+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/dicom\":{\"source\":\"iana\"},\"application/dicom+json\":{\"source\":\"iana\",\"compressible\":true},\"application/dicom+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/dii\":{\"source\":\"iana\"},\"application/dit\":{\"source\":\"iana\"},\"application/dns\":{\"source\":\"iana\"},\"application/dns+json\":{\"source\":\"iana\",\"compressible\":true},\"application/dns-message\":{\"source\":\"iana\"},\"application/docbook+xml\":{\"source\":\"apache\",\"compressible\":true,\"extensions\":[\"dbk\"]},\"application/dots+cbor\":{\"source\":\"iana\"},\"application/dskpp+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/dssc+der\":{\"source\":\"iana\",\"extensions\":[\"dssc\"]},\"application/dssc+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"xdssc\"]},\"application/dvcs\":{\"source\":\"iana\"},\"application/ecmascript\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"es\",\"ecma\"]},\"application/edi-consent\":{\"source\":\"iana\"},\"application/edi-x12\":{\"source\":\"iana\",\"compressible\":false},\"application/edifact\":{\"source\":\"iana\",\"compressible\":false},\"application/efi\":{\"source\":\"iana\"},\"application/elm+json\":{\"source\":\"iana\",\"charset\":\"UTF-8\",\"compressible\":true},\"application/elm+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/emergencycalldata.cap+xml\":{\"source\":\"iana\",\"charset\":\"UTF-8\",\"compressible\":true},\"application/emergencycalldata.comment+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/emergencycalldata.control+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/emergencycalldata.deviceinfo+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/emergencycalldata.ecall.msd\":{\"source\":\"iana\"},\"application/emergencycalldata.providerinfo+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/emergencycalldata.serviceinfo+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/emergencycalldata.subscriberinfo+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/emergencycalldata.veds+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/emma+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"emma\"]},\"application/emotionml+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"emotionml\"]},\"application/encaprtp\":{\"source\":\"iana\"},\"application/epp+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/epub+zip\":{\"source\":\"iana\",\"compressible\":false,\"extensions\":[\"epub\"]},\"application/eshop\":{\"source\":\"iana\"},\"application/exi\":{\"source\":\"iana\",\"extensions\":[\"exi\"]},\"application/expect-ct-report+json\":{\"source\":\"iana\",\"compressible\":true},\"application/express\":{\"source\":\"iana\",\"extensions\":[\"exp\"]},\"application/fastinfoset\":{\"source\":\"iana\"},\"application/fastsoap\":{\"source\":\"iana\"},\"application/fdt+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"fdt\"]},\"application/fhir+json\":{\"source\":\"iana\",\"charset\":\"UTF-8\",\"compressible\":true},\"application/fhir+xml\":{\"source\":\"iana\",\"charset\":\"UTF-8\",\"compressible\":true},\"application/fido.trusted-apps+json\":{\"compressible\":true},\"application/fits\":{\"source\":\"iana\"},\"application/flexfec\":{\"source\":\"iana\"},\"application/font-sfnt\":{\"source\":\"iana\"},\"application/font-tdpfr\":{\"source\":\"iana\",\"extensions\":[\"pfr\"]},\"application/font-woff\":{\"source\":\"iana\",\"compressible\":false},\"application/framework-attributes+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/geo+json\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"geojson\"]},\"application/geo+json-seq\":{\"source\":\"iana\"},\"application/geopackage+sqlite3\":{\"source\":\"iana\"},\"application/geoxacml+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/gltf-buffer\":{\"source\":\"iana\"},\"application/gml+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"gml\"]},\"application/gpx+xml\":{\"source\":\"apache\",\"compressible\":true,\"extensions\":[\"gpx\"]},\"application/gxf\":{\"source\":\"apache\",\"extensions\":[\"gxf\"]},\"application/gzip\":{\"source\":\"iana\",\"compressible\":false,\"extensions\":[\"gz\"]},\"application/h224\":{\"source\":\"iana\"},\"application/held+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/hjson\":{\"extensions\":[\"hjson\"]},\"application/http\":{\"source\":\"iana\"},\"application/hyperstudio\":{\"source\":\"iana\",\"extensions\":[\"stk\"]},\"application/ibe-key-request+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/ibe-pkg-reply+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/ibe-pp-data\":{\"source\":\"iana\"},\"application/iges\":{\"source\":\"iana\"},\"application/im-iscomposing+xml\":{\"source\":\"iana\",\"charset\":\"UTF-8\",\"compressible\":true},\"application/index\":{\"source\":\"iana\"},\"application/index.cmd\":{\"source\":\"iana\"},\"application/index.obj\":{\"source\":\"iana\"},\"application/index.response\":{\"source\":\"iana\"},\"application/index.vnd\":{\"source\":\"iana\"},\"application/inkml+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"ink\",\"inkml\"]},\"application/iotp\":{\"source\":\"iana\"},\"application/ipfix\":{\"source\":\"iana\",\"extensions\":[\"ipfix\"]},\"application/ipp\":{\"source\":\"iana\"},\"application/isup\":{\"source\":\"iana\"},\"application/its+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"its\"]},\"application/java-archive\":{\"source\":\"apache\",\"compressible\":false,\"extensions\":[\"jar\",\"war\",\"ear\"]},\"application/java-serialized-object\":{\"source\":\"apache\",\"compressible\":false,\"extensions\":[\"ser\"]},\"application/java-vm\":{\"source\":\"apache\",\"compressible\":false,\"extensions\":[\"class\"]},\"application/javascript\":{\"source\":\"iana\",\"charset\":\"UTF-8\",\"compressible\":true,\"extensions\":[\"js\",\"mjs\"]},\"application/jf2feed+json\":{\"source\":\"iana\",\"compressible\":true},\"application/jose\":{\"source\":\"iana\"},\"application/jose+json\":{\"source\":\"iana\",\"compressible\":true},\"application/jrd+json\":{\"source\":\"iana\",\"compressible\":true},\"application/jscalendar+json\":{\"source\":\"iana\",\"compressible\":true},\"application/json\":{\"source\":\"iana\",\"charset\":\"UTF-8\",\"compressible\":true,\"extensions\":[\"json\",\"map\"]},\"application/json-patch+json\":{\"source\":\"iana\",\"compressible\":true},\"application/json-seq\":{\"source\":\"iana\"},\"application/json5\":{\"extensions\":[\"json5\"]},\"application/jsonml+json\":{\"source\":\"apache\",\"compressible\":true,\"extensions\":[\"jsonml\"]},\"application/jwk+json\":{\"source\":\"iana\",\"compressible\":true},\"application/jwk-set+json\":{\"source\":\"iana\",\"compressible\":true},\"application/jwt\":{\"source\":\"iana\"},\"application/kpml-request+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/kpml-response+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/ld+json\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"jsonld\"]},\"application/lgr+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"lgr\"]},\"application/link-format\":{\"source\":\"iana\"},\"application/load-control+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/lost+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"lostxml\"]},\"application/lostsync+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/lpf+zip\":{\"source\":\"iana\",\"compressible\":false},\"application/lxf\":{\"source\":\"iana\"},\"application/mac-binhex40\":{\"source\":\"iana\",\"extensions\":[\"hqx\"]},\"application/mac-compactpro\":{\"source\":\"apache\",\"extensions\":[\"cpt\"]},\"application/macwriteii\":{\"source\":\"iana\"},\"application/mads+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"mads\"]},\"application/manifest+json\":{\"source\":\"iana\",\"charset\":\"UTF-8\",\"compressible\":true,\"extensions\":[\"webmanifest\"]},\"application/marc\":{\"source\":\"iana\",\"extensions\":[\"mrc\"]},\"application/marcxml+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"mrcx\"]},\"application/mathematica\":{\"source\":\"iana\",\"extensions\":[\"ma\",\"nb\",\"mb\"]},\"application/mathml+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"mathml\"]},\"application/mathml-content+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/mathml-presentation+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/mbms-associated-procedure-description+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/mbms-deregister+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/mbms-envelope+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/mbms-msk+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/mbms-msk-response+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/mbms-protection-description+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/mbms-reception-report+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/mbms-register+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/mbms-register-response+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/mbms-schedule+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/mbms-user-service-description+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/mbox\":{\"source\":\"iana\",\"extensions\":[\"mbox\"]},\"application/media-policy-dataset+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/media_control+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/mediaservercontrol+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"mscml\"]},\"application/merge-patch+json\":{\"source\":\"iana\",\"compressible\":true},\"application/metalink+xml\":{\"source\":\"apache\",\"compressible\":true,\"extensions\":[\"metalink\"]},\"application/metalink4+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"meta4\"]},\"application/mets+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"mets\"]},\"application/mf4\":{\"source\":\"iana\"},\"application/mikey\":{\"source\":\"iana\"},\"application/mipc\":{\"source\":\"iana\"},\"application/missing-blocks+cbor-seq\":{\"source\":\"iana\"},\"application/mmt-aei+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"maei\"]},\"application/mmt-usd+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"musd\"]},\"application/mods+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"mods\"]},\"application/moss-keys\":{\"source\":\"iana\"},\"application/moss-signature\":{\"source\":\"iana\"},\"application/mosskey-data\":{\"source\":\"iana\"},\"application/mosskey-request\":{\"source\":\"iana\"},\"application/mp21\":{\"source\":\"iana\",\"extensions\":[\"m21\",\"mp21\"]},\"application/mp4\":{\"source\":\"iana\",\"extensions\":[\"mp4s\",\"m4p\"]},\"application/mpeg4-generic\":{\"source\":\"iana\"},\"application/mpeg4-iod\":{\"source\":\"iana\"},\"application/mpeg4-iod-xmt\":{\"source\":\"iana\"},\"application/mrb-consumer+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/mrb-publish+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/msc-ivr+xml\":{\"source\":\"iana\",\"charset\":\"UTF-8\",\"compressible\":true},\"application/msc-mixer+xml\":{\"source\":\"iana\",\"charset\":\"UTF-8\",\"compressible\":true},\"application/msword\":{\"source\":\"iana\",\"compressible\":false,\"extensions\":[\"doc\",\"dot\"]},\"application/mud+json\":{\"source\":\"iana\",\"compressible\":true},\"application/multipart-core\":{\"source\":\"iana\"},\"application/mxf\":{\"source\":\"iana\",\"extensions\":[\"mxf\"]},\"application/n-quads\":{\"source\":\"iana\",\"extensions\":[\"nq\"]},\"application/n-triples\":{\"source\":\"iana\",\"extensions\":[\"nt\"]},\"application/nasdata\":{\"source\":\"iana\"},\"application/news-checkgroups\":{\"source\":\"iana\",\"charset\":\"US-ASCII\"},\"application/news-groupinfo\":{\"source\":\"iana\",\"charset\":\"US-ASCII\"},\"application/news-transmission\":{\"source\":\"iana\"},\"application/nlsml+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/node\":{\"source\":\"iana\",\"extensions\":[\"cjs\"]},\"application/nss\":{\"source\":\"iana\"},\"application/oauth-authz-req+jwt\":{\"source\":\"iana\"},\"application/ocsp-request\":{\"source\":\"iana\"},\"application/ocsp-response\":{\"source\":\"iana\"},\"application/octet-stream\":{\"source\":\"iana\",\"compressible\":false,\"extensions\":[\"bin\",\"dms\",\"lrf\",\"mar\",\"so\",\"dist\",\"distz\",\"pkg\",\"bpk\",\"dump\",\"elc\",\"deploy\",\"exe\",\"dll\",\"deb\",\"dmg\",\"iso\",\"img\",\"msi\",\"msp\",\"msm\",\"buffer\"]},\"application/oda\":{\"source\":\"iana\",\"extensions\":[\"oda\"]},\"application/odm+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/odx\":{\"source\":\"iana\"},\"application/oebps-package+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"opf\"]},\"application/ogg\":{\"source\":\"iana\",\"compressible\":false,\"extensions\":[\"ogx\"]},\"application/omdoc+xml\":{\"source\":\"apache\",\"compressible\":true,\"extensions\":[\"omdoc\"]},\"application/onenote\":{\"source\":\"apache\",\"extensions\":[\"onetoc\",\"onetoc2\",\"onetmp\",\"onepkg\"]},\"application/opc-nodeset+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/oscore\":{\"source\":\"iana\"},\"application/oxps\":{\"source\":\"iana\",\"extensions\":[\"oxps\"]},\"application/p21\":{\"source\":\"iana\"},\"application/p21+zip\":{\"source\":\"iana\",\"compressible\":false},\"application/p2p-overlay+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"relo\"]},\"application/parityfec\":{\"source\":\"iana\"},\"application/passport\":{\"source\":\"iana\"},\"application/patch-ops-error+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"xer\"]},\"application/pdf\":{\"source\":\"iana\",\"compressible\":false,\"extensions\":[\"pdf\"]},\"application/pdx\":{\"source\":\"iana\"},\"application/pem-certificate-chain\":{\"source\":\"iana\"},\"application/pgp-encrypted\":{\"source\":\"iana\",\"compressible\":false,\"extensions\":[\"pgp\"]},\"application/pgp-keys\":{\"source\":\"iana\"},\"application/pgp-signature\":{\"source\":\"iana\",\"extensions\":[\"asc\",\"sig\"]},\"application/pics-rules\":{\"source\":\"apache\",\"extensions\":[\"prf\"]},\"application/pidf+xml\":{\"source\":\"iana\",\"charset\":\"UTF-8\",\"compressible\":true},\"application/pidf-diff+xml\":{\"source\":\"iana\",\"charset\":\"UTF-8\",\"compressible\":true},\"application/pkcs10\":{\"source\":\"iana\",\"extensions\":[\"p10\"]},\"application/pkcs12\":{\"source\":\"iana\"},\"application/pkcs7-mime\":{\"source\":\"iana\",\"extensions\":[\"p7m\",\"p7c\"]},\"application/pkcs7-signature\":{\"source\":\"iana\",\"extensions\":[\"p7s\"]},\"application/pkcs8\":{\"source\":\"iana\",\"extensions\":[\"p8\"]},\"application/pkcs8-encrypted\":{\"source\":\"iana\"},\"application/pkix-attr-cert\":{\"source\":\"iana\",\"extensions\":[\"ac\"]},\"application/pkix-cert\":{\"source\":\"iana\",\"extensions\":[\"cer\"]},\"application/pkix-crl\":{\"source\":\"iana\",\"extensions\":[\"crl\"]},\"application/pkix-pkipath\":{\"source\":\"iana\",\"extensions\":[\"pkipath\"]},\"application/pkixcmp\":{\"source\":\"iana\",\"extensions\":[\"pki\"]},\"application/pls+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"pls\"]},\"application/poc-settings+xml\":{\"source\":\"iana\",\"charset\":\"UTF-8\",\"compressible\":true},\"application/postscript\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"ai\",\"eps\",\"ps\"]},\"application/ppsp-tracker+json\":{\"source\":\"iana\",\"compressible\":true},\"application/problem+json\":{\"source\":\"iana\",\"compressible\":true},\"application/problem+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/provenance+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"provx\"]},\"application/prs.alvestrand.titrax-sheet\":{\"source\":\"iana\"},\"application/prs.cww\":{\"source\":\"iana\",\"extensions\":[\"cww\"]},\"application/prs.cyn\":{\"source\":\"iana\",\"charset\":\"7-BIT\"},\"application/prs.hpub+zip\":{\"source\":\"iana\",\"compressible\":false},\"application/prs.nprend\":{\"source\":\"iana\"},\"application/prs.plucker\":{\"source\":\"iana\"},\"application/prs.rdf-xml-crypt\":{\"source\":\"iana\"},\"application/prs.xsf+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/pskc+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"pskcxml\"]},\"application/pvd+json\":{\"source\":\"iana\",\"compressible\":true},\"application/qsig\":{\"source\":\"iana\"},\"application/raml+yaml\":{\"compressible\":true,\"extensions\":[\"raml\"]},\"application/raptorfec\":{\"source\":\"iana\"},\"application/rdap+json\":{\"source\":\"iana\",\"compressible\":true},\"application/rdf+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"rdf\",\"owl\"]},\"application/reginfo+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"rif\"]},\"application/relax-ng-compact-syntax\":{\"source\":\"iana\",\"extensions\":[\"rnc\"]},\"application/remote-printing\":{\"source\":\"iana\"},\"application/reputon+json\":{\"source\":\"iana\",\"compressible\":true},\"application/resource-lists+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"rl\"]},\"application/resource-lists-diff+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"rld\"]},\"application/rfc+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/riscos\":{\"source\":\"iana\"},\"application/rlmi+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/rls-services+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"rs\"]},\"application/route-apd+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"rapd\"]},\"application/route-s-tsid+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"sls\"]},\"application/route-usd+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"rusd\"]},\"application/rpki-ghostbusters\":{\"source\":\"iana\",\"extensions\":[\"gbr\"]},\"application/rpki-manifest\":{\"source\":\"iana\",\"extensions\":[\"mft\"]},\"application/rpki-publication\":{\"source\":\"iana\"},\"application/rpki-roa\":{\"source\":\"iana\",\"extensions\":[\"roa\"]},\"application/rpki-updown\":{\"source\":\"iana\"},\"application/rsd+xml\":{\"source\":\"apache\",\"compressible\":true,\"extensions\":[\"rsd\"]},\"application/rss+xml\":{\"source\":\"apache\",\"compressible\":true,\"extensions\":[\"rss\"]},\"application/rtf\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"rtf\"]},\"application/rtploopback\":{\"source\":\"iana\"},\"application/rtx\":{\"source\":\"iana\"},\"application/samlassertion+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/samlmetadata+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/sarif+json\":{\"source\":\"iana\",\"compressible\":true},\"application/sarif-external-properties+json\":{\"source\":\"iana\",\"compressible\":true},\"application/sbe\":{\"source\":\"iana\"},\"application/sbml+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"sbml\"]},\"application/scaip+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/scim+json\":{\"source\":\"iana\",\"compressible\":true},\"application/scvp-cv-request\":{\"source\":\"iana\",\"extensions\":[\"scq\"]},\"application/scvp-cv-response\":{\"source\":\"iana\",\"extensions\":[\"scs\"]},\"application/scvp-vp-request\":{\"source\":\"iana\",\"extensions\":[\"spq\"]},\"application/scvp-vp-response\":{\"source\":\"iana\",\"extensions\":[\"spp\"]},\"application/sdp\":{\"source\":\"iana\",\"extensions\":[\"sdp\"]},\"application/secevent+jwt\":{\"source\":\"iana\"},\"application/senml+cbor\":{\"source\":\"iana\"},\"application/senml+json\":{\"source\":\"iana\",\"compressible\":true},\"application/senml+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"senmlx\"]},\"application/senml-etch+cbor\":{\"source\":\"iana\"},\"application/senml-etch+json\":{\"source\":\"iana\",\"compressible\":true},\"application/senml-exi\":{\"source\":\"iana\"},\"application/sensml+cbor\":{\"source\":\"iana\"},\"application/sensml+json\":{\"source\":\"iana\",\"compressible\":true},\"application/sensml+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"sensmlx\"]},\"application/sensml-exi\":{\"source\":\"iana\"},\"application/sep+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/sep-exi\":{\"source\":\"iana\"},\"application/session-info\":{\"source\":\"iana\"},\"application/set-payment\":{\"source\":\"iana\"},\"application/set-payment-initiation\":{\"source\":\"iana\",\"extensions\":[\"setpay\"]},\"application/set-registration\":{\"source\":\"iana\"},\"application/set-registration-initiation\":{\"source\":\"iana\",\"extensions\":[\"setreg\"]},\"application/sgml\":{\"source\":\"iana\"},\"application/sgml-open-catalog\":{\"source\":\"iana\"},\"application/shf+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"shf\"]},\"application/sieve\":{\"source\":\"iana\",\"extensions\":[\"siv\",\"sieve\"]},\"application/simple-filter+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/simple-message-summary\":{\"source\":\"iana\"},\"application/simplesymbolcontainer\":{\"source\":\"iana\"},\"application/sipc\":{\"source\":\"iana\"},\"application/slate\":{\"source\":\"iana\"},\"application/smil\":{\"source\":\"iana\"},\"application/smil+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"smi\",\"smil\"]},\"application/smpte336m\":{\"source\":\"iana\"},\"application/soap+fastinfoset\":{\"source\":\"iana\"},\"application/soap+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/sparql-query\":{\"source\":\"iana\",\"extensions\":[\"rq\"]},\"application/sparql-results+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"srx\"]},\"application/spdx+json\":{\"source\":\"iana\",\"compressible\":true},\"application/spirits-event+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/sql\":{\"source\":\"iana\"},\"application/srgs\":{\"source\":\"iana\",\"extensions\":[\"gram\"]},\"application/srgs+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"grxml\"]},\"application/sru+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"sru\"]},\"application/ssdl+xml\":{\"source\":\"apache\",\"compressible\":true,\"extensions\":[\"ssdl\"]},\"application/ssml+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"ssml\"]},\"application/stix+json\":{\"source\":\"iana\",\"compressible\":true},\"application/swid+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"swidtag\"]},\"application/tamp-apex-update\":{\"source\":\"iana\"},\"application/tamp-apex-update-confirm\":{\"source\":\"iana\"},\"application/tamp-community-update\":{\"source\":\"iana\"},\"application/tamp-community-update-confirm\":{\"source\":\"iana\"},\"application/tamp-error\":{\"source\":\"iana\"},\"application/tamp-sequence-adjust\":{\"source\":\"iana\"},\"application/tamp-sequence-adjust-confirm\":{\"source\":\"iana\"},\"application/tamp-status-query\":{\"source\":\"iana\"},\"application/tamp-status-response\":{\"source\":\"iana\"},\"application/tamp-update\":{\"source\":\"iana\"},\"application/tamp-update-confirm\":{\"source\":\"iana\"},\"application/tar\":{\"compressible\":true},\"application/taxii+json\":{\"source\":\"iana\",\"compressible\":true},\"application/td+json\":{\"source\":\"iana\",\"compressible\":true},\"application/tei+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"tei\",\"teicorpus\"]},\"application/tetra_isi\":{\"source\":\"iana\"},\"application/thraud+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"tfi\"]},\"application/timestamp-query\":{\"source\":\"iana\"},\"application/timestamp-reply\":{\"source\":\"iana\"},\"application/timestamped-data\":{\"source\":\"iana\",\"extensions\":[\"tsd\"]},\"application/tlsrpt+gzip\":{\"source\":\"iana\"},\"application/tlsrpt+json\":{\"source\":\"iana\",\"compressible\":true},\"application/tnauthlist\":{\"source\":\"iana\"},\"application/token-introspection+jwt\":{\"source\":\"iana\"},\"application/toml\":{\"compressible\":true,\"extensions\":[\"toml\"]},\"application/trickle-ice-sdpfrag\":{\"source\":\"iana\"},\"application/trig\":{\"source\":\"iana\",\"extensions\":[\"trig\"]},\"application/ttml+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"ttml\"]},\"application/tve-trigger\":{\"source\":\"iana\"},\"application/tzif\":{\"source\":\"iana\"},\"application/tzif-leap\":{\"source\":\"iana\"},\"application/ubjson\":{\"compressible\":false,\"extensions\":[\"ubj\"]},\"application/ulpfec\":{\"source\":\"iana\"},\"application/urc-grpsheet+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/urc-ressheet+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"rsheet\"]},\"application/urc-targetdesc+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"td\"]},\"application/urc-uisocketdesc+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vcard+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vcard+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vemmi\":{\"source\":\"iana\"},\"application/vividence.scriptfile\":{\"source\":\"apache\"},\"application/vnd.1000minds.decision-model+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"1km\"]},\"application/vnd.3gpp-prose+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.3gpp-prose-pc3ch+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.3gpp-v2x-local-service-information\":{\"source\":\"iana\"},\"application/vnd.3gpp.5gnas\":{\"source\":\"iana\"},\"application/vnd.3gpp.access-transfer-events+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.3gpp.bsf+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.3gpp.gmop+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.3gpp.gtpc\":{\"source\":\"iana\"},\"application/vnd.3gpp.interworking-data\":{\"source\":\"iana\"},\"application/vnd.3gpp.lpp\":{\"source\":\"iana\"},\"application/vnd.3gpp.mc-signalling-ear\":{\"source\":\"iana\"},\"application/vnd.3gpp.mcdata-affiliation-command+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.3gpp.mcdata-info+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.3gpp.mcdata-payload\":{\"source\":\"iana\"},\"application/vnd.3gpp.mcdata-service-config+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.3gpp.mcdata-signalling\":{\"source\":\"iana\"},\"application/vnd.3gpp.mcdata-ue-config+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.3gpp.mcdata-user-profile+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.3gpp.mcptt-affiliation-command+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.3gpp.mcptt-floor-request+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.3gpp.mcptt-info+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.3gpp.mcptt-location-info+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.3gpp.mcptt-mbms-usage-info+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.3gpp.mcptt-service-config+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.3gpp.mcptt-signed+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.3gpp.mcptt-ue-config+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.3gpp.mcptt-ue-init-config+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.3gpp.mcptt-user-profile+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.3gpp.mcvideo-affiliation-command+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.3gpp.mcvideo-affiliation-info+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.3gpp.mcvideo-info+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.3gpp.mcvideo-location-info+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.3gpp.mcvideo-mbms-usage-info+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.3gpp.mcvideo-service-config+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.3gpp.mcvideo-transmission-request+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.3gpp.mcvideo-ue-config+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.3gpp.mcvideo-user-profile+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.3gpp.mid-call+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.3gpp.ngap\":{\"source\":\"iana\"},\"application/vnd.3gpp.pfcp\":{\"source\":\"iana\"},\"application/vnd.3gpp.pic-bw-large\":{\"source\":\"iana\",\"extensions\":[\"plb\"]},\"application/vnd.3gpp.pic-bw-small\":{\"source\":\"iana\",\"extensions\":[\"psb\"]},\"application/vnd.3gpp.pic-bw-var\":{\"source\":\"iana\",\"extensions\":[\"pvb\"]},\"application/vnd.3gpp.s1ap\":{\"source\":\"iana\"},\"application/vnd.3gpp.sms\":{\"source\":\"iana\"},\"application/vnd.3gpp.sms+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.3gpp.srvcc-ext+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.3gpp.srvcc-info+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.3gpp.state-and-event-info+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.3gpp.ussd+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.3gpp2.bcmcsinfo+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.3gpp2.sms\":{\"source\":\"iana\"},\"application/vnd.3gpp2.tcap\":{\"source\":\"iana\",\"extensions\":[\"tcap\"]},\"application/vnd.3lightssoftware.imagescal\":{\"source\":\"iana\"},\"application/vnd.3m.post-it-notes\":{\"source\":\"iana\",\"extensions\":[\"pwn\"]},\"application/vnd.accpac.simply.aso\":{\"source\":\"iana\",\"extensions\":[\"aso\"]},\"application/vnd.accpac.simply.imp\":{\"source\":\"iana\",\"extensions\":[\"imp\"]},\"application/vnd.acucobol\":{\"source\":\"iana\",\"extensions\":[\"acu\"]},\"application/vnd.acucorp\":{\"source\":\"iana\",\"extensions\":[\"atc\",\"acutc\"]},\"application/vnd.adobe.air-application-installer-package+zip\":{\"source\":\"apache\",\"compressible\":false,\"extensions\":[\"air\"]},\"application/vnd.adobe.flash.movie\":{\"source\":\"iana\"},\"application/vnd.adobe.formscentral.fcdt\":{\"source\":\"iana\",\"extensions\":[\"fcdt\"]},\"application/vnd.adobe.fxp\":{\"source\":\"iana\",\"extensions\":[\"fxp\",\"fxpl\"]},\"application/vnd.adobe.partial-upload\":{\"source\":\"iana\"},\"application/vnd.adobe.xdp+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"xdp\"]},\"application/vnd.adobe.xfdf\":{\"source\":\"iana\",\"extensions\":[\"xfdf\"]},\"application/vnd.aether.imp\":{\"source\":\"iana\"},\"application/vnd.afpc.afplinedata\":{\"source\":\"iana\"},\"application/vnd.afpc.afplinedata-pagedef\":{\"source\":\"iana\"},\"application/vnd.afpc.cmoca-cmresource\":{\"source\":\"iana\"},\"application/vnd.afpc.foca-charset\":{\"source\":\"iana\"},\"application/vnd.afpc.foca-codedfont\":{\"source\":\"iana\"},\"application/vnd.afpc.foca-codepage\":{\"source\":\"iana\"},\"application/vnd.afpc.modca\":{\"source\":\"iana\"},\"application/vnd.afpc.modca-cmtable\":{\"source\":\"iana\"},\"application/vnd.afpc.modca-formdef\":{\"source\":\"iana\"},\"application/vnd.afpc.modca-mediummap\":{\"source\":\"iana\"},\"application/vnd.afpc.modca-objectcontainer\":{\"source\":\"iana\"},\"application/vnd.afpc.modca-overlay\":{\"source\":\"iana\"},\"application/vnd.afpc.modca-pagesegment\":{\"source\":\"iana\"},\"application/vnd.age\":{\"source\":\"iana\",\"extensions\":[\"age\"]},\"application/vnd.ah-barcode\":{\"source\":\"iana\"},\"application/vnd.ahead.space\":{\"source\":\"iana\",\"extensions\":[\"ahead\"]},\"application/vnd.airzip.filesecure.azf\":{\"source\":\"iana\",\"extensions\":[\"azf\"]},\"application/vnd.airzip.filesecure.azs\":{\"source\":\"iana\",\"extensions\":[\"azs\"]},\"application/vnd.amadeus+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.amazon.ebook\":{\"source\":\"apache\",\"extensions\":[\"azw\"]},\"application/vnd.amazon.mobi8-ebook\":{\"source\":\"iana\"},\"application/vnd.americandynamics.acc\":{\"source\":\"iana\",\"extensions\":[\"acc\"]},\"application/vnd.amiga.ami\":{\"source\":\"iana\",\"extensions\":[\"ami\"]},\"application/vnd.amundsen.maze+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.android.ota\":{\"source\":\"iana\"},\"application/vnd.android.package-archive\":{\"source\":\"apache\",\"compressible\":false,\"extensions\":[\"apk\"]},\"application/vnd.anki\":{\"source\":\"iana\"},\"application/vnd.anser-web-certificate-issue-initiation\":{\"source\":\"iana\",\"extensions\":[\"cii\"]},\"application/vnd.anser-web-funds-transfer-initiation\":{\"source\":\"apache\",\"extensions\":[\"fti\"]},\"application/vnd.antix.game-component\":{\"source\":\"iana\",\"extensions\":[\"atx\"]},\"application/vnd.apache.arrow.file\":{\"source\":\"iana\"},\"application/vnd.apache.arrow.stream\":{\"source\":\"iana\"},\"application/vnd.apache.thrift.binary\":{\"source\":\"iana\"},\"application/vnd.apache.thrift.compact\":{\"source\":\"iana\"},\"application/vnd.apache.thrift.json\":{\"source\":\"iana\"},\"application/vnd.api+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.aplextor.warrp+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.apothekende.reservation+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.apple.installer+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"mpkg\"]},\"application/vnd.apple.keynote\":{\"source\":\"iana\",\"extensions\":[\"key\"]},\"application/vnd.apple.mpegurl\":{\"source\":\"iana\",\"extensions\":[\"m3u8\"]},\"application/vnd.apple.numbers\":{\"source\":\"iana\",\"extensions\":[\"numbers\"]},\"application/vnd.apple.pages\":{\"source\":\"iana\",\"extensions\":[\"pages\"]},\"application/vnd.apple.pkpass\":{\"compressible\":false,\"extensions\":[\"pkpass\"]},\"application/vnd.arastra.swi\":{\"source\":\"iana\"},\"application/vnd.aristanetworks.swi\":{\"source\":\"iana\",\"extensions\":[\"swi\"]},\"application/vnd.artisan+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.artsquare\":{\"source\":\"iana\"},\"application/vnd.astraea-software.iota\":{\"source\":\"iana\",\"extensions\":[\"iota\"]},\"application/vnd.audiograph\":{\"source\":\"iana\",\"extensions\":[\"aep\"]},\"application/vnd.autopackage\":{\"source\":\"iana\"},\"application/vnd.avalon+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.avistar+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.balsamiq.bmml+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"bmml\"]},\"application/vnd.balsamiq.bmpr\":{\"source\":\"iana\"},\"application/vnd.banana-accounting\":{\"source\":\"iana\"},\"application/vnd.bbf.usp.error\":{\"source\":\"iana\"},\"application/vnd.bbf.usp.msg\":{\"source\":\"iana\"},\"application/vnd.bbf.usp.msg+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.bekitzur-stech+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.bint.med-content\":{\"source\":\"iana\"},\"application/vnd.biopax.rdf+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.blink-idb-value-wrapper\":{\"source\":\"iana\"},\"application/vnd.blueice.multipass\":{\"source\":\"iana\",\"extensions\":[\"mpm\"]},\"application/vnd.bluetooth.ep.oob\":{\"source\":\"iana\"},\"application/vnd.bluetooth.le.oob\":{\"source\":\"iana\"},\"application/vnd.bmi\":{\"source\":\"iana\",\"extensions\":[\"bmi\"]},\"application/vnd.bpf\":{\"source\":\"iana\"},\"application/vnd.bpf3\":{\"source\":\"iana\"},\"application/vnd.businessobjects\":{\"source\":\"iana\",\"extensions\":[\"rep\"]},\"application/vnd.byu.uapi+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.cab-jscript\":{\"source\":\"iana\"},\"application/vnd.canon-cpdl\":{\"source\":\"iana\"},\"application/vnd.canon-lips\":{\"source\":\"iana\"},\"application/vnd.capasystems-pg+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.cendio.thinlinc.clientconf\":{\"source\":\"iana\"},\"application/vnd.century-systems.tcp_stream\":{\"source\":\"iana\"},\"application/vnd.chemdraw+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"cdxml\"]},\"application/vnd.chess-pgn\":{\"source\":\"iana\"},\"application/vnd.chipnuts.karaoke-mmd\":{\"source\":\"iana\",\"extensions\":[\"mmd\"]},\"application/vnd.ciedi\":{\"source\":\"iana\"},\"application/vnd.cinderella\":{\"source\":\"iana\",\"extensions\":[\"cdy\"]},\"application/vnd.cirpack.isdn-ext\":{\"source\":\"iana\"},\"application/vnd.citationstyles.style+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"csl\"]},\"application/vnd.claymore\":{\"source\":\"iana\",\"extensions\":[\"cla\"]},\"application/vnd.cloanto.rp9\":{\"source\":\"iana\",\"extensions\":[\"rp9\"]},\"application/vnd.clonk.c4group\":{\"source\":\"iana\",\"extensions\":[\"c4g\",\"c4d\",\"c4f\",\"c4p\",\"c4u\"]},\"application/vnd.cluetrust.cartomobile-config\":{\"source\":\"iana\",\"extensions\":[\"c11amc\"]},\"application/vnd.cluetrust.cartomobile-config-pkg\":{\"source\":\"iana\",\"extensions\":[\"c11amz\"]},\"application/vnd.coffeescript\":{\"source\":\"iana\"},\"application/vnd.collabio.xodocuments.document\":{\"source\":\"iana\"},\"application/vnd.collabio.xodocuments.document-template\":{\"source\":\"iana\"},\"application/vnd.collabio.xodocuments.presentation\":{\"source\":\"iana\"},\"application/vnd.collabio.xodocuments.presentation-template\":{\"source\":\"iana\"},\"application/vnd.collabio.xodocuments.spreadsheet\":{\"source\":\"iana\"},\"application/vnd.collabio.xodocuments.spreadsheet-template\":{\"source\":\"iana\"},\"application/vnd.collection+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.collection.doc+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.collection.next+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.comicbook+zip\":{\"source\":\"iana\",\"compressible\":false},\"application/vnd.comicbook-rar\":{\"source\":\"iana\"},\"application/vnd.commerce-battelle\":{\"source\":\"iana\"},\"application/vnd.commonspace\":{\"source\":\"iana\",\"extensions\":[\"csp\"]},\"application/vnd.contact.cmsg\":{\"source\":\"iana\",\"extensions\":[\"cdbcmsg\"]},\"application/vnd.coreos.ignition+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.cosmocaller\":{\"source\":\"iana\",\"extensions\":[\"cmc\"]},\"application/vnd.crick.clicker\":{\"source\":\"iana\",\"extensions\":[\"clkx\"]},\"application/vnd.crick.clicker.keyboard\":{\"source\":\"iana\",\"extensions\":[\"clkk\"]},\"application/vnd.crick.clicker.palette\":{\"source\":\"iana\",\"extensions\":[\"clkp\"]},\"application/vnd.crick.clicker.template\":{\"source\":\"iana\",\"extensions\":[\"clkt\"]},\"application/vnd.crick.clicker.wordbank\":{\"source\":\"iana\",\"extensions\":[\"clkw\"]},\"application/vnd.criticaltools.wbs+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"wbs\"]},\"application/vnd.cryptii.pipe+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.crypto-shade-file\":{\"source\":\"iana\"},\"application/vnd.cryptomator.encrypted\":{\"source\":\"iana\"},\"application/vnd.cryptomator.vault\":{\"source\":\"iana\"},\"application/vnd.ctc-posml\":{\"source\":\"iana\",\"extensions\":[\"pml\"]},\"application/vnd.ctct.ws+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.cups-pdf\":{\"source\":\"iana\"},\"application/vnd.cups-postscript\":{\"source\":\"iana\"},\"application/vnd.cups-ppd\":{\"source\":\"iana\",\"extensions\":[\"ppd\"]},\"application/vnd.cups-raster\":{\"source\":\"iana\"},\"application/vnd.cups-raw\":{\"source\":\"iana\"},\"application/vnd.curl\":{\"source\":\"iana\"},\"application/vnd.curl.car\":{\"source\":\"apache\",\"extensions\":[\"car\"]},\"application/vnd.curl.pcurl\":{\"source\":\"apache\",\"extensions\":[\"pcurl\"]},\"application/vnd.cyan.dean.root+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.cybank\":{\"source\":\"iana\"},\"application/vnd.cyclonedx+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.cyclonedx+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.d2l.coursepackage1p0+zip\":{\"source\":\"iana\",\"compressible\":false},\"application/vnd.d3m-dataset\":{\"source\":\"iana\"},\"application/vnd.d3m-problem\":{\"source\":\"iana\"},\"application/vnd.dart\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"dart\"]},\"application/vnd.data-vision.rdz\":{\"source\":\"iana\",\"extensions\":[\"rdz\"]},\"application/vnd.datapackage+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.dataresource+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.dbf\":{\"source\":\"iana\",\"extensions\":[\"dbf\"]},\"application/vnd.debian.binary-package\":{\"source\":\"iana\"},\"application/vnd.dece.data\":{\"source\":\"iana\",\"extensions\":[\"uvf\",\"uvvf\",\"uvd\",\"uvvd\"]},\"application/vnd.dece.ttml+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"uvt\",\"uvvt\"]},\"application/vnd.dece.unspecified\":{\"source\":\"iana\",\"extensions\":[\"uvx\",\"uvvx\"]},\"application/vnd.dece.zip\":{\"source\":\"iana\",\"extensions\":[\"uvz\",\"uvvz\"]},\"application/vnd.denovo.fcselayout-link\":{\"source\":\"iana\",\"extensions\":[\"fe_launch\"]},\"application/vnd.desmume.movie\":{\"source\":\"iana\"},\"application/vnd.dir-bi.plate-dl-nosuffix\":{\"source\":\"iana\"},\"application/vnd.dm.delegation+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.dna\":{\"source\":\"iana\",\"extensions\":[\"dna\"]},\"application/vnd.document+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.dolby.mlp\":{\"source\":\"apache\",\"extensions\":[\"mlp\"]},\"application/vnd.dolby.mobile.1\":{\"source\":\"iana\"},\"application/vnd.dolby.mobile.2\":{\"source\":\"iana\"},\"application/vnd.doremir.scorecloud-binary-document\":{\"source\":\"iana\"},\"application/vnd.dpgraph\":{\"source\":\"iana\",\"extensions\":[\"dpg\"]},\"application/vnd.dreamfactory\":{\"source\":\"iana\",\"extensions\":[\"dfac\"]},\"application/vnd.drive+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.ds-keypoint\":{\"source\":\"apache\",\"extensions\":[\"kpxx\"]},\"application/vnd.dtg.local\":{\"source\":\"iana\"},\"application/vnd.dtg.local.flash\":{\"source\":\"iana\"},\"application/vnd.dtg.local.html\":{\"source\":\"iana\"},\"application/vnd.dvb.ait\":{\"source\":\"iana\",\"extensions\":[\"ait\"]},\"application/vnd.dvb.dvbisl+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.dvb.dvbj\":{\"source\":\"iana\"},\"application/vnd.dvb.esgcontainer\":{\"source\":\"iana\"},\"application/vnd.dvb.ipdcdftnotifaccess\":{\"source\":\"iana\"},\"application/vnd.dvb.ipdcesgaccess\":{\"source\":\"iana\"},\"application/vnd.dvb.ipdcesgaccess2\":{\"source\":\"iana\"},\"application/vnd.dvb.ipdcesgpdd\":{\"source\":\"iana\"},\"application/vnd.dvb.ipdcroaming\":{\"source\":\"iana\"},\"application/vnd.dvb.iptv.alfec-base\":{\"source\":\"iana\"},\"application/vnd.dvb.iptv.alfec-enhancement\":{\"source\":\"iana\"},\"application/vnd.dvb.notif-aggregate-root+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.dvb.notif-container+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.dvb.notif-generic+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.dvb.notif-ia-msglist+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.dvb.notif-ia-registration-request+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.dvb.notif-ia-registration-response+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.dvb.notif-init+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.dvb.pfr\":{\"source\":\"iana\"},\"application/vnd.dvb.service\":{\"source\":\"iana\",\"extensions\":[\"svc\"]},\"application/vnd.dxr\":{\"source\":\"iana\"},\"application/vnd.dynageo\":{\"source\":\"iana\",\"extensions\":[\"geo\"]},\"application/vnd.dzr\":{\"source\":\"iana\"},\"application/vnd.easykaraoke.cdgdownload\":{\"source\":\"iana\"},\"application/vnd.ecdis-update\":{\"source\":\"iana\"},\"application/vnd.ecip.rlp\":{\"source\":\"iana\"},\"application/vnd.ecowin.chart\":{\"source\":\"iana\",\"extensions\":[\"mag\"]},\"application/vnd.ecowin.filerequest\":{\"source\":\"iana\"},\"application/vnd.ecowin.fileupdate\":{\"source\":\"iana\"},\"application/vnd.ecowin.series\":{\"source\":\"iana\"},\"application/vnd.ecowin.seriesrequest\":{\"source\":\"iana\"},\"application/vnd.ecowin.seriesupdate\":{\"source\":\"iana\"},\"application/vnd.efi.img\":{\"source\":\"iana\"},\"application/vnd.efi.iso\":{\"source\":\"iana\"},\"application/vnd.emclient.accessrequest+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.enliven\":{\"source\":\"iana\",\"extensions\":[\"nml\"]},\"application/vnd.enphase.envoy\":{\"source\":\"iana\"},\"application/vnd.eprints.data+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.epson.esf\":{\"source\":\"iana\",\"extensions\":[\"esf\"]},\"application/vnd.epson.msf\":{\"source\":\"iana\",\"extensions\":[\"msf\"]},\"application/vnd.epson.quickanime\":{\"source\":\"iana\",\"extensions\":[\"qam\"]},\"application/vnd.epson.salt\":{\"source\":\"iana\",\"extensions\":[\"slt\"]},\"application/vnd.epson.ssf\":{\"source\":\"iana\",\"extensions\":[\"ssf\"]},\"application/vnd.ericsson.quickcall\":{\"source\":\"iana\"},\"application/vnd.espass-espass+zip\":{\"source\":\"iana\",\"compressible\":false},\"application/vnd.eszigno3+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"es3\",\"et3\"]},\"application/vnd.etsi.aoc+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.etsi.asic-e+zip\":{\"source\":\"iana\",\"compressible\":false},\"application/vnd.etsi.asic-s+zip\":{\"source\":\"iana\",\"compressible\":false},\"application/vnd.etsi.cug+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.etsi.iptvcommand+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.etsi.iptvdiscovery+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.etsi.iptvprofile+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.etsi.iptvsad-bc+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.etsi.iptvsad-cod+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.etsi.iptvsad-npvr+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.etsi.iptvservice+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.etsi.iptvsync+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.etsi.iptvueprofile+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.etsi.mcid+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.etsi.mheg5\":{\"source\":\"iana\"},\"application/vnd.etsi.overload-control-policy-dataset+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.etsi.pstn+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.etsi.sci+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.etsi.simservs+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.etsi.timestamp-token\":{\"source\":\"iana\"},\"application/vnd.etsi.tsl+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.etsi.tsl.der\":{\"source\":\"iana\"},\"application/vnd.eudora.data\":{\"source\":\"iana\"},\"application/vnd.evolv.ecig.profile\":{\"source\":\"iana\"},\"application/vnd.evolv.ecig.settings\":{\"source\":\"iana\"},\"application/vnd.evolv.ecig.theme\":{\"source\":\"iana\"},\"application/vnd.exstream-empower+zip\":{\"source\":\"iana\",\"compressible\":false},\"application/vnd.exstream-package\":{\"source\":\"iana\"},\"application/vnd.ezpix-album\":{\"source\":\"iana\",\"extensions\":[\"ez2\"]},\"application/vnd.ezpix-package\":{\"source\":\"iana\",\"extensions\":[\"ez3\"]},\"application/vnd.f-secure.mobile\":{\"source\":\"iana\"},\"application/vnd.fastcopy-disk-image\":{\"source\":\"iana\"},\"application/vnd.fdf\":{\"source\":\"iana\",\"extensions\":[\"fdf\"]},\"application/vnd.fdsn.mseed\":{\"source\":\"iana\",\"extensions\":[\"mseed\"]},\"application/vnd.fdsn.seed\":{\"source\":\"iana\",\"extensions\":[\"seed\",\"dataless\"]},\"application/vnd.ffsns\":{\"source\":\"iana\"},\"application/vnd.ficlab.flb+zip\":{\"source\":\"iana\",\"compressible\":false},\"application/vnd.filmit.zfc\":{\"source\":\"iana\"},\"application/vnd.fints\":{\"source\":\"iana\"},\"application/vnd.firemonkeys.cloudcell\":{\"source\":\"iana\"},\"application/vnd.flographit\":{\"source\":\"iana\",\"extensions\":[\"gph\"]},\"application/vnd.fluxtime.clip\":{\"source\":\"iana\",\"extensions\":[\"ftc\"]},\"application/vnd.font-fontforge-sfd\":{\"source\":\"iana\"},\"application/vnd.framemaker\":{\"source\":\"iana\",\"extensions\":[\"fm\",\"frame\",\"maker\",\"book\"]},\"application/vnd.frogans.fnc\":{\"source\":\"iana\",\"extensions\":[\"fnc\"]},\"application/vnd.frogans.ltf\":{\"source\":\"iana\",\"extensions\":[\"ltf\"]},\"application/vnd.fsc.weblaunch\":{\"source\":\"iana\",\"extensions\":[\"fsc\"]},\"application/vnd.fujifilm.fb.docuworks\":{\"source\":\"iana\"},\"application/vnd.fujifilm.fb.docuworks.binder\":{\"source\":\"iana\"},\"application/vnd.fujifilm.fb.docuworks.container\":{\"source\":\"iana\"},\"application/vnd.fujifilm.fb.jfi+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.fujitsu.oasys\":{\"source\":\"iana\",\"extensions\":[\"oas\"]},\"application/vnd.fujitsu.oasys2\":{\"source\":\"iana\",\"extensions\":[\"oa2\"]},\"application/vnd.fujitsu.oasys3\":{\"source\":\"iana\",\"extensions\":[\"oa3\"]},\"application/vnd.fujitsu.oasysgp\":{\"source\":\"iana\",\"extensions\":[\"fg5\"]},\"application/vnd.fujitsu.oasysprs\":{\"source\":\"iana\",\"extensions\":[\"bh2\"]},\"application/vnd.fujixerox.art-ex\":{\"source\":\"iana\"},\"application/vnd.fujixerox.art4\":{\"source\":\"iana\"},\"application/vnd.fujixerox.ddd\":{\"source\":\"iana\",\"extensions\":[\"ddd\"]},\"application/vnd.fujixerox.docuworks\":{\"source\":\"iana\",\"extensions\":[\"xdw\"]},\"application/vnd.fujixerox.docuworks.binder\":{\"source\":\"iana\",\"extensions\":[\"xbd\"]},\"application/vnd.fujixerox.docuworks.container\":{\"source\":\"iana\"},\"application/vnd.fujixerox.hbpl\":{\"source\":\"iana\"},\"application/vnd.fut-misnet\":{\"source\":\"iana\"},\"application/vnd.futoin+cbor\":{\"source\":\"iana\"},\"application/vnd.futoin+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.fuzzysheet\":{\"source\":\"iana\",\"extensions\":[\"fzs\"]},\"application/vnd.genomatix.tuxedo\":{\"source\":\"iana\",\"extensions\":[\"txd\"]},\"application/vnd.gentics.grd+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.geo+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.geocube+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.geogebra.file\":{\"source\":\"iana\",\"extensions\":[\"ggb\"]},\"application/vnd.geogebra.slides\":{\"source\":\"iana\"},\"application/vnd.geogebra.tool\":{\"source\":\"iana\",\"extensions\":[\"ggt\"]},\"application/vnd.geometry-explorer\":{\"source\":\"iana\",\"extensions\":[\"gex\",\"gre\"]},\"application/vnd.geonext\":{\"source\":\"iana\",\"extensions\":[\"gxt\"]},\"application/vnd.geoplan\":{\"source\":\"iana\",\"extensions\":[\"g2w\"]},\"application/vnd.geospace\":{\"source\":\"iana\",\"extensions\":[\"g3w\"]},\"application/vnd.gerber\":{\"source\":\"iana\"},\"application/vnd.globalplatform.card-content-mgt\":{\"source\":\"iana\"},\"application/vnd.globalplatform.card-content-mgt-response\":{\"source\":\"iana\"},\"application/vnd.gmx\":{\"source\":\"iana\",\"extensions\":[\"gmx\"]},\"application/vnd.google-apps.document\":{\"compressible\":false,\"extensions\":[\"gdoc\"]},\"application/vnd.google-apps.presentation\":{\"compressible\":false,\"extensions\":[\"gslides\"]},\"application/vnd.google-apps.spreadsheet\":{\"compressible\":false,\"extensions\":[\"gsheet\"]},\"application/vnd.google-earth.kml+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"kml\"]},\"application/vnd.google-earth.kmz\":{\"source\":\"iana\",\"compressible\":false,\"extensions\":[\"kmz\"]},\"application/vnd.gov.sk.e-form+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.gov.sk.e-form+zip\":{\"source\":\"iana\",\"compressible\":false},\"application/vnd.gov.sk.xmldatacontainer+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.grafeq\":{\"source\":\"iana\",\"extensions\":[\"gqf\",\"gqs\"]},\"application/vnd.gridmp\":{\"source\":\"iana\"},\"application/vnd.groove-account\":{\"source\":\"iana\",\"extensions\":[\"gac\"]},\"application/vnd.groove-help\":{\"source\":\"iana\",\"extensions\":[\"ghf\"]},\"application/vnd.groove-identity-message\":{\"source\":\"iana\",\"extensions\":[\"gim\"]},\"application/vnd.groove-injector\":{\"source\":\"iana\",\"extensions\":[\"grv\"]},\"application/vnd.groove-tool-message\":{\"source\":\"iana\",\"extensions\":[\"gtm\"]},\"application/vnd.groove-tool-template\":{\"source\":\"iana\",\"extensions\":[\"tpl\"]},\"application/vnd.groove-vcard\":{\"source\":\"iana\",\"extensions\":[\"vcg\"]},\"application/vnd.hal+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.hal+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"hal\"]},\"application/vnd.handheld-entertainment+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"zmm\"]},\"application/vnd.hbci\":{\"source\":\"iana\",\"extensions\":[\"hbci\"]},\"application/vnd.hc+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.hcl-bireports\":{\"source\":\"iana\"},\"application/vnd.hdt\":{\"source\":\"iana\"},\"application/vnd.heroku+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.hhe.lesson-player\":{\"source\":\"iana\",\"extensions\":[\"les\"]},\"application/vnd.hp-hpgl\":{\"source\":\"iana\",\"extensions\":[\"hpgl\"]},\"application/vnd.hp-hpid\":{\"source\":\"iana\",\"extensions\":[\"hpid\"]},\"application/vnd.hp-hps\":{\"source\":\"iana\",\"extensions\":[\"hps\"]},\"application/vnd.hp-jlyt\":{\"source\":\"iana\",\"extensions\":[\"jlt\"]},\"application/vnd.hp-pcl\":{\"source\":\"iana\",\"extensions\":[\"pcl\"]},\"application/vnd.hp-pclxl\":{\"source\":\"iana\",\"extensions\":[\"pclxl\"]},\"application/vnd.httphone\":{\"source\":\"iana\"},\"application/vnd.hydrostatix.sof-data\":{\"source\":\"iana\",\"extensions\":[\"sfd-hdstx\"]},\"application/vnd.hyper+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.hyper-item+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.hyperdrive+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.hzn-3d-crossword\":{\"source\":\"iana\"},\"application/vnd.ibm.afplinedata\":{\"source\":\"iana\"},\"application/vnd.ibm.electronic-media\":{\"source\":\"iana\"},\"application/vnd.ibm.minipay\":{\"source\":\"iana\",\"extensions\":[\"mpy\"]},\"application/vnd.ibm.modcap\":{\"source\":\"iana\",\"extensions\":[\"afp\",\"listafp\",\"list3820\"]},\"application/vnd.ibm.rights-management\":{\"source\":\"iana\",\"extensions\":[\"irm\"]},\"application/vnd.ibm.secure-container\":{\"source\":\"iana\",\"extensions\":[\"sc\"]},\"application/vnd.iccprofile\":{\"source\":\"iana\",\"extensions\":[\"icc\",\"icm\"]},\"application/vnd.ieee.1905\":{\"source\":\"iana\"},\"application/vnd.igloader\":{\"source\":\"iana\",\"extensions\":[\"igl\"]},\"application/vnd.imagemeter.folder+zip\":{\"source\":\"iana\",\"compressible\":false},\"application/vnd.imagemeter.image+zip\":{\"source\":\"iana\",\"compressible\":false},\"application/vnd.immervision-ivp\":{\"source\":\"iana\",\"extensions\":[\"ivp\"]},\"application/vnd.immervision-ivu\":{\"source\":\"iana\",\"extensions\":[\"ivu\"]},\"application/vnd.ims.imsccv1p1\":{\"source\":\"iana\"},\"application/vnd.ims.imsccv1p2\":{\"source\":\"iana\"},\"application/vnd.ims.imsccv1p3\":{\"source\":\"iana\"},\"application/vnd.ims.lis.v2.result+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.ims.lti.v2.toolconsumerprofile+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.ims.lti.v2.toolproxy+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.ims.lti.v2.toolproxy.id+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.ims.lti.v2.toolsettings+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.ims.lti.v2.toolsettings.simple+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.informedcontrol.rms+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.informix-visionary\":{\"source\":\"iana\"},\"application/vnd.infotech.project\":{\"source\":\"iana\"},\"application/vnd.infotech.project+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.innopath.wamp.notification\":{\"source\":\"iana\"},\"application/vnd.insors.igm\":{\"source\":\"iana\",\"extensions\":[\"igm\"]},\"application/vnd.intercon.formnet\":{\"source\":\"iana\",\"extensions\":[\"xpw\",\"xpx\"]},\"application/vnd.intergeo\":{\"source\":\"iana\",\"extensions\":[\"i2g\"]},\"application/vnd.intertrust.digibox\":{\"source\":\"iana\"},\"application/vnd.intertrust.nncp\":{\"source\":\"iana\"},\"application/vnd.intu.qbo\":{\"source\":\"iana\",\"extensions\":[\"qbo\"]},\"application/vnd.intu.qfx\":{\"source\":\"iana\",\"extensions\":[\"qfx\"]},\"application/vnd.iptc.g2.catalogitem+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.iptc.g2.conceptitem+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.iptc.g2.knowledgeitem+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.iptc.g2.newsitem+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.iptc.g2.newsmessage+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.iptc.g2.packageitem+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.iptc.g2.planningitem+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.ipunplugged.rcprofile\":{\"source\":\"iana\",\"extensions\":[\"rcprofile\"]},\"application/vnd.irepository.package+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"irp\"]},\"application/vnd.is-xpr\":{\"source\":\"iana\",\"extensions\":[\"xpr\"]},\"application/vnd.isac.fcs\":{\"source\":\"iana\",\"extensions\":[\"fcs\"]},\"application/vnd.iso11783-10+zip\":{\"source\":\"iana\",\"compressible\":false},\"application/vnd.jam\":{\"source\":\"iana\",\"extensions\":[\"jam\"]},\"application/vnd.japannet-directory-service\":{\"source\":\"iana\"},\"application/vnd.japannet-jpnstore-wakeup\":{\"source\":\"iana\"},\"application/vnd.japannet-payment-wakeup\":{\"source\":\"iana\"},\"application/vnd.japannet-registration\":{\"source\":\"iana\"},\"application/vnd.japannet-registration-wakeup\":{\"source\":\"iana\"},\"application/vnd.japannet-setstore-wakeup\":{\"source\":\"iana\"},\"application/vnd.japannet-verification\":{\"source\":\"iana\"},\"application/vnd.japannet-verification-wakeup\":{\"source\":\"iana\"},\"application/vnd.jcp.javame.midlet-rms\":{\"source\":\"iana\",\"extensions\":[\"rms\"]},\"application/vnd.jisp\":{\"source\":\"iana\",\"extensions\":[\"jisp\"]},\"application/vnd.joost.joda-archive\":{\"source\":\"iana\",\"extensions\":[\"joda\"]},\"application/vnd.jsk.isdn-ngn\":{\"source\":\"iana\"},\"application/vnd.kahootz\":{\"source\":\"iana\",\"extensions\":[\"ktz\",\"ktr\"]},\"application/vnd.kde.karbon\":{\"source\":\"iana\",\"extensions\":[\"karbon\"]},\"application/vnd.kde.kchart\":{\"source\":\"iana\",\"extensions\":[\"chrt\"]},\"application/vnd.kde.kformula\":{\"source\":\"iana\",\"extensions\":[\"kfo\"]},\"application/vnd.kde.kivio\":{\"source\":\"iana\",\"extensions\":[\"flw\"]},\"application/vnd.kde.kontour\":{\"source\":\"iana\",\"extensions\":[\"kon\"]},\"application/vnd.kde.kpresenter\":{\"source\":\"iana\",\"extensions\":[\"kpr\",\"kpt\"]},\"application/vnd.kde.kspread\":{\"source\":\"iana\",\"extensions\":[\"ksp\"]},\"application/vnd.kde.kword\":{\"source\":\"iana\",\"extensions\":[\"kwd\",\"kwt\"]},\"application/vnd.kenameaapp\":{\"source\":\"iana\",\"extensions\":[\"htke\"]},\"application/vnd.kidspiration\":{\"source\":\"iana\",\"extensions\":[\"kia\"]},\"application/vnd.kinar\":{\"source\":\"iana\",\"extensions\":[\"kne\",\"knp\"]},\"application/vnd.koan\":{\"source\":\"iana\",\"extensions\":[\"skp\",\"skd\",\"skt\",\"skm\"]},\"application/vnd.kodak-descriptor\":{\"source\":\"iana\",\"extensions\":[\"sse\"]},\"application/vnd.las\":{\"source\":\"iana\"},\"application/vnd.las.las+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.las.las+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"lasxml\"]},\"application/vnd.laszip\":{\"source\":\"iana\"},\"application/vnd.leap+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.liberty-request+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.llamagraphics.life-balance.desktop\":{\"source\":\"iana\",\"extensions\":[\"lbd\"]},\"application/vnd.llamagraphics.life-balance.exchange+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"lbe\"]},\"application/vnd.logipipe.circuit+zip\":{\"source\":\"iana\",\"compressible\":false},\"application/vnd.loom\":{\"source\":\"iana\"},\"application/vnd.lotus-1-2-3\":{\"source\":\"iana\",\"extensions\":[\"123\"]},\"application/vnd.lotus-approach\":{\"source\":\"iana\",\"extensions\":[\"apr\"]},\"application/vnd.lotus-freelance\":{\"source\":\"iana\",\"extensions\":[\"pre\"]},\"application/vnd.lotus-notes\":{\"source\":\"iana\",\"extensions\":[\"nsf\"]},\"application/vnd.lotus-organizer\":{\"source\":\"iana\",\"extensions\":[\"org\"]},\"application/vnd.lotus-screencam\":{\"source\":\"iana\",\"extensions\":[\"scm\"]},\"application/vnd.lotus-wordpro\":{\"source\":\"iana\",\"extensions\":[\"lwp\"]},\"application/vnd.macports.portpkg\":{\"source\":\"iana\",\"extensions\":[\"portpkg\"]},\"application/vnd.mapbox-vector-tile\":{\"source\":\"iana\",\"extensions\":[\"mvt\"]},\"application/vnd.marlin.drm.actiontoken+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.marlin.drm.conftoken+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.marlin.drm.license+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.marlin.drm.mdcf\":{\"source\":\"iana\"},\"application/vnd.mason+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.maxmind.maxmind-db\":{\"source\":\"iana\"},\"application/vnd.mcd\":{\"source\":\"iana\",\"extensions\":[\"mcd\"]},\"application/vnd.medcalcdata\":{\"source\":\"iana\",\"extensions\":[\"mc1\"]},\"application/vnd.mediastation.cdkey\":{\"source\":\"iana\",\"extensions\":[\"cdkey\"]},\"application/vnd.meridian-slingshot\":{\"source\":\"iana\"},\"application/vnd.mfer\":{\"source\":\"iana\",\"extensions\":[\"mwf\"]},\"application/vnd.mfmp\":{\"source\":\"iana\",\"extensions\":[\"mfm\"]},\"application/vnd.micro+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.micrografx.flo\":{\"source\":\"iana\",\"extensions\":[\"flo\"]},\"application/vnd.micrografx.igx\":{\"source\":\"iana\",\"extensions\":[\"igx\"]},\"application/vnd.microsoft.portable-executable\":{\"source\":\"iana\"},\"application/vnd.microsoft.windows.thumbnail-cache\":{\"source\":\"iana\"},\"application/vnd.miele+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.mif\":{\"source\":\"iana\",\"extensions\":[\"mif\"]},\"application/vnd.minisoft-hp3000-save\":{\"source\":\"iana\"},\"application/vnd.mitsubishi.misty-guard.trustweb\":{\"source\":\"iana\"},\"application/vnd.mobius.daf\":{\"source\":\"iana\",\"extensions\":[\"daf\"]},\"application/vnd.mobius.dis\":{\"source\":\"iana\",\"extensions\":[\"dis\"]},\"application/vnd.mobius.mbk\":{\"source\":\"iana\",\"extensions\":[\"mbk\"]},\"application/vnd.mobius.mqy\":{\"source\":\"iana\",\"extensions\":[\"mqy\"]},\"application/vnd.mobius.msl\":{\"source\":\"iana\",\"extensions\":[\"msl\"]},\"application/vnd.mobius.plc\":{\"source\":\"iana\",\"extensions\":[\"plc\"]},\"application/vnd.mobius.txf\":{\"source\":\"iana\",\"extensions\":[\"txf\"]},\"application/vnd.mophun.application\":{\"source\":\"iana\",\"extensions\":[\"mpn\"]},\"application/vnd.mophun.certificate\":{\"source\":\"iana\",\"extensions\":[\"mpc\"]},\"application/vnd.motorola.flexsuite\":{\"source\":\"iana\"},\"application/vnd.motorola.flexsuite.adsi\":{\"source\":\"iana\"},\"application/vnd.motorola.flexsuite.fis\":{\"source\":\"iana\"},\"application/vnd.motorola.flexsuite.gotap\":{\"source\":\"iana\"},\"application/vnd.motorola.flexsuite.kmr\":{\"source\":\"iana\"},\"application/vnd.motorola.flexsuite.ttc\":{\"source\":\"iana\"},\"application/vnd.motorola.flexsuite.wem\":{\"source\":\"iana\"},\"application/vnd.motorola.iprm\":{\"source\":\"iana\"},\"application/vnd.mozilla.xul+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"xul\"]},\"application/vnd.ms-3mfdocument\":{\"source\":\"iana\"},\"application/vnd.ms-artgalry\":{\"source\":\"iana\",\"extensions\":[\"cil\"]},\"application/vnd.ms-asf\":{\"source\":\"iana\"},\"application/vnd.ms-cab-compressed\":{\"source\":\"iana\",\"extensions\":[\"cab\"]},\"application/vnd.ms-color.iccprofile\":{\"source\":\"apache\"},\"application/vnd.ms-excel\":{\"source\":\"iana\",\"compressible\":false,\"extensions\":[\"xls\",\"xlm\",\"xla\",\"xlc\",\"xlt\",\"xlw\"]},\"application/vnd.ms-excel.addin.macroenabled.12\":{\"source\":\"iana\",\"extensions\":[\"xlam\"]},\"application/vnd.ms-excel.sheet.binary.macroenabled.12\":{\"source\":\"iana\",\"extensions\":[\"xlsb\"]},\"application/vnd.ms-excel.sheet.macroenabled.12\":{\"source\":\"iana\",\"extensions\":[\"xlsm\"]},\"application/vnd.ms-excel.template.macroenabled.12\":{\"source\":\"iana\",\"extensions\":[\"xltm\"]},\"application/vnd.ms-fontobject\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"eot\"]},\"application/vnd.ms-htmlhelp\":{\"source\":\"iana\",\"extensions\":[\"chm\"]},\"application/vnd.ms-ims\":{\"source\":\"iana\",\"extensions\":[\"ims\"]},\"application/vnd.ms-lrm\":{\"source\":\"iana\",\"extensions\":[\"lrm\"]},\"application/vnd.ms-office.activex+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.ms-officetheme\":{\"source\":\"iana\",\"extensions\":[\"thmx\"]},\"application/vnd.ms-opentype\":{\"source\":\"apache\",\"compressible\":true},\"application/vnd.ms-outlook\":{\"compressible\":false,\"extensions\":[\"msg\"]},\"application/vnd.ms-package.obfuscated-opentype\":{\"source\":\"apache\"},\"application/vnd.ms-pki.seccat\":{\"source\":\"apache\",\"extensions\":[\"cat\"]},\"application/vnd.ms-pki.stl\":{\"source\":\"apache\",\"extensions\":[\"stl\"]},\"application/vnd.ms-playready.initiator+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.ms-powerpoint\":{\"source\":\"iana\",\"compressible\":false,\"extensions\":[\"ppt\",\"pps\",\"pot\"]},\"application/vnd.ms-powerpoint.addin.macroenabled.12\":{\"source\":\"iana\",\"extensions\":[\"ppam\"]},\"application/vnd.ms-powerpoint.presentation.macroenabled.12\":{\"source\":\"iana\",\"extensions\":[\"pptm\"]},\"application/vnd.ms-powerpoint.slide.macroenabled.12\":{\"source\":\"iana\",\"extensions\":[\"sldm\"]},\"application/vnd.ms-powerpoint.slideshow.macroenabled.12\":{\"source\":\"iana\",\"extensions\":[\"ppsm\"]},\"application/vnd.ms-powerpoint.template.macroenabled.12\":{\"source\":\"iana\",\"extensions\":[\"potm\"]},\"application/vnd.ms-printdevicecapabilities+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.ms-printing.printticket+xml\":{\"source\":\"apache\",\"compressible\":true},\"application/vnd.ms-printschematicket+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.ms-project\":{\"source\":\"iana\",\"extensions\":[\"mpp\",\"mpt\"]},\"application/vnd.ms-tnef\":{\"source\":\"iana\"},\"application/vnd.ms-windows.devicepairing\":{\"source\":\"iana\"},\"application/vnd.ms-windows.nwprinting.oob\":{\"source\":\"iana\"},\"application/vnd.ms-windows.printerpairing\":{\"source\":\"iana\"},\"application/vnd.ms-windows.wsd.oob\":{\"source\":\"iana\"},\"application/vnd.ms-wmdrm.lic-chlg-req\":{\"source\":\"iana\"},\"application/vnd.ms-wmdrm.lic-resp\":{\"source\":\"iana\"},\"application/vnd.ms-wmdrm.meter-chlg-req\":{\"source\":\"iana\"},\"application/vnd.ms-wmdrm.meter-resp\":{\"source\":\"iana\"},\"application/vnd.ms-word.document.macroenabled.12\":{\"source\":\"iana\",\"extensions\":[\"docm\"]},\"application/vnd.ms-word.template.macroenabled.12\":{\"source\":\"iana\",\"extensions\":[\"dotm\"]},\"application/vnd.ms-works\":{\"source\":\"iana\",\"extensions\":[\"wps\",\"wks\",\"wcm\",\"wdb\"]},\"application/vnd.ms-wpl\":{\"source\":\"iana\",\"extensions\":[\"wpl\"]},\"application/vnd.ms-xpsdocument\":{\"source\":\"iana\",\"compressible\":false,\"extensions\":[\"xps\"]},\"application/vnd.msa-disk-image\":{\"source\":\"iana\"},\"application/vnd.mseq\":{\"source\":\"iana\",\"extensions\":[\"mseq\"]},\"application/vnd.msign\":{\"source\":\"iana\"},\"application/vnd.multiad.creator\":{\"source\":\"iana\"},\"application/vnd.multiad.creator.cif\":{\"source\":\"iana\"},\"application/vnd.music-niff\":{\"source\":\"iana\"},\"application/vnd.musician\":{\"source\":\"iana\",\"extensions\":[\"mus\"]},\"application/vnd.muvee.style\":{\"source\":\"iana\",\"extensions\":[\"msty\"]},\"application/vnd.mynfc\":{\"source\":\"iana\",\"extensions\":[\"taglet\"]},\"application/vnd.nacamar.ybrid+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.ncd.control\":{\"source\":\"iana\"},\"application/vnd.ncd.reference\":{\"source\":\"iana\"},\"application/vnd.nearst.inv+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.nebumind.line\":{\"source\":\"iana\"},\"application/vnd.nervana\":{\"source\":\"iana\"},\"application/vnd.netfpx\":{\"source\":\"iana\"},\"application/vnd.neurolanguage.nlu\":{\"source\":\"iana\",\"extensions\":[\"nlu\"]},\"application/vnd.nimn\":{\"source\":\"iana\"},\"application/vnd.nintendo.nitro.rom\":{\"source\":\"iana\"},\"application/vnd.nintendo.snes.rom\":{\"source\":\"iana\"},\"application/vnd.nitf\":{\"source\":\"iana\",\"extensions\":[\"ntf\",\"nitf\"]},\"application/vnd.noblenet-directory\":{\"source\":\"iana\",\"extensions\":[\"nnd\"]},\"application/vnd.noblenet-sealer\":{\"source\":\"iana\",\"extensions\":[\"nns\"]},\"application/vnd.noblenet-web\":{\"source\":\"iana\",\"extensions\":[\"nnw\"]},\"application/vnd.nokia.catalogs\":{\"source\":\"iana\"},\"application/vnd.nokia.conml+wbxml\":{\"source\":\"iana\"},\"application/vnd.nokia.conml+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.nokia.iptv.config+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.nokia.isds-radio-presets\":{\"source\":\"iana\"},\"application/vnd.nokia.landmark+wbxml\":{\"source\":\"iana\"},\"application/vnd.nokia.landmark+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.nokia.landmarkcollection+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.nokia.n-gage.ac+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"ac\"]},\"application/vnd.nokia.n-gage.data\":{\"source\":\"iana\",\"extensions\":[\"ngdat\"]},\"application/vnd.nokia.n-gage.symbian.install\":{\"source\":\"iana\",\"extensions\":[\"n-gage\"]},\"application/vnd.nokia.ncd\":{\"source\":\"iana\"},\"application/vnd.nokia.pcd+wbxml\":{\"source\":\"iana\"},\"application/vnd.nokia.pcd+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.nokia.radio-preset\":{\"source\":\"iana\",\"extensions\":[\"rpst\"]},\"application/vnd.nokia.radio-presets\":{\"source\":\"iana\",\"extensions\":[\"rpss\"]},\"application/vnd.novadigm.edm\":{\"source\":\"iana\",\"extensions\":[\"edm\"]},\"application/vnd.novadigm.edx\":{\"source\":\"iana\",\"extensions\":[\"edx\"]},\"application/vnd.novadigm.ext\":{\"source\":\"iana\",\"extensions\":[\"ext\"]},\"application/vnd.ntt-local.content-share\":{\"source\":\"iana\"},\"application/vnd.ntt-local.file-transfer\":{\"source\":\"iana\"},\"application/vnd.ntt-local.ogw_remote-access\":{\"source\":\"iana\"},\"application/vnd.ntt-local.sip-ta_remote\":{\"source\":\"iana\"},\"application/vnd.ntt-local.sip-ta_tcp_stream\":{\"source\":\"iana\"},\"application/vnd.oasis.opendocument.chart\":{\"source\":\"iana\",\"extensions\":[\"odc\"]},\"application/vnd.oasis.opendocument.chart-template\":{\"source\":\"iana\",\"extensions\":[\"otc\"]},\"application/vnd.oasis.opendocument.database\":{\"source\":\"iana\",\"extensions\":[\"odb\"]},\"application/vnd.oasis.opendocument.formula\":{\"source\":\"iana\",\"extensions\":[\"odf\"]},\"application/vnd.oasis.opendocument.formula-template\":{\"source\":\"iana\",\"extensions\":[\"odft\"]},\"application/vnd.oasis.opendocument.graphics\":{\"source\":\"iana\",\"compressible\":false,\"extensions\":[\"odg\"]},\"application/vnd.oasis.opendocument.graphics-template\":{\"source\":\"iana\",\"extensions\":[\"otg\"]},\"application/vnd.oasis.opendocument.image\":{\"source\":\"iana\",\"extensions\":[\"odi\"]},\"application/vnd.oasis.opendocument.image-template\":{\"source\":\"iana\",\"extensions\":[\"oti\"]},\"application/vnd.oasis.opendocument.presentation\":{\"source\":\"iana\",\"compressible\":false,\"extensions\":[\"odp\"]},\"application/vnd.oasis.opendocument.presentation-template\":{\"source\":\"iana\",\"extensions\":[\"otp\"]},\"application/vnd.oasis.opendocument.spreadsheet\":{\"source\":\"iana\",\"compressible\":false,\"extensions\":[\"ods\"]},\"application/vnd.oasis.opendocument.spreadsheet-template\":{\"source\":\"iana\",\"extensions\":[\"ots\"]},\"application/vnd.oasis.opendocument.text\":{\"source\":\"iana\",\"compressible\":false,\"extensions\":[\"odt\"]},\"application/vnd.oasis.opendocument.text-master\":{\"source\":\"iana\",\"extensions\":[\"odm\"]},\"application/vnd.oasis.opendocument.text-template\":{\"source\":\"iana\",\"extensions\":[\"ott\"]},\"application/vnd.oasis.opendocument.text-web\":{\"source\":\"iana\",\"extensions\":[\"oth\"]},\"application/vnd.obn\":{\"source\":\"iana\"},\"application/vnd.ocf+cbor\":{\"source\":\"iana\"},\"application/vnd.oci.image.manifest.v1+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.oftn.l10n+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.oipf.contentaccessdownload+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.oipf.contentaccessstreaming+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.oipf.cspg-hexbinary\":{\"source\":\"iana\"},\"application/vnd.oipf.dae.svg+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.oipf.dae.xhtml+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.oipf.mippvcontrolmessage+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.oipf.pae.gem\":{\"source\":\"iana\"},\"application/vnd.oipf.spdiscovery+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.oipf.spdlist+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.oipf.ueprofile+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.oipf.userprofile+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.olpc-sugar\":{\"source\":\"iana\",\"extensions\":[\"xo\"]},\"application/vnd.oma-scws-config\":{\"source\":\"iana\"},\"application/vnd.oma-scws-http-request\":{\"source\":\"iana\"},\"application/vnd.oma-scws-http-response\":{\"source\":\"iana\"},\"application/vnd.oma.bcast.associated-procedure-parameter+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.oma.bcast.drm-trigger+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.oma.bcast.imd+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.oma.bcast.ltkm\":{\"source\":\"iana\"},\"application/vnd.oma.bcast.notification+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.oma.bcast.provisioningtrigger\":{\"source\":\"iana\"},\"application/vnd.oma.bcast.sgboot\":{\"source\":\"iana\"},\"application/vnd.oma.bcast.sgdd+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.oma.bcast.sgdu\":{\"source\":\"iana\"},\"application/vnd.oma.bcast.simple-symbol-container\":{\"source\":\"iana\"},\"application/vnd.oma.bcast.smartcard-trigger+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.oma.bcast.sprov+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.oma.bcast.stkm\":{\"source\":\"iana\"},\"application/vnd.oma.cab-address-book+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.oma.cab-feature-handler+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.oma.cab-pcc+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.oma.cab-subs-invite+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.oma.cab-user-prefs+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.oma.dcd\":{\"source\":\"iana\"},\"application/vnd.oma.dcdc\":{\"source\":\"iana\"},\"application/vnd.oma.dd2+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"dd2\"]},\"application/vnd.oma.drm.risd+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.oma.group-usage-list+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.oma.lwm2m+cbor\":{\"source\":\"iana\"},\"application/vnd.oma.lwm2m+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.oma.lwm2m+tlv\":{\"source\":\"iana\"},\"application/vnd.oma.pal+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.oma.poc.detailed-progress-report+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.oma.poc.final-report+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.oma.poc.groups+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.oma.poc.invocation-descriptor+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.oma.poc.optimized-progress-report+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.oma.push\":{\"source\":\"iana\"},\"application/vnd.oma.scidm.messages+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.oma.xcap-directory+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.omads-email+xml\":{\"source\":\"iana\",\"charset\":\"UTF-8\",\"compressible\":true},\"application/vnd.omads-file+xml\":{\"source\":\"iana\",\"charset\":\"UTF-8\",\"compressible\":true},\"application/vnd.omads-folder+xml\":{\"source\":\"iana\",\"charset\":\"UTF-8\",\"compressible\":true},\"application/vnd.omaloc-supl-init\":{\"source\":\"iana\"},\"application/vnd.onepager\":{\"source\":\"iana\"},\"application/vnd.onepagertamp\":{\"source\":\"iana\"},\"application/vnd.onepagertamx\":{\"source\":\"iana\"},\"application/vnd.onepagertat\":{\"source\":\"iana\"},\"application/vnd.onepagertatp\":{\"source\":\"iana\"},\"application/vnd.onepagertatx\":{\"source\":\"iana\"},\"application/vnd.openblox.game+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"obgx\"]},\"application/vnd.openblox.game-binary\":{\"source\":\"iana\"},\"application/vnd.openeye.oeb\":{\"source\":\"iana\"},\"application/vnd.openofficeorg.extension\":{\"source\":\"apache\",\"extensions\":[\"oxt\"]},\"application/vnd.openstreetmap.data+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"osm\"]},\"application/vnd.opentimestamps.ots\":{\"source\":\"iana\"},\"application/vnd.openxmlformats-officedocument.custom-properties+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.customxmlproperties+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.drawing+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.drawingml.chart+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.drawingml.chartshapes+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.drawingml.diagramcolors+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.drawingml.diagramdata+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.drawingml.diagramlayout+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.drawingml.diagramstyle+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.extended-properties+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.presentationml.commentauthors+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.presentationml.comments+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.presentationml.handoutmaster+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.presentationml.notesmaster+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.presentationml.notesslide+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.presentationml.presentation\":{\"source\":\"iana\",\"compressible\":false,\"extensions\":[\"pptx\"]},\"application/vnd.openxmlformats-officedocument.presentationml.presentation.main+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.presentationml.presprops+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.presentationml.slide\":{\"source\":\"iana\",\"extensions\":[\"sldx\"]},\"application/vnd.openxmlformats-officedocument.presentationml.slide+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.presentationml.slidelayout+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.presentationml.slidemaster+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.presentationml.slideshow\":{\"source\":\"iana\",\"extensions\":[\"ppsx\"]},\"application/vnd.openxmlformats-officedocument.presentationml.slideshow.main+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.presentationml.slideupdateinfo+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.presentationml.tablestyles+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.presentationml.tags+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.presentationml.template\":{\"source\":\"iana\",\"extensions\":[\"potx\"]},\"application/vnd.openxmlformats-officedocument.presentationml.template.main+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.presentationml.viewprops+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.spreadsheetml.calcchain+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.spreadsheetml.chartsheet+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.spreadsheetml.connections+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.spreadsheetml.externallink+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcachedefinition+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcacherecords+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.spreadsheetml.pivottable+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.spreadsheetml.querytable+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.spreadsheetml.revisionheaders+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.spreadsheetml.revisionlog+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.spreadsheetml.sharedstrings+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\":{\"source\":\"iana\",\"compressible\":false,\"extensions\":[\"xlsx\"]},\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheetmetadata+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.spreadsheetml.tablesinglecells+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.spreadsheetml.template\":{\"source\":\"iana\",\"extensions\":[\"xltx\"]},\"application/vnd.openxmlformats-officedocument.spreadsheetml.template.main+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.spreadsheetml.usernames+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.spreadsheetml.volatiledependencies+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.theme+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.themeoverride+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.vmldrawing\":{\"source\":\"iana\"},\"application/vnd.openxmlformats-officedocument.wordprocessingml.comments+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.wordprocessingml.document\":{\"source\":\"iana\",\"compressible\":false,\"extensions\":[\"docx\"]},\"application/vnd.openxmlformats-officedocument.wordprocessingml.document.glossary+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.wordprocessingml.endnotes+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.wordprocessingml.fonttable+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.wordprocessingml.footer+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.wordprocessingml.footnotes+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.wordprocessingml.numbering+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.wordprocessingml.settings+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.wordprocessingml.styles+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.wordprocessingml.template\":{\"source\":\"iana\",\"extensions\":[\"dotx\"]},\"application/vnd.openxmlformats-officedocument.wordprocessingml.template.main+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-officedocument.wordprocessingml.websettings+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-package.core-properties+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-package.digital-signature-xmlsignature+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.openxmlformats-package.relationships+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.oracle.resource+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.orange.indata\":{\"source\":\"iana\"},\"application/vnd.osa.netdeploy\":{\"source\":\"iana\"},\"application/vnd.osgeo.mapguide.package\":{\"source\":\"iana\",\"extensions\":[\"mgp\"]},\"application/vnd.osgi.bundle\":{\"source\":\"iana\"},\"application/vnd.osgi.dp\":{\"source\":\"iana\",\"extensions\":[\"dp\"]},\"application/vnd.osgi.subsystem\":{\"source\":\"iana\",\"extensions\":[\"esa\"]},\"application/vnd.otps.ct-kip+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.oxli.countgraph\":{\"source\":\"iana\"},\"application/vnd.pagerduty+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.palm\":{\"source\":\"iana\",\"extensions\":[\"pdb\",\"pqa\",\"oprc\"]},\"application/vnd.panoply\":{\"source\":\"iana\"},\"application/vnd.paos.xml\":{\"source\":\"iana\"},\"application/vnd.patentdive\":{\"source\":\"iana\"},\"application/vnd.patientecommsdoc\":{\"source\":\"iana\"},\"application/vnd.pawaafile\":{\"source\":\"iana\",\"extensions\":[\"paw\"]},\"application/vnd.pcos\":{\"source\":\"iana\"},\"application/vnd.pg.format\":{\"source\":\"iana\",\"extensions\":[\"str\"]},\"application/vnd.pg.osasli\":{\"source\":\"iana\",\"extensions\":[\"ei6\"]},\"application/vnd.piaccess.application-licence\":{\"source\":\"iana\"},\"application/vnd.picsel\":{\"source\":\"iana\",\"extensions\":[\"efif\"]},\"application/vnd.pmi.widget\":{\"source\":\"iana\",\"extensions\":[\"wg\"]},\"application/vnd.poc.group-advertisement+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.pocketlearn\":{\"source\":\"iana\",\"extensions\":[\"plf\"]},\"application/vnd.powerbuilder6\":{\"source\":\"iana\",\"extensions\":[\"pbd\"]},\"application/vnd.powerbuilder6-s\":{\"source\":\"iana\"},\"application/vnd.powerbuilder7\":{\"source\":\"iana\"},\"application/vnd.powerbuilder7-s\":{\"source\":\"iana\"},\"application/vnd.powerbuilder75\":{\"source\":\"iana\"},\"application/vnd.powerbuilder75-s\":{\"source\":\"iana\"},\"application/vnd.preminet\":{\"source\":\"iana\"},\"application/vnd.previewsystems.box\":{\"source\":\"iana\",\"extensions\":[\"box\"]},\"application/vnd.proteus.magazine\":{\"source\":\"iana\",\"extensions\":[\"mgz\"]},\"application/vnd.psfs\":{\"source\":\"iana\"},\"application/vnd.publishare-delta-tree\":{\"source\":\"iana\",\"extensions\":[\"qps\"]},\"application/vnd.pvi.ptid1\":{\"source\":\"iana\",\"extensions\":[\"ptid\"]},\"application/vnd.pwg-multiplexed\":{\"source\":\"iana\"},\"application/vnd.pwg-xhtml-print+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.qualcomm.brew-app-res\":{\"source\":\"iana\"},\"application/vnd.quarantainenet\":{\"source\":\"iana\"},\"application/vnd.quark.quarkxpress\":{\"source\":\"iana\",\"extensions\":[\"qxd\",\"qxt\",\"qwd\",\"qwt\",\"qxl\",\"qxb\"]},\"application/vnd.quobject-quoxdocument\":{\"source\":\"iana\"},\"application/vnd.radisys.moml+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.radisys.msml+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.radisys.msml-audit+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.radisys.msml-audit-conf+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.radisys.msml-audit-conn+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.radisys.msml-audit-dialog+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.radisys.msml-audit-stream+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.radisys.msml-conf+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.radisys.msml-dialog+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.radisys.msml-dialog-base+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.radisys.msml-dialog-fax-detect+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.radisys.msml-dialog-fax-sendrecv+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.radisys.msml-dialog-group+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.radisys.msml-dialog-speech+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.radisys.msml-dialog-transform+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.rainstor.data\":{\"source\":\"iana\"},\"application/vnd.rapid\":{\"source\":\"iana\"},\"application/vnd.rar\":{\"source\":\"iana\",\"extensions\":[\"rar\"]},\"application/vnd.realvnc.bed\":{\"source\":\"iana\",\"extensions\":[\"bed\"]},\"application/vnd.recordare.musicxml\":{\"source\":\"iana\",\"extensions\":[\"mxl\"]},\"application/vnd.recordare.musicxml+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"musicxml\"]},\"application/vnd.renlearn.rlprint\":{\"source\":\"iana\"},\"application/vnd.resilient.logic\":{\"source\":\"iana\"},\"application/vnd.restful+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.rig.cryptonote\":{\"source\":\"iana\",\"extensions\":[\"cryptonote\"]},\"application/vnd.rim.cod\":{\"source\":\"apache\",\"extensions\":[\"cod\"]},\"application/vnd.rn-realmedia\":{\"source\":\"apache\",\"extensions\":[\"rm\"]},\"application/vnd.rn-realmedia-vbr\":{\"source\":\"apache\",\"extensions\":[\"rmvb\"]},\"application/vnd.route66.link66+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"link66\"]},\"application/vnd.rs-274x\":{\"source\":\"iana\"},\"application/vnd.ruckus.download\":{\"source\":\"iana\"},\"application/vnd.s3sms\":{\"source\":\"iana\"},\"application/vnd.sailingtracker.track\":{\"source\":\"iana\",\"extensions\":[\"st\"]},\"application/vnd.sar\":{\"source\":\"iana\"},\"application/vnd.sbm.cid\":{\"source\":\"iana\"},\"application/vnd.sbm.mid2\":{\"source\":\"iana\"},\"application/vnd.scribus\":{\"source\":\"iana\"},\"application/vnd.sealed.3df\":{\"source\":\"iana\"},\"application/vnd.sealed.csf\":{\"source\":\"iana\"},\"application/vnd.sealed.doc\":{\"source\":\"iana\"},\"application/vnd.sealed.eml\":{\"source\":\"iana\"},\"application/vnd.sealed.mht\":{\"source\":\"iana\"},\"application/vnd.sealed.net\":{\"source\":\"iana\"},\"application/vnd.sealed.ppt\":{\"source\":\"iana\"},\"application/vnd.sealed.tiff\":{\"source\":\"iana\"},\"application/vnd.sealed.xls\":{\"source\":\"iana\"},\"application/vnd.sealedmedia.softseal.html\":{\"source\":\"iana\"},\"application/vnd.sealedmedia.softseal.pdf\":{\"source\":\"iana\"},\"application/vnd.seemail\":{\"source\":\"iana\",\"extensions\":[\"see\"]},\"application/vnd.seis+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.sema\":{\"source\":\"iana\",\"extensions\":[\"sema\"]},\"application/vnd.semd\":{\"source\":\"iana\",\"extensions\":[\"semd\"]},\"application/vnd.semf\":{\"source\":\"iana\",\"extensions\":[\"semf\"]},\"application/vnd.shade-save-file\":{\"source\":\"iana\"},\"application/vnd.shana.informed.formdata\":{\"source\":\"iana\",\"extensions\":[\"ifm\"]},\"application/vnd.shana.informed.formtemplate\":{\"source\":\"iana\",\"extensions\":[\"itp\"]},\"application/vnd.shana.informed.interchange\":{\"source\":\"iana\",\"extensions\":[\"iif\"]},\"application/vnd.shana.informed.package\":{\"source\":\"iana\",\"extensions\":[\"ipk\"]},\"application/vnd.shootproof+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.shopkick+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.shp\":{\"source\":\"iana\"},\"application/vnd.shx\":{\"source\":\"iana\"},\"application/vnd.sigrok.session\":{\"source\":\"iana\"},\"application/vnd.simtech-mindmapper\":{\"source\":\"iana\",\"extensions\":[\"twd\",\"twds\"]},\"application/vnd.siren+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.smaf\":{\"source\":\"iana\",\"extensions\":[\"mmf\"]},\"application/vnd.smart.notebook\":{\"source\":\"iana\"},\"application/vnd.smart.teacher\":{\"source\":\"iana\",\"extensions\":[\"teacher\"]},\"application/vnd.snesdev-page-table\":{\"source\":\"iana\"},\"application/vnd.software602.filler.form+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"fo\"]},\"application/vnd.software602.filler.form-xml-zip\":{\"source\":\"iana\"},\"application/vnd.solent.sdkm+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"sdkm\",\"sdkd\"]},\"application/vnd.spotfire.dxp\":{\"source\":\"iana\",\"extensions\":[\"dxp\"]},\"application/vnd.spotfire.sfs\":{\"source\":\"iana\",\"extensions\":[\"sfs\"]},\"application/vnd.sqlite3\":{\"source\":\"iana\"},\"application/vnd.sss-cod\":{\"source\":\"iana\"},\"application/vnd.sss-dtf\":{\"source\":\"iana\"},\"application/vnd.sss-ntf\":{\"source\":\"iana\"},\"application/vnd.stardivision.calc\":{\"source\":\"apache\",\"extensions\":[\"sdc\"]},\"application/vnd.stardivision.draw\":{\"source\":\"apache\",\"extensions\":[\"sda\"]},\"application/vnd.stardivision.impress\":{\"source\":\"apache\",\"extensions\":[\"sdd\"]},\"application/vnd.stardivision.math\":{\"source\":\"apache\",\"extensions\":[\"smf\"]},\"application/vnd.stardivision.writer\":{\"source\":\"apache\",\"extensions\":[\"sdw\",\"vor\"]},\"application/vnd.stardivision.writer-global\":{\"source\":\"apache\",\"extensions\":[\"sgl\"]},\"application/vnd.stepmania.package\":{\"source\":\"iana\",\"extensions\":[\"smzip\"]},\"application/vnd.stepmania.stepchart\":{\"source\":\"iana\",\"extensions\":[\"sm\"]},\"application/vnd.street-stream\":{\"source\":\"iana\"},\"application/vnd.sun.wadl+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"wadl\"]},\"application/vnd.sun.xml.calc\":{\"source\":\"apache\",\"extensions\":[\"sxc\"]},\"application/vnd.sun.xml.calc.template\":{\"source\":\"apache\",\"extensions\":[\"stc\"]},\"application/vnd.sun.xml.draw\":{\"source\":\"apache\",\"extensions\":[\"sxd\"]},\"application/vnd.sun.xml.draw.template\":{\"source\":\"apache\",\"extensions\":[\"std\"]},\"application/vnd.sun.xml.impress\":{\"source\":\"apache\",\"extensions\":[\"sxi\"]},\"application/vnd.sun.xml.impress.template\":{\"source\":\"apache\",\"extensions\":[\"sti\"]},\"application/vnd.sun.xml.math\":{\"source\":\"apache\",\"extensions\":[\"sxm\"]},\"application/vnd.sun.xml.writer\":{\"source\":\"apache\",\"extensions\":[\"sxw\"]},\"application/vnd.sun.xml.writer.global\":{\"source\":\"apache\",\"extensions\":[\"sxg\"]},\"application/vnd.sun.xml.writer.template\":{\"source\":\"apache\",\"extensions\":[\"stw\"]},\"application/vnd.sus-calendar\":{\"source\":\"iana\",\"extensions\":[\"sus\",\"susp\"]},\"application/vnd.svd\":{\"source\":\"iana\",\"extensions\":[\"svd\"]},\"application/vnd.swiftview-ics\":{\"source\":\"iana\"},\"application/vnd.sycle+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.symbian.install\":{\"source\":\"apache\",\"extensions\":[\"sis\",\"sisx\"]},\"application/vnd.syncml+xml\":{\"source\":\"iana\",\"charset\":\"UTF-8\",\"compressible\":true,\"extensions\":[\"xsm\"]},\"application/vnd.syncml.dm+wbxml\":{\"source\":\"iana\",\"charset\":\"UTF-8\",\"extensions\":[\"bdm\"]},\"application/vnd.syncml.dm+xml\":{\"source\":\"iana\",\"charset\":\"UTF-8\",\"compressible\":true,\"extensions\":[\"xdm\"]},\"application/vnd.syncml.dm.notification\":{\"source\":\"iana\"},\"application/vnd.syncml.dmddf+wbxml\":{\"source\":\"iana\"},\"application/vnd.syncml.dmddf+xml\":{\"source\":\"iana\",\"charset\":\"UTF-8\",\"compressible\":true,\"extensions\":[\"ddf\"]},\"application/vnd.syncml.dmtnds+wbxml\":{\"source\":\"iana\"},\"application/vnd.syncml.dmtnds+xml\":{\"source\":\"iana\",\"charset\":\"UTF-8\",\"compressible\":true},\"application/vnd.syncml.ds.notification\":{\"source\":\"iana\"},\"application/vnd.tableschema+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.tao.intent-module-archive\":{\"source\":\"iana\",\"extensions\":[\"tao\"]},\"application/vnd.tcpdump.pcap\":{\"source\":\"iana\",\"extensions\":[\"pcap\",\"cap\",\"dmp\"]},\"application/vnd.think-cell.ppttc+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.tmd.mediaflex.api+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.tml\":{\"source\":\"iana\"},\"application/vnd.tmobile-livetv\":{\"source\":\"iana\",\"extensions\":[\"tmo\"]},\"application/vnd.tri.onesource\":{\"source\":\"iana\"},\"application/vnd.trid.tpt\":{\"source\":\"iana\",\"extensions\":[\"tpt\"]},\"application/vnd.triscape.mxs\":{\"source\":\"iana\",\"extensions\":[\"mxs\"]},\"application/vnd.trueapp\":{\"source\":\"iana\",\"extensions\":[\"tra\"]},\"application/vnd.truedoc\":{\"source\":\"iana\"},\"application/vnd.ubisoft.webplayer\":{\"source\":\"iana\"},\"application/vnd.ufdl\":{\"source\":\"iana\",\"extensions\":[\"ufd\",\"ufdl\"]},\"application/vnd.uiq.theme\":{\"source\":\"iana\",\"extensions\":[\"utz\"]},\"application/vnd.umajin\":{\"source\":\"iana\",\"extensions\":[\"umj\"]},\"application/vnd.unity\":{\"source\":\"iana\",\"extensions\":[\"unityweb\"]},\"application/vnd.uoml+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"uoml\"]},\"application/vnd.uplanet.alert\":{\"source\":\"iana\"},\"application/vnd.uplanet.alert-wbxml\":{\"source\":\"iana\"},\"application/vnd.uplanet.bearer-choice\":{\"source\":\"iana\"},\"application/vnd.uplanet.bearer-choice-wbxml\":{\"source\":\"iana\"},\"application/vnd.uplanet.cacheop\":{\"source\":\"iana\"},\"application/vnd.uplanet.cacheop-wbxml\":{\"source\":\"iana\"},\"application/vnd.uplanet.channel\":{\"source\":\"iana\"},\"application/vnd.uplanet.channel-wbxml\":{\"source\":\"iana\"},\"application/vnd.uplanet.list\":{\"source\":\"iana\"},\"application/vnd.uplanet.list-wbxml\":{\"source\":\"iana\"},\"application/vnd.uplanet.listcmd\":{\"source\":\"iana\"},\"application/vnd.uplanet.listcmd-wbxml\":{\"source\":\"iana\"},\"application/vnd.uplanet.signal\":{\"source\":\"iana\"},\"application/vnd.uri-map\":{\"source\":\"iana\"},\"application/vnd.valve.source.material\":{\"source\":\"iana\"},\"application/vnd.vcx\":{\"source\":\"iana\",\"extensions\":[\"vcx\"]},\"application/vnd.vd-study\":{\"source\":\"iana\"},\"application/vnd.vectorworks\":{\"source\":\"iana\"},\"application/vnd.vel+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.verimatrix.vcas\":{\"source\":\"iana\"},\"application/vnd.veritone.aion+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.veryant.thin\":{\"source\":\"iana\"},\"application/vnd.ves.encrypted\":{\"source\":\"iana\"},\"application/vnd.vidsoft.vidconference\":{\"source\":\"iana\"},\"application/vnd.visio\":{\"source\":\"iana\",\"extensions\":[\"vsd\",\"vst\",\"vss\",\"vsw\"]},\"application/vnd.visionary\":{\"source\":\"iana\",\"extensions\":[\"vis\"]},\"application/vnd.vividence.scriptfile\":{\"source\":\"iana\"},\"application/vnd.vsf\":{\"source\":\"iana\",\"extensions\":[\"vsf\"]},\"application/vnd.wap.sic\":{\"source\":\"iana\"},\"application/vnd.wap.slc\":{\"source\":\"iana\"},\"application/vnd.wap.wbxml\":{\"source\":\"iana\",\"charset\":\"UTF-8\",\"extensions\":[\"wbxml\"]},\"application/vnd.wap.wmlc\":{\"source\":\"iana\",\"extensions\":[\"wmlc\"]},\"application/vnd.wap.wmlscriptc\":{\"source\":\"iana\",\"extensions\":[\"wmlsc\"]},\"application/vnd.webturbo\":{\"source\":\"iana\",\"extensions\":[\"wtb\"]},\"application/vnd.wfa.dpp\":{\"source\":\"iana\"},\"application/vnd.wfa.p2p\":{\"source\":\"iana\"},\"application/vnd.wfa.wsc\":{\"source\":\"iana\"},\"application/vnd.windows.devicepairing\":{\"source\":\"iana\"},\"application/vnd.wmc\":{\"source\":\"iana\"},\"application/vnd.wmf.bootstrap\":{\"source\":\"iana\"},\"application/vnd.wolfram.mathematica\":{\"source\":\"iana\"},\"application/vnd.wolfram.mathematica.package\":{\"source\":\"iana\"},\"application/vnd.wolfram.player\":{\"source\":\"iana\",\"extensions\":[\"nbp\"]},\"application/vnd.wordperfect\":{\"source\":\"iana\",\"extensions\":[\"wpd\"]},\"application/vnd.wqd\":{\"source\":\"iana\",\"extensions\":[\"wqd\"]},\"application/vnd.wrq-hp3000-labelled\":{\"source\":\"iana\"},\"application/vnd.wt.stf\":{\"source\":\"iana\",\"extensions\":[\"stf\"]},\"application/vnd.wv.csp+wbxml\":{\"source\":\"iana\"},\"application/vnd.wv.csp+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.wv.ssp+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.xacml+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.xara\":{\"source\":\"iana\",\"extensions\":[\"xar\"]},\"application/vnd.xfdl\":{\"source\":\"iana\",\"extensions\":[\"xfdl\"]},\"application/vnd.xfdl.webform\":{\"source\":\"iana\"},\"application/vnd.xmi+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/vnd.xmpie.cpkg\":{\"source\":\"iana\"},\"application/vnd.xmpie.dpkg\":{\"source\":\"iana\"},\"application/vnd.xmpie.plan\":{\"source\":\"iana\"},\"application/vnd.xmpie.ppkg\":{\"source\":\"iana\"},\"application/vnd.xmpie.xlim\":{\"source\":\"iana\"},\"application/vnd.yamaha.hv-dic\":{\"source\":\"iana\",\"extensions\":[\"hvd\"]},\"application/vnd.yamaha.hv-script\":{\"source\":\"iana\",\"extensions\":[\"hvs\"]},\"application/vnd.yamaha.hv-voice\":{\"source\":\"iana\",\"extensions\":[\"hvp\"]},\"application/vnd.yamaha.openscoreformat\":{\"source\":\"iana\",\"extensions\":[\"osf\"]},\"application/vnd.yamaha.openscoreformat.osfpvg+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"osfpvg\"]},\"application/vnd.yamaha.remote-setup\":{\"source\":\"iana\"},\"application/vnd.yamaha.smaf-audio\":{\"source\":\"iana\",\"extensions\":[\"saf\"]},\"application/vnd.yamaha.smaf-phrase\":{\"source\":\"iana\",\"extensions\":[\"spf\"]},\"application/vnd.yamaha.through-ngn\":{\"source\":\"iana\"},\"application/vnd.yamaha.tunnel-udpencap\":{\"source\":\"iana\"},\"application/vnd.yaoweme\":{\"source\":\"iana\"},\"application/vnd.yellowriver-custom-menu\":{\"source\":\"iana\",\"extensions\":[\"cmp\"]},\"application/vnd.youtube.yt\":{\"source\":\"iana\"},\"application/vnd.zul\":{\"source\":\"iana\",\"extensions\":[\"zir\",\"zirz\"]},\"application/vnd.zzazz.deck+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"zaz\"]},\"application/voicexml+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"vxml\"]},\"application/voucher-cms+json\":{\"source\":\"iana\",\"compressible\":true},\"application/vq-rtcpxr\":{\"source\":\"iana\"},\"application/wasm\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"wasm\"]},\"application/watcherinfo+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/webpush-options+json\":{\"source\":\"iana\",\"compressible\":true},\"application/whoispp-query\":{\"source\":\"iana\"},\"application/whoispp-response\":{\"source\":\"iana\"},\"application/widget\":{\"source\":\"iana\",\"extensions\":[\"wgt\"]},\"application/winhlp\":{\"source\":\"apache\",\"extensions\":[\"hlp\"]},\"application/wita\":{\"source\":\"iana\"},\"application/wordperfect5.1\":{\"source\":\"iana\"},\"application/wsdl+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"wsdl\"]},\"application/wspolicy+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"wspolicy\"]},\"application/x-7z-compressed\":{\"source\":\"apache\",\"compressible\":false,\"extensions\":[\"7z\"]},\"application/x-abiword\":{\"source\":\"apache\",\"extensions\":[\"abw\"]},\"application/x-ace-compressed\":{\"source\":\"apache\",\"extensions\":[\"ace\"]},\"application/x-amf\":{\"source\":\"apache\"},\"application/x-apple-diskimage\":{\"source\":\"apache\",\"extensions\":[\"dmg\"]},\"application/x-arj\":{\"compressible\":false,\"extensions\":[\"arj\"]},\"application/x-authorware-bin\":{\"source\":\"apache\",\"extensions\":[\"aab\",\"x32\",\"u32\",\"vox\"]},\"application/x-authorware-map\":{\"source\":\"apache\",\"extensions\":[\"aam\"]},\"application/x-authorware-seg\":{\"source\":\"apache\",\"extensions\":[\"aas\"]},\"application/x-bcpio\":{\"source\":\"apache\",\"extensions\":[\"bcpio\"]},\"application/x-bdoc\":{\"compressible\":false,\"extensions\":[\"bdoc\"]},\"application/x-bittorrent\":{\"source\":\"apache\",\"extensions\":[\"torrent\"]},\"application/x-blorb\":{\"source\":\"apache\",\"extensions\":[\"blb\",\"blorb\"]},\"application/x-bzip\":{\"source\":\"apache\",\"compressible\":false,\"extensions\":[\"bz\"]},\"application/x-bzip2\":{\"source\":\"apache\",\"compressible\":false,\"extensions\":[\"bz2\",\"boz\"]},\"application/x-cbr\":{\"source\":\"apache\",\"extensions\":[\"cbr\",\"cba\",\"cbt\",\"cbz\",\"cb7\"]},\"application/x-cdlink\":{\"source\":\"apache\",\"extensions\":[\"vcd\"]},\"application/x-cfs-compressed\":{\"source\":\"apache\",\"extensions\":[\"cfs\"]},\"application/x-chat\":{\"source\":\"apache\",\"extensions\":[\"chat\"]},\"application/x-chess-pgn\":{\"source\":\"apache\",\"extensions\":[\"pgn\"]},\"application/x-chrome-extension\":{\"extensions\":[\"crx\"]},\"application/x-cocoa\":{\"source\":\"nginx\",\"extensions\":[\"cco\"]},\"application/x-compress\":{\"source\":\"apache\"},\"application/x-conference\":{\"source\":\"apache\",\"extensions\":[\"nsc\"]},\"application/x-cpio\":{\"source\":\"apache\",\"extensions\":[\"cpio\"]},\"application/x-csh\":{\"source\":\"apache\",\"extensions\":[\"csh\"]},\"application/x-deb\":{\"compressible\":false},\"application/x-debian-package\":{\"source\":\"apache\",\"extensions\":[\"deb\",\"udeb\"]},\"application/x-dgc-compressed\":{\"source\":\"apache\",\"extensions\":[\"dgc\"]},\"application/x-director\":{\"source\":\"apache\",\"extensions\":[\"dir\",\"dcr\",\"dxr\",\"cst\",\"cct\",\"cxt\",\"w3d\",\"fgd\",\"swa\"]},\"application/x-doom\":{\"source\":\"apache\",\"extensions\":[\"wad\"]},\"application/x-dtbncx+xml\":{\"source\":\"apache\",\"compressible\":true,\"extensions\":[\"ncx\"]},\"application/x-dtbook+xml\":{\"source\":\"apache\",\"compressible\":true,\"extensions\":[\"dtb\"]},\"application/x-dtbresource+xml\":{\"source\":\"apache\",\"compressible\":true,\"extensions\":[\"res\"]},\"application/x-dvi\":{\"source\":\"apache\",\"compressible\":false,\"extensions\":[\"dvi\"]},\"application/x-envoy\":{\"source\":\"apache\",\"extensions\":[\"evy\"]},\"application/x-eva\":{\"source\":\"apache\",\"extensions\":[\"eva\"]},\"application/x-font-bdf\":{\"source\":\"apache\",\"extensions\":[\"bdf\"]},\"application/x-font-dos\":{\"source\":\"apache\"},\"application/x-font-framemaker\":{\"source\":\"apache\"},\"application/x-font-ghostscript\":{\"source\":\"apache\",\"extensions\":[\"gsf\"]},\"application/x-font-libgrx\":{\"source\":\"apache\"},\"application/x-font-linux-psf\":{\"source\":\"apache\",\"extensions\":[\"psf\"]},\"application/x-font-pcf\":{\"source\":\"apache\",\"extensions\":[\"pcf\"]},\"application/x-font-snf\":{\"source\":\"apache\",\"extensions\":[\"snf\"]},\"application/x-font-speedo\":{\"source\":\"apache\"},\"application/x-font-sunos-news\":{\"source\":\"apache\"},\"application/x-font-type1\":{\"source\":\"apache\",\"extensions\":[\"pfa\",\"pfb\",\"pfm\",\"afm\"]},\"application/x-font-vfont\":{\"source\":\"apache\"},\"application/x-freearc\":{\"source\":\"apache\",\"extensions\":[\"arc\"]},\"application/x-futuresplash\":{\"source\":\"apache\",\"extensions\":[\"spl\"]},\"application/x-gca-compressed\":{\"source\":\"apache\",\"extensions\":[\"gca\"]},\"application/x-glulx\":{\"source\":\"apache\",\"extensions\":[\"ulx\"]},\"application/x-gnumeric\":{\"source\":\"apache\",\"extensions\":[\"gnumeric\"]},\"application/x-gramps-xml\":{\"source\":\"apache\",\"extensions\":[\"gramps\"]},\"application/x-gtar\":{\"source\":\"apache\",\"extensions\":[\"gtar\"]},\"application/x-gzip\":{\"source\":\"apache\"},\"application/x-hdf\":{\"source\":\"apache\",\"extensions\":[\"hdf\"]},\"application/x-httpd-php\":{\"compressible\":true,\"extensions\":[\"php\"]},\"application/x-install-instructions\":{\"source\":\"apache\",\"extensions\":[\"install\"]},\"application/x-iso9660-image\":{\"source\":\"apache\",\"extensions\":[\"iso\"]},\"application/x-iwork-keynote-sffkey\":{\"extensions\":[\"key\"]},\"application/x-iwork-numbers-sffnumbers\":{\"extensions\":[\"numbers\"]},\"application/x-iwork-pages-sffpages\":{\"extensions\":[\"pages\"]},\"application/x-java-archive-diff\":{\"source\":\"nginx\",\"extensions\":[\"jardiff\"]},\"application/x-java-jnlp-file\":{\"source\":\"apache\",\"compressible\":false,\"extensions\":[\"jnlp\"]},\"application/x-javascript\":{\"compressible\":true},\"application/x-keepass2\":{\"extensions\":[\"kdbx\"]},\"application/x-latex\":{\"source\":\"apache\",\"compressible\":false,\"extensions\":[\"latex\"]},\"application/x-lua-bytecode\":{\"extensions\":[\"luac\"]},\"application/x-lzh-compressed\":{\"source\":\"apache\",\"extensions\":[\"lzh\",\"lha\"]},\"application/x-makeself\":{\"source\":\"nginx\",\"extensions\":[\"run\"]},\"application/x-mie\":{\"source\":\"apache\",\"extensions\":[\"mie\"]},\"application/x-mobipocket-ebook\":{\"source\":\"apache\",\"extensions\":[\"prc\",\"mobi\"]},\"application/x-mpegurl\":{\"compressible\":false},\"application/x-ms-application\":{\"source\":\"apache\",\"extensions\":[\"application\"]},\"application/x-ms-shortcut\":{\"source\":\"apache\",\"extensions\":[\"lnk\"]},\"application/x-ms-wmd\":{\"source\":\"apache\",\"extensions\":[\"wmd\"]},\"application/x-ms-wmz\":{\"source\":\"apache\",\"extensions\":[\"wmz\"]},\"application/x-ms-xbap\":{\"source\":\"apache\",\"extensions\":[\"xbap\"]},\"application/x-msaccess\":{\"source\":\"apache\",\"extensions\":[\"mdb\"]},\"application/x-msbinder\":{\"source\":\"apache\",\"extensions\":[\"obd\"]},\"application/x-mscardfile\":{\"source\":\"apache\",\"extensions\":[\"crd\"]},\"application/x-msclip\":{\"source\":\"apache\",\"extensions\":[\"clp\"]},\"application/x-msdos-program\":{\"extensions\":[\"exe\"]},\"application/x-msdownload\":{\"source\":\"apache\",\"extensions\":[\"exe\",\"dll\",\"com\",\"bat\",\"msi\"]},\"application/x-msmediaview\":{\"source\":\"apache\",\"extensions\":[\"mvb\",\"m13\",\"m14\"]},\"application/x-msmetafile\":{\"source\":\"apache\",\"extensions\":[\"wmf\",\"wmz\",\"emf\",\"emz\"]},\"application/x-msmoney\":{\"source\":\"apache\",\"extensions\":[\"mny\"]},\"application/x-mspublisher\":{\"source\":\"apache\",\"extensions\":[\"pub\"]},\"application/x-msschedule\":{\"source\":\"apache\",\"extensions\":[\"scd\"]},\"application/x-msterminal\":{\"source\":\"apache\",\"extensions\":[\"trm\"]},\"application/x-mswrite\":{\"source\":\"apache\",\"extensions\":[\"wri\"]},\"application/x-netcdf\":{\"source\":\"apache\",\"extensions\":[\"nc\",\"cdf\"]},\"application/x-ns-proxy-autoconfig\":{\"compressible\":true,\"extensions\":[\"pac\"]},\"application/x-nzb\":{\"source\":\"apache\",\"extensions\":[\"nzb\"]},\"application/x-perl\":{\"source\":\"nginx\",\"extensions\":[\"pl\",\"pm\"]},\"application/x-pilot\":{\"source\":\"nginx\",\"extensions\":[\"prc\",\"pdb\"]},\"application/x-pkcs12\":{\"source\":\"apache\",\"compressible\":false,\"extensions\":[\"p12\",\"pfx\"]},\"application/x-pkcs7-certificates\":{\"source\":\"apache\",\"extensions\":[\"p7b\",\"spc\"]},\"application/x-pkcs7-certreqresp\":{\"source\":\"apache\",\"extensions\":[\"p7r\"]},\"application/x-pki-message\":{\"source\":\"iana\"},\"application/x-rar-compressed\":{\"source\":\"apache\",\"compressible\":false,\"extensions\":[\"rar\"]},\"application/x-redhat-package-manager\":{\"source\":\"nginx\",\"extensions\":[\"rpm\"]},\"application/x-research-info-systems\":{\"source\":\"apache\",\"extensions\":[\"ris\"]},\"application/x-sea\":{\"source\":\"nginx\",\"extensions\":[\"sea\"]},\"application/x-sh\":{\"source\":\"apache\",\"compressible\":true,\"extensions\":[\"sh\"]},\"application/x-shar\":{\"source\":\"apache\",\"extensions\":[\"shar\"]},\"application/x-shockwave-flash\":{\"source\":\"apache\",\"compressible\":false,\"extensions\":[\"swf\"]},\"application/x-silverlight-app\":{\"source\":\"apache\",\"extensions\":[\"xap\"]},\"application/x-sql\":{\"source\":\"apache\",\"extensions\":[\"sql\"]},\"application/x-stuffit\":{\"source\":\"apache\",\"compressible\":false,\"extensions\":[\"sit\"]},\"application/x-stuffitx\":{\"source\":\"apache\",\"extensions\":[\"sitx\"]},\"application/x-subrip\":{\"source\":\"apache\",\"extensions\":[\"srt\"]},\"application/x-sv4cpio\":{\"source\":\"apache\",\"extensions\":[\"sv4cpio\"]},\"application/x-sv4crc\":{\"source\":\"apache\",\"extensions\":[\"sv4crc\"]},\"application/x-t3vm-image\":{\"source\":\"apache\",\"extensions\":[\"t3\"]},\"application/x-tads\":{\"source\":\"apache\",\"extensions\":[\"gam\"]},\"application/x-tar\":{\"source\":\"apache\",\"compressible\":true,\"extensions\":[\"tar\"]},\"application/x-tcl\":{\"source\":\"apache\",\"extensions\":[\"tcl\",\"tk\"]},\"application/x-tex\":{\"source\":\"apache\",\"extensions\":[\"tex\"]},\"application/x-tex-tfm\":{\"source\":\"apache\",\"extensions\":[\"tfm\"]},\"application/x-texinfo\":{\"source\":\"apache\",\"extensions\":[\"texinfo\",\"texi\"]},\"application/x-tgif\":{\"source\":\"apache\",\"extensions\":[\"obj\"]},\"application/x-ustar\":{\"source\":\"apache\",\"extensions\":[\"ustar\"]},\"application/x-virtualbox-hdd\":{\"compressible\":true,\"extensions\":[\"hdd\"]},\"application/x-virtualbox-ova\":{\"compressible\":true,\"extensions\":[\"ova\"]},\"application/x-virtualbox-ovf\":{\"compressible\":true,\"extensions\":[\"ovf\"]},\"application/x-virtualbox-vbox\":{\"compressible\":true,\"extensions\":[\"vbox\"]},\"application/x-virtualbox-vbox-extpack\":{\"compressible\":false,\"extensions\":[\"vbox-extpack\"]},\"application/x-virtualbox-vdi\":{\"compressible\":true,\"extensions\":[\"vdi\"]},\"application/x-virtualbox-vhd\":{\"compressible\":true,\"extensions\":[\"vhd\"]},\"application/x-virtualbox-vmdk\":{\"compressible\":true,\"extensions\":[\"vmdk\"]},\"application/x-wais-source\":{\"source\":\"apache\",\"extensions\":[\"src\"]},\"application/x-web-app-manifest+json\":{\"compressible\":true,\"extensions\":[\"webapp\"]},\"application/x-www-form-urlencoded\":{\"source\":\"iana\",\"compressible\":true},\"application/x-x509-ca-cert\":{\"source\":\"iana\",\"extensions\":[\"der\",\"crt\",\"pem\"]},\"application/x-x509-ca-ra-cert\":{\"source\":\"iana\"},\"application/x-x509-next-ca-cert\":{\"source\":\"iana\"},\"application/x-xfig\":{\"source\":\"apache\",\"extensions\":[\"fig\"]},\"application/x-xliff+xml\":{\"source\":\"apache\",\"compressible\":true,\"extensions\":[\"xlf\"]},\"application/x-xpinstall\":{\"source\":\"apache\",\"compressible\":false,\"extensions\":[\"xpi\"]},\"application/x-xz\":{\"source\":\"apache\",\"extensions\":[\"xz\"]},\"application/x-zmachine\":{\"source\":\"apache\",\"extensions\":[\"z1\",\"z2\",\"z3\",\"z4\",\"z5\",\"z6\",\"z7\",\"z8\"]},\"application/x400-bp\":{\"source\":\"iana\"},\"application/xacml+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/xaml+xml\":{\"source\":\"apache\",\"compressible\":true,\"extensions\":[\"xaml\"]},\"application/xcap-att+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"xav\"]},\"application/xcap-caps+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"xca\"]},\"application/xcap-diff+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"xdf\"]},\"application/xcap-el+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"xel\"]},\"application/xcap-error+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/xcap-ns+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"xns\"]},\"application/xcon-conference-info+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/xcon-conference-info-diff+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/xenc+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"xenc\"]},\"application/xhtml+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"xhtml\",\"xht\"]},\"application/xhtml-voice+xml\":{\"source\":\"apache\",\"compressible\":true},\"application/xliff+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"xlf\"]},\"application/xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"xml\",\"xsl\",\"xsd\",\"rng\"]},\"application/xml-dtd\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"dtd\"]},\"application/xml-external-parsed-entity\":{\"source\":\"iana\"},\"application/xml-patch+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/xmpp+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/xop+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"xop\"]},\"application/xproc+xml\":{\"source\":\"apache\",\"compressible\":true,\"extensions\":[\"xpl\"]},\"application/xslt+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"xsl\",\"xslt\"]},\"application/xspf+xml\":{\"source\":\"apache\",\"compressible\":true,\"extensions\":[\"xspf\"]},\"application/xv+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"mxml\",\"xhvml\",\"xvml\",\"xvm\"]},\"application/yang\":{\"source\":\"iana\",\"extensions\":[\"yang\"]},\"application/yang-data+json\":{\"source\":\"iana\",\"compressible\":true},\"application/yang-data+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/yang-patch+json\":{\"source\":\"iana\",\"compressible\":true},\"application/yang-patch+xml\":{\"source\":\"iana\",\"compressible\":true},\"application/yin+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"yin\"]},\"application/zip\":{\"source\":\"iana\",\"compressible\":false,\"extensions\":[\"zip\"]},\"application/zlib\":{\"source\":\"iana\"},\"application/zstd\":{\"source\":\"iana\"},\"audio/1d-interleaved-parityfec\":{\"source\":\"iana\"},\"audio/32kadpcm\":{\"source\":\"iana\"},\"audio/3gpp\":{\"source\":\"iana\",\"compressible\":false,\"extensions\":[\"3gpp\"]},\"audio/3gpp2\":{\"source\":\"iana\"},\"audio/aac\":{\"source\":\"iana\"},\"audio/ac3\":{\"source\":\"iana\"},\"audio/adpcm\":{\"source\":\"apache\",\"extensions\":[\"adp\"]},\"audio/amr\":{\"source\":\"iana\",\"extensions\":[\"amr\"]},\"audio/amr-wb\":{\"source\":\"iana\"},\"audio/amr-wb+\":{\"source\":\"iana\"},\"audio/aptx\":{\"source\":\"iana\"},\"audio/asc\":{\"source\":\"iana\"},\"audio/atrac-advanced-lossless\":{\"source\":\"iana\"},\"audio/atrac-x\":{\"source\":\"iana\"},\"audio/atrac3\":{\"source\":\"iana\"},\"audio/basic\":{\"source\":\"iana\",\"compressible\":false,\"extensions\":[\"au\",\"snd\"]},\"audio/bv16\":{\"source\":\"iana\"},\"audio/bv32\":{\"source\":\"iana\"},\"audio/clearmode\":{\"source\":\"iana\"},\"audio/cn\":{\"source\":\"iana\"},\"audio/dat12\":{\"source\":\"iana\"},\"audio/dls\":{\"source\":\"iana\"},\"audio/dsr-es201108\":{\"source\":\"iana\"},\"audio/dsr-es202050\":{\"source\":\"iana\"},\"audio/dsr-es202211\":{\"source\":\"iana\"},\"audio/dsr-es202212\":{\"source\":\"iana\"},\"audio/dv\":{\"source\":\"iana\"},\"audio/dvi4\":{\"source\":\"iana\"},\"audio/eac3\":{\"source\":\"iana\"},\"audio/encaprtp\":{\"source\":\"iana\"},\"audio/evrc\":{\"source\":\"iana\"},\"audio/evrc-qcp\":{\"source\":\"iana\"},\"audio/evrc0\":{\"source\":\"iana\"},\"audio/evrc1\":{\"source\":\"iana\"},\"audio/evrcb\":{\"source\":\"iana\"},\"audio/evrcb0\":{\"source\":\"iana\"},\"audio/evrcb1\":{\"source\":\"iana\"},\"audio/evrcnw\":{\"source\":\"iana\"},\"audio/evrcnw0\":{\"source\":\"iana\"},\"audio/evrcnw1\":{\"source\":\"iana\"},\"audio/evrcwb\":{\"source\":\"iana\"},\"audio/evrcwb0\":{\"source\":\"iana\"},\"audio/evrcwb1\":{\"source\":\"iana\"},\"audio/evs\":{\"source\":\"iana\"},\"audio/flexfec\":{\"source\":\"iana\"},\"audio/fwdred\":{\"source\":\"iana\"},\"audio/g711-0\":{\"source\":\"iana\"},\"audio/g719\":{\"source\":\"iana\"},\"audio/g722\":{\"source\":\"iana\"},\"audio/g7221\":{\"source\":\"iana\"},\"audio/g723\":{\"source\":\"iana\"},\"audio/g726-16\":{\"source\":\"iana\"},\"audio/g726-24\":{\"source\":\"iana\"},\"audio/g726-32\":{\"source\":\"iana\"},\"audio/g726-40\":{\"source\":\"iana\"},\"audio/g728\":{\"source\":\"iana\"},\"audio/g729\":{\"source\":\"iana\"},\"audio/g7291\":{\"source\":\"iana\"},\"audio/g729d\":{\"source\":\"iana\"},\"audio/g729e\":{\"source\":\"iana\"},\"audio/gsm\":{\"source\":\"iana\"},\"audio/gsm-efr\":{\"source\":\"iana\"},\"audio/gsm-hr-08\":{\"source\":\"iana\"},\"audio/ilbc\":{\"source\":\"iana\"},\"audio/ip-mr_v2.5\":{\"source\":\"iana\"},\"audio/isac\":{\"source\":\"apache\"},\"audio/l16\":{\"source\":\"iana\"},\"audio/l20\":{\"source\":\"iana\"},\"audio/l24\":{\"source\":\"iana\",\"compressible\":false},\"audio/l8\":{\"source\":\"iana\"},\"audio/lpc\":{\"source\":\"iana\"},\"audio/melp\":{\"source\":\"iana\"},\"audio/melp1200\":{\"source\":\"iana\"},\"audio/melp2400\":{\"source\":\"iana\"},\"audio/melp600\":{\"source\":\"iana\"},\"audio/mhas\":{\"source\":\"iana\"},\"audio/midi\":{\"source\":\"apache\",\"extensions\":[\"mid\",\"midi\",\"kar\",\"rmi\"]},\"audio/mobile-xmf\":{\"source\":\"iana\",\"extensions\":[\"mxmf\"]},\"audio/mp3\":{\"compressible\":false,\"extensions\":[\"mp3\"]},\"audio/mp4\":{\"source\":\"iana\",\"compressible\":false,\"extensions\":[\"m4a\",\"mp4a\"]},\"audio/mp4a-latm\":{\"source\":\"iana\"},\"audio/mpa\":{\"source\":\"iana\"},\"audio/mpa-robust\":{\"source\":\"iana\"},\"audio/mpeg\":{\"source\":\"iana\",\"compressible\":false,\"extensions\":[\"mpga\",\"mp2\",\"mp2a\",\"mp3\",\"m2a\",\"m3a\"]},\"audio/mpeg4-generic\":{\"source\":\"iana\"},\"audio/musepack\":{\"source\":\"apache\"},\"audio/ogg\":{\"source\":\"iana\",\"compressible\":false,\"extensions\":[\"oga\",\"ogg\",\"spx\",\"opus\"]},\"audio/opus\":{\"source\":\"iana\"},\"audio/parityfec\":{\"source\":\"iana\"},\"audio/pcma\":{\"source\":\"iana\"},\"audio/pcma-wb\":{\"source\":\"iana\"},\"audio/pcmu\":{\"source\":\"iana\"},\"audio/pcmu-wb\":{\"source\":\"iana\"},\"audio/prs.sid\":{\"source\":\"iana\"},\"audio/qcelp\":{\"source\":\"iana\"},\"audio/raptorfec\":{\"source\":\"iana\"},\"audio/red\":{\"source\":\"iana\"},\"audio/rtp-enc-aescm128\":{\"source\":\"iana\"},\"audio/rtp-midi\":{\"source\":\"iana\"},\"audio/rtploopback\":{\"source\":\"iana\"},\"audio/rtx\":{\"source\":\"iana\"},\"audio/s3m\":{\"source\":\"apache\",\"extensions\":[\"s3m\"]},\"audio/scip\":{\"source\":\"iana\"},\"audio/silk\":{\"source\":\"apache\",\"extensions\":[\"sil\"]},\"audio/smv\":{\"source\":\"iana\"},\"audio/smv-qcp\":{\"source\":\"iana\"},\"audio/smv0\":{\"source\":\"iana\"},\"audio/sofa\":{\"source\":\"iana\"},\"audio/sp-midi\":{\"source\":\"iana\"},\"audio/speex\":{\"source\":\"iana\"},\"audio/t140c\":{\"source\":\"iana\"},\"audio/t38\":{\"source\":\"iana\"},\"audio/telephone-event\":{\"source\":\"iana\"},\"audio/tetra_acelp\":{\"source\":\"iana\"},\"audio/tetra_acelp_bb\":{\"source\":\"iana\"},\"audio/tone\":{\"source\":\"iana\"},\"audio/tsvcis\":{\"source\":\"iana\"},\"audio/uemclip\":{\"source\":\"iana\"},\"audio/ulpfec\":{\"source\":\"iana\"},\"audio/usac\":{\"source\":\"iana\"},\"audio/vdvi\":{\"source\":\"iana\"},\"audio/vmr-wb\":{\"source\":\"iana\"},\"audio/vnd.3gpp.iufp\":{\"source\":\"iana\"},\"audio/vnd.4sb\":{\"source\":\"iana\"},\"audio/vnd.audiokoz\":{\"source\":\"iana\"},\"audio/vnd.celp\":{\"source\":\"iana\"},\"audio/vnd.cisco.nse\":{\"source\":\"iana\"},\"audio/vnd.cmles.radio-events\":{\"source\":\"iana\"},\"audio/vnd.cns.anp1\":{\"source\":\"iana\"},\"audio/vnd.cns.inf1\":{\"source\":\"iana\"},\"audio/vnd.dece.audio\":{\"source\":\"iana\",\"extensions\":[\"uva\",\"uvva\"]},\"audio/vnd.digital-winds\":{\"source\":\"iana\",\"extensions\":[\"eol\"]},\"audio/vnd.dlna.adts\":{\"source\":\"iana\"},\"audio/vnd.dolby.heaac.1\":{\"source\":\"iana\"},\"audio/vnd.dolby.heaac.2\":{\"source\":\"iana\"},\"audio/vnd.dolby.mlp\":{\"source\":\"iana\"},\"audio/vnd.dolby.mps\":{\"source\":\"iana\"},\"audio/vnd.dolby.pl2\":{\"source\":\"iana\"},\"audio/vnd.dolby.pl2x\":{\"source\":\"iana\"},\"audio/vnd.dolby.pl2z\":{\"source\":\"iana\"},\"audio/vnd.dolby.pulse.1\":{\"source\":\"iana\"},\"audio/vnd.dra\":{\"source\":\"iana\",\"extensions\":[\"dra\"]},\"audio/vnd.dts\":{\"source\":\"iana\",\"extensions\":[\"dts\"]},\"audio/vnd.dts.hd\":{\"source\":\"iana\",\"extensions\":[\"dtshd\"]},\"audio/vnd.dts.uhd\":{\"source\":\"iana\"},\"audio/vnd.dvb.file\":{\"source\":\"iana\"},\"audio/vnd.everad.plj\":{\"source\":\"iana\"},\"audio/vnd.hns.audio\":{\"source\":\"iana\"},\"audio/vnd.lucent.voice\":{\"source\":\"iana\",\"extensions\":[\"lvp\"]},\"audio/vnd.ms-playready.media.pya\":{\"source\":\"iana\",\"extensions\":[\"pya\"]},\"audio/vnd.nokia.mobile-xmf\":{\"source\":\"iana\"},\"audio/vnd.nortel.vbk\":{\"source\":\"iana\"},\"audio/vnd.nuera.ecelp4800\":{\"source\":\"iana\",\"extensions\":[\"ecelp4800\"]},\"audio/vnd.nuera.ecelp7470\":{\"source\":\"iana\",\"extensions\":[\"ecelp7470\"]},\"audio/vnd.nuera.ecelp9600\":{\"source\":\"iana\",\"extensions\":[\"ecelp9600\"]},\"audio/vnd.octel.sbc\":{\"source\":\"iana\"},\"audio/vnd.presonus.multitrack\":{\"source\":\"iana\"},\"audio/vnd.qcelp\":{\"source\":\"iana\"},\"audio/vnd.rhetorex.32kadpcm\":{\"source\":\"iana\"},\"audio/vnd.rip\":{\"source\":\"iana\",\"extensions\":[\"rip\"]},\"audio/vnd.rn-realaudio\":{\"compressible\":false},\"audio/vnd.sealedmedia.softseal.mpeg\":{\"source\":\"iana\"},\"audio/vnd.vmx.cvsd\":{\"source\":\"iana\"},\"audio/vnd.wave\":{\"compressible\":false},\"audio/vorbis\":{\"source\":\"iana\",\"compressible\":false},\"audio/vorbis-config\":{\"source\":\"iana\"},\"audio/wav\":{\"compressible\":false,\"extensions\":[\"wav\"]},\"audio/wave\":{\"compressible\":false,\"extensions\":[\"wav\"]},\"audio/webm\":{\"source\":\"apache\",\"compressible\":false,\"extensions\":[\"weba\"]},\"audio/x-aac\":{\"source\":\"apache\",\"compressible\":false,\"extensions\":[\"aac\"]},\"audio/x-aiff\":{\"source\":\"apache\",\"extensions\":[\"aif\",\"aiff\",\"aifc\"]},\"audio/x-caf\":{\"source\":\"apache\",\"compressible\":false,\"extensions\":[\"caf\"]},\"audio/x-flac\":{\"source\":\"apache\",\"extensions\":[\"flac\"]},\"audio/x-m4a\":{\"source\":\"nginx\",\"extensions\":[\"m4a\"]},\"audio/x-matroska\":{\"source\":\"apache\",\"extensions\":[\"mka\"]},\"audio/x-mpegurl\":{\"source\":\"apache\",\"extensions\":[\"m3u\"]},\"audio/x-ms-wax\":{\"source\":\"apache\",\"extensions\":[\"wax\"]},\"audio/x-ms-wma\":{\"source\":\"apache\",\"extensions\":[\"wma\"]},\"audio/x-pn-realaudio\":{\"source\":\"apache\",\"extensions\":[\"ram\",\"ra\"]},\"audio/x-pn-realaudio-plugin\":{\"source\":\"apache\",\"extensions\":[\"rmp\"]},\"audio/x-realaudio\":{\"source\":\"nginx\",\"extensions\":[\"ra\"]},\"audio/x-tta\":{\"source\":\"apache\"},\"audio/x-wav\":{\"source\":\"apache\",\"extensions\":[\"wav\"]},\"audio/xm\":{\"source\":\"apache\",\"extensions\":[\"xm\"]},\"chemical/x-cdx\":{\"source\":\"apache\",\"extensions\":[\"cdx\"]},\"chemical/x-cif\":{\"source\":\"apache\",\"extensions\":[\"cif\"]},\"chemical/x-cmdf\":{\"source\":\"apache\",\"extensions\":[\"cmdf\"]},\"chemical/x-cml\":{\"source\":\"apache\",\"extensions\":[\"cml\"]},\"chemical/x-csml\":{\"source\":\"apache\",\"extensions\":[\"csml\"]},\"chemical/x-pdb\":{\"source\":\"apache\"},\"chemical/x-xyz\":{\"source\":\"apache\",\"extensions\":[\"xyz\"]},\"font/collection\":{\"source\":\"iana\",\"extensions\":[\"ttc\"]},\"font/otf\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"otf\"]},\"font/sfnt\":{\"source\":\"iana\"},\"font/ttf\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"ttf\"]},\"font/woff\":{\"source\":\"iana\",\"extensions\":[\"woff\"]},\"font/woff2\":{\"source\":\"iana\",\"extensions\":[\"woff2\"]},\"image/aces\":{\"source\":\"iana\",\"extensions\":[\"exr\"]},\"image/apng\":{\"compressible\":false,\"extensions\":[\"apng\"]},\"image/avci\":{\"source\":\"iana\"},\"image/avcs\":{\"source\":\"iana\"},\"image/avif\":{\"source\":\"iana\",\"compressible\":false,\"extensions\":[\"avif\"]},\"image/bmp\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"bmp\"]},\"image/cgm\":{\"source\":\"iana\",\"extensions\":[\"cgm\"]},\"image/dicom-rle\":{\"source\":\"iana\",\"extensions\":[\"drle\"]},\"image/emf\":{\"source\":\"iana\",\"extensions\":[\"emf\"]},\"image/fits\":{\"source\":\"iana\",\"extensions\":[\"fits\"]},\"image/g3fax\":{\"source\":\"iana\",\"extensions\":[\"g3\"]},\"image/gif\":{\"source\":\"iana\",\"compressible\":false,\"extensions\":[\"gif\"]},\"image/heic\":{\"source\":\"iana\",\"extensions\":[\"heic\"]},\"image/heic-sequence\":{\"source\":\"iana\",\"extensions\":[\"heics\"]},\"image/heif\":{\"source\":\"iana\",\"extensions\":[\"heif\"]},\"image/heif-sequence\":{\"source\":\"iana\",\"extensions\":[\"heifs\"]},\"image/hej2k\":{\"source\":\"iana\",\"extensions\":[\"hej2\"]},\"image/hsj2\":{\"source\":\"iana\",\"extensions\":[\"hsj2\"]},\"image/ief\":{\"source\":\"iana\",\"extensions\":[\"ief\"]},\"image/jls\":{\"source\":\"iana\",\"extensions\":[\"jls\"]},\"image/jp2\":{\"source\":\"iana\",\"compressible\":false,\"extensions\":[\"jp2\",\"jpg2\"]},\"image/jpeg\":{\"source\":\"iana\",\"compressible\":false,\"extensions\":[\"jpeg\",\"jpg\",\"jpe\"]},\"image/jph\":{\"source\":\"iana\",\"extensions\":[\"jph\"]},\"image/jphc\":{\"source\":\"iana\",\"extensions\":[\"jhc\"]},\"image/jpm\":{\"source\":\"iana\",\"compressible\":false,\"extensions\":[\"jpm\"]},\"image/jpx\":{\"source\":\"iana\",\"compressible\":false,\"extensions\":[\"jpx\",\"jpf\"]},\"image/jxr\":{\"source\":\"iana\",\"extensions\":[\"jxr\"]},\"image/jxra\":{\"source\":\"iana\",\"extensions\":[\"jxra\"]},\"image/jxrs\":{\"source\":\"iana\",\"extensions\":[\"jxrs\"]},\"image/jxs\":{\"source\":\"iana\",\"extensions\":[\"jxs\"]},\"image/jxsc\":{\"source\":\"iana\",\"extensions\":[\"jxsc\"]},\"image/jxsi\":{\"source\":\"iana\",\"extensions\":[\"jxsi\"]},\"image/jxss\":{\"source\":\"iana\",\"extensions\":[\"jxss\"]},\"image/ktx\":{\"source\":\"iana\",\"extensions\":[\"ktx\"]},\"image/ktx2\":{\"source\":\"iana\",\"extensions\":[\"ktx2\"]},\"image/naplps\":{\"source\":\"iana\"},\"image/pjpeg\":{\"compressible\":false},\"image/png\":{\"source\":\"iana\",\"compressible\":false,\"extensions\":[\"png\"]},\"image/prs.btif\":{\"source\":\"iana\",\"extensions\":[\"btif\"]},\"image/prs.pti\":{\"source\":\"iana\",\"extensions\":[\"pti\"]},\"image/pwg-raster\":{\"source\":\"iana\"},\"image/sgi\":{\"source\":\"apache\",\"extensions\":[\"sgi\"]},\"image/svg+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"svg\",\"svgz\"]},\"image/t38\":{\"source\":\"iana\",\"extensions\":[\"t38\"]},\"image/tiff\":{\"source\":\"iana\",\"compressible\":false,\"extensions\":[\"tif\",\"tiff\"]},\"image/tiff-fx\":{\"source\":\"iana\",\"extensions\":[\"tfx\"]},\"image/vnd.adobe.photoshop\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"psd\"]},\"image/vnd.airzip.accelerator.azv\":{\"source\":\"iana\",\"extensions\":[\"azv\"]},\"image/vnd.cns.inf2\":{\"source\":\"iana\"},\"image/vnd.dece.graphic\":{\"source\":\"iana\",\"extensions\":[\"uvi\",\"uvvi\",\"uvg\",\"uvvg\"]},\"image/vnd.djvu\":{\"source\":\"iana\",\"extensions\":[\"djvu\",\"djv\"]},\"image/vnd.dvb.subtitle\":{\"source\":\"iana\",\"extensions\":[\"sub\"]},\"image/vnd.dwg\":{\"source\":\"iana\",\"extensions\":[\"dwg\"]},\"image/vnd.dxf\":{\"source\":\"iana\",\"extensions\":[\"dxf\"]},\"image/vnd.fastbidsheet\":{\"source\":\"iana\",\"extensions\":[\"fbs\"]},\"image/vnd.fpx\":{\"source\":\"iana\",\"extensions\":[\"fpx\"]},\"image/vnd.fst\":{\"source\":\"iana\",\"extensions\":[\"fst\"]},\"image/vnd.fujixerox.edmics-mmr\":{\"source\":\"iana\",\"extensions\":[\"mmr\"]},\"image/vnd.fujixerox.edmics-rlc\":{\"source\":\"iana\",\"extensions\":[\"rlc\"]},\"image/vnd.globalgraphics.pgb\":{\"source\":\"iana\"},\"image/vnd.microsoft.icon\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"ico\"]},\"image/vnd.mix\":{\"source\":\"iana\"},\"image/vnd.mozilla.apng\":{\"source\":\"iana\"},\"image/vnd.ms-dds\":{\"compressible\":true,\"extensions\":[\"dds\"]},\"image/vnd.ms-modi\":{\"source\":\"iana\",\"extensions\":[\"mdi\"]},\"image/vnd.ms-photo\":{\"source\":\"apache\",\"extensions\":[\"wdp\"]},\"image/vnd.net-fpx\":{\"source\":\"iana\",\"extensions\":[\"npx\"]},\"image/vnd.pco.b16\":{\"source\":\"iana\",\"extensions\":[\"b16\"]},\"image/vnd.radiance\":{\"source\":\"iana\"},\"image/vnd.sealed.png\":{\"source\":\"iana\"},\"image/vnd.sealedmedia.softseal.gif\":{\"source\":\"iana\"},\"image/vnd.sealedmedia.softseal.jpg\":{\"source\":\"iana\"},\"image/vnd.svf\":{\"source\":\"iana\"},\"image/vnd.tencent.tap\":{\"source\":\"iana\",\"extensions\":[\"tap\"]},\"image/vnd.valve.source.texture\":{\"source\":\"iana\",\"extensions\":[\"vtf\"]},\"image/vnd.wap.wbmp\":{\"source\":\"iana\",\"extensions\":[\"wbmp\"]},\"image/vnd.xiff\":{\"source\":\"iana\",\"extensions\":[\"xif\"]},\"image/vnd.zbrush.pcx\":{\"source\":\"iana\",\"extensions\":[\"pcx\"]},\"image/webp\":{\"source\":\"apache\",\"extensions\":[\"webp\"]},\"image/wmf\":{\"source\":\"iana\",\"extensions\":[\"wmf\"]},\"image/x-3ds\":{\"source\":\"apache\",\"extensions\":[\"3ds\"]},\"image/x-cmu-raster\":{\"source\":\"apache\",\"extensions\":[\"ras\"]},\"image/x-cmx\":{\"source\":\"apache\",\"extensions\":[\"cmx\"]},\"image/x-freehand\":{\"source\":\"apache\",\"extensions\":[\"fh\",\"fhc\",\"fh4\",\"fh5\",\"fh7\"]},\"image/x-icon\":{\"source\":\"apache\",\"compressible\":true,\"extensions\":[\"ico\"]},\"image/x-jng\":{\"source\":\"nginx\",\"extensions\":[\"jng\"]},\"image/x-mrsid-image\":{\"source\":\"apache\",\"extensions\":[\"sid\"]},\"image/x-ms-bmp\":{\"source\":\"nginx\",\"compressible\":true,\"extensions\":[\"bmp\"]},\"image/x-pcx\":{\"source\":\"apache\",\"extensions\":[\"pcx\"]},\"image/x-pict\":{\"source\":\"apache\",\"extensions\":[\"pic\",\"pct\"]},\"image/x-portable-anymap\":{\"source\":\"apache\",\"extensions\":[\"pnm\"]},\"image/x-portable-bitmap\":{\"source\":\"apache\",\"extensions\":[\"pbm\"]},\"image/x-portable-graymap\":{\"source\":\"apache\",\"extensions\":[\"pgm\"]},\"image/x-portable-pixmap\":{\"source\":\"apache\",\"extensions\":[\"ppm\"]},\"image/x-rgb\":{\"source\":\"apache\",\"extensions\":[\"rgb\"]},\"image/x-tga\":{\"source\":\"apache\",\"extensions\":[\"tga\"]},\"image/x-xbitmap\":{\"source\":\"apache\",\"extensions\":[\"xbm\"]},\"image/x-xcf\":{\"compressible\":false},\"image/x-xpixmap\":{\"source\":\"apache\",\"extensions\":[\"xpm\"]},\"image/x-xwindowdump\":{\"source\":\"apache\",\"extensions\":[\"xwd\"]},\"message/cpim\":{\"source\":\"iana\"},\"message/delivery-status\":{\"source\":\"iana\"},\"message/disposition-notification\":{\"source\":\"iana\",\"extensions\":[\"disposition-notification\"]},\"message/external-body\":{\"source\":\"iana\"},\"message/feedback-report\":{\"source\":\"iana\"},\"message/global\":{\"source\":\"iana\",\"extensions\":[\"u8msg\"]},\"message/global-delivery-status\":{\"source\":\"iana\",\"extensions\":[\"u8dsn\"]},\"message/global-disposition-notification\":{\"source\":\"iana\",\"extensions\":[\"u8mdn\"]},\"message/global-headers\":{\"source\":\"iana\",\"extensions\":[\"u8hdr\"]},\"message/http\":{\"source\":\"iana\",\"compressible\":false},\"message/imdn+xml\":{\"source\":\"iana\",\"compressible\":true},\"message/news\":{\"source\":\"iana\"},\"message/partial\":{\"source\":\"iana\",\"compressible\":false},\"message/rfc822\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"eml\",\"mime\"]},\"message/s-http\":{\"source\":\"iana\"},\"message/sip\":{\"source\":\"iana\"},\"message/sipfrag\":{\"source\":\"iana\"},\"message/tracking-status\":{\"source\":\"iana\"},\"message/vnd.si.simp\":{\"source\":\"iana\"},\"message/vnd.wfa.wsc\":{\"source\":\"iana\",\"extensions\":[\"wsc\"]},\"model/3mf\":{\"source\":\"iana\",\"extensions\":[\"3mf\"]},\"model/e57\":{\"source\":\"iana\"},\"model/gltf+json\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"gltf\"]},\"model/gltf-binary\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"glb\"]},\"model/iges\":{\"source\":\"iana\",\"compressible\":false,\"extensions\":[\"igs\",\"iges\"]},\"model/mesh\":{\"source\":\"iana\",\"compressible\":false,\"extensions\":[\"msh\",\"mesh\",\"silo\"]},\"model/mtl\":{\"source\":\"iana\",\"extensions\":[\"mtl\"]},\"model/obj\":{\"source\":\"iana\",\"extensions\":[\"obj\"]},\"model/step\":{\"source\":\"iana\"},\"model/step+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"stpx\"]},\"model/step+zip\":{\"source\":\"iana\",\"compressible\":false,\"extensions\":[\"stpz\"]},\"model/step-xml+zip\":{\"source\":\"iana\",\"compressible\":false,\"extensions\":[\"stpxz\"]},\"model/stl\":{\"source\":\"iana\",\"extensions\":[\"stl\"]},\"model/vnd.collada+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"dae\"]},\"model/vnd.dwf\":{\"source\":\"iana\",\"extensions\":[\"dwf\"]},\"model/vnd.flatland.3dml\":{\"source\":\"iana\"},\"model/vnd.gdl\":{\"source\":\"iana\",\"extensions\":[\"gdl\"]},\"model/vnd.gs-gdl\":{\"source\":\"apache\"},\"model/vnd.gs.gdl\":{\"source\":\"iana\"},\"model/vnd.gtw\":{\"source\":\"iana\",\"extensions\":[\"gtw\"]},\"model/vnd.moml+xml\":{\"source\":\"iana\",\"compressible\":true},\"model/vnd.mts\":{\"source\":\"iana\",\"extensions\":[\"mts\"]},\"model/vnd.opengex\":{\"source\":\"iana\",\"extensions\":[\"ogex\"]},\"model/vnd.parasolid.transmit.binary\":{\"source\":\"iana\",\"extensions\":[\"x_b\"]},\"model/vnd.parasolid.transmit.text\":{\"source\":\"iana\",\"extensions\":[\"x_t\"]},\"model/vnd.pytha.pyox\":{\"source\":\"iana\"},\"model/vnd.rosette.annotated-data-model\":{\"source\":\"iana\"},\"model/vnd.sap.vds\":{\"source\":\"iana\",\"extensions\":[\"vds\"]},\"model/vnd.usdz+zip\":{\"source\":\"iana\",\"compressible\":false,\"extensions\":[\"usdz\"]},\"model/vnd.valve.source.compiled-map\":{\"source\":\"iana\",\"extensions\":[\"bsp\"]},\"model/vnd.vtu\":{\"source\":\"iana\",\"extensions\":[\"vtu\"]},\"model/vrml\":{\"source\":\"iana\",\"compressible\":false,\"extensions\":[\"wrl\",\"vrml\"]},\"model/x3d+binary\":{\"source\":\"apache\",\"compressible\":false,\"extensions\":[\"x3db\",\"x3dbz\"]},\"model/x3d+fastinfoset\":{\"source\":\"iana\",\"extensions\":[\"x3db\"]},\"model/x3d+vrml\":{\"source\":\"apache\",\"compressible\":false,\"extensions\":[\"x3dv\",\"x3dvz\"]},\"model/x3d+xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"x3d\",\"x3dz\"]},\"model/x3d-vrml\":{\"source\":\"iana\",\"extensions\":[\"x3dv\"]},\"multipart/alternative\":{\"source\":\"iana\",\"compressible\":false},\"multipart/appledouble\":{\"source\":\"iana\"},\"multipart/byteranges\":{\"source\":\"iana\"},\"multipart/digest\":{\"source\":\"iana\"},\"multipart/encrypted\":{\"source\":\"iana\",\"compressible\":false},\"multipart/form-data\":{\"source\":\"iana\",\"compressible\":false},\"multipart/header-set\":{\"source\":\"iana\"},\"multipart/mixed\":{\"source\":\"iana\"},\"multipart/multilingual\":{\"source\":\"iana\"},\"multipart/parallel\":{\"source\":\"iana\"},\"multipart/related\":{\"source\":\"iana\",\"compressible\":false},\"multipart/report\":{\"source\":\"iana\"},\"multipart/signed\":{\"source\":\"iana\",\"compressible\":false},\"multipart/vnd.bint.med-plus\":{\"source\":\"iana\"},\"multipart/voice-message\":{\"source\":\"iana\"},\"multipart/x-mixed-replace\":{\"source\":\"iana\"},\"text/1d-interleaved-parityfec\":{\"source\":\"iana\"},\"text/cache-manifest\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"appcache\",\"manifest\"]},\"text/calendar\":{\"source\":\"iana\",\"extensions\":[\"ics\",\"ifb\"]},\"text/calender\":{\"compressible\":true},\"text/cmd\":{\"compressible\":true},\"text/coffeescript\":{\"extensions\":[\"coffee\",\"litcoffee\"]},\"text/cql\":{\"source\":\"iana\"},\"text/cql-expression\":{\"source\":\"iana\"},\"text/cql-identifier\":{\"source\":\"iana\"},\"text/css\":{\"source\":\"iana\",\"charset\":\"UTF-8\",\"compressible\":true,\"extensions\":[\"css\"]},\"text/csv\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"csv\"]},\"text/csv-schema\":{\"source\":\"iana\"},\"text/directory\":{\"source\":\"iana\"},\"text/dns\":{\"source\":\"iana\"},\"text/ecmascript\":{\"source\":\"iana\"},\"text/encaprtp\":{\"source\":\"iana\"},\"text/enriched\":{\"source\":\"iana\"},\"text/fhirpath\":{\"source\":\"iana\"},\"text/flexfec\":{\"source\":\"iana\"},\"text/fwdred\":{\"source\":\"iana\"},\"text/gff3\":{\"source\":\"iana\"},\"text/grammar-ref-list\":{\"source\":\"iana\"},\"text/html\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"html\",\"htm\",\"shtml\"]},\"text/jade\":{\"extensions\":[\"jade\"]},\"text/javascript\":{\"source\":\"iana\",\"compressible\":true},\"text/jcr-cnd\":{\"source\":\"iana\"},\"text/jsx\":{\"compressible\":true,\"extensions\":[\"jsx\"]},\"text/less\":{\"compressible\":true,\"extensions\":[\"less\"]},\"text/markdown\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"markdown\",\"md\"]},\"text/mathml\":{\"source\":\"nginx\",\"extensions\":[\"mml\"]},\"text/mdx\":{\"compressible\":true,\"extensions\":[\"mdx\"]},\"text/mizar\":{\"source\":\"iana\"},\"text/n3\":{\"source\":\"iana\",\"charset\":\"UTF-8\",\"compressible\":true,\"extensions\":[\"n3\"]},\"text/parameters\":{\"source\":\"iana\",\"charset\":\"UTF-8\"},\"text/parityfec\":{\"source\":\"iana\"},\"text/plain\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"txt\",\"text\",\"conf\",\"def\",\"list\",\"log\",\"in\",\"ini\"]},\"text/provenance-notation\":{\"source\":\"iana\",\"charset\":\"UTF-8\"},\"text/prs.fallenstein.rst\":{\"source\":\"iana\"},\"text/prs.lines.tag\":{\"source\":\"iana\",\"extensions\":[\"dsc\"]},\"text/prs.prop.logic\":{\"source\":\"iana\"},\"text/raptorfec\":{\"source\":\"iana\"},\"text/red\":{\"source\":\"iana\"},\"text/rfc822-headers\":{\"source\":\"iana\"},\"text/richtext\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"rtx\"]},\"text/rtf\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"rtf\"]},\"text/rtp-enc-aescm128\":{\"source\":\"iana\"},\"text/rtploopback\":{\"source\":\"iana\"},\"text/rtx\":{\"source\":\"iana\"},\"text/sgml\":{\"source\":\"iana\",\"extensions\":[\"sgml\",\"sgm\"]},\"text/shaclc\":{\"source\":\"iana\"},\"text/shex\":{\"source\":\"iana\",\"extensions\":[\"shex\"]},\"text/slim\":{\"extensions\":[\"slim\",\"slm\"]},\"text/spdx\":{\"source\":\"iana\",\"extensions\":[\"spdx\"]},\"text/strings\":{\"source\":\"iana\"},\"text/stylus\":{\"extensions\":[\"stylus\",\"styl\"]},\"text/t140\":{\"source\":\"iana\"},\"text/tab-separated-values\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"tsv\"]},\"text/troff\":{\"source\":\"iana\",\"extensions\":[\"t\",\"tr\",\"roff\",\"man\",\"me\",\"ms\"]},\"text/turtle\":{\"source\":\"iana\",\"charset\":\"UTF-8\",\"extensions\":[\"ttl\"]},\"text/ulpfec\":{\"source\":\"iana\"},\"text/uri-list\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"uri\",\"uris\",\"urls\"]},\"text/vcard\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"vcard\"]},\"text/vnd.a\":{\"source\":\"iana\"},\"text/vnd.abc\":{\"source\":\"iana\"},\"text/vnd.ascii-art\":{\"source\":\"iana\"},\"text/vnd.curl\":{\"source\":\"iana\",\"extensions\":[\"curl\"]},\"text/vnd.curl.dcurl\":{\"source\":\"apache\",\"extensions\":[\"dcurl\"]},\"text/vnd.curl.mcurl\":{\"source\":\"apache\",\"extensions\":[\"mcurl\"]},\"text/vnd.curl.scurl\":{\"source\":\"apache\",\"extensions\":[\"scurl\"]},\"text/vnd.debian.copyright\":{\"source\":\"iana\",\"charset\":\"UTF-8\"},\"text/vnd.dmclientscript\":{\"source\":\"iana\"},\"text/vnd.dvb.subtitle\":{\"source\":\"iana\",\"extensions\":[\"sub\"]},\"text/vnd.esmertec.theme-descriptor\":{\"source\":\"iana\",\"charset\":\"UTF-8\"},\"text/vnd.familysearch.gedcom\":{\"source\":\"iana\",\"extensions\":[\"ged\"]},\"text/vnd.ficlab.flt\":{\"source\":\"iana\"},\"text/vnd.fly\":{\"source\":\"iana\",\"extensions\":[\"fly\"]},\"text/vnd.fmi.flexstor\":{\"source\":\"iana\",\"extensions\":[\"flx\"]},\"text/vnd.gml\":{\"source\":\"iana\"},\"text/vnd.graphviz\":{\"source\":\"iana\",\"extensions\":[\"gv\"]},\"text/vnd.hans\":{\"source\":\"iana\"},\"text/vnd.hgl\":{\"source\":\"iana\"},\"text/vnd.in3d.3dml\":{\"source\":\"iana\",\"extensions\":[\"3dml\"]},\"text/vnd.in3d.spot\":{\"source\":\"iana\",\"extensions\":[\"spot\"]},\"text/vnd.iptc.newsml\":{\"source\":\"iana\"},\"text/vnd.iptc.nitf\":{\"source\":\"iana\"},\"text/vnd.latex-z\":{\"source\":\"iana\"},\"text/vnd.motorola.reflex\":{\"source\":\"iana\"},\"text/vnd.ms-mediapackage\":{\"source\":\"iana\"},\"text/vnd.net2phone.commcenter.command\":{\"source\":\"iana\"},\"text/vnd.radisys.msml-basic-layout\":{\"source\":\"iana\"},\"text/vnd.senx.warpscript\":{\"source\":\"iana\"},\"text/vnd.si.uricatalogue\":{\"source\":\"iana\"},\"text/vnd.sosi\":{\"source\":\"iana\"},\"text/vnd.sun.j2me.app-descriptor\":{\"source\":\"iana\",\"charset\":\"UTF-8\",\"extensions\":[\"jad\"]},\"text/vnd.trolltech.linguist\":{\"source\":\"iana\",\"charset\":\"UTF-8\"},\"text/vnd.wap.si\":{\"source\":\"iana\"},\"text/vnd.wap.sl\":{\"source\":\"iana\"},\"text/vnd.wap.wml\":{\"source\":\"iana\",\"extensions\":[\"wml\"]},\"text/vnd.wap.wmlscript\":{\"source\":\"iana\",\"extensions\":[\"wmls\"]},\"text/vtt\":{\"source\":\"iana\",\"charset\":\"UTF-8\",\"compressible\":true,\"extensions\":[\"vtt\"]},\"text/x-asm\":{\"source\":\"apache\",\"extensions\":[\"s\",\"asm\"]},\"text/x-c\":{\"source\":\"apache\",\"extensions\":[\"c\",\"cc\",\"cxx\",\"cpp\",\"h\",\"hh\",\"dic\"]},\"text/x-component\":{\"source\":\"nginx\",\"extensions\":[\"htc\"]},\"text/x-fortran\":{\"source\":\"apache\",\"extensions\":[\"f\",\"for\",\"f77\",\"f90\"]},\"text/x-gwt-rpc\":{\"compressible\":true},\"text/x-handlebars-template\":{\"extensions\":[\"hbs\"]},\"text/x-java-source\":{\"source\":\"apache\",\"extensions\":[\"java\"]},\"text/x-jquery-tmpl\":{\"compressible\":true},\"text/x-lua\":{\"extensions\":[\"lua\"]},\"text/x-markdown\":{\"compressible\":true,\"extensions\":[\"mkd\"]},\"text/x-nfo\":{\"source\":\"apache\",\"extensions\":[\"nfo\"]},\"text/x-opml\":{\"source\":\"apache\",\"extensions\":[\"opml\"]},\"text/x-org\":{\"compressible\":true,\"extensions\":[\"org\"]},\"text/x-pascal\":{\"source\":\"apache\",\"extensions\":[\"p\",\"pas\"]},\"text/x-processing\":{\"compressible\":true,\"extensions\":[\"pde\"]},\"text/x-sass\":{\"extensions\":[\"sass\"]},\"text/x-scss\":{\"extensions\":[\"scss\"]},\"text/x-setext\":{\"source\":\"apache\",\"extensions\":[\"etx\"]},\"text/x-sfv\":{\"source\":\"apache\",\"extensions\":[\"sfv\"]},\"text/x-suse-ymp\":{\"compressible\":true,\"extensions\":[\"ymp\"]},\"text/x-uuencode\":{\"source\":\"apache\",\"extensions\":[\"uu\"]},\"text/x-vcalendar\":{\"source\":\"apache\",\"extensions\":[\"vcs\"]},\"text/x-vcard\":{\"source\":\"apache\",\"extensions\":[\"vcf\"]},\"text/xml\":{\"source\":\"iana\",\"compressible\":true,\"extensions\":[\"xml\"]},\"text/xml-external-parsed-entity\":{\"source\":\"iana\"},\"text/yaml\":{\"compressible\":true,\"extensions\":[\"yaml\",\"yml\"]},\"video/1d-interleaved-parityfec\":{\"source\":\"iana\"},\"video/3gpp\":{\"source\":\"iana\",\"extensions\":[\"3gp\",\"3gpp\"]},\"video/3gpp-tt\":{\"source\":\"iana\"},\"video/3gpp2\":{\"source\":\"iana\",\"extensions\":[\"3g2\"]},\"video/av1\":{\"source\":\"iana\"},\"video/bmpeg\":{\"source\":\"iana\"},\"video/bt656\":{\"source\":\"iana\"},\"video/celb\":{\"source\":\"iana\"},\"video/dv\":{\"source\":\"iana\"},\"video/encaprtp\":{\"source\":\"iana\"},\"video/ffv1\":{\"source\":\"iana\"},\"video/flexfec\":{\"source\":\"iana\"},\"video/h261\":{\"source\":\"iana\",\"extensions\":[\"h261\"]},\"video/h263\":{\"source\":\"iana\",\"extensions\":[\"h263\"]},\"video/h263-1998\":{\"source\":\"iana\"},\"video/h263-2000\":{\"source\":\"iana\"},\"video/h264\":{\"source\":\"iana\",\"extensions\":[\"h264\"]},\"video/h264-rcdo\":{\"source\":\"iana\"},\"video/h264-svc\":{\"source\":\"iana\"},\"video/h265\":{\"source\":\"iana\"},\"video/iso.segment\":{\"source\":\"iana\",\"extensions\":[\"m4s\"]},\"video/jpeg\":{\"source\":\"iana\",\"extensions\":[\"jpgv\"]},\"video/jpeg2000\":{\"source\":\"iana\"},\"video/jpm\":{\"source\":\"apache\",\"extensions\":[\"jpm\",\"jpgm\"]},\"video/jxsv\":{\"source\":\"iana\"},\"video/mj2\":{\"source\":\"iana\",\"extensions\":[\"mj2\",\"mjp2\"]},\"video/mp1s\":{\"source\":\"iana\"},\"video/mp2p\":{\"source\":\"iana\"},\"video/mp2t\":{\"source\":\"iana\",\"extensions\":[\"ts\"]},\"video/mp4\":{\"source\":\"iana\",\"compressible\":false,\"extensions\":[\"mp4\",\"mp4v\",\"mpg4\"]},\"video/mp4v-es\":{\"source\":\"iana\"},\"video/mpeg\":{\"source\":\"iana\",\"compressible\":false,\"extensions\":[\"mpeg\",\"mpg\",\"mpe\",\"m1v\",\"m2v\"]},\"video/mpeg4-generic\":{\"source\":\"iana\"},\"video/mpv\":{\"source\":\"iana\"},\"video/nv\":{\"source\":\"iana\"},\"video/ogg\":{\"source\":\"iana\",\"compressible\":false,\"extensions\":[\"ogv\"]},\"video/parityfec\":{\"source\":\"iana\"},\"video/pointer\":{\"source\":\"iana\"},\"video/quicktime\":{\"source\":\"iana\",\"compressible\":false,\"extensions\":[\"qt\",\"mov\"]},\"video/raptorfec\":{\"source\":\"iana\"},\"video/raw\":{\"source\":\"iana\"},\"video/rtp-enc-aescm128\":{\"source\":\"iana\"},\"video/rtploopback\":{\"source\":\"iana\"},\"video/rtx\":{\"source\":\"iana\"},\"video/scip\":{\"source\":\"iana\"},\"video/smpte291\":{\"source\":\"iana\"},\"video/smpte292m\":{\"source\":\"iana\"},\"video/ulpfec\":{\"source\":\"iana\"},\"video/vc1\":{\"source\":\"iana\"},\"video/vc2\":{\"source\":\"iana\"},\"video/vnd.cctv\":{\"source\":\"iana\"},\"video/vnd.dece.hd\":{\"source\":\"iana\",\"extensions\":[\"uvh\",\"uvvh\"]},\"video/vnd.dece.mobile\":{\"source\":\"iana\",\"extensions\":[\"uvm\",\"uvvm\"]},\"video/vnd.dece.mp4\":{\"source\":\"iana\"},\"video/vnd.dece.pd\":{\"source\":\"iana\",\"extensions\":[\"uvp\",\"uvvp\"]},\"video/vnd.dece.sd\":{\"source\":\"iana\",\"extensions\":[\"uvs\",\"uvvs\"]},\"video/vnd.dece.video\":{\"source\":\"iana\",\"extensions\":[\"uvv\",\"uvvv\"]},\"video/vnd.directv.mpeg\":{\"source\":\"iana\"},\"video/vnd.directv.mpeg-tts\":{\"source\":\"iana\"},\"video/vnd.dlna.mpeg-tts\":{\"source\":\"iana\"},\"video/vnd.dvb.file\":{\"source\":\"iana\",\"extensions\":[\"dvb\"]},\"video/vnd.fvt\":{\"source\":\"iana\",\"extensions\":[\"fvt\"]},\"video/vnd.hns.video\":{\"source\":\"iana\"},\"video/vnd.iptvforum.1dparityfec-1010\":{\"source\":\"iana\"},\"video/vnd.iptvforum.1dparityfec-2005\":{\"source\":\"iana\"},\"video/vnd.iptvforum.2dparityfec-1010\":{\"source\":\"iana\"},\"video/vnd.iptvforum.2dparityfec-2005\":{\"source\":\"iana\"},\"video/vnd.iptvforum.ttsavc\":{\"source\":\"iana\"},\"video/vnd.iptvforum.ttsmpeg2\":{\"source\":\"iana\"},\"video/vnd.motorola.video\":{\"source\":\"iana\"},\"video/vnd.motorola.videop\":{\"source\":\"iana\"},\"video/vnd.mpegurl\":{\"source\":\"iana\",\"extensions\":[\"mxu\",\"m4u\"]},\"video/vnd.ms-playready.media.pyv\":{\"source\":\"iana\",\"extensions\":[\"pyv\"]},\"video/vnd.nokia.interleaved-multimedia\":{\"source\":\"iana\"},\"video/vnd.nokia.mp4vr\":{\"source\":\"iana\"},\"video/vnd.nokia.videovoip\":{\"source\":\"iana\"},\"video/vnd.objectvideo\":{\"source\":\"iana\"},\"video/vnd.radgamettools.bink\":{\"source\":\"iana\"},\"video/vnd.radgamettools.smacker\":{\"source\":\"iana\"},\"video/vnd.sealed.mpeg1\":{\"source\":\"iana\"},\"video/vnd.sealed.mpeg4\":{\"source\":\"iana\"},\"video/vnd.sealed.swf\":{\"source\":\"iana\"},\"video/vnd.sealedmedia.softseal.mov\":{\"source\":\"iana\"},\"video/vnd.uvvu.mp4\":{\"source\":\"iana\",\"extensions\":[\"uvu\",\"uvvu\"]},\"video/vnd.vivo\":{\"source\":\"iana\",\"extensions\":[\"viv\"]},\"video/vnd.youtube.yt\":{\"source\":\"iana\"},\"video/vp8\":{\"source\":\"iana\"},\"video/vp9\":{\"source\":\"iana\"},\"video/webm\":{\"source\":\"apache\",\"compressible\":false,\"extensions\":[\"webm\"]},\"video/x-f4v\":{\"source\":\"apache\",\"extensions\":[\"f4v\"]},\"video/x-fli\":{\"source\":\"apache\",\"extensions\":[\"fli\"]},\"video/x-flv\":{\"source\":\"apache\",\"compressible\":false,\"extensions\":[\"flv\"]},\"video/x-m4v\":{\"source\":\"apache\",\"extensions\":[\"m4v\"]},\"video/x-matroska\":{\"source\":\"apache\",\"compressible\":false,\"extensions\":[\"mkv\",\"mk3d\",\"mks\"]},\"video/x-mng\":{\"source\":\"apache\",\"extensions\":[\"mng\"]},\"video/x-ms-asf\":{\"source\":\"apache\",\"extensions\":[\"asf\",\"asx\"]},\"video/x-ms-vob\":{\"source\":\"apache\",\"extensions\":[\"vob\"]},\"video/x-ms-wm\":{\"source\":\"apache\",\"extensions\":[\"wm\"]},\"video/x-ms-wmv\":{\"source\":\"apache\",\"compressible\":false,\"extensions\":[\"wmv\"]},\"video/x-ms-wmx\":{\"source\":\"apache\",\"extensions\":[\"wmx\"]},\"video/x-ms-wvx\":{\"source\":\"apache\",\"extensions\":[\"wvx\"]},\"video/x-msvideo\":{\"source\":\"apache\",\"extensions\":[\"avi\"]},\"video/x-sgi-movie\":{\"source\":\"apache\",\"extensions\":[\"movie\"]},\"video/x-smv\":{\"source\":\"apache\",\"extensions\":[\"smv\"]},\"x-conference/x-cooltalk\":{\"source\":\"apache\",\"extensions\":[\"ice\"]},\"x-shader/x-fragment\":{\"compressible\":true},\"x-shader/x-vertex\":{\"compressible\":true}}");

/***/ }),
/* 122 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = {
  parallel: __webpack_require__(123),
  serial: __webpack_require__(125),
  serialOrdered: __webpack_require__(58)
};

/***/ }),
/* 123 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var iterate = __webpack_require__(53),
    initState = __webpack_require__(56),
    terminator = __webpack_require__(57); // Public API


module.exports = parallel;
/**
 * Runs iterator over provided array elements in parallel
 *
 * @param   {array|object} list - array or object (named list) to iterate over
 * @param   {function} iterator - iterator to run
 * @param   {function} callback - invoked when all elements processed
 * @returns {function} - jobs terminator
 */

function parallel(list, iterator, callback) {
  var state = initState(list);

  while (state.index < (state['keyedList'] || list).length) {
    iterate(list, iterator, state, function (error, result) {
      if (error) {
        callback(error, result);
        return;
      } // looks like it's the last one


      if (Object.keys(state.jobs).length === 0) {
        callback(null, state.results);
        return;
      }
    });
    state.index++;
  }

  return terminator.bind(state, callback);
}

/***/ }),
/* 124 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

module.exports = defer;
/**
 * Runs provided function on next iteration of the event loop
 *
 * @param {function} fn - function to run
 */

function defer(fn) {
  var nextTick = typeof setImmediate == 'function' ? setImmediate : (typeof process === "undefined" ? "undefined" : _typeof(process)) == 'object' && typeof process.nextTick == 'function' ? process.nextTick : null;

  if (nextTick) {
    nextTick(fn);
  } else {
    setTimeout(fn, 0);
  }
}

/***/ }),
/* 125 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var serialOrdered = __webpack_require__(58); // Public API


module.exports = serial;
/**
 * Runs iterator over provided array elements in series
 *
 * @param   {array|object} list - array or object (named list) to iterate over
 * @param   {function} iterator - iterator to run
 * @param   {function} callback - invoked when all elements processed
 * @returns {function} - jobs terminator
 */

function serial(list, iterator, callback) {
  return serialOrdered(list, iterator, null, callback);
}

/***/ }),
/* 126 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// populates missing values
module.exports = function (dst, src) {
  Object.keys(src).forEach(function (prop) {
    dst[prop] = dst[prop] || src[prop];
  });
  return dst;
};

/***/ }),
/* 127 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

var VERSION = __webpack_require__(30).version;

var AxiosError = __webpack_require__(9);

var validators = {}; // eslint-disable-next-line func-names

['object', 'boolean', 'number', 'function', 'string', 'symbol'].forEach(function (type, i) {
  validators[type] = function validator(thing) {
    return _typeof(thing) === type || 'a' + (i < 1 ? 'n ' : ' ') + type;
  };
});
var deprecatedWarnings = {};
/**
 * Transitional option validator
 * @param {function|boolean?} validator - set to false if the transitional option has been removed
 * @param {string?} version - deprecated version / removed since version
 * @param {string?} message - some message with additional info
 * @returns {function}
 */

validators.transitional = function transitional(validator, version, message) {
  function formatMessage(opt, desc) {
    return '[Axios v' + VERSION + '] Transitional option \'' + opt + '\'' + desc + (message ? '. ' + message : '');
  } // eslint-disable-next-line func-names


  return function (value, opt, opts) {
    if (validator === false) {
      throw new AxiosError(formatMessage(opt, ' has been removed' + (version ? ' in ' + version : '')), AxiosError.ERR_DEPRECATED);
    }

    if (version && !deprecatedWarnings[opt]) {
      deprecatedWarnings[opt] = true; // eslint-disable-next-line no-console

      console.warn(formatMessage(opt, ' has been deprecated since v' + version + ' and will be removed in the near future'));
    }

    return validator ? validator(value, opt, opts) : true;
  };
};
/**
 * Assert object's properties type
 * @param {object} options
 * @param {object} schema
 * @param {boolean?} allowUnknown
 */


function assertOptions(options, schema, allowUnknown) {
  if (_typeof(options) !== 'object') {
    throw new AxiosError('options must be an object', AxiosError.ERR_BAD_OPTION_VALUE);
  }

  var keys = Object.keys(options);
  var i = keys.length;

  while (i-- > 0) {
    var opt = keys[i];
    var validator = schema[opt];

    if (validator) {
      var value = options[opt];
      var result = value === undefined || validator(value, opt, options);

      if (result !== true) {
        throw new AxiosError('option ' + opt + ' must be ' + result, AxiosError.ERR_BAD_OPTION_VALUE);
      }

      continue;
    }

    if (allowUnknown !== true) {
      throw new AxiosError('Unknown option ' + opt, AxiosError.ERR_BAD_OPTION);
    }
  }
}

module.exports = {
  assertOptions: assertOptions,
  validators: validators
};

/***/ }),
/* 128 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var CanceledError = __webpack_require__(12);
/**
 * A `CancelToken` is an object that can be used to request cancellation of an operation.
 *
 * @class
 * @param {Function} executor The executor function.
 */


function CancelToken(executor) {
  if (typeof executor !== 'function') {
    throw new TypeError('executor must be a function.');
  }

  var resolvePromise;
  this.promise = new Promise(function promiseExecutor(resolve) {
    resolvePromise = resolve;
  });
  var token = this; // eslint-disable-next-line func-names

  this.promise.then(function (cancel) {
    if (!token._listeners) return;
    var i;
    var l = token._listeners.length;

    for (i = 0; i < l; i++) {
      token._listeners[i](cancel);
    }

    token._listeners = null;
  }); // eslint-disable-next-line func-names

  this.promise.then = function (onfulfilled) {
    var _resolve; // eslint-disable-next-line func-names


    var promise = new Promise(function (resolve) {
      token.subscribe(resolve);
      _resolve = resolve;
    }).then(onfulfilled);

    promise.cancel = function reject() {
      token.unsubscribe(_resolve);
    };

    return promise;
  };

  executor(function cancel(message) {
    if (token.reason) {
      // Cancellation has already been requested
      return;
    }

    token.reason = new CanceledError(message);
    resolvePromise(token.reason);
  });
}
/**
 * Throws a `CanceledError` if cancellation has been requested.
 */


CancelToken.prototype.throwIfRequested = function throwIfRequested() {
  if (this.reason) {
    throw this.reason;
  }
};
/**
 * Subscribe to the cancel signal
 */


CancelToken.prototype.subscribe = function subscribe(listener) {
  if (this.reason) {
    listener(this.reason);
    return;
  }

  if (this._listeners) {
    this._listeners.push(listener);
  } else {
    this._listeners = [listener];
  }
};
/**
 * Unsubscribe from the cancel signal
 */


CancelToken.prototype.unsubscribe = function unsubscribe(listener) {
  if (!this._listeners) {
    return;
  }

  var index = this._listeners.indexOf(listener);

  if (index !== -1) {
    this._listeners.splice(index, 1);
  }
};
/**
 * Returns an object that contains a new `CancelToken` and a function that, when called,
 * cancels the `CancelToken`.
 */


CancelToken.source = function source() {
  var cancel;
  var token = new CancelToken(function executor(c) {
    cancel = c;
  });
  return {
    token: token,
    cancel: cancel
  };
};

module.exports = CancelToken;

/***/ }),
/* 129 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Syntactic sugar for invoking a function and expanding an array for arguments.
 *
 * Common use case would be to use `Function.prototype.apply`.
 *
 *  ```js
 *  function f(x, y, z) {}
 *  var args = [1, 2, 3];
 *  f.apply(null, args);
 *  ```
 *
 * With `spread` this example can be re-written.
 *
 *  ```js
 *  spread(function(x, y, z) {})([1, 2, 3]);
 *  ```
 *
 * @param {Function} callback
 * @returns {Function}
 */

module.exports = function spread(callback) {
  return function wrap(arr) {
    return callback.apply(null, arr);
  };
};

/***/ }),
/* 130 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(0);
/**
 * Determines whether the payload is an error thrown by Axios
 *
 * @param {*} payload The value to test
 * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false
 */


module.exports = function isAxiosError(payload) {
  return utils.isObject(payload) && payload.isAxiosError === true;
};

/***/ }),
/* 131 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var stringify = __webpack_require__(132);

var parse = __webpack_require__(142);

var formats = __webpack_require__(33);

module.exports = {
  formats: formats,
  parse: parse,
  stringify: stringify
};

/***/ }),
/* 132 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

var getSideChannel = __webpack_require__(133);

var utils = __webpack_require__(61);

var formats = __webpack_require__(33);

var has = Object.prototype.hasOwnProperty;
var arrayPrefixGenerators = {
  brackets: function brackets(prefix) {
    return prefix + '[]';
  },
  comma: 'comma',
  indices: function indices(prefix, key) {
    return prefix + '[' + key + ']';
  },
  repeat: function repeat(prefix) {
    return prefix;
  }
};
var isArray = Array.isArray;
var split = String.prototype.split;
var push = Array.prototype.push;

var pushToArray = function pushToArray(arr, valueOrArray) {
  push.apply(arr, isArray(valueOrArray) ? valueOrArray : [valueOrArray]);
};

var toISO = Date.prototype.toISOString;
var defaultFormat = formats['default'];
var defaults = {
  addQueryPrefix: false,
  allowDots: false,
  charset: 'utf-8',
  charsetSentinel: false,
  delimiter: '&',
  encode: true,
  encoder: utils.encode,
  encodeValuesOnly: false,
  format: defaultFormat,
  formatter: formats.formatters[defaultFormat],
  // deprecated
  indices: false,
  serializeDate: function serializeDate(date) {
    return toISO.call(date);
  },
  skipNulls: false,
  strictNullHandling: false
};

var isNonNullishPrimitive = function isNonNullishPrimitive(v) {
  return typeof v === 'string' || typeof v === 'number' || typeof v === 'boolean' || _typeof(v) === 'symbol' || typeof v === 'bigint';
};

var sentinel = {};

var stringify = function stringify(object, prefix, generateArrayPrefix, commaRoundTrip, strictNullHandling, skipNulls, encoder, filter, sort, allowDots, serializeDate, format, formatter, encodeValuesOnly, charset, sideChannel) {
  var obj = object;
  var tmpSc = sideChannel;
  var step = 0;
  var findFlag = false;

  while ((tmpSc = tmpSc.get(sentinel)) !== void undefined && !findFlag) {
    // Where object last appeared in the ref tree
    var pos = tmpSc.get(object);
    step += 1;

    if (typeof pos !== 'undefined') {
      if (pos === step) {
        throw new RangeError('Cyclic object value');
      } else {
        findFlag = true; // Break while
      }
    }

    if (typeof tmpSc.get(sentinel) === 'undefined') {
      step = 0;
    }
  }

  if (typeof filter === 'function') {
    obj = filter(prefix, obj);
  } else if (obj instanceof Date) {
    obj = serializeDate(obj);
  } else if (generateArrayPrefix === 'comma' && isArray(obj)) {
    obj = utils.maybeMap(obj, function (value) {
      if (value instanceof Date) {
        return serializeDate(value);
      }

      return value;
    });
  }

  if (obj === null) {
    if (strictNullHandling) {
      return encoder && !encodeValuesOnly ? encoder(prefix, defaults.encoder, charset, 'key', format) : prefix;
    }

    obj = '';
  }

  if (isNonNullishPrimitive(obj) || utils.isBuffer(obj)) {
    if (encoder) {
      var keyValue = encodeValuesOnly ? prefix : encoder(prefix, defaults.encoder, charset, 'key', format);

      if (generateArrayPrefix === 'comma' && encodeValuesOnly) {
        var valuesArray = split.call(String(obj), ',');
        var valuesJoined = '';

        for (var i = 0; i < valuesArray.length; ++i) {
          valuesJoined += (i === 0 ? '' : ',') + formatter(encoder(valuesArray[i], defaults.encoder, charset, 'value', format));
        }

        return [formatter(keyValue) + (commaRoundTrip && isArray(obj) && valuesArray.length === 1 ? '[]' : '') + '=' + valuesJoined];
      }

      return [formatter(keyValue) + '=' + formatter(encoder(obj, defaults.encoder, charset, 'value', format))];
    }

    return [formatter(prefix) + '=' + formatter(String(obj))];
  }

  var values = [];

  if (typeof obj === 'undefined') {
    return values;
  }

  var objKeys;

  if (generateArrayPrefix === 'comma' && isArray(obj)) {
    // we need to join elements in
    objKeys = [{
      value: obj.length > 0 ? obj.join(',') || null : void undefined
    }];
  } else if (isArray(filter)) {
    objKeys = filter;
  } else {
    var keys = Object.keys(obj);
    objKeys = sort ? keys.sort(sort) : keys;
  }

  var adjustedPrefix = commaRoundTrip && isArray(obj) && obj.length === 1 ? prefix + '[]' : prefix;

  for (var j = 0; j < objKeys.length; ++j) {
    var key = objKeys[j];
    var value = _typeof(key) === 'object' && typeof key.value !== 'undefined' ? key.value : obj[key];

    if (skipNulls && value === null) {
      continue;
    }

    var keyPrefix = isArray(obj) ? typeof generateArrayPrefix === 'function' ? generateArrayPrefix(adjustedPrefix, key) : adjustedPrefix : adjustedPrefix + (allowDots ? '.' + key : '[' + key + ']');
    sideChannel.set(object, step);
    var valueSideChannel = getSideChannel();
    valueSideChannel.set(sentinel, sideChannel);
    pushToArray(values, stringify(value, keyPrefix, generateArrayPrefix, commaRoundTrip, strictNullHandling, skipNulls, encoder, filter, sort, allowDots, serializeDate, format, formatter, encodeValuesOnly, charset, valueSideChannel));
  }

  return values;
};

var normalizeStringifyOptions = function normalizeStringifyOptions(opts) {
  if (!opts) {
    return defaults;
  }

  if (opts.encoder !== null && typeof opts.encoder !== 'undefined' && typeof opts.encoder !== 'function') {
    throw new TypeError('Encoder has to be a function.');
  }

  var charset = opts.charset || defaults.charset;

  if (typeof opts.charset !== 'undefined' && opts.charset !== 'utf-8' && opts.charset !== 'iso-8859-1') {
    throw new TypeError('The charset option must be either utf-8, iso-8859-1, or undefined');
  }

  var format = formats['default'];

  if (typeof opts.format !== 'undefined') {
    if (!has.call(formats.formatters, opts.format)) {
      throw new TypeError('Unknown format option provided.');
    }

    format = opts.format;
  }

  var formatter = formats.formatters[format];
  var filter = defaults.filter;

  if (typeof opts.filter === 'function' || isArray(opts.filter)) {
    filter = opts.filter;
  }

  return {
    addQueryPrefix: typeof opts.addQueryPrefix === 'boolean' ? opts.addQueryPrefix : defaults.addQueryPrefix,
    allowDots: typeof opts.allowDots === 'undefined' ? defaults.allowDots : !!opts.allowDots,
    charset: charset,
    charsetSentinel: typeof opts.charsetSentinel === 'boolean' ? opts.charsetSentinel : defaults.charsetSentinel,
    delimiter: typeof opts.delimiter === 'undefined' ? defaults.delimiter : opts.delimiter,
    encode: typeof opts.encode === 'boolean' ? opts.encode : defaults.encode,
    encoder: typeof opts.encoder === 'function' ? opts.encoder : defaults.encoder,
    encodeValuesOnly: typeof opts.encodeValuesOnly === 'boolean' ? opts.encodeValuesOnly : defaults.encodeValuesOnly,
    filter: filter,
    format: format,
    formatter: formatter,
    serializeDate: typeof opts.serializeDate === 'function' ? opts.serializeDate : defaults.serializeDate,
    skipNulls: typeof opts.skipNulls === 'boolean' ? opts.skipNulls : defaults.skipNulls,
    sort: typeof opts.sort === 'function' ? opts.sort : null,
    strictNullHandling: typeof opts.strictNullHandling === 'boolean' ? opts.strictNullHandling : defaults.strictNullHandling
  };
};

module.exports = function (object, opts) {
  var obj = object;
  var options = normalizeStringifyOptions(opts);
  var objKeys;
  var filter;

  if (typeof options.filter === 'function') {
    filter = options.filter;
    obj = filter('', obj);
  } else if (isArray(options.filter)) {
    filter = options.filter;
    objKeys = filter;
  }

  var keys = [];

  if (_typeof(obj) !== 'object' || obj === null) {
    return '';
  }

  var arrayFormat;

  if (opts && opts.arrayFormat in arrayPrefixGenerators) {
    arrayFormat = opts.arrayFormat;
  } else if (opts && 'indices' in opts) {
    arrayFormat = opts.indices ? 'indices' : 'repeat';
  } else {
    arrayFormat = 'indices';
  }

  var generateArrayPrefix = arrayPrefixGenerators[arrayFormat];

  if (opts && 'commaRoundTrip' in opts && typeof opts.commaRoundTrip !== 'boolean') {
    throw new TypeError('`commaRoundTrip` must be a boolean, or absent');
  }

  var commaRoundTrip = generateArrayPrefix === 'comma' && opts && opts.commaRoundTrip;

  if (!objKeys) {
    objKeys = Object.keys(obj);
  }

  if (options.sort) {
    objKeys.sort(options.sort);
  }

  var sideChannel = getSideChannel();

  for (var i = 0; i < objKeys.length; ++i) {
    var key = objKeys[i];

    if (options.skipNulls && obj[key] === null) {
      continue;
    }

    pushToArray(keys, stringify(obj[key], key, generateArrayPrefix, commaRoundTrip, options.strictNullHandling, options.skipNulls, options.encode ? options.encoder : null, options.filter, options.sort, options.allowDots, options.serializeDate, options.format, options.formatter, options.encodeValuesOnly, options.charset, sideChannel));
  }

  var joined = keys.join(options.delimiter);
  var prefix = options.addQueryPrefix === true ? '?' : '';

  if (options.charsetSentinel) {
    if (options.charset === 'iso-8859-1') {
      // encodeURIComponent('&#10003;'), the "numeric entity" representation of a checkmark
      prefix += 'utf8=%26%2310003%3B&';
    } else {
      // encodeURIComponent('✓')
      prefix += 'utf8=%E2%9C%93&';
    }
  }

  return joined.length > 0 ? prefix + joined : '';
};

/***/ }),
/* 133 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

var GetIntrinsic = __webpack_require__(31);

var callBound = __webpack_require__(138);

var inspect = __webpack_require__(140);

var $TypeError = GetIntrinsic('%TypeError%');
var $WeakMap = GetIntrinsic('%WeakMap%', true);
var $Map = GetIntrinsic('%Map%', true);
var $weakMapGet = callBound('WeakMap.prototype.get', true);
var $weakMapSet = callBound('WeakMap.prototype.set', true);
var $weakMapHas = callBound('WeakMap.prototype.has', true);
var $mapGet = callBound('Map.prototype.get', true);
var $mapSet = callBound('Map.prototype.set', true);
var $mapHas = callBound('Map.prototype.has', true);
/*
 * This function traverses the list returning the node corresponding to the
 * given key.
 *
 * That node is also moved to the head of the list, so that if it's accessed
 * again we don't need to traverse the whole list. By doing so, all the recently
 * used nodes can be accessed relatively quickly.
 */

var listGetNode = function listGetNode(list, key) {
  // eslint-disable-line consistent-return
  for (var prev = list, curr; (curr = prev.next) !== null; prev = curr) {
    if (curr.key === key) {
      prev.next = curr.next;
      curr.next = list.next;
      list.next = curr; // eslint-disable-line no-param-reassign

      return curr;
    }
  }
};

var listGet = function listGet(objects, key) {
  var node = listGetNode(objects, key);
  return node && node.value;
};

var listSet = function listSet(objects, key, value) {
  var node = listGetNode(objects, key);

  if (node) {
    node.value = value;
  } else {
    // Prepend the new node to the beginning of the list
    objects.next = {
      // eslint-disable-line no-param-reassign
      key: key,
      next: objects.next,
      value: value
    };
  }
};

var listHas = function listHas(objects, key) {
  return !!listGetNode(objects, key);
};

module.exports = function getSideChannel() {
  var $wm;
  var $m;
  var $o;
  var channel = {
    assert: function assert(key) {
      if (!channel.has(key)) {
        throw new $TypeError('Side channel does not contain ' + inspect(key));
      }
    },
    get: function get(key) {
      // eslint-disable-line consistent-return
      if ($WeakMap && key && (_typeof(key) === 'object' || typeof key === 'function')) {
        if ($wm) {
          return $weakMapGet($wm, key);
        }
      } else if ($Map) {
        if ($m) {
          return $mapGet($m, key);
        }
      } else {
        if ($o) {
          // eslint-disable-line no-lonely-if
          return listGet($o, key);
        }
      }
    },
    has: function has(key) {
      if ($WeakMap && key && (_typeof(key) === 'object' || typeof key === 'function')) {
        if ($wm) {
          return $weakMapHas($wm, key);
        }
      } else if ($Map) {
        if ($m) {
          return $mapHas($m, key);
        }
      } else {
        if ($o) {
          // eslint-disable-line no-lonely-if
          return listHas($o, key);
        }
      }

      return false;
    },
    set: function set(key, value) {
      if ($WeakMap && key && (_typeof(key) === 'object' || typeof key === 'function')) {
        if (!$wm) {
          $wm = new $WeakMap();
        }

        $weakMapSet($wm, key, value);
      } else if ($Map) {
        if (!$m) {
          $m = new $Map();
        }

        $mapSet($m, key, value);
      } else {
        if (!$o) {
          /*
           * Initialize the linked list as an empty node, so that we don't have
           * to special-case handling of the first node: we can always refer to
           * it as (previous node).next, instead of something like (list).head
           */
          $o = {
            key: {},
            next: null
          };
        }

        listSet($o, key, value);
      }
    }
  };
  return channel;
};

/***/ }),
/* 134 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

var origSymbol = typeof Symbol !== 'undefined' && Symbol;

var hasSymbolSham = __webpack_require__(135);

module.exports = function hasNativeSymbols() {
  if (typeof origSymbol !== 'function') {
    return false;
  }

  if (typeof Symbol !== 'function') {
    return false;
  }

  if (_typeof(origSymbol('foo')) !== 'symbol') {
    return false;
  }

  if (_typeof(Symbol('bar')) !== 'symbol') {
    return false;
  }

  return hasSymbolSham();
};

/***/ }),
/* 135 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* eslint complexity: [2, 18], max-statements: [2, 33] */

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

module.exports = function hasSymbols() {
  if (typeof Symbol !== 'function' || typeof Object.getOwnPropertySymbols !== 'function') {
    return false;
  }

  if (_typeof(Symbol.iterator) === 'symbol') {
    return true;
  }

  var obj = {};
  var sym = Symbol('test');
  var symObj = Object(sym);

  if (typeof sym === 'string') {
    return false;
  }

  if (Object.prototype.toString.call(sym) !== '[object Symbol]') {
    return false;
  }

  if (Object.prototype.toString.call(symObj) !== '[object Symbol]') {
    return false;
  } // temp disabled per https://github.com/ljharb/object.assign/issues/17
  // if (sym instanceof Symbol) { return false; }
  // temp disabled per https://github.com/WebReflection/get-own-property-symbols/issues/4
  // if (!(symObj instanceof Symbol)) { return false; }
  // if (typeof Symbol.prototype.toString !== 'function') { return false; }
  // if (String(sym) !== Symbol.prototype.toString.call(sym)) { return false; }


  var symVal = 42;
  obj[sym] = symVal;

  for (sym in obj) {
    return false;
  } // eslint-disable-line no-restricted-syntax, no-unreachable-loop


  if (typeof Object.keys === 'function' && Object.keys(obj).length !== 0) {
    return false;
  }

  if (typeof Object.getOwnPropertyNames === 'function' && Object.getOwnPropertyNames(obj).length !== 0) {
    return false;
  }

  var syms = Object.getOwnPropertySymbols(obj);

  if (syms.length !== 1 || syms[0] !== sym) {
    return false;
  }

  if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) {
    return false;
  }

  if (typeof Object.getOwnPropertyDescriptor === 'function') {
    var descriptor = Object.getOwnPropertyDescriptor(obj, sym);

    if (descriptor.value !== symVal || descriptor.enumerable !== true) {
      return false;
    }
  }

  return true;
};

/***/ }),
/* 136 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* eslint no-invalid-this: 1 */

var ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';
var slice = Array.prototype.slice;
var toStr = Object.prototype.toString;
var funcType = '[object Function]';

module.exports = function bind(that) {
  var target = this;

  if (typeof target !== 'function' || toStr.call(target) !== funcType) {
    throw new TypeError(ERROR_MESSAGE + target);
  }

  var args = slice.call(arguments, 1);
  var bound;

  var binder = function binder() {
    if (this instanceof bound) {
      var result = target.apply(this, args.concat(slice.call(arguments)));

      if (Object(result) === result) {
        return result;
      }

      return this;
    } else {
      return target.apply(that, args.concat(slice.call(arguments)));
    }
  };

  var boundLength = Math.max(0, target.length - args.length);
  var boundArgs = [];

  for (var i = 0; i < boundLength; i++) {
    boundArgs.push('$' + i);
  }

  bound = Function('binder', 'return function (' + boundArgs.join(',') + '){ return binder.apply(this,arguments); }')(binder);

  if (target.prototype) {
    var Empty = function Empty() {};

    Empty.prototype = target.prototype;
    bound.prototype = new Empty();
    Empty.prototype = null;
  }

  return bound;
};

/***/ }),
/* 137 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var bind = __webpack_require__(32);

module.exports = bind.call(Function.call, Object.prototype.hasOwnProperty);

/***/ }),
/* 138 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var GetIntrinsic = __webpack_require__(31);

var callBind = __webpack_require__(139);

var $indexOf = callBind(GetIntrinsic('String.prototype.indexOf'));

module.exports = function callBoundIntrinsic(name, allowMissing) {
  var intrinsic = GetIntrinsic(name, !!allowMissing);

  if (typeof intrinsic === 'function' && $indexOf(name, '.prototype.') > -1) {
    return callBind(intrinsic);
  }

  return intrinsic;
};

/***/ }),
/* 139 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var bind = __webpack_require__(32);

var GetIntrinsic = __webpack_require__(31);

var $apply = GetIntrinsic('%Function.prototype.apply%');
var $call = GetIntrinsic('%Function.prototype.call%');
var $reflectApply = GetIntrinsic('%Reflect.apply%', true) || bind.call($call, $apply);
var $gOPD = GetIntrinsic('%Object.getOwnPropertyDescriptor%', true);
var $defineProperty = GetIntrinsic('%Object.defineProperty%', true);
var $max = GetIntrinsic('%Math.max%');

if ($defineProperty) {
  try {
    $defineProperty({}, 'a', {
      value: 1
    });
  } catch (e) {
    // IE 8 has a broken defineProperty
    $defineProperty = null;
  }
}

module.exports = function callBind(originalFunction) {
  var func = $reflectApply(bind, $call, arguments);

  if ($gOPD && $defineProperty) {
    var desc = $gOPD(func, 'length');

    if (desc.configurable) {
      // original length, plus the receiver, minus any additional arguments (after the receiver)
      $defineProperty(func, 'length', {
        value: 1 + $max(0, originalFunction.length - (arguments.length - 1))
      });
    }
  }

  return func;
};

var applyBind = function applyBind() {
  return $reflectApply(bind, $apply, arguments);
};

if ($defineProperty) {
  $defineProperty(module.exports, 'apply', {
    value: applyBind
  });
} else {
  module.exports.apply = applyBind;
}

/***/ }),
/* 140 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

var hasMap = typeof Map === 'function' && Map.prototype;
var mapSizeDescriptor = Object.getOwnPropertyDescriptor && hasMap ? Object.getOwnPropertyDescriptor(Map.prototype, 'size') : null;
var mapSize = hasMap && mapSizeDescriptor && typeof mapSizeDescriptor.get === 'function' ? mapSizeDescriptor.get : null;
var mapForEach = hasMap && Map.prototype.forEach;
var hasSet = typeof Set === 'function' && Set.prototype;
var setSizeDescriptor = Object.getOwnPropertyDescriptor && hasSet ? Object.getOwnPropertyDescriptor(Set.prototype, 'size') : null;
var setSize = hasSet && setSizeDescriptor && typeof setSizeDescriptor.get === 'function' ? setSizeDescriptor.get : null;
var setForEach = hasSet && Set.prototype.forEach;
var hasWeakMap = typeof WeakMap === 'function' && WeakMap.prototype;
var weakMapHas = hasWeakMap ? WeakMap.prototype.has : null;
var hasWeakSet = typeof WeakSet === 'function' && WeakSet.prototype;
var weakSetHas = hasWeakSet ? WeakSet.prototype.has : null;
var hasWeakRef = typeof WeakRef === 'function' && WeakRef.prototype;
var weakRefDeref = hasWeakRef ? WeakRef.prototype.deref : null;
var booleanValueOf = Boolean.prototype.valueOf;
var objectToString = Object.prototype.toString;
var functionToString = Function.prototype.toString;
var match = String.prototype.match;
var bigIntValueOf = typeof BigInt === 'function' ? BigInt.prototype.valueOf : null;
var gOPS = Object.getOwnPropertySymbols;
var symToString = typeof Symbol === 'function' && _typeof(Symbol.iterator) === 'symbol' ? Symbol.prototype.toString : null;
var hasShammedSymbols = typeof Symbol === 'function' && _typeof(Symbol.iterator) === 'object'; // ie, `has-tostringtag/shams

var toStringTag = typeof Symbol === 'function' && Symbol.toStringTag && (_typeof(Symbol.toStringTag) === hasShammedSymbols ? 'object' : 'symbol') ? Symbol.toStringTag : null;
var isEnumerable = Object.prototype.propertyIsEnumerable;
var gPO = (typeof Reflect === 'function' ? Reflect.getPrototypeOf : Object.getPrototypeOf) || ([].__proto__ === Array.prototype // eslint-disable-line no-proto
? function (O) {
  return O.__proto__; // eslint-disable-line no-proto
} : null);

var inspectCustom = __webpack_require__(141).custom;

var inspectSymbol = inspectCustom && isSymbol(inspectCustom) ? inspectCustom : null;

module.exports = function inspect_(obj, options, depth, seen) {
  var opts = options || {};

  if (has(opts, 'quoteStyle') && opts.quoteStyle !== 'single' && opts.quoteStyle !== 'double') {
    throw new TypeError('option "quoteStyle" must be "single" or "double"');
  }

  if (has(opts, 'maxStringLength') && (typeof opts.maxStringLength === 'number' ? opts.maxStringLength < 0 && opts.maxStringLength !== Infinity : opts.maxStringLength !== null)) {
    throw new TypeError('option "maxStringLength", if provided, must be a positive integer, Infinity, or `null`');
  }

  var customInspect = has(opts, 'customInspect') ? opts.customInspect : true;

  if (typeof customInspect !== 'boolean' && customInspect !== 'symbol') {
    throw new TypeError('option "customInspect", if provided, must be `true`, `false`, or `\'symbol\'`');
  }

  if (has(opts, 'indent') && opts.indent !== null && opts.indent !== '\t' && !(parseInt(opts.indent, 10) === opts.indent && opts.indent > 0)) {
    throw new TypeError('options "indent" must be "\\t", an integer > 0, or `null`');
  }

  if (typeof obj === 'undefined') {
    return 'undefined';
  }

  if (obj === null) {
    return 'null';
  }

  if (typeof obj === 'boolean') {
    return obj ? 'true' : 'false';
  }

  if (typeof obj === 'string') {
    return inspectString(obj, opts);
  }

  if (typeof obj === 'number') {
    if (obj === 0) {
      return Infinity / obj > 0 ? '0' : '-0';
    }

    return String(obj);
  }

  if (typeof obj === 'bigint') {
    return String(obj) + 'n';
  }

  var maxDepth = typeof opts.depth === 'undefined' ? 5 : opts.depth;

  if (typeof depth === 'undefined') {
    depth = 0;
  }

  if (depth >= maxDepth && maxDepth > 0 && _typeof(obj) === 'object') {
    return isArray(obj) ? '[Array]' : '[Object]';
  }

  var indent = getIndent(opts, depth);

  if (typeof seen === 'undefined') {
    seen = [];
  } else if (indexOf(seen, obj) >= 0) {
    return '[Circular]';
  }

  function inspect(value, from, noIndent) {
    if (from) {
      seen = seen.slice();
      seen.push(from);
    }

    if (noIndent) {
      var newOpts = {
        depth: opts.depth
      };

      if (has(opts, 'quoteStyle')) {
        newOpts.quoteStyle = opts.quoteStyle;
      }

      return inspect_(value, newOpts, depth + 1, seen);
    }

    return inspect_(value, opts, depth + 1, seen);
  }

  if (typeof obj === 'function') {
    var name = nameOf(obj);
    var keys = arrObjKeys(obj, inspect);
    return '[Function' + (name ? ': ' + name : ' (anonymous)') + ']' + (keys.length > 0 ? ' { ' + keys.join(', ') + ' }' : '');
  }

  if (isSymbol(obj)) {
    var symString = hasShammedSymbols ? String(obj).replace(/^(Symbol\(.*\))_[^)]*$/, '$1') : symToString.call(obj);
    return _typeof(obj) === 'object' && !hasShammedSymbols ? markBoxed(symString) : symString;
  }

  if (isElement(obj)) {
    var s = '<' + String(obj.nodeName).toLowerCase();
    var attrs = obj.attributes || [];

    for (var i = 0; i < attrs.length; i++) {
      s += ' ' + attrs[i].name + '=' + wrapQuotes(quote(attrs[i].value), 'double', opts);
    }

    s += '>';

    if (obj.childNodes && obj.childNodes.length) {
      s += '...';
    }

    s += '</' + String(obj.nodeName).toLowerCase() + '>';
    return s;
  }

  if (isArray(obj)) {
    if (obj.length === 0) {
      return '[]';
    }

    var xs = arrObjKeys(obj, inspect);

    if (indent && !singleLineValues(xs)) {
      return '[' + indentedJoin(xs, indent) + ']';
    }

    return '[ ' + xs.join(', ') + ' ]';
  }

  if (isError(obj)) {
    var parts = arrObjKeys(obj, inspect);

    if (parts.length === 0) {
      return '[' + String(obj) + ']';
    }

    return '{ [' + String(obj) + '] ' + parts.join(', ') + ' }';
  }

  if (_typeof(obj) === 'object' && customInspect) {
    if (inspectSymbol && typeof obj[inspectSymbol] === 'function') {
      return obj[inspectSymbol]();
    } else if (customInspect !== 'symbol' && typeof obj.inspect === 'function') {
      return obj.inspect();
    }
  }

  if (isMap(obj)) {
    var mapParts = [];
    mapForEach.call(obj, function (value, key) {
      mapParts.push(inspect(key, obj, true) + ' => ' + inspect(value, obj));
    });
    return collectionOf('Map', mapSize.call(obj), mapParts, indent);
  }

  if (isSet(obj)) {
    var setParts = [];
    setForEach.call(obj, function (value) {
      setParts.push(inspect(value, obj));
    });
    return collectionOf('Set', setSize.call(obj), setParts, indent);
  }

  if (isWeakMap(obj)) {
    return weakCollectionOf('WeakMap');
  }

  if (isWeakSet(obj)) {
    return weakCollectionOf('WeakSet');
  }

  if (isWeakRef(obj)) {
    return weakCollectionOf('WeakRef');
  }

  if (isNumber(obj)) {
    return markBoxed(inspect(Number(obj)));
  }

  if (isBigInt(obj)) {
    return markBoxed(inspect(bigIntValueOf.call(obj)));
  }

  if (isBoolean(obj)) {
    return markBoxed(booleanValueOf.call(obj));
  }

  if (isString(obj)) {
    return markBoxed(inspect(String(obj)));
  }

  if (!isDate(obj) && !isRegExp(obj)) {
    var ys = arrObjKeys(obj, inspect);
    var isPlainObject = gPO ? gPO(obj) === Object.prototype : obj instanceof Object || obj.constructor === Object;
    var protoTag = obj instanceof Object ? '' : 'null prototype';
    var stringTag = !isPlainObject && toStringTag && Object(obj) === obj && toStringTag in obj ? toStr(obj).slice(8, -1) : protoTag ? 'Object' : '';
    var constructorTag = isPlainObject || typeof obj.constructor !== 'function' ? '' : obj.constructor.name ? obj.constructor.name + ' ' : '';
    var tag = constructorTag + (stringTag || protoTag ? '[' + [].concat(stringTag || [], protoTag || []).join(': ') + '] ' : '');

    if (ys.length === 0) {
      return tag + '{}';
    }

    if (indent) {
      return tag + '{' + indentedJoin(ys, indent) + '}';
    }

    return tag + '{ ' + ys.join(', ') + ' }';
  }

  return String(obj);
};

function wrapQuotes(s, defaultStyle, opts) {
  var quoteChar = (opts.quoteStyle || defaultStyle) === 'double' ? '"' : "'";
  return quoteChar + s + quoteChar;
}

function quote(s) {
  return String(s).replace(/"/g, '&quot;');
}

function isArray(obj) {
  return toStr(obj) === '[object Array]' && (!toStringTag || !(_typeof(obj) === 'object' && toStringTag in obj));
}

function isDate(obj) {
  return toStr(obj) === '[object Date]' && (!toStringTag || !(_typeof(obj) === 'object' && toStringTag in obj));
}

function isRegExp(obj) {
  return toStr(obj) === '[object RegExp]' && (!toStringTag || !(_typeof(obj) === 'object' && toStringTag in obj));
}

function isError(obj) {
  return toStr(obj) === '[object Error]' && (!toStringTag || !(_typeof(obj) === 'object' && toStringTag in obj));
}

function isString(obj) {
  return toStr(obj) === '[object String]' && (!toStringTag || !(_typeof(obj) === 'object' && toStringTag in obj));
}

function isNumber(obj) {
  return toStr(obj) === '[object Number]' && (!toStringTag || !(_typeof(obj) === 'object' && toStringTag in obj));
}

function isBoolean(obj) {
  return toStr(obj) === '[object Boolean]' && (!toStringTag || !(_typeof(obj) === 'object' && toStringTag in obj));
} // Symbol and BigInt do have Symbol.toStringTag by spec, so that can't be used to eliminate false positives


function isSymbol(obj) {
  if (hasShammedSymbols) {
    return obj && _typeof(obj) === 'object' && obj instanceof Symbol;
  }

  if (_typeof(obj) === 'symbol') {
    return true;
  }

  if (!obj || _typeof(obj) !== 'object' || !symToString) {
    return false;
  }

  try {
    symToString.call(obj);
    return true;
  } catch (e) {}

  return false;
}

function isBigInt(obj) {
  if (!obj || _typeof(obj) !== 'object' || !bigIntValueOf) {
    return false;
  }

  try {
    bigIntValueOf.call(obj);
    return true;
  } catch (e) {}

  return false;
}

var hasOwn = Object.prototype.hasOwnProperty || function (key) {
  return key in this;
};

function has(obj, key) {
  return hasOwn.call(obj, key);
}

function toStr(obj) {
  return objectToString.call(obj);
}

function nameOf(f) {
  if (f.name) {
    return f.name;
  }

  var m = match.call(functionToString.call(f), /^function\s*([\w$]+)/);

  if (m) {
    return m[1];
  }

  return null;
}

function indexOf(xs, x) {
  if (xs.indexOf) {
    return xs.indexOf(x);
  }

  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) {
      return i;
    }
  }

  return -1;
}

function isMap(x) {
  if (!mapSize || !x || _typeof(x) !== 'object') {
    return false;
  }

  try {
    mapSize.call(x);

    try {
      setSize.call(x);
    } catch (s) {
      return true;
    }

    return x instanceof Map; // core-js workaround, pre-v2.5.0
  } catch (e) {}

  return false;
}

function isWeakMap(x) {
  if (!weakMapHas || !x || _typeof(x) !== 'object') {
    return false;
  }

  try {
    weakMapHas.call(x, weakMapHas);

    try {
      weakSetHas.call(x, weakSetHas);
    } catch (s) {
      return true;
    }

    return x instanceof WeakMap; // core-js workaround, pre-v2.5.0
  } catch (e) {}

  return false;
}

function isWeakRef(x) {
  if (!weakRefDeref || !x || _typeof(x) !== 'object') {
    return false;
  }

  try {
    weakRefDeref.call(x);
    return true;
  } catch (e) {}

  return false;
}

function isSet(x) {
  if (!setSize || !x || _typeof(x) !== 'object') {
    return false;
  }

  try {
    setSize.call(x);

    try {
      mapSize.call(x);
    } catch (m) {
      return true;
    }

    return x instanceof Set; // core-js workaround, pre-v2.5.0
  } catch (e) {}

  return false;
}

function isWeakSet(x) {
  if (!weakSetHas || !x || _typeof(x) !== 'object') {
    return false;
  }

  try {
    weakSetHas.call(x, weakSetHas);

    try {
      weakMapHas.call(x, weakMapHas);
    } catch (s) {
      return true;
    }

    return x instanceof WeakSet; // core-js workaround, pre-v2.5.0
  } catch (e) {}

  return false;
}

function isElement(x) {
  if (!x || _typeof(x) !== 'object') {
    return false;
  }

  if (typeof HTMLElement !== 'undefined' && x instanceof HTMLElement) {
    return true;
  }

  return typeof x.nodeName === 'string' && typeof x.getAttribute === 'function';
}

function inspectString(str, opts) {
  if (str.length > opts.maxStringLength) {
    var remaining = str.length - opts.maxStringLength;
    var trailer = '... ' + remaining + ' more character' + (remaining > 1 ? 's' : '');
    return inspectString(str.slice(0, opts.maxStringLength), opts) + trailer;
  } // eslint-disable-next-line no-control-regex


  var s = str.replace(/(['\\])/g, '\\$1').replace(/[\x00-\x1f]/g, lowbyte);
  return wrapQuotes(s, 'single', opts);
}

function lowbyte(c) {
  var n = c.charCodeAt(0);
  var x = {
    8: 'b',
    9: 't',
    10: 'n',
    12: 'f',
    13: 'r'
  }[n];

  if (x) {
    return '\\' + x;
  }

  return '\\x' + (n < 0x10 ? '0' : '') + n.toString(16).toUpperCase();
}

function markBoxed(str) {
  return 'Object(' + str + ')';
}

function weakCollectionOf(type) {
  return type + ' { ? }';
}

function collectionOf(type, size, entries, indent) {
  var joinedEntries = indent ? indentedJoin(entries, indent) : entries.join(', ');
  return type + ' (' + size + ') {' + joinedEntries + '}';
}

function singleLineValues(xs) {
  for (var i = 0; i < xs.length; i++) {
    if (indexOf(xs[i], '\n') >= 0) {
      return false;
    }
  }

  return true;
}

function getIndent(opts, depth) {
  var baseIndent;

  if (opts.indent === '\t') {
    baseIndent = '\t';
  } else if (typeof opts.indent === 'number' && opts.indent > 0) {
    baseIndent = Array(opts.indent + 1).join(' ');
  } else {
    return null;
  }

  return {
    base: baseIndent,
    prev: Array(depth + 1).join(baseIndent)
  };
}

function indentedJoin(xs, indent) {
  if (xs.length === 0) {
    return '';
  }

  var lineJoiner = '\n' + indent.prev + indent.base;
  return lineJoiner + xs.join(',' + lineJoiner) + '\n' + indent.prev;
}

function arrObjKeys(obj, inspect) {
  var isArr = isArray(obj);
  var xs = [];

  if (isArr) {
    xs.length = obj.length;

    for (var i = 0; i < obj.length; i++) {
      xs[i] = has(obj, i) ? inspect(obj[i], obj) : '';
    }
  }

  var syms = typeof gOPS === 'function' ? gOPS(obj) : [];
  var symMap;

  if (hasShammedSymbols) {
    symMap = {};

    for (var k = 0; k < syms.length; k++) {
      symMap['$' + syms[k]] = syms[k];
    }
  }

  for (var key in obj) {
    // eslint-disable-line no-restricted-syntax
    if (!has(obj, key)) {
      continue;
    } // eslint-disable-line no-restricted-syntax, no-continue


    if (isArr && String(Number(key)) === key && key < obj.length) {
      continue;
    } // eslint-disable-line no-restricted-syntax, no-continue


    if (hasShammedSymbols && symMap['$' + key] instanceof Symbol) {
      // this is to prevent shammed Symbols, which are stored as strings, from being included in the string key section
      continue; // eslint-disable-line no-restricted-syntax, no-continue
    } else if (/[^\w$]/.test(key)) {
      xs.push(inspect(key, obj) + ': ' + inspect(obj[key], obj));
    } else {
      xs.push(key + ': ' + inspect(obj[key], obj));
    }
  }

  if (typeof gOPS === 'function') {
    for (var j = 0; j < syms.length; j++) {
      if (isEnumerable.call(obj, syms[j])) {
        xs.push('[' + inspect(syms[j]) + ']: ' + inspect(obj[syms[j]], obj));
      }
    }
  }

  return xs;
}

/***/ }),
/* 141 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = __webpack_require__(7).inspect;

/***/ }),
/* 142 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(61);

var has = Object.prototype.hasOwnProperty;
var isArray = Array.isArray;
var defaults = {
  allowDots: false,
  allowPrototypes: false,
  allowSparse: false,
  arrayLimit: 20,
  charset: 'utf-8',
  charsetSentinel: false,
  comma: false,
  decoder: utils.decode,
  delimiter: '&',
  depth: 5,
  ignoreQueryPrefix: false,
  interpretNumericEntities: false,
  parameterLimit: 1000,
  parseArrays: true,
  plainObjects: false,
  strictNullHandling: false
};

var interpretNumericEntities = function interpretNumericEntities(str) {
  return str.replace(/&#(\d+);/g, function ($0, numberStr) {
    return String.fromCharCode(parseInt(numberStr, 10));
  });
};

var parseArrayValue = function parseArrayValue(val, options) {
  if (val && typeof val === 'string' && options.comma && val.indexOf(',') > -1) {
    return val.split(',');
  }

  return val;
}; // This is what browsers will submit when the ✓ character occurs in an
// application/x-www-form-urlencoded body and the encoding of the page containing
// the form is iso-8859-1, or when the submitted form has an accept-charset
// attribute of iso-8859-1. Presumably also with other charsets that do not contain
// the ✓ character, such as us-ascii.


var isoSentinel = 'utf8=%26%2310003%3B'; // encodeURIComponent('&#10003;')
// These are the percent-encoded utf-8 octets representing a checkmark, indicating that the request actually is utf-8 encoded.

var charsetSentinel = 'utf8=%E2%9C%93'; // encodeURIComponent('✓')

var parseValues = function parseQueryStringValues(str, options) {
  var obj = {};
  var cleanStr = options.ignoreQueryPrefix ? str.replace(/^\?/, '') : str;
  var limit = options.parameterLimit === Infinity ? undefined : options.parameterLimit;
  var parts = cleanStr.split(options.delimiter, limit);
  var skipIndex = -1; // Keep track of where the utf8 sentinel was found

  var i;
  var charset = options.charset;

  if (options.charsetSentinel) {
    for (i = 0; i < parts.length; ++i) {
      if (parts[i].indexOf('utf8=') === 0) {
        if (parts[i] === charsetSentinel) {
          charset = 'utf-8';
        } else if (parts[i] === isoSentinel) {
          charset = 'iso-8859-1';
        }

        skipIndex = i;
        i = parts.length; // The eslint settings do not allow break;
      }
    }
  }

  for (i = 0; i < parts.length; ++i) {
    if (i === skipIndex) {
      continue;
    }

    var part = parts[i];
    var bracketEqualsPos = part.indexOf(']=');
    var pos = bracketEqualsPos === -1 ? part.indexOf('=') : bracketEqualsPos + 1;
    var key, val;

    if (pos === -1) {
      key = options.decoder(part, defaults.decoder, charset, 'key');
      val = options.strictNullHandling ? null : '';
    } else {
      key = options.decoder(part.slice(0, pos), defaults.decoder, charset, 'key');
      val = utils.maybeMap(parseArrayValue(part.slice(pos + 1), options), function (encodedVal) {
        return options.decoder(encodedVal, defaults.decoder, charset, 'value');
      });
    }

    if (val && options.interpretNumericEntities && charset === 'iso-8859-1') {
      val = interpretNumericEntities(val);
    }

    if (part.indexOf('[]=') > -1) {
      val = isArray(val) ? [val] : val;
    }

    if (has.call(obj, key)) {
      obj[key] = utils.combine(obj[key], val);
    } else {
      obj[key] = val;
    }
  }

  return obj;
};

var parseObject = function parseObject(chain, val, options, valuesParsed) {
  var leaf = valuesParsed ? val : parseArrayValue(val, options);

  for (var i = chain.length - 1; i >= 0; --i) {
    var obj;
    var root = chain[i];

    if (root === '[]' && options.parseArrays) {
      obj = [].concat(leaf);
    } else {
      obj = options.plainObjects ? Object.create(null) : {};
      var cleanRoot = root.charAt(0) === '[' && root.charAt(root.length - 1) === ']' ? root.slice(1, -1) : root;
      var index = parseInt(cleanRoot, 10);

      if (!options.parseArrays && cleanRoot === '') {
        obj = {
          0: leaf
        };
      } else if (!isNaN(index) && root !== cleanRoot && String(index) === cleanRoot && index >= 0 && options.parseArrays && index <= options.arrayLimit) {
        obj = [];
        obj[index] = leaf;
      } else if (cleanRoot !== '__proto__') {
        obj[cleanRoot] = leaf;
      }
    }

    leaf = obj;
  }

  return leaf;
};

var parseKeys = function parseQueryStringKeys(givenKey, val, options, valuesParsed) {
  if (!givenKey) {
    return;
  } // Transform dot notation to bracket notation


  var key = options.allowDots ? givenKey.replace(/\.([^.[]+)/g, '[$1]') : givenKey; // The regex chunks

  var brackets = /(\[[^[\]]*])/;
  var child = /(\[[^[\]]*])/g; // Get the parent

  var segment = options.depth > 0 && brackets.exec(key);
  var parent = segment ? key.slice(0, segment.index) : key; // Stash the parent if it exists

  var keys = [];

  if (parent) {
    // If we aren't using plain objects, optionally prefix keys that would overwrite object prototype properties
    if (!options.plainObjects && has.call(Object.prototype, parent)) {
      if (!options.allowPrototypes) {
        return;
      }
    }

    keys.push(parent);
  } // Loop through children appending to the array until we hit depth


  var i = 0;

  while (options.depth > 0 && (segment = child.exec(key)) !== null && i < options.depth) {
    i += 1;

    if (!options.plainObjects && has.call(Object.prototype, segment[1].slice(1, -1))) {
      if (!options.allowPrototypes) {
        return;
      }
    }

    keys.push(segment[1]);
  } // If there's a remainder, just add whatever is left


  if (segment) {
    keys.push('[' + key.slice(segment.index) + ']');
  }

  return parseObject(keys, val, options, valuesParsed);
};

var normalizeParseOptions = function normalizeParseOptions(opts) {
  if (!opts) {
    return defaults;
  }

  if (opts.decoder !== null && opts.decoder !== undefined && typeof opts.decoder !== 'function') {
    throw new TypeError('Decoder has to be a function.');
  }

  if (typeof opts.charset !== 'undefined' && opts.charset !== 'utf-8' && opts.charset !== 'iso-8859-1') {
    throw new TypeError('The charset option must be either utf-8, iso-8859-1, or undefined');
  }

  var charset = typeof opts.charset === 'undefined' ? defaults.charset : opts.charset;
  return {
    allowDots: typeof opts.allowDots === 'undefined' ? defaults.allowDots : !!opts.allowDots,
    allowPrototypes: typeof opts.allowPrototypes === 'boolean' ? opts.allowPrototypes : defaults.allowPrototypes,
    allowSparse: typeof opts.allowSparse === 'boolean' ? opts.allowSparse : defaults.allowSparse,
    arrayLimit: typeof opts.arrayLimit === 'number' ? opts.arrayLimit : defaults.arrayLimit,
    charset: charset,
    charsetSentinel: typeof opts.charsetSentinel === 'boolean' ? opts.charsetSentinel : defaults.charsetSentinel,
    comma: typeof opts.comma === 'boolean' ? opts.comma : defaults.comma,
    decoder: typeof opts.decoder === 'function' ? opts.decoder : defaults.decoder,
    delimiter: typeof opts.delimiter === 'string' || utils.isRegExp(opts.delimiter) ? opts.delimiter : defaults.delimiter,
    // eslint-disable-next-line no-implicit-coercion, no-extra-parens
    depth: typeof opts.depth === 'number' || opts.depth === false ? +opts.depth : defaults.depth,
    ignoreQueryPrefix: opts.ignoreQueryPrefix === true,
    interpretNumericEntities: typeof opts.interpretNumericEntities === 'boolean' ? opts.interpretNumericEntities : defaults.interpretNumericEntities,
    parameterLimit: typeof opts.parameterLimit === 'number' ? opts.parameterLimit : defaults.parameterLimit,
    parseArrays: opts.parseArrays !== false,
    plainObjects: typeof opts.plainObjects === 'boolean' ? opts.plainObjects : defaults.plainObjects,
    strictNullHandling: typeof opts.strictNullHandling === 'boolean' ? opts.strictNullHandling : defaults.strictNullHandling
  };
};

module.exports = function (str, opts) {
  var options = normalizeParseOptions(opts);

  if (str === '' || str === null || typeof str === 'undefined') {
    return options.plainObjects ? Object.create(null) : {};
  }

  var tempObj = typeof str === 'string' ? parseValues(str, options) : str;
  var obj = options.plainObjects ? Object.create(null) : {}; // Iterate over the keys and setup the new object

  var keys = Object.keys(tempObj);

  for (var i = 0; i < keys.length; ++i) {
    var key = keys[i];
    var newObj = parseKeys(key, tempObj[key], options, typeof str === 'string');
    obj = utils.merge(obj, newObj, options);
  }

  if (options.allowSparse === true) {
    return obj;
  }

  return utils.compact(obj);
};

/***/ }),
/* 143 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

/**
 * lodash 4.0.1 (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright 2012-2016 The Dojo Foundation <http://dojofoundation.org/>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright 2009-2016 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 * Available under MIT license <https://lodash.com/license>
 */

/** `Object#toString` result references. */
var stringTag = '[object String]';
/** Used for built-in method references. */

var objectProto = Object.prototype;
/**
 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
 * of values.
 */

var objectToString = objectProto.toString;
/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @type Function
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */

var isArray = Array.isArray;
/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */

function isObjectLike(value) {
  return !!value && _typeof(value) == 'object';
}
/**
 * Checks if `value` is classified as a `String` primitive or object.
 *
 * @static
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
 * @example
 *
 * _.isString('abc');
 * // => true
 *
 * _.isString(1);
 * // => false
 */


function isString(value) {
  return typeof value == 'string' || !isArray(value) && isObjectLike(value) && objectToString.call(value) == stringTag;
}

module.exports = isString;

/***/ }),
/* 144 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

var _regenerator = _interopRequireDefault(__webpack_require__(13));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } Object.defineProperty(subClass, "prototype", { value: Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }), writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }

function _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var AbortError = /*#__PURE__*/function (_Error) {
  _inherits(AbortError, _Error);

  var _super = _createSuper(AbortError);

  function AbortError() {
    var _this;

    _classCallCheck(this, AbortError);

    _this = _super.call(this, 'Throttled function aborted');
    _this.name = 'AbortError';
    return _this;
  }

  return _createClass(AbortError);
}( /*#__PURE__*/_wrapNativeSuper(Error));

var pThrottle = function pThrottle(_ref) {
  var limit = _ref.limit,
      interval = _ref.interval,
      strict = _ref.strict;

  if (!Number.isFinite(limit)) {
    throw new TypeError('Expected `limit` to be a finite number');
  }

  if (!Number.isFinite(interval)) {
    throw new TypeError('Expected `interval` to be a finite number');
  }

  var queue = new Map();
  var currentTick = 0;
  var activeCount = 0;

  function windowedDelay() {
    var now = Date.now();

    if (now - currentTick > interval) {
      activeCount = 1;
      currentTick = now;
      return 0;
    }

    if (activeCount < limit) {
      activeCount++;
    } else {
      currentTick += interval;
      activeCount = 1;
    }

    return currentTick - now;
  }

  var strictTicks = [];

  function strictDelay() {
    var now = Date.now();

    if (strictTicks.length < limit) {
      strictTicks.push(now);
      return 0;
    }

    var earliestTime = strictTicks.shift() + interval;

    if (now >= earliestTime) {
      strictTicks.push(now);
      return 0;
    }

    strictTicks.push(earliestTime);
    return earliestTime - now;
  }

  var getDelay = strict ? strictDelay : windowedDelay;
  return function (function_) {
    var throttled = function throttled() {
      var _this2 = this;

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      if (!throttled.isEnabled) {
        return _asyncToGenerator( /*#__PURE__*/_regenerator["default"].mark(function _callee() {
          return _regenerator["default"].wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  return _context.abrupt("return", function_.apply(_this2, args));

                case 1:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee);
        }))();
      }

      var timeout;
      return new Promise(function (resolve, reject) {
        var execute = function execute() {
          resolve(function_.apply(_this2, args));
          queue["delete"](timeout);
        };

        timeout = setTimeout(execute, getDelay());
        queue.set(timeout, reject);
      });
    };

    throttled.abort = function () {
      var _iterator = _createForOfIteratorHelper(queue.keys()),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var timeout = _step.value;
          clearTimeout(timeout);
          queue.get(timeout)(new AbortError());
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      queue.clear();
      strictTicks.splice(0, strictTicks.length);
    };

    throttled.isEnabled = true;
    return throttled;
  };
};

module.exports = pThrottle;
module.exports.AbortError = AbortError;

/***/ }),
/* 145 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

/**
 * lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */

/** `Object#toString` result references. */
var objectTag = '[object Object]';
/**
 * Checks if `value` is a host object in IE < 9.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a host object, else `false`.
 */

function isHostObject(value) {
  // Many host objects are `Object` objects that can coerce to strings
  // despite having improperly defined `toString` methods.
  var result = false;

  if (value != null && typeof value.toString != 'function') {
    try {
      result = !!(value + '');
    } catch (e) {}
  }

  return result;
}
/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */


function overArg(func, transform) {
  return function (arg) {
    return func(transform(arg));
  };
}
/** Used for built-in method references. */


var funcProto = Function.prototype,
    objectProto = Object.prototype;
/** Used to resolve the decompiled source of functions. */

var funcToString = funcProto.toString;
/** Used to check objects for own properties. */

var hasOwnProperty = objectProto.hasOwnProperty;
/** Used to infer the `Object` constructor. */

var objectCtorString = funcToString.call(Object);
/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */

var objectToString = objectProto.toString;
/** Built-in value references. */

var getPrototype = overArg(Object.getPrototypeOf, Object);
/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */

function isObjectLike(value) {
  return !!value && _typeof(value) == 'object';
}
/**
 * Checks if `value` is a plain object, that is, an object created by the
 * `Object` constructor or one with a `[[Prototype]]` of `null`.
 *
 * @static
 * @memberOf _
 * @since 0.8.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 * }
 *
 * _.isPlainObject(new Foo);
 * // => false
 *
 * _.isPlainObject([1, 2, 3]);
 * // => false
 *
 * _.isPlainObject({ 'x': 0, 'y': 0 });
 * // => true
 *
 * _.isPlainObject(Object.create(null));
 * // => true
 */


function isPlainObject(value) {
  if (!isObjectLike(value) || objectToString.call(value) != objectTag || isHostObject(value)) {
    return false;
  }

  var proto = getPrototype(value);

  if (proto === null) {
    return true;
  }

  var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
  return typeof Ctor == 'function' && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
}

module.exports = isPlainObject;

/***/ }),
/* 146 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _regenerator = _interopRequireDefault2(__webpack_require__(13));

function _interopRequireDefault2(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = createContentfulApi;

var _contentfulSdkCore = __webpack_require__(4);

var _entities = _interopRequireDefault(__webpack_require__(147));

var _pagedSync = _interopRequireDefault(__webpack_require__(156));

var _normalizeSelect = _interopRequireDefault(__webpack_require__(157));

var _validateTimestamp = _interopRequireDefault(__webpack_require__(158));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

var ASSET_KEY_MAX_LIFETIME = 48 * 60 * 60;
/**
 * Creates API object with methods to access functionality from Contentful's
 * Delivery API
 * @private
 * @param {Object} params - API initialization params
 * @prop {Object} http - HTTP client instance
 * @prop {Object} entities - Object with wrapper methods for each kind of entity
 * @prop {Function} getGlobalOptions - Link resolver preconfigured with global setting
 * @return {ClientAPI}
 */

function createContentfulApi(_ref) {
  var http = _ref.http,
      getGlobalOptions = _ref.getGlobalOptions;
  var wrapSpace = _entities["default"].space.wrapSpace;
  var _entities$default$con = _entities["default"].contentType,
      wrapContentType = _entities$default$con.wrapContentType,
      wrapContentTypeCollection = _entities$default$con.wrapContentTypeCollection;
  var _entities$default$ent = _entities["default"].entry,
      wrapEntry = _entities$default$ent.wrapEntry,
      wrapEntryCollection = _entities$default$ent.wrapEntryCollection;
  var _entities$default$ass = _entities["default"].asset,
      wrapAsset = _entities$default$ass.wrapAsset,
      wrapAssetCollection = _entities$default$ass.wrapAssetCollection;
  var _entities$default$tag = _entities["default"].tag,
      wrapTag = _entities$default$tag.wrapTag,
      wrapTagCollection = _entities$default$tag.wrapTagCollection;
  var wrapAssetKey = _entities["default"].assetKey.wrapAssetKey;
  var wrapLocaleCollection = _entities["default"].locale.wrapLocaleCollection;

  var notFoundError = function notFoundError(id) {
    var error = new Error('The resource could not be found.');
    error.sys = {
      type: 'Error',
      id: 'NotFound'
    };
    error.details = {
      type: 'Entry',
      id: id,
      environment: getGlobalOptions().environment,
      space: getGlobalOptions().space
    };
    return error;
  };
  /**
   * Gets the Space which the client is currently configured to use
   * @memberof ContentfulClientAPI
   * @return {Promise<Entities.Space>} Promise for a Space
   * @example
   * const contentful = require('contentful')
   *
   * const client = contentful.createClient({
   *   space: '<space_id>',
   *   accessToken: '<content_delivery_api_key>'
   * })
   * // returns the space object with the above <space-id>
   * const space = await client.getSpace()
   * console.log(space)
   */


  function getSpace() {
    return _getSpace.apply(this, arguments);
  }
  /**
   * Gets a Content Type
   * @memberof ContentfulClientAPI
   * @param  {string} id
   * @return {Promise<Entities.ContentType>} Promise for a Content Type
   * @example
   * const contentful = require('contentful')
   *
   * const client = contentful.createClient({
   *   space: '<space_id>',
   *   accessToken: '<content_delivery_api_key>'
   * })
   *
   * const contentType = await client.getContentType('<content_type_id>')
   * console.log(contentType)
   */


  function _getSpace() {
    _getSpace = _asyncToGenerator( /*#__PURE__*/_regenerator["default"].mark(function _callee() {
      var response;
      return _regenerator["default"].wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              switchToSpace(http);
              _context.prev = 1;
              _context.next = 4;
              return http.get('/');

            case 4:
              response = _context.sent;
              return _context.abrupt("return", wrapSpace(response.data));

            case 8:
              _context.prev = 8;
              _context.t0 = _context["catch"](1);
              (0, _contentfulSdkCore.errorHandler)(_context.t0);

            case 11:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, null, [[1, 8]]);
    }));
    return _getSpace.apply(this, arguments);
  }

  function getContentType(_x) {
    return _getContentType.apply(this, arguments);
  }
  /**
   * Gets a collection of Content Types
   * @memberof ContentfulClientAPI
   * @param  {Object=} query - Object with search parameters. Check the <a href="https://www.contentful.com/developers/docs/javascript/tutorials/using-js-cda-sdk/#retrieving-entries-with-search-parameters">JS SDK tutorial</a> and the <a href="https://www.contentful.com/developers/docs/references/content-delivery-api/#/reference/search-parameters">REST API reference</a> for more details.
   * @return {Promise<Entities.ContentTypeCollection>} Promise for a collection of Content Types
   * @example
   * const contentful = require('contentful')
   *
   * const client = contentful.createClient({
   *   space: '<space_id>',
   *   accessToken: '<content_delivery_api_key>'
   * })
   *
   * const response = await client.getContentTypes()
   * console.log(response.items)
   */


  function _getContentType() {
    _getContentType = _asyncToGenerator( /*#__PURE__*/_regenerator["default"].mark(function _callee2(id) {
      var response;
      return _regenerator["default"].wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              switchToEnvironment(http);
              _context2.prev = 1;
              _context2.next = 4;
              return http.get("content_types/".concat(id));

            case 4:
              response = _context2.sent;
              return _context2.abrupt("return", wrapContentType(response.data));

            case 8:
              _context2.prev = 8;
              _context2.t0 = _context2["catch"](1);
              (0, _contentfulSdkCore.errorHandler)(_context2.t0);

            case 11:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, null, [[1, 8]]);
    }));
    return _getContentType.apply(this, arguments);
  }

  function getContentTypes() {
    return _getContentTypes.apply(this, arguments);
  }
  /**
   * Gets an Entry
   * @memberof ContentfulClientAPI
   * @param  {string} id
   * @param  {Object=} query - Object with search parameters. In this method it's only useful for `locale`.
   * @return {Promise<Entities.Entry>} Promise for an Entry
   * @example
   * const contentful = require('contentful')
   *
   * const client = contentful.createClient({
   *   space: '<space_id>',
   *   accessToken: '<content_delivery_api_key>'
   * })
   *
   * const entry = await client.getEntry('<entry_id>')
   * console.log(entry)
   */


  function _getContentTypes() {
    _getContentTypes = _asyncToGenerator( /*#__PURE__*/_regenerator["default"].mark(function _callee3() {
      var query,
          response,
          _args3 = arguments;
      return _regenerator["default"].wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              query = _args3.length > 0 && _args3[0] !== undefined ? _args3[0] : {};
              switchToEnvironment(http);
              _context3.prev = 2;
              _context3.next = 5;
              return http.get('content_types', (0, _contentfulSdkCore.createRequestConfig)({
                query: query
              }));

            case 5:
              response = _context3.sent;
              return _context3.abrupt("return", wrapContentTypeCollection(response.data));

            case 9:
              _context3.prev = 9;
              _context3.t0 = _context3["catch"](2);
              (0, _contentfulSdkCore.errorHandler)(_context3.t0);

            case 12:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3, null, [[2, 9]]);
    }));
    return _getContentTypes.apply(this, arguments);
  }

  function getEntry(_x2) {
    return _getEntry.apply(this, arguments);
  }
  /**
   * Gets a collection of Entries
   * @memberof ContentfulClientAPI
   * @param  {Object=} query - Object with search parameters. Check the <a href="https://www.contentful.com/developers/docs/javascript/tutorials/using-js-cda-sdk/#retrieving-entries-with-search-parameters">JS SDK tutorial</a> and the <a href="https://www.contentful.com/developers/docs/references/content-delivery-api/#/reference/search-parameters">REST API reference</a> for more details.
   * @return {Promise<Entities.EntryCollection>} Promise for a collection of Entries
   * @example
   * const contentful = require('contentful')
   *
   * const client = contentful.createClient({
   *   space: '<space_id>',
   *   accessToken: '<content_delivery_api_key>'
   * })
   *
   * const response = await client.getEntries()
   * console.log(response.items)
   */


  function _getEntry() {
    _getEntry = _asyncToGenerator( /*#__PURE__*/_regenerator["default"].mark(function _callee4(id) {
      var query,
          response,
          _args4 = arguments;
      return _regenerator["default"].wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              query = _args4.length > 1 && _args4[1] !== undefined ? _args4[1] : {};

              if (id) {
                _context4.next = 3;
                break;
              }

              throw notFoundError(id);

            case 3:
              _context4.prev = 3;
              _context4.next = 6;
              return this.getEntries(_objectSpread({
                'sys.id': id
              }, query));

            case 6:
              response = _context4.sent;

              if (!(response.items.length > 0)) {
                _context4.next = 11;
                break;
              }

              return _context4.abrupt("return", wrapEntry(response.items[0]));

            case 11:
              throw notFoundError(id);

            case 12:
              _context4.next = 17;
              break;

            case 14:
              _context4.prev = 14;
              _context4.t0 = _context4["catch"](3);
              (0, _contentfulSdkCore.errorHandler)(_context4.t0);

            case 17:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4, this, [[3, 14]]);
    }));
    return _getEntry.apply(this, arguments);
  }

  function getEntries() {
    return _getEntries.apply(this, arguments);
  }
  /**
   * Gets an Asset
   * @memberof ContentfulClientAPI
   * @param  {string} id
   * @param  {Object=} query - Object with search parameters. In this method it's only useful for `locale`.
   * @return {Promise<Entities.Asset>} Promise for an Asset
   * @example
   * const contentful = require('contentful')
   *
   * const client = contentful.createClient({
   *   space: '<space_id>',
   *   accessToken: '<content_delivery_api_key>'
   * })
   *
   * const asset = await client.getAsset('<asset_id>')
   * console.log(asset)
   */


  function _getEntries() {
    _getEntries = _asyncToGenerator( /*#__PURE__*/_regenerator["default"].mark(function _callee5() {
      var query,
          _getGlobalOptions2,
          resolveLinks,
          removeUnresolved,
          response,
          _args5 = arguments;

      return _regenerator["default"].wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              query = _args5.length > 0 && _args5[0] !== undefined ? _args5[0] : {};
              switchToEnvironment(http);
              _getGlobalOptions2 = getGlobalOptions(query), resolveLinks = _getGlobalOptions2.resolveLinks, removeUnresolved = _getGlobalOptions2.removeUnresolved;
              query = (0, _normalizeSelect["default"])(query);
              _context5.prev = 4;
              _context5.next = 7;
              return http.get('entries', (0, _contentfulSdkCore.createRequestConfig)({
                query: query
              }));

            case 7:
              response = _context5.sent;
              return _context5.abrupt("return", wrapEntryCollection(response.data, {
                resolveLinks: resolveLinks,
                removeUnresolved: removeUnresolved
              }));

            case 11:
              _context5.prev = 11;
              _context5.t0 = _context5["catch"](4);
              (0, _contentfulSdkCore.errorHandler)(_context5.t0);

            case 14:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5, null, [[4, 11]]);
    }));
    return _getEntries.apply(this, arguments);
  }

  function getAsset(_x3) {
    return _getAsset.apply(this, arguments);
  }
  /**
   * Gets a collection of Assets
   * @memberof ContentfulClientAPI
   * @param  {Object=} query - Object with search parameters. Check the <a href="https://www.contentful.com/developers/docs/javascript/tutorials/using-js-cda-sdk/#retrieving-entries-with-search-parameters">JS SDK tutorial</a> and the <a href="https://www.contentful.com/developers/docs/references/content-delivery-api/#/reference/search-parameters">REST API reference</a> for more details.
   * @return {Promise<Entities.AssetCollection>} Promise for a collection of Assets
   * @example
   * const contentful = require('contentful')
   *
   * const client = contentful.createClient({
   *   space: '<space_id>',
   *   accessToken: '<content_delivery_api_key>'
   * })
   *
   * const response = await client.getAssets()
   * console.log(response.items)
   */


  function _getAsset() {
    _getAsset = _asyncToGenerator( /*#__PURE__*/_regenerator["default"].mark(function _callee6(id) {
      var query,
          response,
          _args6 = arguments;
      return _regenerator["default"].wrap(function _callee6$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              query = _args6.length > 1 && _args6[1] !== undefined ? _args6[1] : {};
              switchToEnvironment(http);
              query = (0, _normalizeSelect["default"])(query);
              _context6.prev = 3;
              _context6.next = 6;
              return http.get("assets/".concat(id), (0, _contentfulSdkCore.createRequestConfig)({
                query: query
              }));

            case 6:
              response = _context6.sent;
              return _context6.abrupt("return", wrapAsset(response.data));

            case 10:
              _context6.prev = 10;
              _context6.t0 = _context6["catch"](3);
              (0, _contentfulSdkCore.errorHandler)(_context6.t0);

            case 13:
            case "end":
              return _context6.stop();
          }
        }
      }, _callee6, null, [[3, 10]]);
    }));
    return _getAsset.apply(this, arguments);
  }

  function getAssets() {
    return _getAssets.apply(this, arguments);
  }
  /**
   * Gets a Tag
   * @memberof ContentfulClientAPI
   * @param  {string} id
   * @return {Promise<Entities.Tag>} Promise for a Tag
   * @example
   * const contentful = require('contentful')
   *
   * const client = contentful.createClient({
   *   space: '<space_id>',
   *   accessToken: '<content_delivery_api_key>'
   * })
   *
   * const tag = await client.getTag('<asset_id>')
   * console.log(tag)
   */


  function _getAssets() {
    _getAssets = _asyncToGenerator( /*#__PURE__*/_regenerator["default"].mark(function _callee7() {
      var query,
          response,
          _args7 = arguments;
      return _regenerator["default"].wrap(function _callee7$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              query = _args7.length > 0 && _args7[0] !== undefined ? _args7[0] : {};
              switchToEnvironment(http);
              query = (0, _normalizeSelect["default"])(query);
              _context7.prev = 3;
              _context7.next = 6;
              return http.get('assets', (0, _contentfulSdkCore.createRequestConfig)({
                query: query
              }));

            case 6:
              response = _context7.sent;
              return _context7.abrupt("return", wrapAssetCollection(response.data));

            case 10:
              _context7.prev = 10;
              _context7.t0 = _context7["catch"](3);
              (0, _contentfulSdkCore.errorHandler)(_context7.t0);

            case 13:
            case "end":
              return _context7.stop();
          }
        }
      }, _callee7, null, [[3, 10]]);
    }));
    return _getAssets.apply(this, arguments);
  }

  function getTag(_x4) {
    return _getTag.apply(this, arguments);
  }
  /**
   * Gets a collection of Tags
   * @memberof ContentfulClientAPI
   * @param  {Object=} query - Object with search parameters.
   * @return {Promise<Entities.TagCollection>} Promise for a collection of Tags
   * @example
   * const contentful = require('contentful')
   *
   * const client = contentful.createClient({
   *   space: '<space_id>',
   *   accessToken: '<content_delivery_api_key>'
   * })
   *
   * const response = await client.getTags()
   * console.log(response.items)
   */


  function _getTag() {
    _getTag = _asyncToGenerator( /*#__PURE__*/_regenerator["default"].mark(function _callee8(id) {
      var response;
      return _regenerator["default"].wrap(function _callee8$(_context8) {
        while (1) {
          switch (_context8.prev = _context8.next) {
            case 0:
              switchToEnvironment(http);
              _context8.prev = 1;
              _context8.next = 4;
              return http.get("tags/".concat(id));

            case 4:
              response = _context8.sent;
              return _context8.abrupt("return", wrapTag(response.data));

            case 8:
              _context8.prev = 8;
              _context8.t0 = _context8["catch"](1);
              (0, _contentfulSdkCore.errorHandler)(_context8.t0);

            case 11:
            case "end":
              return _context8.stop();
          }
        }
      }, _callee8, null, [[1, 8]]);
    }));
    return _getTag.apply(this, arguments);
  }

  function getTags() {
    return _getTags.apply(this, arguments);
  }
  /**
   * Creates an asset key for signing asset URLs (Embargoed Assets)
   * @memberof ContentfulClientAPI
   * @param {number} expiresAt - UNIX timestamp in the future, maximum of 48h from now
   * @return {Promise<Entities.AssetKey>} Promise for an AssetKey
   * @example
   * const contentful = require('contentful')
   *
   * const client = contentful.createClient({
   *   space: '<space_id>',
   *   accessToken: '<content_delivery_api_key>'
   * })
   *
   * const assetKey = await client.getAssetKey(<UNIX timestamp>)
   * console.log(assetKey)
   */


  function _getTags() {
    _getTags = _asyncToGenerator( /*#__PURE__*/_regenerator["default"].mark(function _callee9() {
      var query,
          response,
          _args9 = arguments;
      return _regenerator["default"].wrap(function _callee9$(_context9) {
        while (1) {
          switch (_context9.prev = _context9.next) {
            case 0:
              query = _args9.length > 0 && _args9[0] !== undefined ? _args9[0] : {};
              switchToEnvironment(http);
              query = (0, _normalizeSelect["default"])(query);
              _context9.prev = 3;
              _context9.next = 6;
              return http.get('tags', (0, _contentfulSdkCore.createRequestConfig)({
                query: query
              }));

            case 6:
              response = _context9.sent;
              return _context9.abrupt("return", wrapTagCollection(response.data));

            case 10:
              _context9.prev = 10;
              _context9.t0 = _context9["catch"](3);
              (0, _contentfulSdkCore.errorHandler)(_context9.t0);

            case 13:
            case "end":
              return _context9.stop();
          }
        }
      }, _callee9, null, [[3, 10]]);
    }));
    return _getTags.apply(this, arguments);
  }

  function createAssetKey(_x5) {
    return _createAssetKey.apply(this, arguments);
  }
  /**
   * Gets a collection of Locale
   * @memberof ContentfulClientAPI
   * @param  {Object=} query - Object with search parameters. Check the <a href="https://www.contentful.com/developers/docs/javascript/tutorials/using-js-cda-sdk/#retrieving-entries-with-search-parameters">JS SDK tutorial</a> and the <a href="https://www.contentful.com/developers/docs/references/content-delivery-api/#/reference/search-parameters">REST API reference</a> for more details.
   * @return {Promise<Entities.LocaleCollection>} Promise for a collection of Locale
   * @example
   * const contentful = require('contentful')
   *
   * const client = contentful.createClient({
   *   space: '<space_id>',
   *   accessToken: '<content_delivery_api_key>'
   * })
   *
   * const response = await client.getLocales()
   * console.log(response.items)
   */


  function _createAssetKey() {
    _createAssetKey = _asyncToGenerator( /*#__PURE__*/_regenerator["default"].mark(function _callee10(expiresAt) {
      var now, currentMaxLifetime, params, response;
      return _regenerator["default"].wrap(function _callee10$(_context10) {
        while (1) {
          switch (_context10.prev = _context10.next) {
            case 0:
              switchToEnvironment(http);
              _context10.prev = 1;
              now = Math.floor(Date.now() / 1000);
              currentMaxLifetime = now + ASSET_KEY_MAX_LIFETIME;
              (0, _validateTimestamp["default"])('expiresAt', expiresAt, {
                maximum: currentMaxLifetime,
                now: now
              });
              params = {
                expiresAt: expiresAt
              };
              _context10.next = 8;
              return http.post('asset_keys', params);

            case 8:
              response = _context10.sent;
              return _context10.abrupt("return", wrapAssetKey(response.data));

            case 12:
              _context10.prev = 12;
              _context10.t0 = _context10["catch"](1);
              (0, _contentfulSdkCore.errorHandler)(_context10.t0);

            case 15:
            case "end":
              return _context10.stop();
          }
        }
      }, _callee10, null, [[1, 12]]);
    }));
    return _createAssetKey.apply(this, arguments);
  }

  function getLocales() {
    return _getLocales.apply(this, arguments);
  }
  /**
   * Synchronizes either all the content or only new content since last sync
   * See <a href="https://www.contentful.com/developers/docs/concepts/sync/">Synchronization</a> for more information.
   * <strong> Important note: </strong> The the sync api endpoint does not support include or link resolution.
   * However contentful.js is doing link resolution client side if you only make an initial sync.
   * For the delta sync (using nextSyncToken) it is not possible since the sdk wont have access to all the data to make such an operation.
   * @memberof ContentfulClientAPI
   * @param  {Object} query - Query object for the sync call. One of initial or nextSyncToken always needs to be specified, but not both.
   * @param  {boolean?} query.initial - Indicates if this is the first sync. Use it if you don't have a sync token.
   * @param  {string?} query.nextSyncToken - The token you got the last time you used this method. Ensures you only get changed content.
   * @param  {string=} query.type - Filter by this type (all (default), Entry, Asset, Deletion, DeletedAsset or DeletedEntry)
   * @param  {string=} query.content_type - Filter by this content type id
   * @param  {boolean=} query.resolveLinks - When true, links to other Entries or Assets are resolved. Default: true.
   * @param  {Object} options
   * @param  {boolean=} [options.paginate = true] - Set to false to disable pagination
   * @return {Promise<Sync.SyncCollection>} Promise for the collection resulting of a sync operation
   * @example
   * const contentful = require('contentful')
   *
   * const client = contentful.createClient({
   *   space: '<space_id>',
   *   accessToken: '<content_delivery_api_key>'
   * })
   *
   * const response = await client.sync({
   *   initial: true
   * })
   * console.log({
   *   entries: response.entries,
   *   assets: response.assets,
   *   nextSyncToken: response.nextSyncToken
   * })
   */


  function _getLocales() {
    _getLocales = _asyncToGenerator( /*#__PURE__*/_regenerator["default"].mark(function _callee11() {
      var query,
          response,
          _args11 = arguments;
      return _regenerator["default"].wrap(function _callee11$(_context11) {
        while (1) {
          switch (_context11.prev = _context11.next) {
            case 0:
              query = _args11.length > 0 && _args11[0] !== undefined ? _args11[0] : {};
              switchToEnvironment(http);
              _context11.prev = 2;
              _context11.next = 5;
              return http.get('locales', (0, _contentfulSdkCore.createRequestConfig)({
                query: query
              }));

            case 5:
              response = _context11.sent;
              return _context11.abrupt("return", wrapLocaleCollection(response.data));

            case 9:
              _context11.prev = 9;
              _context11.t0 = _context11["catch"](2);
              (0, _contentfulSdkCore.errorHandler)(_context11.t0);

            case 12:
            case "end":
              return _context11.stop();
          }
        }
      }, _callee11, null, [[2, 9]]);
    }));
    return _getLocales.apply(this, arguments);
  }

  function sync() {
    return _sync.apply(this, arguments);
  }
  /**
  * Parse raw json data into collection of entry objects.Links will be resolved also
  * @memberof ContentfulClientAPI
  * @param {Object} raw json data
  * @example
  * let data = {items: [
  *    {
  *    sys: {type: 'Entry', locale: 'en-US'},
  *    fields: {
  *      animal: {sys: {type: 'Link', linkType: 'Animal', id: 'oink'}},
  *      anotheranimal: {sys: {type: 'Link', linkType: 'Animal', id: 'middle-parrot'}}
  *    }
  *  }
  * ],
  * includes: {
  *  Animal: [
  *    {
  *      sys: {type: 'Animal', id: 'oink', locale: 'en-US'},
  *      fields: {
  *        name: 'Pig',
  *        friend: {sys: {type: 'Link', linkType: 'Animal', id: 'groundhog'}}
  *      }
  *    }
  *   ]
  *  }
  * }
  * console.log( data.items[0].fields.foo ); // undefined
  * let parsedData = client.parseEntries(data);
  * console.log( parsedData.items[0].fields.foo ); // foo
  */


  function _sync() {
    _sync = _asyncToGenerator( /*#__PURE__*/_regenerator["default"].mark(function _callee12() {
      var query,
          options,
          _getGlobalOptions3,
          resolveLinks,
          removeUnresolved,
          _args12 = arguments;

      return _regenerator["default"].wrap(function _callee12$(_context12) {
        while (1) {
          switch (_context12.prev = _context12.next) {
            case 0:
              query = _args12.length > 0 && _args12[0] !== undefined ? _args12[0] : {};
              options = _args12.length > 1 && _args12[1] !== undefined ? _args12[1] : {
                paginate: true
              };
              _getGlobalOptions3 = getGlobalOptions(query), resolveLinks = _getGlobalOptions3.resolveLinks, removeUnresolved = _getGlobalOptions3.removeUnresolved;
              switchToEnvironment(http);
              return _context12.abrupt("return", (0, _pagedSync["default"])(http, query, _objectSpread({
                resolveLinks: resolveLinks,
                removeUnresolved: removeUnresolved
              }, options)));

            case 5:
            case "end":
              return _context12.stop();
          }
        }
      }, _callee12);
    }));
    return _sync.apply(this, arguments);
  }

  function parseEntries(data) {
    var _getGlobalOptions = getGlobalOptions({}),
        resolveLinks = _getGlobalOptions.resolveLinks,
        removeUnresolved = _getGlobalOptions.removeUnresolved;

    return wrapEntryCollection(data, {
      resolveLinks: resolveLinks,
      removeUnresolved: removeUnresolved
    });
  }
  /*
   * Switches BaseURL to use /environments path
   * */


  function switchToEnvironment(http) {
    http.defaults.baseURL = getGlobalOptions().environmentBaseUrl;
  }
  /*
   * Switches BaseURL to use /spaces path
   * */


  function switchToSpace(http) {
    http.defaults.baseURL = getGlobalOptions().spaceBaseUrl;
  }

  return {
    getSpace: getSpace,
    getContentType: getContentType,
    getContentTypes: getContentTypes,
    getEntry: getEntry,
    getEntries: getEntries,
    getAsset: getAsset,
    getAssets: getAssets,
    getTag: getTag,
    getTags: getTags,
    createAssetKey: createAssetKey,
    getLocales: getLocales,
    parseEntries: parseEntries,
    sync: sync
  };
}

/***/ }),
/* 147 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var space = _interopRequireWildcard(__webpack_require__(148));

var entry = _interopRequireWildcard(__webpack_require__(149));

var asset = _interopRequireWildcard(__webpack_require__(151));

var assetKey = _interopRequireWildcard(__webpack_require__(152));

var contentType = _interopRequireWildcard(__webpack_require__(153));

var locale = _interopRequireWildcard(__webpack_require__(154));

var tag = _interopRequireWildcard(__webpack_require__(155));

function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}

function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
    return {
      "default": obj
    };
  }

  var cache = _getRequireWildcardCache(nodeInterop);

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj["default"] = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

var _default = {
  space: space,
  entry: entry,
  asset: asset,
  assetKey: assetKey,
  contentType: contentType,
  locale: locale,
  tag: tag
};
exports["default"] = _default;

/***/ }),
/* 148 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.wrapSpace = wrapSpace;

var _contentfulSdkCore = __webpack_require__(4);
/**
 * @memberof Entities
 * @typedef Space
 * @prop {Object} sys - System metadata
 * @prop {string} sys.id - Space id
 * @prop {string} sys.type - Entity type
 * @prop {string} name - Space name
 * @prop {Array<string>} locales - Array with locale codes
 * @prop {function(): Object} toPlainObject() - Returns this Space as a plain JS object
 */

/**
 * @private
 * @param  {Object} data - API response for a Space
 * @return {Space}
 */


function wrapSpace(data) {
  return (0, _contentfulSdkCore.freezeSys)((0, _contentfulSdkCore.toPlainObject)(data));
}

/***/ }),
/* 149 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.wrapEntry = wrapEntry;
exports.wrapEntryCollection = wrapEntryCollection;

var _fastCopy = _interopRequireDefault(__webpack_require__(6));

var _contentfulSdkCore = __webpack_require__(4);

var _stringifySafe = _interopRequireDefault(__webpack_require__(62));

var _contentfulResolveResponse = _interopRequireDefault(__webpack_require__(63));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}
/**
 * Types of fields found in an Entry
 * @namespace EntryFields
 */

/**
 * @memberof EntryFields
 * @typedef Symbol
 * @type string
 */

/**
 * @memberof EntryFields
 * @typedef Text
 * @type string
 */

/**
 * @memberof EntryFields
 * @typedef Integer
 * @type number
 */

/**
 * @memberof EntryFields
 * @typedef Number
 * @type number
 */

/**
 * @memberof EntryFields
 * @typedef Date
 * @type string
 */

/**
 * @memberof EntryFields
 * @typedef Boolean
 * @type boolean
 */

/**
 * @memberof EntryFields
 * @typedef Location
 * @prop {string} lat - latitude
 * @prop {string} lon - longitude
 */

/**
 * A Field in an Entry can have one of the following types that can be defined in Contentful. See <a href="https://www.contentful.com/developers/docs/references/field-type/">Field Types</a> for more details.
 * @memberof Entities
 * @typedef Field
 * @type EntryFields.Symbol | EntryFields.Text | EntryFields.Integer | EntryFields.Number | EntryFields.Date | EntryFields.Boolean | EntryFields.Location | Entities.Link | Array<EntryFields.Symbol|Entities.Link> | Object
 */

/**
 * @memberof Entities
 * @typedef Entry
 * @prop {Entities.Sys} sys - Standard system metadata with additional entry specific properties
 * @prop {Entities.Link} sys.contentType - Content Type used by this Entry
 * @prop {string=} sys.locale - If present, indicates the locale which this entry uses
 * @prop {Object<EntryFields.Field>} fields - Object with content for each field
 * @prop {function(): Object} toPlainObject() - Returns this Entry as a plain JS object
 */

/**
 * @private
 * @param {Object} data - Raw entry data
 * @return {Entry} Wrapped entry data
 */


function wrapEntry(data) {
  return (0, _contentfulSdkCore.freezeSys)((0, _contentfulSdkCore.toPlainObject)((0, _fastCopy["default"])(data)));
}
/**
 * @memberof Entities
 * @typedef EntryCollection
 * @prop {number} total
 * @prop {number} skip
 * @prop {number} limit
 * @prop {Array<Entities.Entry>} items
 * @prop {Array<Object>=} errors - Array of errors that might occur when retrieving entries.
 * @prop {Object<Array>=} includes - Object with arrays of includes for Entries and Assets. This will be present if resolveLinks is on, and any linked entries or assets exist. Those links will be resolved in the Entries present in the items array, but they are also present here in raw form.
 * @prop {function(): Object} toPlainObject() - Returns this Entry collection as a plain JS object
 * @prop {function(?function=, space=): Object} stringifySafe(replacer,space) - Stringifies the entry collection, accounting for circular references. Circular references will be replaced with just a Link object, with a <code>circular</code> property set to <code>true</code>. See <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify">MDN</a> and <a href="https://www.npmjs.com/package/json-stringify-safe">json-stringify-safe</a> for more details on the arguments this method can take.
 */

/**
 * Data is also mixed in with link getters if links exist and includes were requested
 * @private
 * @param {Object} data - Raw entry collection data
 * @param {Object} options - wrapper options
 * @return {EntryCollection} Wrapped entry collection data
 */


function wrapEntryCollection(data, _ref) {
  var resolveLinks = _ref.resolveLinks,
      removeUnresolved = _ref.removeUnresolved;
  var wrappedData = (0, _stringifySafe["default"])((0, _contentfulSdkCore.toPlainObject)((0, _fastCopy["default"])(data)));

  if (resolveLinks) {
    wrappedData.items = (0, _contentfulResolveResponse["default"])(wrappedData, {
      removeUnresolved: removeUnresolved,
      itemEntryPoints: ['fields']
    });
  }

  return (0, _contentfulSdkCore.freezeSys)(wrappedData);
}

/***/ }),
/* 150 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports = module.exports = stringify;
exports.getSerialize = serializer;

function stringify(obj, replacer, spaces, cycleReplacer) {
  return JSON.stringify(obj, serializer(replacer, cycleReplacer), spaces);
}

function serializer(replacer, cycleReplacer) {
  var stack = [],
      keys = [];
  if (cycleReplacer == null) cycleReplacer = function cycleReplacer(key, value) {
    if (stack[0] === value) return "[Circular ~]";
    return "[Circular ~." + keys.slice(0, stack.indexOf(value)).join(".") + "]";
  };
  return function (key, value) {
    if (stack.length > 0) {
      var thisPos = stack.indexOf(this);
      ~thisPos ? stack.splice(thisPos + 1) : stack.push(this);
      ~thisPos ? keys.splice(thisPos, Infinity, key) : keys.push(key);
      if (~stack.indexOf(value)) value = cycleReplacer.call(this, key, value);
    } else stack.push(value);

    return replacer == null ? value : replacer.call(this, key, value);
  };
}

/***/ }),
/* 151 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.wrapAsset = wrapAsset;
exports.wrapAssetCollection = wrapAssetCollection;

var _fastCopy = _interopRequireDefault(__webpack_require__(6));

var _contentfulSdkCore = __webpack_require__(4);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}
/**
 * @memberof Entities
 * @typedef Asset
 * @prop {Entities.Sys} sys - Standard system metadata with additional entry specific properties
 * @prop {string=} sys.locale - If present, indicates the locale which this asset uses
 * @prop {Object} fields - Object with content for each field
 * @prop {string} fields.title - Title for this asset
 * @prop {string} fields.description - Description for this asset
 * @prop {Object} fields.file - File object for this asset
 * @prop {string} fields.file.fileName - Name for the file
 * @prop {string} fields.file.contentType - Mime type for the file
 * @prop {string} fields.file.url - Url where the file is available at.
 * @prop {Object} fields.file.details - Details for the file, depending on file type (example: image size in bytes, etc)
 * @prop {function(): Object} toPlainObject() - Returns this Asset as a plain JS object
 */

/**
 * @private
 * @param {Object} data - Raw asset data
 * @return {Asset} Wrapped asset data
 */


function wrapAsset(data) {
  return (0, _contentfulSdkCore.freezeSys)((0, _contentfulSdkCore.toPlainObject)((0, _fastCopy["default"])(data)));
}
/**
 * @memberof Entities
 * @typedef AssetCollection
 * @prop {number} total
 * @prop {number} skip
 * @prop {number} limit
 * @prop {Array<Entities.Asset>} items
 * @prop {function(): Object} toPlainObject() - Returns this Asset collection as a plain JS object
 */

/**
 * @private
 * @param {Object} data - Raw asset collection data
 * @return {AssetCollection} Wrapped asset collection data
 */


function wrapAssetCollection(data) {
  return (0, _contentfulSdkCore.freezeSys)((0, _contentfulSdkCore.toPlainObject)((0, _fastCopy["default"])(data)));
}

/***/ }),
/* 152 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.wrapAssetKey = wrapAssetKey;

var _fastCopy = _interopRequireDefault(__webpack_require__(6));

var _contentfulSdkCore = __webpack_require__(4);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}
/**
 * @memberof Entities
 * @typedef AssetKey
 * @prop {string} policy - The asset key's policy
 * @prop {string} secret - The secret for creating a signing token
 * @prop {function(): Object} toPlainObject() - Returns this AssetKey as a plain JS object
 */

/**
 * @private
 * @param {Object} data - Raw asset key data
 * @return {Asset} Wrapped asset key data
 */


function wrapAssetKey(data) {
  return (0, _contentfulSdkCore.freezeSys)((0, _contentfulSdkCore.toPlainObject)((0, _fastCopy["default"])(data)));
}

/***/ }),
/* 153 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.wrapContentType = wrapContentType;
exports.wrapContentTypeCollection = wrapContentTypeCollection;

var _fastCopy = _interopRequireDefault(__webpack_require__(6));

var _contentfulSdkCore = __webpack_require__(4);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}
/**
 * @memberof Entities
 * @typedef ContentType
 * @prop {Entities.Sys} sys - System metadata
 * @prop {string} name
 * @prop {string} description
 * @prop {string} displayField - Field used as the main display field for Entries
 * @prop {string} Array<Field> - All the fields contained in this Content Type
 * @prop {function(): Object} toPlainObject() - Returns this Content Type as a plain JS object
 */

/**
 * @private
 * @param {Object} data - Raw content type data
 * @return {ContentType} Wrapped content type data
 */


function wrapContentType(data) {
  return (0, _contentfulSdkCore.freezeSys)((0, _contentfulSdkCore.toPlainObject)((0, _fastCopy["default"])(data)));
}
/**
 * @memberof Entities
 * @typedef ContentTypeCollection
 * @prop {number} total
 * @prop {number} skip
 * @prop {number} limit
 * @prop {Array<Entities.ContentType>} items
 * @prop {function(): Object} toPlainObject() - Returns this Content Type collection as a plain JS object
 */

/**
 * @private
 * @param {Object} data - Raw content type collection data
 * @return {ContentTypeCollection} Wrapped content type collection data
 */


function wrapContentTypeCollection(data) {
  return (0, _contentfulSdkCore.freezeSys)((0, _contentfulSdkCore.toPlainObject)((0, _fastCopy["default"])(data)));
}

/***/ }),
/* 154 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.wrapLocale = wrapLocale;
exports.wrapLocaleCollection = wrapLocaleCollection;

var _fastCopy = _interopRequireDefault(__webpack_require__(6));

var _contentfulSdkCore = __webpack_require__(4);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}
/**
 * @memberof Entities
 * @typedef Locale
 * @prop {Entities.Sys} sys - Standard system metadata with additional entry specific properties
 * @prop {string} name - locale name (example: English)
 * @prop {string} code - locale code (example: en-US)
 * @prop {string} fallbackCode - the locale code to fallback to when there is not content for the current locale
 * @prop {boolean} default - If this is the default locale
 * @prop {boolean} optional - If the locale needs to be filled in on entries or not
 * @prop {function(): Object} toPlainObject() - Returns this Locale as a plain JS object
 */

/**
 * @private
 * @param {Object} data - Raw locale data
 * @return {Locale} Wrapped locale data
 */


function wrapLocale(data) {
  return (0, _contentfulSdkCore.freezeSys)((0, _contentfulSdkCore.toPlainObject)((0, _fastCopy["default"])(data)));
}
/**
 * @memberof Entities
 * @typedef LocaleCollection
 * @prop {number} total
 * @prop {number} skip
 * @prop {number} limit
 * @prop {Array<Entities.Locale>} items
 * @prop {function(): Object} toPlainObject() - Returns this Locale collection as a plain JS object
 */

/**
 * @private
 * @param {Object} data - Raw locale collection data
 * @return {LocaleCollection} Wrapped locale collection data
 */


function wrapLocaleCollection(data) {
  return (0, _contentfulSdkCore.freezeSys)((0, _contentfulSdkCore.toPlainObject)((0, _fastCopy["default"])(data)));
}

/***/ }),
/* 155 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.wrapTag = wrapTag;
exports.wrapTagCollection = wrapTagCollection;

var _fastCopy = _interopRequireDefault(__webpack_require__(6));

var _contentfulSdkCore = __webpack_require__(4);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}
/**
 * @memberof Entities
 * @typedef Tag
 * @prop {Entities.Sys} sys - Standard system metadata with additional entry specific properties
 * @prop {string} name - Tag name
 * @prop {function(): Object} toPlainObject() - Returns this tag as a plain JS object
 */

/**
 * @private
 * @param {Object} data - Raw tag data
 * @return {Tag} Wrapped tag data
 */


function wrapTag(data) {
  return (0, _contentfulSdkCore.freezeSys)((0, _contentfulSdkCore.toPlainObject)((0, _fastCopy["default"])(data)));
}
/**
 * @memberof Entities
 * @typedef TagCollection
 * @prop {number} total
 * @prop {number} skip
 * @prop {number} limit
 * @prop {Array<Entities.Tag>} items
 * @prop {function(): Object} toPlainObject() - Returns this Tag collection as a plain JS object
 */

/**
 * @private
 * @param {Object} data - Raw tag collection data
 * @return {TagCollection} Wrapped tag collection data
 */


function wrapTagCollection(data) {
  return (0, _contentfulSdkCore.freezeSys)((0, _contentfulSdkCore.toPlainObject)((0, _fastCopy["default"])(data)));
}

/***/ }),
/* 156 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _regenerator = _interopRequireDefault2(__webpack_require__(13));

function _interopRequireDefault2(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = pagedSync;

var _contentfulSdkCore = __webpack_require__(4);

var _contentfulResolveResponse = _interopRequireDefault(__webpack_require__(63));

var _stringifySafe = _interopRequireDefault(__webpack_require__(62));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}
/**
 * @memberof Sync
 * @typedef SyncCollection
 * @prop {Array<Entities.Entry>} entries - All existing entries on first sync. New and updated entries on subsequent syncs.
 * @prop {Array<Entities.Asset>} assets - All existing assets on first sync. New and updated assets on subsequent syncs.
 * @prop {Array<Sync.DeletedEntry>} deletedEntries - List of deleted Entries since last sync
 * @prop {Array<Sync.DeletedAsset>} deletedAssets - List of deleted Assets since last sync
 * @prop {string} nextSyncToken - Token to be sent to the next sync call
 * @prop {function(): Object} toPlainObject() - Returns this Sync collection as a plain JS object
 * @prop {function(?function=, space=): Object} stringifySafe(replacer,space) - Stringifies the Sync collection, accounting for circular references. Circular references will be replaced with just a Link object, with a <code>circular</code> property set to <code>true</code>. See <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify">MDN</a> and <a href="https://www.npmjs.com/package/json-stringify-safe">json-stringify-safe</a> for more details on the arguments this method can take.
 */

/**
 * Deleted Entries are the same as Entries, but only appear on the sync API.
 * @memberof Sync
 * @typedef DeletedEntry
 * @type Entities.Entry
 */

/**
 * Deleted Assets are the same as Assets, but only appear on the sync API.
 * @memberof Sync
 * @typedef DeletedAsset
 * @type Entities.Asset
 */

/**
 * This module retrieves all the available pages for a sync operation
 * @private
 * @param {Object} http - HTTP client
 * @param {Object} query - Query object
 * @param {Object} options - Sync options object
 * @param {boolean} [options.resolveLinks = true] - If links should be resolved
 * @param {boolean} [options.removeUnresolved = false] - If unresolvable links should get removed
 * @param {boolean} [options.paginate = true] - If further sync pages should automatically be crawled
 * @return {Promise<SyncCollection>}
 */


function pagedSync(_x, _x2) {
  return _pagedSync.apply(this, arguments);
}
/**
 * @private
 * @param {Array<Entities.Entry|Entities.Array|Sync.DeletedEntry|Sync.DeletedAsset>} items
 * @return {Object} Entities mapped to an object for each entity type
 */


function _pagedSync() {
  _pagedSync = _asyncToGenerator( /*#__PURE__*/_regenerator["default"].mark(function _callee(http, query) {
    var options,
        defaultOptions,
        _objectSpread2,
        resolveLinks,
        removeUnresolved,
        paginate,
        syncOptions,
        response,
        mappedResponseItems,
        _args = arguments;

    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            options = _args.length > 2 && _args[2] !== undefined ? _args[2] : {};

            if (!(!query || !query.initial && !query.nextSyncToken && !query.nextPageToken)) {
              _context.next = 3;
              break;
            }

            throw new Error('Please provide one of `initial`, `nextSyncToken` or `nextPageToken` parameters for syncing');

          case 3:
            if (!(query && query.content_type && !query.type)) {
              _context.next = 7;
              break;
            }

            query.type = 'Entry';
            _context.next = 9;
            break;

          case 7:
            if (!(query && query.content_type && query.type && query.type !== 'Entry')) {
              _context.next = 9;
              break;
            }

            throw new Error('When using the `content_type` filter your `type` parameter cannot be different from `Entry`.');

          case 9:
            defaultOptions = {
              resolveLinks: true,
              removeUnresolved: false,
              paginate: true
            };
            _objectSpread2 = _objectSpread(_objectSpread({}, defaultOptions), options), resolveLinks = _objectSpread2.resolveLinks, removeUnresolved = _objectSpread2.removeUnresolved, paginate = _objectSpread2.paginate;
            syncOptions = {
              paginate: paginate
            };
            _context.next = 14;
            return getSyncPage(http, [], query, syncOptions);

          case 14:
            response = _context.sent;

            // clones response.items used in includes because we don't want these to be mutated
            if (resolveLinks) {
              response.items = (0, _contentfulResolveResponse["default"])(response, {
                removeUnresolved: removeUnresolved,
                itemEntryPoints: ['fields']
              });
            } // maps response items again after getters are attached


            mappedResponseItems = mapResponseItems(response.items);

            if (response.nextSyncToken) {
              mappedResponseItems.nextSyncToken = response.nextSyncToken;
            }

            if (response.nextPageToken) {
              mappedResponseItems.nextPageToken = response.nextPageToken;
            }

            return _context.abrupt("return", (0, _contentfulSdkCore.freezeSys)((0, _stringifySafe["default"])((0, _contentfulSdkCore.toPlainObject)(mappedResponseItems))));

          case 20:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _pagedSync.apply(this, arguments);
}

function mapResponseItems(items) {
  var reducer = function reducer(type) {
    return function (accumulated, item) {
      if (item.sys.type === type) {
        accumulated.push((0, _contentfulSdkCore.toPlainObject)(item));
      }

      return accumulated;
    };
  };

  return {
    entries: items.reduce(reducer('Entry'), []),
    assets: items.reduce(reducer('Asset'), []),
    deletedEntries: items.reduce(reducer('DeletedEntry'), []),
    deletedAssets: items.reduce(reducer('DeletedAsset'), [])
  };
}
/**
 * If the response contains a nextPageUrl, extracts the sync token to get the
 * next page and calls itself again with that token.
 * Otherwise, if the response contains a nextSyncUrl, extracts the sync token
 * and returns it.
 * On each call of this function, any retrieved items are collected in the
 * supplied items array, which gets returned in the end
 * @private
 * @param {Object} http
 * @param {Array<Entities.Entry|Entities.Array|Sync.DeletedEntry|Sync.DeletedAsset>} items
 * @param {Object} query
 * @param {Object} options - Sync page options object
 * @param {boolean} [options.paginate = true] - If further sync pages should automatically be crawled
 * @return {Promise<{items: Array, nextSyncToken: string}>}
 */


function getSyncPage(_x3, _x4, _x5, _x6) {
  return _getSyncPage.apply(this, arguments);
}
/**
 * Extracts token out of an url
 * @private
 */


function _getSyncPage() {
  _getSyncPage = _asyncToGenerator( /*#__PURE__*/_regenerator["default"].mark(function _callee2(http, items, query, _ref) {
    var paginate, response, data;
    return _regenerator["default"].wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            paginate = _ref.paginate;

            if (query.nextSyncToken) {
              query.sync_token = query.nextSyncToken;
              delete query.nextSyncToken;
            }

            if (query.nextPageToken) {
              query.sync_token = query.nextPageToken;
              delete query.nextPageToken;
            }

            if (query.sync_token) {
              delete query.initial;
              delete query.type;
              delete query.content_type;
              delete query.limit;
            }

            _context2.next = 6;
            return http.get('sync', (0, _contentfulSdkCore.createRequestConfig)({
              query: query
            }));

          case 6:
            response = _context2.sent;
            data = response.data || {};
            items = items.concat(data.items || []);

            if (!data.nextPageUrl) {
              _context2.next = 17;
              break;
            }

            if (!paginate) {
              _context2.next = 14;
              break;
            }

            delete query.initial;
            query.sync_token = getToken(data.nextPageUrl);
            return _context2.abrupt("return", getSyncPage(http, items, query, {
              paginate: paginate
            }));

          case 14:
            return _context2.abrupt("return", {
              items: items,
              nextPageToken: getToken(data.nextPageUrl)
            });

          case 17:
            if (!data.nextSyncUrl) {
              _context2.next = 21;
              break;
            }

            return _context2.abrupt("return", {
              items: items,
              nextSyncToken: getToken(data.nextSyncUrl)
            });

          case 21:
            return _context2.abrupt("return", {
              items: []
            });

          case 22:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _getSyncPage.apply(this, arguments);
}

function getToken(url) {
  var urlParts = url.split('?');
  return urlParts.length > 0 ? urlParts[1].replace('sync_token=', '') : '';
}

/***/ }),
/* 157 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = normalizeSelect;

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}
/*
* sdk relies heavily on sys metadata
* so we cannot omit the sys property on sdk level entirely
* and we have to ensure that at least `id` and `type` are present
* */


function normalizeSelect(query) {
  if (!query.select) {
    return query;
  } // The selection of fields for the query is limited
  // Get the different parts that are listed for selection


  var allSelects = Array.isArray(query.select) ? query.select : query.select.split(','); // Move the parts into a set for easy access and deduplication

  var selectedSet = new Set(allSelects); // If we already select all of `sys` we can just return
  // since we're anyway fetching everything that is needed

  if (selectedSet.has('sys')) {
    return query;
  } // We don't select `sys` so we need to ensure the minimum set


  selectedSet.add('sys.id');
  selectedSet.add('sys.type'); // Reassign the normalized sys properties

  return _objectSpread(_objectSpread({}, query), {}, {
    select: _toConsumableArray(selectedSet).join(',')
  });
}

/***/ }),
/* 158 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } Object.defineProperty(subClass, "prototype", { value: Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }), writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }

function _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ValidationError = void 0;
exports["default"] = validateTimestamp;

var ValidationError = /*#__PURE__*/function (_Error) {
  _inherits(ValidationError, _Error);

  var _super = _createSuper(ValidationError);

  function ValidationError(name, message) {
    var _this;

    _classCallCheck(this, ValidationError);

    _this = _super.call(this, "Invalid \"".concat(name, "\" provided, ") + message);
    _this.name = 'ValidationError';
    return _this;
  }

  return _createClass(ValidationError);
}( /*#__PURE__*/_wrapNativeSuper(Error));

exports.ValidationError = ValidationError;

function validateTimestamp(name, timestamp, options) {
  options = options || {};

  if (typeof timestamp !== 'number') {
    throw new ValidationError(name, "only numeric values are allowed for timestamps, provided type was \"".concat(_typeof(timestamp), "\""));
  }

  if (options.maximum && timestamp > options.maximum) {
    throw new ValidationError(name, "value (".concat(timestamp, ") cannot be further in the future than expected maximum (").concat(options.maximum, ")"));
  }

  if (options.now && timestamp < options.now) {
    throw new ValidationError(name, "value (".concat(timestamp, ") cannot be in the past, current time was ").concat(options.now));
  }
}

/***/ }),
/* 159 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = createGlobalOptions;
/**
 * Link resolution can be set globally, or it can be turned off for the methods
 * which make use of it. The local setting always overrides the global setting.
 * @private
 * @param {boolean} globalSetting - Global library setting for link resolution
 * @returns {function} Link resolver method preconfigured with global setting
 */

function createGlobalOptions(globalSettings) {
  /**
   * Link resolver method
   * @param {Object} query - regular query object used for collection endpoints
   */
  return function getGlobalOptions(query) {
    return Object.assign({}, globalSettings, query);
  };
}

/***/ }),
/* 160 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
var AccountController_namespaceObject = {};
__webpack_require__.r(AccountController_namespaceObject);
__webpack_require__.d(AccountController_namespaceObject, "getAccount", function() { return getAccount; });
__webpack_require__.d(AccountController_namespaceObject, "register", function() { return register; });
__webpack_require__.d(AccountController_namespaceObject, "resendVerificationEmail", function() { return resendVerificationEmail; });
__webpack_require__.d(AccountController_namespaceObject, "confirm", function() { return AccountController_confirm; });
__webpack_require__.d(AccountController_namespaceObject, "login", function() { return login; });
__webpack_require__.d(AccountController_namespaceObject, "logout", function() { return logout; });
__webpack_require__.d(AccountController_namespaceObject, "password", function() { return AccountController_password; });
__webpack_require__.d(AccountController_namespaceObject, "requestReset", function() { return requestReset; });
__webpack_require__.d(AccountController_namespaceObject, "reset", function() { return AccountController_reset; });
__webpack_require__.d(AccountController_namespaceObject, "update", function() { return update; });
__webpack_require__.d(AccountController_namespaceObject, "addAddress", function() { return addAddress; });
__webpack_require__.d(AccountController_namespaceObject, "updateAddress", function() { return updateAddress; });
__webpack_require__.d(AccountController_namespaceObject, "removeAddress", function() { return removeAddress; });
__webpack_require__.d(AccountController_namespaceObject, "setDefaultBillingAddress", function() { return setDefaultBillingAddress; });
__webpack_require__.d(AccountController_namespaceObject, "setDefaultShippingAddress", function() { return setDefaultShippingAddress; });
var ProductController_namespaceObject = {};
__webpack_require__.r(ProductController_namespaceObject);
__webpack_require__.d(ProductController_namespaceObject, "getProduct", function() { return getProduct; });
__webpack_require__.d(ProductController_namespaceObject, "query", function() { return query; });
__webpack_require__.d(ProductController_namespaceObject, "getAttributeGroup", function() { return getAttributeGroup; });
__webpack_require__.d(ProductController_namespaceObject, "queryCategories", function() { return queryCategories; });
__webpack_require__.d(ProductController_namespaceObject, "searchableAttributes", function() { return searchableAttributes; });
var CartController_namespaceObject = {};
__webpack_require__.r(CartController_namespaceObject);
__webpack_require__.d(CartController_namespaceObject, "getCart", function() { return getCart; });
__webpack_require__.d(CartController_namespaceObject, "addToCart", function() { return addToCart; });
__webpack_require__.d(CartController_namespaceObject, "addItemsToCart", function() { return addItemsToCart; });
__webpack_require__.d(CartController_namespaceObject, "updateLineItem", function() { return updateLineItem; });
__webpack_require__.d(CartController_namespaceObject, "removeLineItem", function() { return removeLineItem; });
__webpack_require__.d(CartController_namespaceObject, "updateCart", function() { return updateCart; });
__webpack_require__.d(CartController_namespaceObject, "checkout", function() { return checkout; });
__webpack_require__.d(CartController_namespaceObject, "getOrders", function() { return getOrders; });
__webpack_require__.d(CartController_namespaceObject, "getShippingMethods", function() { return getShippingMethods; });
__webpack_require__.d(CartController_namespaceObject, "returnItems", function() { return returnItems; });
__webpack_require__.d(CartController_namespaceObject, "getAvailableShippingMethods", function() { return getAvailableShippingMethods; });
__webpack_require__.d(CartController_namespaceObject, "setShippingMethod", function() { return setShippingMethod; });
__webpack_require__.d(CartController_namespaceObject, "addPaymentByInvoice", function() { return addPaymentByInvoice; });
__webpack_require__.d(CartController_namespaceObject, "updatePayment", function() { return updatePayment; });
__webpack_require__.d(CartController_namespaceObject, "redeemDiscount", function() { return redeemDiscount; });
__webpack_require__.d(CartController_namespaceObject, "removeDiscount", function() { return removeDiscount; });
__webpack_require__.d(CartController_namespaceObject, "replicateCart", function() { return replicateCart; });
__webpack_require__.d(CartController_namespaceObject, "splitLineItem", function() { return splitLineItem; });
var WishlistController_namespaceObject = {};
__webpack_require__.r(WishlistController_namespaceObject);
__webpack_require__.d(WishlistController_namespaceObject, "getStoreWishlists", function() { return getStoreWishlists; });
__webpack_require__.d(WishlistController_namespaceObject, "getAllWishlists", function() { return getAllWishlists; });
__webpack_require__.d(WishlistController_namespaceObject, "getWishlist", function() { return getWishlist; });
__webpack_require__.d(WishlistController_namespaceObject, "createWishlist", function() { return createWishlist; });
__webpack_require__.d(WishlistController_namespaceObject, "addToWishlist", function() { return addToWishlist; });
__webpack_require__.d(WishlistController_namespaceObject, "removeLineItem", function() { return WishlistController_removeLineItem; });
__webpack_require__.d(WishlistController_namespaceObject, "updateLineItemCount", function() { return updateLineItemCount; });
var ProjectController_namespaceObject = {};
__webpack_require__.r(ProjectController_namespaceObject);
__webpack_require__.d(ProjectController_namespaceObject, "getProjectSettings", function() { return getProjectSettings; });
var StoreController_namespaceObject = {};
__webpack_require__.r(StoreController_namespaceObject);
__webpack_require__.d(StoreController_namespaceObject, "create", function() { return create; });
__webpack_require__.d(StoreController_namespaceObject, "query", function() { return StoreController_query; });
__webpack_require__.d(StoreController_namespaceObject, "setMe", function() { return setMe; });
var BusinessUnitController_namespaceObject = {};
__webpack_require__.r(BusinessUnitController_namespaceObject);
__webpack_require__.d(BusinessUnitController_namespaceObject, "getMe", function() { return getMe; });
__webpack_require__.d(BusinessUnitController_namespaceObject, "setMe", function() { return BusinessUnitController_setMe; });
__webpack_require__.d(BusinessUnitController_namespaceObject, "getMyOrganization", function() { return getMyOrganization; });
__webpack_require__.d(BusinessUnitController_namespaceObject, "getBusinessUnitOrders", function() { return getBusinessUnitOrders; });
__webpack_require__.d(BusinessUnitController_namespaceObject, "create", function() { return BusinessUnitController_create; });
__webpack_require__.d(BusinessUnitController_namespaceObject, "addAssociate", function() { return addAssociate; });
__webpack_require__.d(BusinessUnitController_namespaceObject, "removeAssociate", function() { return removeAssociate; });
__webpack_require__.d(BusinessUnitController_namespaceObject, "updateAssociate", function() { return updateAssociate; });
__webpack_require__.d(BusinessUnitController_namespaceObject, "update", function() { return BusinessUnitController_update; });
__webpack_require__.d(BusinessUnitController_namespaceObject, "getByKey", function() { return getByKey; });
__webpack_require__.d(BusinessUnitController_namespaceObject, "remove", function() { return remove; });
__webpack_require__.d(BusinessUnitController_namespaceObject, "query", function() { return BusinessUnitController_query; });
var CustomerController_namespaceObject = {};
__webpack_require__.r(CustomerController_namespaceObject);
__webpack_require__.d(CustomerController_namespaceObject, "getById", function() { return getById; });
var QuoteController_namespaceObject = {};
__webpack_require__.r(QuoteController_namespaceObject);
__webpack_require__.d(QuoteController_namespaceObject, "createQuoteRequest", function() { return createQuoteRequest; });
__webpack_require__.d(QuoteController_namespaceObject, "getMyQuoteRequests", function() { return getMyQuoteRequests; });
__webpack_require__.d(QuoteController_namespaceObject, "getMyQuotesOverview", function() { return getMyQuotesOverview; });
__webpack_require__.d(QuoteController_namespaceObject, "getBusinessUnitQuotesOverview", function() { return getBusinessUnitQuotesOverview; });
__webpack_require__.d(QuoteController_namespaceObject, "updateQuoteState", function() { return updateQuoteState; });
var DashboardController_namespaceObject = {};
__webpack_require__.r(DashboardController_namespaceObject);
__webpack_require__.d(DashboardController_namespaceObject, "getMyDashboard", function() { return getMyDashboard; });
__webpack_require__.d(DashboardController_namespaceObject, "updateDashboard", function() { return updateDashboard; });
var AdyenController_namespaceObject = {};
__webpack_require__.r(AdyenController_namespaceObject);
__webpack_require__.d(AdyenController_namespaceObject, "createSession", function() { return createSession; });
__webpack_require__.d(AdyenController_namespaceObject, "checkout", function() { return AdyenController_checkout; });
__webpack_require__.d(AdyenController_namespaceObject, "notifications", function() { return notifications; });
var ContenfulController_namespaceObject = {};
__webpack_require__.r(ContenfulController_namespaceObject);
__webpack_require__.d(ContenfulController_namespaceObject, "getEntries", function() { return getEntries; });
__webpack_require__.d(ContenfulController_namespaceObject, "getEntry", function() { return getEntry; });

// CONCATENATED MODULE: ./commerce-commercetools/utils/Request.ts
const getPath = (request) => {
    var _a;
    return (_a = getHeader(request, 'frontastic-path')) !== null && _a !== void 0 ? _a : request.query.path;
};
const getLocale = (request) => {
    var _a, _b;
    const locale = (_a = getHeader(request, 'frontastic-locale')) !== null && _a !== void 0 ? _a : request.query.locale;
    if (locale !== undefined) {
        return (_b = getHeader(request, 'frontastic-locale')) !== null && _b !== void 0 ? _b : request.query.locale;
    }
    throw new Error(`Locale is missing from request ${request}`);
};
const getHeader = (request, header) => {
    if (header in request.headers) {
        const foundHeader = request.headers[header];
        if (Array.isArray(foundHeader)) {
            return foundHeader[0];
        }
        return foundHeader;
    }
    return null;
};

// CONCATENATED MODULE: ./types/product/FilterField.ts
var FilterFieldTypes;
(function (FilterFieldTypes) {
    FilterFieldTypes["BOOLEAN"] = "boolean";
    FilterFieldTypes["ENUM"] = "enum";
    FilterFieldTypes["TEXT"] = "text";
    FilterFieldTypes["NUMBER"] = "number";
})(FilterFieldTypes || (FilterFieldTypes = {}));

// CONCATENATED MODULE: ./types/result/Facet.ts
var FacetTypes;
(function (FacetTypes) {
    FacetTypes["BOOLEAN"] = "boolean";
    FacetTypes["TERM"] = "term";
    FacetTypes["RANGE"] = "range";
})(FacetTypes || (FacetTypes = {}));

// CONCATENATED MODULE: ./types/query/Filter.ts
var FilterTypes;
(function (FilterTypes) {
    FilterTypes["BOOLEAN"] = "boolean";
    FilterTypes["TERM"] = "term";
    FilterTypes["RANGE"] = "range";
})(FilterTypes || (FilterTypes = {}));

// CONCATENATED MODULE: ./commerce-commercetools/mappers/ProductMapper.ts




const TypeMap = new Map([
    ['boolean', FilterFieldTypes.BOOLEAN],
    ['enum', FilterFieldTypes.ENUM],
    ['text', FilterFieldTypes.TEXT],
    ['number', FilterFieldTypes.NUMBER],
    ['lenum', FilterFieldTypes.ENUM],
    ['ltext', FilterFieldTypes.TEXT],
]);
class ProductMapper_ProductMapper {
    static extractAttributeValue(commercetoolsAttributeValue, locale) {
        if (commercetoolsAttributeValue['key'] !== undefined && commercetoolsAttributeValue['label'] !== undefined) {
            return {
                key: commercetoolsAttributeValue['key'],
                label: ProductMapper_ProductMapper.extractAttributeValue(commercetoolsAttributeValue['label'], locale),
            };
        }
        if (commercetoolsAttributeValue instanceof Array) {
            return commercetoolsAttributeValue.map((value) => ProductMapper_ProductMapper.extractAttributeValue(value, locale));
        }
        return commercetoolsAttributeValue[locale.language] || commercetoolsAttributeValue;
    }
    static extractPriceAndDiscounts(commercetoolsVariant, locale) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p;
        let price = undefined;
        let discountedPrice = undefined;
        let discounts = undefined;
        if (commercetoolsVariant === null || commercetoolsVariant === void 0 ? void 0 : commercetoolsVariant.scopedPrice) {
            price = ProductMapper_ProductMapper.commercetoolsMoneyToMoney((_a = commercetoolsVariant.scopedPrice) === null || _a === void 0 ? void 0 : _a.value);
            discountedPrice = ProductMapper_ProductMapper.commercetoolsMoneyToMoney((_c = (_b = commercetoolsVariant.scopedPrice) === null || _b === void 0 ? void 0 : _b.discounted) === null || _c === void 0 ? void 0 : _c.value);
            discounts = [(_g = (_f = (_e = (_d = commercetoolsVariant.scopedPrice) === null || _d === void 0 ? void 0 : _d.discounted) === null || _e === void 0 ? void 0 : _e.discount) === null || _f === void 0 ? void 0 : _f.obj) === null || _g === void 0 ? void 0 : _g.description[locale.language]];
            return { price, discountedPrice, discounts };
        }
        if (commercetoolsVariant === null || commercetoolsVariant === void 0 ? void 0 : commercetoolsVariant.price) {
            price = ProductMapper_ProductMapper.commercetoolsMoneyToMoney((_h = commercetoolsVariant.price) === null || _h === void 0 ? void 0 : _h.value);
            discountedPrice = ProductMapper_ProductMapper.commercetoolsMoneyToMoney((_k = (_j = commercetoolsVariant.price) === null || _j === void 0 ? void 0 : _j.discounted) === null || _k === void 0 ? void 0 : _k.value);
            discounts = [(_p = (_o = (_m = (_l = commercetoolsVariant.price) === null || _l === void 0 ? void 0 : _l.discounted) === null || _m === void 0 ? void 0 : _m.discount) === null || _o === void 0 ? void 0 : _o.obj) === null || _p === void 0 ? void 0 : _p.description[locale.language]];
            return { price, discountedPrice, discounts };
        }
        return { price, discountedPrice, discounts };
    }
    static commercetoolsMoneyToMoney(commercetoolsMoney) {
        if (commercetoolsMoney === undefined) {
            return undefined;
        }
        return {
            fractionDigits: commercetoolsMoney.hasOwnProperty('fractionDigits') &&
                commercetoolsMoney.fractionDigits !== undefined
                ? commercetoolsMoney.fractionDigits
                : 2,
            centAmount: commercetoolsMoney.centAmount,
            currencyCode: commercetoolsMoney.currencyCode,
        };
    }
    static commercetoolsProductTypesToFilterFields(commercetoolsProductTypes, locale) {
        const filterFields = [];
        commercetoolsProductTypes === null || commercetoolsProductTypes === void 0 ? void 0 : commercetoolsProductTypes.forEach((productType) => {
            var _a;
            (_a = productType.attributes) === null || _a === void 0 ? void 0 : _a.forEach((attribute) => {
                if (!attribute.isSearchable) {
                    return;
                }
                filterFields.push(ProductMapper_ProductMapper.commercetoolsAttributeDefinitionToFilterField(attribute, locale));
            });
        });
        return filterFields;
    }
    static commercetoolsAttributeDefinitionToFilterField(commercetoolsAttributeDefinition, locale) {
        var _a, _b, _c, _d, _e, _f;
        let commercetoolsAttributeType = commercetoolsAttributeDefinition.type.name;
        let commercetoolsAttributeValues = ((_a = commercetoolsAttributeDefinition.type) === null || _a === void 0 ? void 0 : _a.hasOwnProperty('values'))
            ? commercetoolsAttributeDefinition.type.values
            : [];
        if (commercetoolsAttributeType === 'set' && ((_b = commercetoolsAttributeDefinition.type) === null || _b === void 0 ? void 0 : _b.hasOwnProperty('elementType'))) {
            const elementType = commercetoolsAttributeDefinition.type.elementType;
            commercetoolsAttributeType = elementType.name;
            commercetoolsAttributeValues = (elementType === null || elementType === void 0 ? void 0 : elementType.hasOwnProperty('values'))
                ? elementType.values
                : [];
        }
        const filterFieldValues = [];
        for (const value of commercetoolsAttributeValues) {
            filterFieldValues.push({
                value: value.key,
                name: (_d = (_c = value.label) === null || _c === void 0 ? void 0 : _c[locale.language]) !== null && _d !== void 0 ? _d : value.label,
            });
        }
        return {
            field: `variants.attributes.${commercetoolsAttributeDefinition.name}`,
            type: TypeMap.has(commercetoolsAttributeType)
                ? TypeMap.get(commercetoolsAttributeType)
                : commercetoolsAttributeType,
            label: (_f = (_e = commercetoolsAttributeDefinition.label) === null || _e === void 0 ? void 0 : _e[locale.language]) !== null && _f !== void 0 ? _f : commercetoolsAttributeDefinition.name,
            values: filterFieldValues.length > 0 ? filterFieldValues : undefined,
        };
    }
    static commercetoolsProductTypesToFacetDefinitions(commercetoolsProductTypes, locale) {
        const facetDefinitionsIndex = {};
        const facetDefinitions = [];
        commercetoolsProductTypes === null || commercetoolsProductTypes === void 0 ? void 0 : commercetoolsProductTypes.forEach((productType) => {
            var _a;
            (_a = productType.attributes) === null || _a === void 0 ? void 0 : _a.forEach((attribute) => {
                if (!attribute.isSearchable) {
                    return;
                }
                const facetDefinition = {
                    attributeType: attribute.type.name,
                    attributeId: `variants.attributes.${attribute.name}`,
                };
                facetDefinitionsIndex[facetDefinition.attributeId] = facetDefinition;
            });
        });
        for (const [attributeId, facetDefinition] of Object.entries(facetDefinitionsIndex)) {
            facetDefinitions.push(facetDefinition);
        }
        return facetDefinitions;
    }
    static facetDefinitionsToCommercetoolsQueryArgFacets(facetDefinitions, locale) {
        const queryArgFacets = [];
        facetDefinitions === null || facetDefinitions === void 0 ? void 0 : facetDefinitions.forEach((facetDefinition) => {
            let facet;
            switch (facetDefinition.attributeType) {
                case 'money':
                    facet = `${facetDefinition.attributeId}.centAmount:range (0 to *)`;
                    break;
                case 'enum':
                    facet = `${facetDefinition.attributeId}.label`;
                    break;
                case 'lenum':
                    facet = `${facetDefinition.attributeId}.label.${locale.language}`;
                    break;
                case 'ltext':
                    facet = `${facetDefinition.attributeId}.${locale.language}`;
                    break;
                case 'number':
                case 'boolean':
                case 'text':
                case 'reference':
                default:
                    facet = facetDefinition.attributeId;
                    break;
            }
            queryArgFacets.push(`${facet} as ${facetDefinition.attributeId}`);
        });
        return queryArgFacets;
    }
    static facetDefinitionsToFilterFacets(queryFacets, facetDefinitions, locale) {
        const filterFacets = [];
        const typeLookup = {};
        if (facetDefinitions.length === 0) {
            return filterFacets;
        }
        facetDefinitions.forEach((facetDefinition) => {
            typeLookup[facetDefinition.attributeId] = facetDefinition.attributeType;
        });
        queryFacets.forEach((queryFacet) => {
            if (!(typeLookup === null || typeLookup === void 0 ? void 0 : typeLookup.hasOwnProperty(queryFacet.identifier))) {
                return;
            }
            switch (typeLookup[queryFacet.identifier]) {
                case 'money':
                    filterFacets.push(`${queryFacet.identifier}.centAmount:range (${queryFacet.min} to ${queryFacet.max})`);
                    break;
                case 'enum':
                    filterFacets.push(`${queryFacet.identifier}.label:"${queryFacet.terms.join('","')}"`);
                    break;
                case 'lenum':
                    filterFacets.push(`${queryFacet.identifier}.label.${locale.language}:"${queryFacet.terms.join('","')}"`);
                    break;
                case 'ltext':
                    filterFacets.push(`${queryFacet.identifier}.${locale.language}:"${queryFacet.terms.join('","')}"`);
                    break;
                case 'number':
                case 'boolean':
                case 'text':
                case 'reference':
                default:
                    if (queryFacet.type === FilterTypes.TERM || queryFacet.type === FilterTypes.BOOLEAN) {
                        filterFacets.push(`${queryFacet.identifier}:"${queryFacet.terms.join('","')}"`);
                    }
                    else {
                        filterFacets.push(`${queryFacet.identifier}:range (${queryFacet.min} to ${queryFacet.max})`);
                    }
                    break;
            }
        });
        return filterFacets;
    }
    static commercetoolsFacetResultsToFacets(commercetoolsFacetResults, productQuery, locale) {
        const facets = [];
        for (const [facetKey, facetResult] of Object.entries(commercetoolsFacetResults)) {
            const facetQuery = this.findFacetQuery(productQuery, facetKey);
            switch (facetResult.type) {
                case 'range':
                    facets.push(ProductMapper_ProductMapper.commercetoolsRangeFacetResultToRangeFacet(facetKey, facetResult, facetQuery));
                    break;
                case 'terms':
                    if (facetResult.dataType === 'number') {
                        facets.push(ProductMapper_ProductMapper.commercetoolsTermNumberFacetResultToRangeFacet(facetKey, facetResult, facetQuery));
                        break;
                    }
                    facets.push(ProductMapper_ProductMapper.commercetoolsTermFacetResultToTermFacet(facetKey, facetResult, facetQuery));
                    break;
                case 'filter':
                default:
                    break;
            }
        }
        return facets;
    }
    static commercetoolsRangeFacetResultToRangeFacet(facetKey, facetResult, facetQuery) {
        const rangeFacet = {
            type: FacetTypes.RANGE,
            identifier: facetKey,
            label: facetKey,
            key: facetKey,
            min: facetResult.ranges[0].min,
            max: facetResult.ranges[0].max,
            selected: facetQuery !== undefined,
            minSelected: facetQuery ? facetQuery.min : undefined,
            maxSelected: facetQuery ? facetQuery.max : undefined,
        };
        return rangeFacet;
    }
    static commercetoolsTermFacetResultToTermFacet(facetKey, facetResult, facetQuery) {
        const termFacet = {
            type: FacetTypes.TERM,
            identifier: facetKey,
            label: facetKey,
            key: facetKey,
            selected: facetQuery !== undefined,
            terms: facetResult.terms.map((facetResultTerm) => {
                const term = {
                    identifier: facetResultTerm.term.toString(),
                    label: facetResultTerm.term.toString(),
                    count: facetResultTerm.count,
                    key: facetResultTerm.term.toString(),
                    selected: facetQuery !== undefined && facetQuery.terms.includes(facetResultTerm.term.toString()),
                };
                return term;
            }),
        };
        return termFacet;
    }
    static commercetoolsTermNumberFacetResultToRangeFacet(facetKey, facetResult, facetQuery) {
        var _a, _b;
        const rangeFacet = {
            type: FacetTypes.RANGE,
            identifier: facetKey,
            label: facetKey,
            key: facetKey,
            count: facetResult.total,
            min: (_a = Math.min(...facetResult.terms.map((facetResultTerm) => facetResultTerm.term))) !== null && _a !== void 0 ? _a : Number.MIN_SAFE_INTEGER,
            max: (_b = Math.max(...facetResult.terms.map((facetResultTerm) => facetResultTerm.term))) !== null && _b !== void 0 ? _b : Number.MAX_SAFE_INTEGER,
        };
        if (facetQuery) {
            rangeFacet.selected = true;
            rangeFacet.minSelected = facetQuery.min;
            rangeFacet.maxSelected = facetQuery.max;
        }
        return rangeFacet;
    }
    static commercetoolsAttributeGroupToString(body) {
        return body.attributes.map((attribute) => attribute.key);
    }
    static calculatePreviousCursor(offset, count) {
        return offset - count >= 0 ? `offset:${offset - count}` : undefined;
    }
    static calculateNextCursor(offset, count, total) {
        return offset + count < total ? `offset:${offset + count}` : undefined;
    }
    static findFacetQuery(productQuery, facetKey) {
        if (productQuery.facets !== undefined) {
            for (const facet of productQuery.facets) {
                if (facet.identifier === facetKey) {
                    return facet;
                }
            }
        }
        return undefined;
    }
}
ProductMapper_ProductMapper.commercetoolsProductProjectionToProduct = (commercetoolsProduct, locale) => {
    var _a, _b, _c, _d;
    const product = {
        productId: commercetoolsProduct.id,
        version: (_a = commercetoolsProduct === null || commercetoolsProduct === void 0 ? void 0 : commercetoolsProduct.version) === null || _a === void 0 ? void 0 : _a.toString(),
        name: (_b = commercetoolsProduct === null || commercetoolsProduct === void 0 ? void 0 : commercetoolsProduct.name) === null || _b === void 0 ? void 0 : _b[locale.language],
        slug: (_c = commercetoolsProduct === null || commercetoolsProduct === void 0 ? void 0 : commercetoolsProduct.slug) === null || _c === void 0 ? void 0 : _c[locale.language],
        description: (_d = commercetoolsProduct === null || commercetoolsProduct === void 0 ? void 0 : commercetoolsProduct.description) === null || _d === void 0 ? void 0 : _d[locale.language],
        categories: ProductMapper_ProductMapper.commercetoolsCategoryReferencesToCategories(commercetoolsProduct.categories, locale),
        variants: ProductMapper_ProductMapper.commercetoolsProductProjectionToVariants(commercetoolsProduct, locale),
    };
    product._url = ProductRouter_ProductRouter.generateUrlFor(product);
    return product;
};
ProductMapper_ProductMapper.commercetoolsProductProjectionToVariants = (commercetoolsProduct, locale) => {
    const variants = [];
    if (commercetoolsProduct === null || commercetoolsProduct === void 0 ? void 0 : commercetoolsProduct.masterVariant) {
        variants.push(ProductMapper_ProductMapper.commercetoolsProductVariantToVariant(commercetoolsProduct.masterVariant, locale));
    }
    for (let i = 0; i < commercetoolsProduct.variants.length; i++) {
        variants.push(ProductMapper_ProductMapper.commercetoolsProductVariantToVariant(commercetoolsProduct.variants[i], locale));
    }
    return variants;
};
ProductMapper_ProductMapper.commercetoolsProductVariantToVariant = (commercetoolsVariant, locale, productPrice) => {
    var _a, _b, _c;
    const attributes = ProductMapper_ProductMapper.commercetoolsAttributesToAttributes(commercetoolsVariant.attributes, locale);
    const { price, discountedPrice, discounts } = ProductMapper_ProductMapper.extractPriceAndDiscounts(commercetoolsVariant, locale);
    return {
        id: (_a = commercetoolsVariant.id) === null || _a === void 0 ? void 0 : _a.toString(),
        sku: (_b = commercetoolsVariant.sku) === null || _b === void 0 ? void 0 : _b.toString(),
        images: [
            ...commercetoolsVariant.assets.map((asset) => { var _a; return (_a = asset.sources) === null || _a === void 0 ? void 0 : _a[0].uri; }),
            ...commercetoolsVariant.images.map((image) => image.url),
        ],
        groupId: (attributes === null || attributes === void 0 ? void 0 : attributes.baseId) || undefined,
        attributes: attributes,
        price: price,
        discountedPrice: discountedPrice,
        discounts: discounts,
        availability: ProductMapper_ProductMapper.getPriceChannelAvailability(commercetoolsVariant, productPrice),
        isOnStock: ((_c = commercetoolsVariant.availability) === null || _c === void 0 ? void 0 : _c.isOnStock) || undefined,
    };
};
ProductMapper_ProductMapper.getPriceChannelAvailability = (variant, productPrice) => {
    var _a, _b, _c, _d, _e, _f, _g;
    let channelId = '';
    if (productPrice) {
        channelId = (_a = productPrice.channel) === null || _a === void 0 ? void 0 : _a.id;
    }
    else {
        channelId = ((_c = (_b = variant.scopedPrice) === null || _b === void 0 ? void 0 : _b.channel) === null || _c === void 0 ? void 0 : _c.id) || ((_e = (_d = variant.price) === null || _d === void 0 ? void 0 : _d.channel) === null || _e === void 0 ? void 0 : _e.id);
    }
    if (!channelId) {
        return variant.availability;
    }
    if (!((_g = (_f = variant.availability) === null || _f === void 0 ? void 0 : _f.channels) === null || _g === void 0 ? void 0 : _g[channelId])) {
        return variant.availability;
    }
    return variant.availability.channels[channelId];
};
ProductMapper_ProductMapper.commercetoolsAttributesToAttributes = (commercetoolsAttributes, locale) => {
    const attributes = {};
    commercetoolsAttributes === null || commercetoolsAttributes === void 0 ? void 0 : commercetoolsAttributes.forEach((commercetoolsAttribute) => {
        attributes[commercetoolsAttribute.name] = ProductMapper_ProductMapper.extractAttributeValue(commercetoolsAttribute.value, locale);
    });
    return attributes;
};
ProductMapper_ProductMapper.commercetoolsCategoryReferencesToCategories = (commercetoolsCategoryReferences, locale) => {
    const categories = [];
    commercetoolsCategoryReferences.forEach((commercetoolsCategory) => {
        let category = {
            categoryId: commercetoolsCategory.id,
        };
        if (commercetoolsCategory.obj) {
            category = ProductMapper_ProductMapper.commercetoolsCategoryToCategory(commercetoolsCategory.obj, locale);
        }
        categories.push(category);
    });
    categories.sort((a, b) => b.depth - a.depth);
    return categories;
};
ProductMapper_ProductMapper.commercetoolsCategoryToCategory = (commercetoolsCategory, locale) => {
    var _a, _b, _c, _d, _e;
    return {
        categoryId: commercetoolsCategory.id,
        ancestors: ((_a = commercetoolsCategory.ancestors) === null || _a === void 0 ? void 0 : _a.length) ? commercetoolsCategory.ancestors : undefined,
        name: (_c = (_b = commercetoolsCategory.name) === null || _b === void 0 ? void 0 : _b[locale.language]) !== null && _c !== void 0 ? _c : undefined,
        slug: (_e = (_d = commercetoolsCategory.slug) === null || _d === void 0 ? void 0 : _d[locale.language]) !== null && _e !== void 0 ? _e : undefined,
        depth: commercetoolsCategory.ancestors.length,
        path: commercetoolsCategory.ancestors.length > 0
            ? `/${commercetoolsCategory.ancestors
                .map((ancestor) => {
                return ancestor.id;
            })
                .join('/')}/${commercetoolsCategory.id}`
            : `/${commercetoolsCategory.id}`,
    };
};

// EXTERNAL MODULE: ./node_modules/@commercetools/platform-sdk/dist/commercetools-platform-sdk.esm.js
var commercetools_platform_sdk_esm = __webpack_require__(64);

// EXTERNAL MODULE: ./node_modules/@commercetools/sdk-client-v2/dist/commercetools-sdk-client-v2.esm.js
var commercetools_sdk_client_v2_esm = __webpack_require__(65);

// EXTERNAL MODULE: external "node-fetch"
var external_node_fetch_ = __webpack_require__(22);
var external_node_fetch_default = /*#__PURE__*/__webpack_require__.n(external_node_fetch_);

// CONCATENATED MODULE: ./commerce-commercetools/ClientFactory.ts


class ClientFactory {
}
ClientFactory.factor = (clientConfig, environment) => {
    const authMiddlewareOptions = {
        host: clientConfig.authUrl,
        projectKey: clientConfig.projectKey,
        credentials: {
            clientId: clientConfig.clientId,
            clientSecret: clientConfig.clientSecret,
        },
        fetch: external_node_fetch_default.a,
    };
    const httpMiddlewareOptions = {
        host: clientConfig.hostUrl,
        fetch: external_node_fetch_default.a,
    };
    let clientBuilder = new commercetools_sdk_client_v2_esm["ClientBuilder"]()
        .withClientCredentialsFlow(authMiddlewareOptions)
        .withHttpMiddleware(httpMiddlewareOptions);
    if (environment !== undefined && environment !== 'prod' && environment !== 'production') {
        clientBuilder = clientBuilder.withLoggerMiddleware();
    }
    return clientBuilder.build();
};

// CONCATENATED MODULE: ./commerce-commercetools/utils/GetConfig.ts
const getConfig = (project, engine, locale) => {
    var _a, _b, _c, _d, _e;
    if (!project.configuration[engine]) {
        throw `Configuration details are not available for ${engine}`;
    }
    return {
        authUrl: (_a = project.configuration) === null || _a === void 0 ? void 0 : _a[engine].authUrl,
        clientId: (_b = project.configuration) === null || _b === void 0 ? void 0 : _b[engine].clientId,
        clientSecret: (_c = project.configuration) === null || _c === void 0 ? void 0 : _c[engine].clientSecret,
        hostUrl: (_d = project.configuration) === null || _d === void 0 ? void 0 : _d[engine].hostUrl,
        projectKey: (_e = project.configuration) === null || _e === void 0 ? void 0 : _e[engine].projectKey,
    };
};

// CONCATENATED MODULE: ./commerce-commercetools/apis/BaseApi.ts



const localeRegex = /^(?<language>[a-z]{2,})(?:_(?<territory>[A-Z]{2,}))?(?:\.(?<codeset>[A-Z0-9_+-]+))?(?:@(?<modifier>[A-Za-z]+))?$/;
const languageToTerritory = {
    en: 'GB',
};
const modifierToCurrency = {
    euro: 'EUR',
};
const territoryToCurrency = {
    AD: 'EUR',
    AE: 'AED',
    AF: 'AFN',
    AG: 'XCD',
    AI: 'XCD',
    AL: 'ALL',
    AM: 'AMD',
    AN: 'ANG',
    AO: 'AOA',
    AQ: 'AQD',
    AR: 'ARS',
    AS: 'EUR',
    AT: 'EUR',
    AU: 'AUD',
    AW: 'ANG',
    AX: 'EUR',
    AZ: 'AZN',
    BA: 'BAM',
    BB: 'BBD',
    BD: 'BDT',
    BE: 'EUR',
    BF: 'XOF',
    BG: 'BGN',
    BH: 'BHD',
    BI: 'BIF',
    BJ: 'XOF',
    BL: 'EUR',
    BM: 'BMD',
    BN: 'BND',
    BO: 'BOB',
    BR: 'BRL',
    BS: 'BSD',
    BT: 'INR',
    BV: 'NOK',
    BW: 'BWP',
    BY: 'BYR',
    BZ: 'BZD',
    CA: 'CAD',
    CC: 'AUD',
    CD: 'CDF',
    CF: 'XAF',
    CG: 'XAF',
    CH: 'CHF',
    CI: 'XOF',
    CK: 'NZD',
    CL: 'CLP',
    CM: 'XAF',
    CN: 'CNY',
    CO: 'COP',
    CR: 'CRC',
    CU: 'CUP',
    CV: 'CVE',
    CX: 'AUD',
    CY: 'CYP',
    CZ: 'CZK',
    DE: 'EUR',
    DJ: 'DJF',
    DK: 'DKK',
    DM: 'XCD',
    DO: 'DOP',
    DZ: 'DZD',
    EC: 'ECS',
    EE: 'EEK',
    EG: 'EGP',
    EH: 'MAD',
    ER: 'ETB',
    ES: 'EUR',
    ET: 'ETB',
    FI: 'EUR',
    FJ: 'FJD',
    FK: 'FKP',
    FM: 'USD',
    FO: 'DKK',
    FR: 'EUR',
    GA: 'XAF',
    GB: 'GBP',
    GD: 'XCD',
    GE: 'GEL',
    GF: 'EUR',
    GG: 'GGP',
    GH: 'GHS',
    GI: 'GIP',
    GL: 'DKK',
    GM: 'GMD',
    GN: 'GNF',
    GP: 'EUR',
    GQ: 'XAF',
    GR: 'EUR',
    GS: 'GBP',
    GT: 'GTQ',
    GU: 'USD',
    GW: 'XOF',
    GY: 'GYD',
    HK: 'HKD',
    HM: 'AUD',
    HN: 'HNL',
    HR: 'HRK',
    HT: 'HTG',
    HU: 'HUF',
    ID: 'IDR',
    IE: 'EUR',
    IL: 'ILS',
    IM: 'GBP',
    IN: 'INR',
    IO: 'USD',
    IQ: 'IQD',
    IR: 'IRR',
    IS: 'ISK',
    IT: 'EUR',
    JE: 'GBP',
    JM: 'JMD',
    JO: 'JOD',
    JP: 'JPY',
    KE: 'KES',
    KG: 'KGS',
    KH: 'KHR',
    KI: 'AUD',
    KM: 'KMF',
    KN: 'XCD',
    KP: 'KPW',
    KR: 'KRW',
    KW: 'KWD',
    KY: 'KYD',
    KZ: 'KZT',
    LA: 'LAK',
    LB: 'LBP',
    LC: 'XCD',
    LI: 'CHF',
    LK: 'LKR',
    LR: 'LRD',
    LS: 'LSL',
    LT: 'LTL',
    LU: 'EUR',
    LV: 'LVL',
    LY: 'LYD',
    MA: 'MAD',
    MC: 'EUR',
    MD: 'MDL',
    ME: 'EUR',
    MF: 'ANG',
    MG: 'MGA',
    MH: 'USD',
    MK: 'MKD',
    ML: 'XOF',
    MM: 'MMK',
    MN: 'MNT',
    MO: 'MOP',
    MP: 'USD',
    MQ: 'EUR',
    MR: 'MRO',
    MS: 'XCD',
    MT: 'MTL',
    MU: 'MUR',
    MV: 'MVR',
    MW: 'MWK',
    MX: 'MXN',
    MY: 'MYR',
    MZ: 'MZN',
    NA: 'NAD',
    NC: 'XPF',
    NE: 'XOF',
    NF: 'AUD',
    NG: 'NGN',
    NI: 'NIO',
    NL: 'EUR',
    NO: 'NOK',
    NP: 'NPR',
    NR: 'AUD',
    NU: 'NZD',
    NZ: 'NZD',
    OM: 'OMR',
    PA: 'PAB',
    PE: 'PEN',
    PF: 'XPF',
    PG: 'PGK',
    PH: 'PHP',
    PK: 'PKR',
    PL: 'PLN',
    PM: 'EUR',
    PN: 'NZD',
    PR: 'USD',
    PS: 'JOD',
    PT: 'EUR',
    PW: 'USD',
    PY: 'PYG',
    QA: 'QAR',
    RE: 'EUR',
    RO: 'RON',
    RS: 'RSD',
    RU: 'RUB',
    RW: 'RWF',
    SA: 'SAR',
    SB: 'SBD',
    SC: 'SCR',
    SD: 'SDG',
    SE: 'SEK',
    SG: 'SGD',
    SH: 'GBP',
    SI: 'EUR',
    SJ: 'NOK',
    SK: 'SKK',
    SL: 'SLL',
    SM: 'EUR',
    SN: 'XOF',
    SO: 'SOS',
    SR: 'SRD',
    ST: 'STD',
    SV: 'SVC',
    SY: 'SYP',
    SZ: 'SZL',
    TC: 'USD',
    TD: 'XAF',
    TF: 'EUR',
    TG: 'XOF',
    TH: 'THB',
    TJ: 'TJS',
    TK: 'NZD',
    TM: 'TMT',
    TN: 'TND',
    TO: 'TOP',
    TP: 'IDR',
    TR: 'TRY',
    TT: 'TTD',
    TV: 'AUD',
    TW: 'TWD',
    TZ: 'TZS',
    UA: 'UAH',
    UG: 'UGX',
    UM: 'USD',
    USAF: 'USD',
    US: 'USD',
    UY: 'UYU',
    UZ: 'UZS',
    VA: 'EUR',
    VC: 'XCD',
    VE: 'VEF',
    VG: 'USD',
    VI: 'USD',
    VN: 'VND',
    VU: 'VUV',
    WF: 'XPF',
    WS: 'EUR',
    YE: 'YER',
    YT: 'EUR',
    ZA: 'ZAR',
    ZM: 'ZMK',
    ZW: 'ZWD',
};
const parseLocale = (locale) => {
    const matches = locale.match(localeRegex);
    if (matches === null) {
        throw new Error(`Invalid locale: ${locale}`);
    }
    const language = matches.groups.language;
    let territory = matches.groups.territory;
    if (territory === undefined) {
        if (language in languageToTerritory) {
            territory = languageToTerritory[language];
        }
        else {
            territory = language.toUpperCase();
        }
    }
    let currency = undefined;
    const modifier = matches.groups.modifier;
    if (modifier !== undefined) {
        if (modifier in modifierToCurrency) {
            currency = modifierToCurrency[modifier];
        }
        else {
            const foundCurrency = Object.values(territoryToCurrency).find((currency) => currency === modifier.toUpperCase());
            if (foundCurrency !== undefined) {
                currency = foundCurrency;
            }
        }
    }
    if (currency === undefined) {
        if (territory in territoryToCurrency) {
            currency = territoryToCurrency[territory];
        }
        else {
            currency = 'EUR';
        }
    }
    return {
        language,
        territory,
        currency,
    };
};
const projectCacheTtlMilliseconds = 10 * 60 * 1000;
const projectCache = {};
const productTypesCache = {};
const pickCandidate = (candidates, availableOptions) => {
    for (const candidate of candidates) {
        const found = availableOptions.find((option) => option.toLowerCase() === candidate.toLowerCase());
        if (found !== undefined) {
            return found;
        }
    }
    return undefined;
};
const pickCommercetoolsLanguage = (parsedLocale, availableLanguages) => {
    const candidates = [`${parsedLocale.language}-${parsedLocale.territory}`, parsedLocale.language];
    const foundCandidate = pickCandidate(candidates, availableLanguages);
    if (foundCandidate !== undefined) {
        return foundCandidate;
    }
    const prefix = `${parsedLocale.language.toLowerCase()}-`;
    const foundPrefix = availableLanguages.find((option) => option.toLowerCase().startsWith(prefix));
    if (foundPrefix !== undefined) {
        return foundPrefix;
    }
    return availableLanguages[0];
};
const pickCommercetoolsCountry = (parsedLocale, language, availableCountries) => {
    const candidates = [parsedLocale.territory, parsedLocale.language, language];
    const foundCandidate = pickCandidate(candidates, availableCountries);
    if (foundCandidate !== undefined) {
        return foundCandidate;
    }
    return availableCountries[0];
};
const pickCommercetoolsCurrency = (parsedLocale, availableCurrencies) => {
    const candidates = [
        parsedLocale.currency,
        parseLocale(`${parsedLocale.language}_${parsedLocale.territory}`).currency,
    ];
    const foundCandidate = pickCandidate(candidates, availableCurrencies);
    if (foundCandidate !== undefined) {
        return foundCandidate;
    }
    return availableCurrencies[0];
};
class BaseApi_BaseApi {
    constructor(frontasticContext, locale) {
        const engine = 'commercetools';
        const clientSettings = getConfig(frontasticContext.project, engine, locale);
        const client = ClientFactory.factor(clientSettings, frontasticContext.environment);
        this.apiRoot = Object(commercetools_platform_sdk_esm["createApiBuilderFromCtpClient"])(client);
        this.projectKey = clientSettings.projectKey;
        this.locale = locale;
        this.frontasticContext = frontasticContext;
    }
    getApiForProject() {
        return this.apiRoot.withProjectKey({ projectKey: this.projectKey });
    }
    async getCommercetoolsLocal() {
        const parsedLocale = parseLocale(this.locale);
        const project = await this.getProject();
        const language = pickCommercetoolsLanguage(parsedLocale, project.languages);
        const country = pickCommercetoolsCountry(parsedLocale, language, project.countries);
        const currency = pickCommercetoolsCurrency(parsedLocale, project.currencies);
        return Promise.resolve({
            language,
            country,
            currency,
        });
    }
    async getProductTypes() {
        const now = new Date();
        if (this.projectKey in productTypesCache) {
            const cacheEntry = productTypesCache[this.projectKey];
            if (cacheEntry.expiryTime < now) {
                return cacheEntry.productTypes;
            }
        }
        const response = await this.getApiForProject().productTypes().get().execute();
        const productTypes = response.body.results;
        productTypesCache[this.projectKey] = {
            productTypes,
            expiryTime: new Date(now.getMilliseconds() + projectCacheTtlMilliseconds),
        };
        return productTypes;
    }
    async getProject() {
        const now = new Date();
        if (this.projectKey in projectCache) {
            const cacheEntry = projectCache[this.projectKey];
            if (cacheEntry.expiryTime < now) {
                return cacheEntry.project;
            }
        }
        const response = await this.getApiForProject().get().execute();
        const project = response.body;
        projectCache[this.projectKey] = {
            project,
            expiryTime: new Date(now.getMilliseconds() + projectCacheTtlMilliseconds),
        };
        return project;
    }
}

// CONCATENATED MODULE: ./commerce-commercetools/apis/ProductApi.ts




class ProductApi_ProductApi extends BaseApi_BaseApi {
    constructor() {
        super(...arguments);
        this.getOffsetFromCursor = (cursor) => {
            if (cursor === undefined) {
                return undefined;
            }
            const offsetMach = cursor.match(/(?<=offset:).+/);
            return offsetMach !== null ? +Object.values(offsetMach)[0] : undefined;
        };
        this.query = async (productQuery, additionalQueryArgs, additionalFacets = []) => {
            try {
                const locale = await this.getCommercetoolsLocal();
                const limit = +productQuery.limit || 24;
                const filterQuery = [];
                const filterFacets = [];
                const sortAttributes = [];
                const facetDefinitions = [
                    ...ProductMapper_ProductMapper.commercetoolsProductTypesToFacetDefinitions(await this.getProductTypes(), locale),
                    ...additionalFacets,
                    {
                        attributeId: 'variants.scopedPrice.value',
                        attributeType: 'money',
                    },
                    {
                        attributeId: 'variants.price',
                        attributeType: 'money',
                    },
                ];
                const queryArgFacets = ProductMapper_ProductMapper.facetDefinitionsToCommercetoolsQueryArgFacets(facetDefinitions, locale);
                if (productQuery.productIds !== undefined && productQuery.productIds.length !== 0) {
                    filterQuery.push(`id:"${productQuery.productIds.join('","')}"`);
                }
                if (productQuery.skus !== undefined && productQuery.skus.length !== 0) {
                    filterQuery.push(`variants.sku:"${productQuery.skus.join('","')}"`);
                }
                if (productQuery.category !== undefined && productQuery.category !== '') {
                    filterQuery.push(`categories.id:subtree("${productQuery.category}")`);
                }
                if (productQuery.filters !== undefined) {
                    productQuery.filters.forEach((filter) => {
                        var _a, _b, _c;
                        switch (filter.type) {
                            case FilterTypes.TERM:
                                filterQuery.push(`${filter.identifier}.key:"${filter.terms.join('","')}"`);
                                break;
                            case FilterTypes.BOOLEAN:
                                filterQuery.push(`${filter.identifier}:${((_a = filter.terms[0]) === null || _a === void 0 ? void 0 : _a.toString().toLowerCase()) === 'true'}`);
                                break;
                            case FilterTypes.RANGE:
                                if (filter.identifier === 'price') {
                                    filterQuery.push(`variants.scopedPrice.value.centAmount:range (${(_b = filter.min) !== null && _b !== void 0 ? _b : '*'} to ${(_c = filter.max) !== null && _c !== void 0 ? _c : '*'})`);
                                }
                                break;
                        }
                    });
                }
                if (productQuery.facets !== undefined) {
                    filterFacets.push(...ProductMapper_ProductMapper.facetDefinitionsToFilterFacets(productQuery.facets, facetDefinitions, locale));
                }
                if (productQuery.sortAttributes !== undefined) {
                    Object.keys(productQuery.sortAttributes).map((field, directionIndex) => {
                        sortAttributes.push(`${field} ${Object.values(productQuery.sortAttributes)[directionIndex]}`);
                    });
                }
                else {
                    sortAttributes.push(`variants.attributes.salesRank asc`);
                }
                const methodArgs = {
                    queryArgs: {
                        sort: sortAttributes,
                        limit: limit,
                        offset: this.getOffsetFromCursor(productQuery.cursor),
                        priceCurrency: locale.currency,
                        priceCountry: locale.country,
                        facet: queryArgFacets.length > 0 ? queryArgFacets : undefined,
                        filter: filterFacets.length > 0 ? filterFacets : undefined,
                        expand: 'categories[*]',
                        'filter.facets': filterFacets.length > 0 ? filterFacets : undefined,
                        'filter.query': filterQuery.length > 0 ? filterQuery : undefined,
                        [`text.${locale.language}`]: productQuery.query,
                        ...additionalQueryArgs,
                    },
                };
                return await this.getApiForProject()
                    .productProjections()
                    .search()
                    .get(methodArgs)
                    .execute()
                    .then((response) => {
                    const items = response.body.results.map((product) => ProductMapper_ProductMapper.commercetoolsProductProjectionToProduct(product, locale));
                    const result = {
                        total: response.body.total,
                        items: items,
                        count: response.body.count,
                        facets: ProductMapper_ProductMapper.commercetoolsFacetResultsToFacets(response.body.facets, productQuery, locale),
                        previousCursor: ProductMapper_ProductMapper.calculatePreviousCursor(response.body.offset, response.body.count),
                        nextCursor: ProductMapper_ProductMapper.calculateNextCursor(response.body.offset, response.body.count, response.body.total),
                        query: productQuery,
                    };
                    return result;
                })
                    .catch((error) => {
                    throw error;
                });
            }
            catch (error) {
                throw new Error(`query failed. ${error}`);
            }
        };
        this.getProduct = async (productQuery, additionalQueryArgs) => {
            try {
                const result = await this.query(productQuery, additionalQueryArgs);
                return result.items.shift();
            }
            catch (error) {
                throw new Error(`getProduct failed. ${error}`);
            }
        };
        this.getSearchableAttributes = async () => {
            try {
                const locale = await this.getCommercetoolsLocal();
                const response = await this.getApiForProject().productTypes().get().execute();
                const filterFields = ProductMapper_ProductMapper.commercetoolsProductTypesToFilterFields(response.body.results, locale);
                filterFields.push({
                    field: 'categoryId',
                    type: FilterFieldTypes.ENUM,
                    label: 'Category ID',
                    values: await this.queryCategories({ limit: 250 }).then((result) => {
                        return result.items.map((item) => {
                            return {
                                value: item.categoryId,
                                name: item.name,
                            };
                        });
                    }),
                });
                return filterFields;
            }
            catch (error) {
                throw new Error(`getSearchableAttributes failed. ${error}`);
            }
        };
        this.getAttributeGroup = async (key) => {
            try {
                const { body } = await this.getApiForProject().attributeGroups().withKey({ key }).get().execute();
                return ProductMapper_ProductMapper.commercetoolsAttributeGroupToString(body);
            }
            catch (error) {
                throw new Error(`get attributeGroup failed. ${error}`);
            }
        };
        this.getNavigationCategories = async () => {
            const { items } = await this.queryCategories({ limit: 500 });
            const categories = items.filter((item) => { var _a; return !((_a = item.ancestors) === null || _a === void 0 ? void 0 : _a.length); });
            const subCategories = items
                .filter((item) => { var _a; return !!((_a = item.ancestors) === null || _a === void 0 ? void 0 : _a.length); })
                .sort((a, b) => b.depth - a.depth);
            while (subCategories.length) {
                const [currentSubCategory] = subCategories.splice(0, 1);
                const lastAncestor = currentSubCategory.ancestors[currentSubCategory.ancestors.length - 1];
                const subCategoryIdx = subCategories.findIndex((item) => item.categoryId === lastAncestor.id);
                if (subCategoryIdx !== -1) {
                    subCategories[subCategoryIdx].children = [
                        ...(subCategories[subCategoryIdx].children || []),
                        currentSubCategory,
                    ];
                }
                else {
                    const categoryIdx = categories.findIndex((item) => item.categoryId === lastAncestor.id);
                    if (categoryIdx !== -1) {
                        categories[categoryIdx].children = [...(categories[categoryIdx].children || []), currentSubCategory];
                    }
                }
            }
            return categories;
        };
        this.queryCategories = async (categoryQuery) => {
            try {
                const locale = await this.getCommercetoolsLocal();
                const limit = +categoryQuery.limit || 24;
                const where = [];
                if (categoryQuery.slug) {
                    where.push(`slug(${locale.language}="${categoryQuery.slug}")`);
                }
                if (categoryQuery.parentId) {
                    where.push(`parent(id="${categoryQuery.parentId}")`);
                }
                const methodArgs = {
                    queryArgs: {
                        limit: limit,
                        offset: this.getOffsetFromCursor(categoryQuery.cursor),
                        where: where.length > 0 ? where : undefined,
                    },
                };
                return await this.getApiForProject()
                    .categories()
                    .get(methodArgs)
                    .execute()
                    .then((response) => {
                    const items = response.body.results.map((category) => ProductMapper_ProductMapper.commercetoolsCategoryToCategory(category, locale));
                    const result = {
                        total: response.body.total,
                        items: items,
                        count: response.body.count,
                        previousCursor: ProductMapper_ProductMapper.calculatePreviousCursor(response.body.offset, response.body.count),
                        nextCursor: ProductMapper_ProductMapper.calculateNextCursor(response.body.offset, response.body.count, response.body.total),
                        query: categoryQuery,
                    };
                    return result;
                })
                    .catch((error) => {
                    throw error;
                });
            }
            catch (error) {
                throw new Error(`queryCategories failed. ${error}`);
            }
        };
    }
}

// CONCATENATED MODULE: ./commerce-commercetools/utils/ProductRouter.ts
var ProductRouter_a;


class ProductRouter_ProductRouter {
    static isProduct(product) {
        return product.productId !== undefined;
    }
    static generateUrlFor(item) {
        if (ProductRouter_ProductRouter.isProduct(item)) {
            return `/${item.slug}/p/${item.variants[0].sku}`;
        }
        return `/slug/p/${item.variant.sku}`;
    }
    static identifyFrom(request) {
        var _b;
        if ((_b = getPath(request)) === null || _b === void 0 ? void 0 : _b.match(/\/p\/([^\/]+)/)) {
            return true;
        }
        return false;
    }
    static identifyPreviewFrom(request) {
        var _b;
        if ((_b = getPath(request)) === null || _b === void 0 ? void 0 : _b.match(/\/preview\/.+\/p\/([^\/]+)/)) {
            return true;
        }
        return false;
    }
}
ProductRouter_a = ProductRouter_ProductRouter;
ProductRouter_ProductRouter.loadFor = async (request, frontasticContext) => {
    var _b, _c, _d, _e, _f;
    const productApi = new ProductApi_ProductApi(frontasticContext, getLocale(request));
    const urlMatches = (_b = getPath(request)) === null || _b === void 0 ? void 0 : _b.match(/\/p\/([^\/]+)/);
    if (urlMatches) {
        const productQuery = {
            skus: [urlMatches[1]],
        };
        const additionalQueryArgs = {};
        const distributionChannelId = ((_c = request.query) === null || _c === void 0 ? void 0 : _c['distributionChannelId']) || ((_f = (_e = (_d = request.sessionData) === null || _d === void 0 ? void 0 : _d.organization) === null || _e === void 0 ? void 0 : _e.distributionChannel) === null || _f === void 0 ? void 0 : _f.id);
        if (distributionChannelId) {
            additionalQueryArgs.priceChannel = distributionChannelId;
        }
        return productApi.getProduct(productQuery, additionalQueryArgs);
    }
    return null;
};
ProductRouter_ProductRouter.loadPreviewFor = async (request, frontasticContext) => {
    var _b, _c, _d, _e, _f;
    const productApi = new ProductApi_ProductApi(frontasticContext, getLocale(request));
    const urlMatches = (_b = getPath(request)) === null || _b === void 0 ? void 0 : _b.match(/\/preview\/.+\/p\/([^\/]+)/);
    if (urlMatches) {
        const productQuery = {
            skus: [urlMatches[1]],
        };
        const additionalQueryArgs = { staged: true };
        const distributionChannelId = ((_c = request.query) === null || _c === void 0 ? void 0 : _c['distributionChannelId']) || ((_f = (_e = (_d = request.sessionData) === null || _d === void 0 ? void 0 : _d.organization) === null || _e === void 0 ? void 0 : _e.distributionChannel) === null || _f === void 0 ? void 0 : _f.id);
        if (distributionChannelId) {
            additionalQueryArgs.priceChannel = distributionChannelId;
        }
        return productApi.getProduct(productQuery, additionalQueryArgs);
    }
    return null;
};

// CONCATENATED MODULE: ./types/query/ProductQuery.ts
var SortOrder;
(function (SortOrder) {
    SortOrder["ASCENDING"] = "ascending";
    SortOrder["DESCENDING"] = "descending";
})(SortOrder || (SortOrder = {}));

// CONCATENATED MODULE: ./commerce-commercetools/utils/ProductQueryFactory.ts



class ProductQueryFactory_ProductQueryFactory {
    static queryParamsToFacets(queryParams) {
        const facets = [];
        let key;
        let facetData;
        for ([key, facetData] of Object.entries(queryParams.facets)) {
            if ((facetData === null || facetData === void 0 ? void 0 : facetData.terms) && !Array.isArray(facetData.terms)) {
                facetData.terms = Object.values(facetData.terms);
            }
            switch (true) {
                case facetData.min !== undefined && facetData.max !== undefined:
                    facets.push({
                        type: FilterTypes.RANGE,
                        identifier: key,
                        min: +facetData.min,
                        max: +facetData.max,
                    });
                    break;
                case facetData.terms !== undefined:
                    facets.push({
                        type: FilterTypes.TERM,
                        identifier: key,
                        terms: facetData.terms.map((facetValueData) => facetValueData),
                    });
                    break;
                case facetData.boolean !== undefined:
                    facets.push({
                        type: FilterTypes.BOOLEAN,
                        identifier: key,
                        terms: [facetData.boolean],
                    });
                    break;
                default:
                    break;
            }
        }
        return facets;
    }
    static mergeProductFiltersAndValues(queryParams) {
        var _a, _b;
        const filtersData = [];
        if (((_a = queryParams === null || queryParams === void 0 ? void 0 : queryParams.productFilters) === null || _a === void 0 ? void 0 : _a.filters) === undefined) {
            return filtersData;
        }
        if (((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.productFilters) === null || _b === void 0 ? void 0 : _b.values) === undefined) {
            return queryParams.productFilters.filters;
        }
        queryParams.productFilters.filters.forEach((filter) => {
            var _a;
            if (filter === null || filter === void 0 ? void 0 : filter.field) {
                const filterValues = [(_a = queryParams.productFilters) === null || _a === void 0 ? void 0 : _a.values[filter.field]] || false;
                const filterData = {
                    ...filter,
                    values: filterValues,
                };
                filtersData.push(filterData);
            }
        });
        return filtersData;
    }
    static mergeCategoryFiltersAndValues(queryParams) {
        var _a, _b;
        const filtersData = [];
        if (((_a = queryParams === null || queryParams === void 0 ? void 0 : queryParams.categoryFilters) === null || _a === void 0 ? void 0 : _a.filters) === undefined) {
            return filtersData;
        }
        if (((_b = queryParams === null || queryParams === void 0 ? void 0 : queryParams.categoryFilters) === null || _b === void 0 ? void 0 : _b.values) === undefined) {
            return queryParams.categoryFilters.filters;
        }
        queryParams.categoryFilters.filters.forEach((filter) => {
            if (filter === null || filter === void 0 ? void 0 : filter.field) {
                const filterValues = [queryParams.categoryFilters.values[filter.field]] || false;
                const filterData = {
                    ...filter,
                    values: filterValues,
                };
                filtersData.push(filterData);
            }
        });
        return filtersData;
    }
}
ProductQueryFactory_ProductQueryFactory.queryFromParams = (request, config) => {
    var _a, _b, _c, _d;
    let queryParams;
    const filters = [];
    const productQuery = {
        productIds: [],
        skus: [],
    };
    const productIds = (_b = (_a = config === null || config === void 0 ? void 0 : config.configuration) === null || _a === void 0 ? void 0 : _a.productIds) === null || _b === void 0 ? void 0 : _b.split(',').map((val) => val.trim());
    const productSkus = (_d = (_c = config === null || config === void 0 ? void 0 : config.configuration) === null || _c === void 0 ? void 0 : _c.productSkus) === null || _d === void 0 ? void 0 : _d.split(',').map((val) => val.trim());
    if (request === null || request === void 0 ? void 0 : request.query) {
        queryParams = request.query;
    }
    if (config === null || config === void 0 ? void 0 : config.configuration) {
        queryParams = {
            ...queryParams,
            ...config.configuration,
        };
    }
    if (productSkus && productSkus.length > 0)
        queryParams.skus = productSkus;
    if (productIds && productIds.length > 0)
        queryParams.productIds = productIds;
    productQuery.query = (queryParams === null || queryParams === void 0 ? void 0 : queryParams.query) || undefined;
    productQuery.category = (queryParams === null || queryParams === void 0 ? void 0 : queryParams.category) || undefined;
    if ((queryParams === null || queryParams === void 0 ? void 0 : queryParams.productIds) && Array.isArray(queryParams === null || queryParams === void 0 ? void 0 : queryParams.productIds)) {
        queryParams === null || queryParams === void 0 ? void 0 : queryParams.productIds.map((productId) => {
            productQuery.productIds.push(productId.toString());
        });
    }
    if ((queryParams === null || queryParams === void 0 ? void 0 : queryParams.skus) && Array.isArray(queryParams === null || queryParams === void 0 ? void 0 : queryParams.skus)) {
        queryParams === null || queryParams === void 0 ? void 0 : queryParams.skus.map((sku) => {
            productQuery.skus.push(sku.toString());
        });
    }
    const configFiltersData = [];
    configFiltersData.push(...ProductQueryFactory_ProductQueryFactory.mergeProductFiltersAndValues(queryParams));
    configFiltersData.push(...ProductQueryFactory_ProductQueryFactory.mergeCategoryFiltersAndValues(queryParams));
    let key;
    let configFilterData;
    if (configFiltersData instanceof Array) {
        for ([key, configFilterData] of Object.entries(configFiltersData)) {
            if ((configFilterData === null || configFilterData === void 0 ? void 0 : configFilterData.field) === 'categoryId') {
                productQuery.category = configFilterData.values[0];
                continue;
            }
            switch (configFilterData.type) {
                case FilterFieldTypes.NUMBER:
                    const rangeFilter = {
                        identifier: configFilterData === null || configFilterData === void 0 ? void 0 : configFilterData.field,
                        type: FilterTypes.RANGE,
                        min: +(configFilterData === null || configFilterData === void 0 ? void 0 : configFilterData.min) || undefined,
                        max: +(configFilterData === null || configFilterData === void 0 ? void 0 : configFilterData.max) || undefined,
                    };
                    filters.push(rangeFilter);
                    break;
                case FilterFieldTypes.ENUM:
                    const enumFilter = {
                        identifier: configFilterData === null || configFilterData === void 0 ? void 0 : configFilterData.field,
                        type: FilterTypes.TERM,
                        terms: configFilterData === null || configFilterData === void 0 ? void 0 : configFilterData.values.map((term) => term),
                    };
                    filters.push(enumFilter);
                    break;
                case FilterFieldTypes.BOOLEAN:
                    const booleanFilter = {
                        identifier: configFilterData === null || configFilterData === void 0 ? void 0 : configFilterData.field,
                        type: FilterTypes.BOOLEAN,
                        terms: [configFilterData === null || configFilterData === void 0 ? void 0 : configFilterData.values[0]],
                    };
                    filters.push(booleanFilter);
                    break;
                default:
                    break;
            }
        }
        productQuery.filters = filters;
    }
    if (queryParams.facets) {
        productQuery.facets = ProductQueryFactory_ProductQueryFactory.queryParamsToFacets(queryParams);
    }
    if (queryParams.sortAttributes) {
        const sortAttributes = {};
        let sortAttribute;
        for (sortAttribute of Object.values(queryParams.sortAttributes)) {
            const key = Object.keys(sortAttribute)[0];
            sortAttributes[key] = sortAttribute[key] ? sortAttribute[key] : SortOrder.ASCENDING;
        }
        productQuery.sortAttributes = sortAttributes;
    }
    productQuery.limit = (queryParams === null || queryParams === void 0 ? void 0 : queryParams.limit) || undefined;
    productQuery.cursor = (queryParams === null || queryParams === void 0 ? void 0 : queryParams.cursor) || undefined;
    return productQuery;
};

// CONCATENATED MODULE: ./commerce-commercetools/utils/SearchRouter.ts
var SearchRouter_a;



class SearchRouter_SearchRouter {
    static identifyFrom(request) {
        var _b;
        const urlMatches = (_b = getPath(request)) === null || _b === void 0 ? void 0 : _b.match(/^\/search/);
        if (urlMatches) {
            return true;
        }
        return false;
    }
}
SearchRouter_a = SearchRouter_SearchRouter;
SearchRouter_SearchRouter.loadFor = async (request, frontasticContext) => {
    var _b, _c, _d, _e, _f;
    const productApi = new ProductApi_ProductApi(frontasticContext, getLocale(request));
    const urlMatches = (_b = getPath(request)) === null || _b === void 0 ? void 0 : _b.match(/\/search/);
    const additionalQueryArgs = {};
    const additionalFacets = [
        {
            attributeId: 'categories.id',
        },
    ];
    const distributionChannelId = ((_c = request.query) === null || _c === void 0 ? void 0 : _c['distributionChannelId']) || ((_f = (_e = (_d = request.sessionData) === null || _d === void 0 ? void 0 : _d.organization) === null || _e === void 0 ? void 0 : _e.distributionChannel) === null || _f === void 0 ? void 0 : _f.id);
    if (distributionChannelId) {
        additionalQueryArgs.priceChannel = distributionChannelId;
        additionalFacets.push({
            attributeId: `variants.availability.availableQuantity`,
        });
    }
    if (urlMatches) {
        const productQuery = ProductQueryFactory_ProductQueryFactory.queryFromParams({
            ...request,
            query: { ...request.query, query: request.query.query || request.query.q },
        });
        return productApi.query(productQuery, additionalQueryArgs, additionalFacets);
    }
    return null;
};

// CONCATENATED MODULE: ./commerce-commercetools/utils/CategoryRouter.ts
var CategoryRouter_a;



class CategoryRouter_CategoryRouter {
    static identifyPreviewFrom(request) {
        var _b;
        if ((_b = getPath(request)) === null || _b === void 0 ? void 0 : _b.match(/\/preview\/(.+)/)) {
            return true;
        }
        return false;
    }
    static identifyFrom(request) {
        var _b;
        if ((_b = getPath(request)) === null || _b === void 0 ? void 0 : _b.match(/.+/)) {
            return true;
        }
        return false;
    }
}
CategoryRouter_a = CategoryRouter_CategoryRouter;
CategoryRouter_CategoryRouter.loadFor = async (request, frontasticContext) => {
    var _b, _c, _d, _e, _f;
    const productApi = new ProductApi_ProductApi(frontasticContext, getLocale(request));
    const urlMatches = (_b = getPath(request)) === null || _b === void 0 ? void 0 : _b.match(/[^\/]+/);
    if (urlMatches) {
        const categoryQuery = {
            slug: urlMatches[0],
        };
        const categoryQueryResult = await productApi.queryCategories(categoryQuery);
        if (categoryQueryResult.items.length == 0)
            return null;
        request.query.category = categoryQueryResult.items[0].categoryId;
        const productQuery = ProductQueryFactory_ProductQueryFactory.queryFromParams({
            ...request,
        });
        const additionalQueryArgs = {};
        const distributionChannelId = ((_c = request.query) === null || _c === void 0 ? void 0 : _c['distributionChannelId']) || ((_f = (_e = (_d = request.sessionData) === null || _d === void 0 ? void 0 : _d.organization) === null || _e === void 0 ? void 0 : _e.distributionChannel) === null || _f === void 0 ? void 0 : _f.id);
        const additionalFacets = [
            {
                attributeId: 'categories.id',
            },
        ];
        if (distributionChannelId) {
            additionalQueryArgs.priceChannel = distributionChannelId;
            additionalFacets.push({
                attributeId: `variants.availability.availableQuantity`,
            });
        }
        return await productApi.query(productQuery, additionalQueryArgs, additionalFacets);
    }
    return null;
};
CategoryRouter_CategoryRouter.loadPreviewFor = async (request, frontasticContext) => {
    var _b, _c, _d, _e, _f;
    const productApi = new ProductApi_ProductApi(frontasticContext, getLocale(request));
    const urlMatches = (_b = getPath(request)) === null || _b === void 0 ? void 0 : _b.match(/\/preview\/(.+)/);
    if (urlMatches) {
        const categoryQuery = {
            slug: urlMatches[1],
        };
        const categoryQueryResult = await productApi.queryCategories(categoryQuery);
        if (categoryQueryResult.items.length == 0)
            return null;
        request.query.category = categoryQueryResult.items[0].categoryId;
        const productQuery = ProductQueryFactory_ProductQueryFactory.queryFromParams({
            ...request,
        });
        const additionalQueryArgs = {
            staged: true,
        };
        const distributionChannelId = ((_c = request.query) === null || _c === void 0 ? void 0 : _c['distributionChannelId']) || ((_f = (_e = (_d = request.sessionData) === null || _d === void 0 ? void 0 : _d.organization) === null || _e === void 0 ? void 0 : _e.distributionChannel) === null || _f === void 0 ? void 0 : _f.id);
        if (distributionChannelId) {
            additionalQueryArgs.priceChannel = distributionChannelId;
        }
        const additionalFacets = [
            {
                attributeId: 'published',
                attributeType: 'boolean',
            },
            {
                attributeId: 'categories.id',
            },
        ];
        return await productApi.query(productQuery, additionalQueryArgs, additionalFacets);
    }
    return null;
};

// CONCATENATED MODULE: ./types/business-unit/BusinessUnit.ts
var BusinessUnitType;
(function (BusinessUnitType) {
    BusinessUnitType["Company"] = "Company";
    BusinessUnitType["Division"] = "Division";
})(BusinessUnitType || (BusinessUnitType = {}));
var BusinessUnitStatus;
(function (BusinessUnitStatus) {
    BusinessUnitStatus["Active"] = "Active";
    BusinessUnitStatus["Inactive"] = "Inactive";
})(BusinessUnitStatus || (BusinessUnitStatus = {}));
var StoreMode;
(function (StoreMode) {
    StoreMode["Explicit"] = "Explicit";
    StoreMode["FromParent"] = "FromParent";
})(StoreMode || (StoreMode = {}));

// CONCATENATED MODULE: ./types/associate/Associate.ts
var AssociateRole;
(function (AssociateRole) {
    AssociateRole["Admin"] = "Admin";
    AssociateRole["Buyer"] = "Buyer";
})(AssociateRole || (AssociateRole = {}));

// CONCATENATED MODULE: ./commerce-commercetools/mappers/BusinessUnitMappers.ts

const mapBusinessUnitToBusinessUnit = (businessUnit, allStores, accountId) => {
    const businessUnitWithAssociates = mapReferencedAssociates(businessUnit);
    const businessUnitWithStores = mapStoreRefs(businessUnitWithAssociates, allStores);
    const businessUnitWithFlags = accountId
        ? addBUsinessUnitAdminFlags(businessUnitWithStores, accountId)
        : businessUnitWithStores;
    return trimBusinessUnit(businessUnitWithFlags);
};
const trimBusinessUnit = (businessUnit) => {
    return {
        key: businessUnit.key,
        stores: businessUnit.stores,
        name: businessUnit.name,
        isRootAdmin: businessUnit.isRootAdmin,
        isAdmin: businessUnit.isAdmin,
        parentUnit: businessUnit.parentUnit,
        storeMode: businessUnit.storeMode,
        associates: businessUnit.associates.map((associate) => ({
            roles: associate.roles,
            customer: { id: associate.customer.id },
        })),
    };
};
const isUserAdminInBusinessUnit = (businessUnit, accountId) => {
    const currentUserAssociate = businessUnit.associates.find((associate) => associate.customer.id === accountId);
    return currentUserAssociate === null || currentUserAssociate === void 0 ? void 0 : currentUserAssociate.roles.some((role) => role === AssociateRole.Admin);
};
const isUserRootAdminInBusinessUnit = (businessUnit, accountId) => {
    if (isUserAdminInBusinessUnit(businessUnit, accountId)) {
        return !businessUnit.parentUnit;
    }
    return false;
};
const addBUsinessUnitAdminFlags = (businessUnit, accountId = '') => {
    businessUnit.isAdmin = isUserAdminInBusinessUnit(businessUnit, accountId);
    businessUnit.isRootAdmin = isUserRootAdminInBusinessUnit(businessUnit, accountId);
    return businessUnit;
};
const mapReferencedAssociates = (businessUnit) => {
    var _a;
    return {
        ...businessUnit,
        associates: (_a = businessUnit.associates) === null || _a === void 0 ? void 0 : _a.map((associate) => {
            var _a, _b, _c, _d, _e, _f, _g;
            if ((_a = associate.customer) === null || _a === void 0 ? void 0 : _a.obj) {
                return {
                    roles: associate.roles,
                    customer: {
                        id: associate.customer.id,
                        typeId: 'customer',
                        firstName: (_c = (_b = associate.customer) === null || _b === void 0 ? void 0 : _b.obj) === null || _c === void 0 ? void 0 : _c.firstName,
                        lastName: (_e = (_d = associate.customer) === null || _d === void 0 ? void 0 : _d.obj) === null || _e === void 0 ? void 0 : _e.lastName,
                        email: (_g = (_f = associate.customer) === null || _f === void 0 ? void 0 : _f.obj) === null || _g === void 0 ? void 0 : _g.email,
                    },
                };
            }
            return associate;
        }),
    };
};
const mapStoreRefs = (businessUnit, allStores) => {
    var _a;
    return {
        ...businessUnit,
        stores: (_a = businessUnit.stores) === null || _a === void 0 ? void 0 : _a.map((store) => {
            const storeObj = allStores.find((s) => s.key === store.key);
            return storeObj
                ? {
                    name: storeObj.name,
                    key: storeObj.key,
                    typeId: 'store',
                    id: storeObj.id,
                }
                : store;
        }),
    };
};

// CONCATENATED MODULE: ./commerce-commercetools/mappers/StoreMappers.ts
const mapCommercetoolsStoreToStore = (store, locale, config) => {
    var _a, _b, _c;
    return {
        ...store,
        name: (_a = store.name) === null || _a === void 0 ? void 0 : _a[locale],
        isPreBuyStore: !!config ? (_c = (_b = store.custom) === null || _b === void 0 ? void 0 : _b.fields) === null || _c === void 0 ? void 0 : _c[config.storeCustomField] : false,
    };
};

// CONCATENATED MODULE: ./commerce-commercetools/apis/StoreApi.ts


const convertStoreToBody = (store, locale) => {
    return {
        ...store,
        name: {
            [locale]: store.name,
        },
    };
};
class StoreApi_StoreApi extends BaseApi_BaseApi {
    constructor() {
        super(...arguments);
        this.create = async (store) => {
            const locale = await this.getCommercetoolsLocal();
            const body = convertStoreToBody(store, locale.language);
            try {
                return this.getApiForProject()
                    .stores()
                    .post({
                    body,
                })
                    .execute()
                    .then((response) => {
                    return response.body;
                })
                    .catch((error) => {
                    throw error;
                });
            }
            catch {
                throw '';
            }
        };
        this.get = async (key) => {
            var _a, _b, _c;
            const locale = await this.getCommercetoolsLocal();
            const config = (_c = (_b = (_a = this.frontasticContext) === null || _a === void 0 ? void 0 : _a.project) === null || _b === void 0 ? void 0 : _b.configuration) === null || _c === void 0 ? void 0 : _c.preBuy;
            try {
                return this.getApiForProject()
                    .stores()
                    .withKey({ key })
                    .get()
                    .execute()
                    .then((response) => {
                    return mapCommercetoolsStoreToStore(response.body, locale.language, config);
                });
            }
            catch (e) {
                console.log(e);
                throw '';
            }
        };
        this.query = async (where) => {
            var _a, _b, _c;
            const locale = await this.getCommercetoolsLocal();
            const config = (_c = (_b = (_a = this.frontasticContext) === null || _a === void 0 ? void 0 : _a.project) === null || _b === void 0 ? void 0 : _b.configuration) === null || _c === void 0 ? void 0 : _c.preBuy;
            const queryArgs = where
                ? {
                    where,
                }
                : {};
            try {
                return this.getApiForProject()
                    .stores()
                    .get({
                    queryArgs,
                })
                    .execute()
                    .then((response) => {
                    return response.body.results.map((store) => mapCommercetoolsStoreToStore(store, locale.language, config));
                });
            }
            catch (e) {
                console.log(e);
                throw '';
            }
        };
    }
}

// CONCATENATED MODULE: ./commerce-commercetools/apis/BusinessUnitApi.ts




const MAX_LIMIT = 50;
class BusinessUnitApi_BusinessUnitApi extends BaseApi_BaseApi {
    constructor() {
        super(...arguments);
        this.getOrganizationByBusinessUnit = async (businessUnit) => {
            var _a, _b, _c;
            const organization = {};
            organization.businessUnit = businessUnit;
            if ((_a = businessUnit.stores) === null || _a === void 0 ? void 0 : _a[0]) {
                const storeApi = new StoreApi_StoreApi(this.frontasticContext, this.locale);
                const store = await storeApi.get((_b = businessUnit.stores) === null || _b === void 0 ? void 0 : _b[0].key);
                organization.store = store;
                if ((_c = store === null || store === void 0 ? void 0 : store.distributionChannels) === null || _c === void 0 ? void 0 : _c.length) {
                    organization.distributionChannel = store.distributionChannels[0];
                }
            }
            return organization;
        };
        this.getOrganization = async (accountId) => {
            const organization = {};
            if (accountId) {
                const businessUnit = await this.getMe(accountId);
                if (businessUnit === null || businessUnit === void 0 ? void 0 : businessUnit.key) {
                    return this.getOrganizationByBusinessUnit(businessUnit);
                }
            }
            return organization;
        };
        this.create = async (data) => {
            try {
                return this.getApiForProject()
                    .businessUnits()
                    .post({
                    body: data,
                })
                    .execute()
                    .then((res) => res.body);
            }
            catch (e) {
                throw e;
            }
        };
        this.delete = async (key) => {
            try {
                return this.getByKey(key).then((bu) => {
                    return this.getApiForProject()
                        .businessUnits()
                        .withKey({ key })
                        .delete({
                        queryArgs: {
                            version: bu.version,
                        },
                    })
                        .execute()
                        .then((res) => res.body);
                });
            }
            catch (e) {
                throw e;
            }
        };
        this.update = async (key, actions) => {
            try {
                return this.getByKey(key).then((res) => {
                    return this.getApiForProject()
                        .businessUnits()
                        .withKey({ key })
                        .post({
                        body: {
                            version: res.version,
                            actions,
                        },
                    })
                        .execute()
                        .then((res) => res.body);
                });
            }
            catch (e) {
                console.log(e);
                throw e;
            }
        };
        this.query = async (where, expand) => {
            try {
                return this.getApiForProject()
                    .businessUnits()
                    .get({
                    queryArgs: {
                        where,
                        expand,
                        limit: MAX_LIMIT,
                    },
                })
                    .execute()
                    .then((res) => res.body);
            }
            catch (e) {
                throw e;
            }
        };
        this.getHighestNodesWithAssociation = (businessUnits, accountId, filterAdmin) => {
            if (!businessUnits.length) {
                return [];
            }
            const rootNode = businessUnits.find((bu) => !bu.parentUnit);
            if (rootNode) {
                return [rootNode];
            }
            const justParents = businessUnits
                .filter((bu) => {
                return businessUnits.findIndex((sbu) => { var _a; return sbu.key === ((_a = bu.parentUnit) === null || _a === void 0 ? void 0 : _a.key); }) === -1;
            });
            return filterAdmin
                ? justParents.filter((bu) => isUserAdminInBusinessUnit(bu, accountId))
                : justParents
                    .sort((a, b) => isUserAdminInBusinessUnit(a, accountId) ? -1 : isUserAdminInBusinessUnit(b, accountId) ? 1 : 0);
        };
        this.getMe = async (accountId) => {
            try {
                const storeApi = new StoreApi_StoreApi(this.frontasticContext, this.locale);
                const allStores = await storeApi.query();
                const response = await this.query(`associates(customer(id="${accountId}"))`, 'associates[*].customer');
                const highestNodes = this.getHighestNodesWithAssociation(response.results, accountId);
                if (highestNodes.length) {
                    const bu = await this.setStoresByBusinessUnit(highestNodes[0]);
                    return mapBusinessUnitToBusinessUnit(bu, allStores, accountId);
                }
                return response;
            }
            catch (e) {
                throw e;
            }
        };
        this.getByKey = async (key) => {
            try {
                return this.getApiForProject()
                    .businessUnits()
                    .withKey({ key })
                    .get()
                    .execute()
                    .then((res) => res.body);
            }
            catch (e) {
                throw e;
            }
        };
        this.get = async (key, accountId) => {
            const storeApi = new StoreApi_StoreApi(this.frontasticContext, this.locale);
            const allStores = await storeApi.query();
            try {
                const bu = await this.getApiForProject()
                    .businessUnits()
                    .withKey({ key })
                    .get()
                    .execute()
                    .then((res) => this.setStoresByBusinessUnit(res.body));
                return mapBusinessUnitToBusinessUnit(bu, allStores, accountId);
            }
            catch (e) {
                throw e;
            }
        };
        this.setStoresByBusinessUnit = async (businessUnit) => {
            if (businessUnit.storeMode === StoreMode.Explicit) {
                return businessUnit;
            }
            let parentBU = { ...businessUnit };
            while (parentBU.storeMode === StoreMode.FromParent && !!parentBU.parentUnit) {
                const { body } = await this.getApiForProject()
                    .businessUnits()
                    .withKey({ key: parentBU.parentUnit.key })
                    .get()
                    .execute();
                parentBU = body;
            }
            if (parentBU.storeMode === StoreMode.Explicit) {
                return {
                    ...businessUnit,
                    stores: parentBU.stores,
                };
            }
            return businessUnit;
        };
        this.getTree = async (accountId) => {
            let tree = [];
            const storeApi = new StoreApi_StoreApi(this.frontasticContext, this.locale);
            const allStores = await storeApi.query();
            if (accountId) {
                const response = await this.query(`associates(customer(id="${accountId}"))`, 'associates[*].customer');
                tree = this.getHighestNodesWithAssociation(response.results, accountId, true).map((bu) => ({
                    ...bu,
                    parentUnit: null,
                }));
                if (tree.length) {
                    const { results } = await this.query(`topLevelUnit(key="${tree[0].topLevelUnit.key}")`, 'associates[*].customer');
                    const tempParents = [...tree];
                    while (tempParents.length) {
                        const [item] = tempParents.splice(0, 1);
                        const children = results.filter((bu) => { var _a; return ((_a = bu.parentUnit) === null || _a === void 0 ? void 0 : _a.key) === item.key; });
                        if (children.length) {
                            children.forEach((child) => {
                                tempParents.push(child);
                                tree.push(child);
                            });
                        }
                    }
                }
            }
            return tree.map((bu) => mapStoreRefs(mapReferencedAssociates(bu), allStores));
        };
    }
}

// CONCATENATED MODULE: ./commerce-commercetools/dataSources.ts




function productQueryFromContext(context, config) {
    var _a, _b, _c, _d;
    const productApi = new ProductApi_ProductApi(context.frontasticContext, context.request ? getLocale(context.request) : null);
    const additionalQueryArgs = {};
    const distributionChannelId = ((_a = context.request.query) === null || _a === void 0 ? void 0 : _a['distributionChannelId']) ||
        ((_d = (_c = (_b = context.request.sessionData) === null || _b === void 0 ? void 0 : _b.organization) === null || _c === void 0 ? void 0 : _c.distributionChannel) === null || _d === void 0 ? void 0 : _d.id);
    if (distributionChannelId) {
        additionalQueryArgs.priceChannel = distributionChannelId;
    }
    const productQuery = ProductQueryFactory_ProductQueryFactory.queryFromParams(context === null || context === void 0 ? void 0 : context.request, config);
    return { productApi, productQuery, additionalQueryArgs };
}
/* harmony default export */ var dataSources = ({
    'frontastic/categories': async (config, context) => {
        const productApi = new ProductApi_ProductApi(context.frontasticContext, context.request ? getLocale(context.request) : null);
        try {
            const categories = await productApi.getNavigationCategories();
            return {
                dataSourcePayload: {
                    categories,
                },
            };
        }
        catch {
            return {
                dataSourcePayload: {
                    categories: [],
                },
            };
        }
    },
    'frontastic/product-list': async (config, context) => {
        const { productApi, productQuery, additionalQueryArgs } = productQueryFromContext(context, config);
        return await productApi.query(productQuery, additionalQueryArgs).then((queryResult) => {
            return {
                dataSourcePayload: queryResult,
            };
        });
    },
    'frontastic/similar-products': async (config, context) => {
        var _a, _b, _c, _d, _e;
        if (!context.hasOwnProperty('request')) {
            throw new Error(`Request is not defined in context ${context}`);
        }
        const productApi = new ProductApi_ProductApi(context.frontasticContext, getLocale(context.request));
        const productQuery = ProductQueryFactory_ProductQueryFactory.queryFromParams(context.request, config);
        const queryWithCategoryId = {
            ...productQuery,
            category: (_e = (_d = (_c = (_b = (_a = context.pageFolder.dataSourceConfigurations.find((stream) => stream.streamId === '__master')) === null || _a === void 0 ? void 0 : _a.preloadedValue) === null || _b === void 0 ? void 0 : _b.product) === null || _c === void 0 ? void 0 : _c.categories) === null || _d === void 0 ? void 0 : _d[0]) === null || _e === void 0 ? void 0 : _e.categoryId,
        };
        return await productApi.query(queryWithCategoryId).then((queryResult) => {
            return {
                dataSourcePayload: queryResult,
            };
        });
    },
    'frontastic/product': async (config, context) => {
        const { productApi, productQuery, additionalQueryArgs } = productQueryFromContext(context, config);
        return await productApi.getProduct(productQuery, additionalQueryArgs).then((queryResult) => {
            return {
                dataSourcePayload: {
                    product: queryResult,
                },
            };
        });
    },
    'b2b/organization': (config, context) => {
        var _a;
        return {
            dataSourcePayload: {
                organization: (_a = context.request.sessionData) === null || _a === void 0 ? void 0 : _a.organization,
            },
        };
    },
    'b2b/organization-tree': async (config, context) => {
        var _a, _b;
        const businessUnitApi = new BusinessUnitApi_BusinessUnitApi(context.frontasticContext, context.request ? getLocale(context.request) : null);
        const tree = await businessUnitApi.getTree((_b = (_a = context.request.sessionData) === null || _a === void 0 ? void 0 : _a.account) === null || _b === void 0 ? void 0 : _b.accountId);
        return {
            dataSourcePayload: {
                tree,
            },
        };
    },
});

// CONCATENATED MODULE: ./commerce-commercetools/mappers/AccontMapper.ts
class AccountMapper {
}
AccountMapper.commercetoolsCustomerToAccount = (commercetoolsCustomer, locale) => {
    return {
        accountId: commercetoolsCustomer.id,
        email: commercetoolsCustomer.email,
        salutation: commercetoolsCustomer === null || commercetoolsCustomer === void 0 ? void 0 : commercetoolsCustomer.salutation,
        firstName: commercetoolsCustomer === null || commercetoolsCustomer === void 0 ? void 0 : commercetoolsCustomer.firstName,
        lastName: commercetoolsCustomer === null || commercetoolsCustomer === void 0 ? void 0 : commercetoolsCustomer.lastName,
        birthday: (commercetoolsCustomer === null || commercetoolsCustomer === void 0 ? void 0 : commercetoolsCustomer.dateOfBirth) ? new Date(commercetoolsCustomer.dateOfBirth) : undefined,
        confirmed: commercetoolsCustomer.isEmailVerified,
        addresses: AccountMapper.commercetoolsCustomerToAddresses(commercetoolsCustomer, locale),
    };
};
AccountMapper.commercetoolsCustomerToAddresses = (commercetoolsCustomer, locale) => {
    const addresses = [];
    commercetoolsCustomer.addresses.forEach((commercetoolsAddress) => {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
        addresses.push({
            addressId: commercetoolsAddress.id,
            salutation: (_a = commercetoolsAddress.salutation) !== null && _a !== void 0 ? _a : undefined,
            firstName: (_b = commercetoolsAddress.firstName) !== null && _b !== void 0 ? _b : undefined,
            lastName: (_c = commercetoolsAddress.lastName) !== null && _c !== void 0 ? _c : undefined,
            streetName: (_d = commercetoolsAddress.streetName) !== null && _d !== void 0 ? _d : undefined,
            streetNumber: (_e = commercetoolsAddress.streetNumber) !== null && _e !== void 0 ? _e : undefined,
            additionalStreetInfo: (_f = commercetoolsAddress.additionalStreetInfo) !== null && _f !== void 0 ? _f : undefined,
            additionalAddressInfo: (_g = commercetoolsAddress.additionalAddressInfo) !== null && _g !== void 0 ? _g : undefined,
            postalCode: (_h = commercetoolsAddress.postalCode) !== null && _h !== void 0 ? _h : undefined,
            city: (_j = commercetoolsAddress.city) !== null && _j !== void 0 ? _j : undefined,
            country: (_k = commercetoolsAddress.country) !== null && _k !== void 0 ? _k : undefined,
            state: (_l = commercetoolsAddress.state) !== null && _l !== void 0 ? _l : undefined,
            phone: (_m = commercetoolsAddress.phone) !== null && _m !== void 0 ? _m : undefined,
            isDefaultBillingAddress: commercetoolsAddress.id === commercetoolsCustomer.defaultBillingAddressId,
            isDefaultShippingAddress: commercetoolsAddress.id === commercetoolsCustomer.defaultShippingAddressId,
        });
    });
    return addresses;
};
AccountMapper.addressToCommercetoolsAddress = (address) => {
    return {
        id: address.addressId,
        salutation: address.salutation,
        firstName: address.firstName,
        lastName: address.lastName,
        streetName: address.streetName,
        streetNumber: address.streetNumber,
        additionalStreetInfo: address.additionalStreetInfo,
        additionalAddressInfo: address.additionalAddressInfo,
        postalCode: address.postalCode,
        city: address.city,
        country: address.country,
        state: address.state,
        phone: address.phone,
    };
};

// EXTERNAL MODULE: ./node_modules/performance-now/lib/performance-now.js
var performance_now = __webpack_require__(11);
var performance_now_default = /*#__PURE__*/__webpack_require__.n(performance_now);

// CONCATENATED MODULE: ./commerce-commercetools/utils/Guid.ts

class Guid {
}
Guid.newGuid = (noHyphens) => {
    let d = new Date().getTime();
    if (typeof performance_now_default.a === 'function') {
        d += performance_now_default()();
    }
    const shellGuid = noHyphens ? 'xxxxxxxxxxxx4xxxyxxxxxxxxxxxxxxx' : 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx';
    return shellGuid.replace(/[xy]/g, function (c) {
        const r = (d + Math.random() * 16) % 16 | 0;
        d = Math.floor(d / 16);
        return (c === 'x' ? r : r & (0x3 | 0x8)).toString(16);
    });
};
Guid.empty = '00000000-0000-0000-0000-000000000000';

// CONCATENATED MODULE: ./commerce-commercetools/apis/AccountApi.ts



class AccountApi_AccountApi extends BaseApi_BaseApi {
    constructor() {
        super(...arguments);
        this.create = async (account, cart) => {
            try {
                const locale = await this.getCommercetoolsLocal();
                const { commercetoolsAddresses, billingAddresses, shippingAddresses, defaultBillingAddress, defaultShippingAddress, } = this.extractAddresses(account);
                const customerDraft = {
                    email: account.email,
                    password: account.password,
                    salutation: account === null || account === void 0 ? void 0 : account.salutation,
                    firstName: account === null || account === void 0 ? void 0 : account.firstName,
                    lastName: account === null || account === void 0 ? void 0 : account.lastName,
                    companyName: account.company,
                    dateOfBirth: (account === null || account === void 0 ? void 0 : account.birthday)
                        ? account.birthday.getFullYear() + '-' + account.birthday.getMonth() + '-' + account.birthday.getDate()
                        : undefined,
                    isEmailVerified: account === null || account === void 0 ? void 0 : account.confirmed,
                    addresses: commercetoolsAddresses.length > 0 ? commercetoolsAddresses : undefined,
                    defaultBillingAddress: defaultBillingAddress,
                    defaultShippingAddress: defaultShippingAddress,
                    billingAddresses: billingAddresses.length > 0 ? billingAddresses : undefined,
                    shippingAddresses: shippingAddresses.length > 0 ? shippingAddresses : undefined,
                    anonymousCart: cart !== undefined
                        ? {
                            typeId: 'cart',
                            id: cart.cartId,
                        }
                        : undefined,
                };
                account = await this.getApiForProject()
                    .customers()
                    .post({
                    body: customerDraft,
                })
                    .execute()
                    .then((response) => {
                    return AccountMapper.commercetoolsCustomerToAccount(response.body.customer, locale);
                })
                    .catch((error) => {
                    var _a, _b, _c;
                    if (error.code && error.code === 400) {
                        if (error.body && ((_c = (_b = (_a = error.body) === null || _a === void 0 ? void 0 : _a.errors) === null || _b === void 0 ? void 0 : _b[0]) === null || _c === void 0 ? void 0 : _c.code) === 'DuplicateField') {
                            throw new Error(`The account ${account.email} does already exist.`);
                        }
                        if (cart) {
                            return this.create(account, undefined);
                        }
                    }
                    throw error;
                });
                const token = await this.generateToken(account);
                if (token) {
                    account.confirmationToken = token.value;
                    account.tokenValidUntil = new Date(token.expiresAt);
                }
                return account;
            }
            catch (error) {
                throw error;
            }
        };
        this.generateToken = async (account) => {
            const token = await this.getApiForProject()
                .customers()
                .emailToken()
                .post({
                body: {
                    id: account.accountId,
                    ttlMinutes: 2 * 7 * 24 * 60,
                },
            })
                .execute();
            return token.body;
        };
        this.confirmEmail = async (token) => {
            try {
                const locale = await this.getCommercetoolsLocal();
                return await this.getApiForProject()
                    .customers()
                    .emailConfirm()
                    .post({
                    body: {
                        tokenValue: token,
                    },
                })
                    .execute()
                    .then((response) => {
                    return AccountMapper.commercetoolsCustomerToAccount(response.body, locale);
                })
                    .catch((error) => {
                    throw new Error(`Failed to confirm email with token ${token}. ${error}`);
                });
            }
            catch (error) {
                throw new Error(`Confirm email failed. ${error}`);
            }
        };
        this.login = async (account, cart, reverify = false) => {
            try {
                const locale = await this.getCommercetoolsLocal();
                account = await this.getApiForProject()
                    .login()
                    .post({
                    body: {
                        email: account.email,
                        password: account.password,
                        anonymousCart: cart !== undefined
                            ? {
                                typeId: 'cart',
                                id: cart.cartId,
                            }
                            : undefined,
                    },
                })
                    .execute()
                    .then((response) => {
                    return AccountMapper.commercetoolsCustomerToAccount(response.body.customer, locale);
                })
                    .catch((error) => {
                    var _a, _b, _c;
                    if (error.code && error.code === 400) {
                        if (error.body && ((_c = (_b = (_a = error.body) === null || _a === void 0 ? void 0 : _a.errors) === null || _b === void 0 ? void 0 : _b[0]) === null || _c === void 0 ? void 0 : _c.code) === 'InvalidCredentials') {
                            throw new Error(`Invalid credentials to login with the account ${account.email}`);
                        }
                        if (cart) {
                            return this.login(account, undefined, reverify);
                        }
                    }
                    throw new Error(`Failed to login account  ${account.email}.`);
                });
                if (reverify) {
                    const token = await this.generateToken(account);
                    account.confirmationToken = token.value;
                    account.tokenValidUntil = new Date(token.expiresAt);
                }
                else if (!account.confirmed) {
                    throw new Error(`Your account ${account.email} is not activated yet!`);
                }
                return account;
            }
            catch (error) {
                throw error;
            }
        };
        this.updatePassword = async (account, oldPassword, newPassword) => {
            try {
                const locale = await this.getCommercetoolsLocal();
                const accountVersion = await this.fetchAccountVersion(account);
                account = await this.getApiForProject()
                    .customers()
                    .password()
                    .post({
                    body: {
                        id: account.accountId,
                        version: accountVersion,
                        currentPassword: oldPassword,
                        newPassword: newPassword,
                    },
                })
                    .execute()
                    .then((response) => {
                    return AccountMapper.commercetoolsCustomerToAccount(response.body, locale);
                })
                    .catch((error) => {
                    throw new Error(`Failed to update password for account ${account.email}. ${error}`);
                });
                return account;
            }
            catch (error) {
                throw new Error(`updateAccount failed. ${error}`);
            }
        };
        this.generatePasswordResetToken = async (email) => {
            try {
                return await this.getApiForProject()
                    .customers()
                    .passwordToken()
                    .post({
                    body: {
                        email: email,
                        ttlMinutes: 2 * 24 * 60,
                    },
                })
                    .execute()
                    .then((response) => {
                    return {
                        email: email,
                        confirmationToken: response.body.value,
                        tokenValidUntil: new Date(response.body.expiresAt),
                    };
                })
                    .catch((error) => {
                    throw new Error(`Failed to generate reset token for account ${email}. ${error}`);
                });
            }
            catch (error) {
                throw new Error(`generatePasswordResetToken failed. ${error}`);
            }
        };
        this.resetPassword = async (token, newPassword) => {
            try {
                const locale = await this.getCommercetoolsLocal();
                return await this.getApiForProject()
                    .customers()
                    .passwordReset()
                    .post({
                    body: {
                        tokenValue: token,
                        newPassword: newPassword,
                    },
                })
                    .execute()
                    .then((response) => {
                    return AccountMapper.commercetoolsCustomerToAccount(response.body, locale);
                })
                    .catch((error) => {
                    throw new Error(`Failed to reset password with token ${token}. ${error}`);
                });
            }
            catch (error) {
                throw new Error(`resetPassword failed. ${error}`);
            }
        };
        this.update = async (account) => {
            try {
                const customerUpdateActions = [];
                if (account.firstName) {
                    customerUpdateActions.push({ action: 'setFirstName', firstName: account.firstName });
                }
                if (account.lastName) {
                    customerUpdateActions.push({ action: 'setLastName', lastName: account.lastName });
                }
                if (account.salutation) {
                    customerUpdateActions.push({ action: 'setSalutation', salutation: account.salutation });
                }
                if (account.birthday) {
                    customerUpdateActions.push({
                        action: 'setDateOfBirth',
                        dateOfBirth: account.birthday.getFullYear() + '-' + account.birthday.getMonth() + '-' + account.birthday.getDate(),
                    });
                }
                return await this.updateAccount(account, customerUpdateActions);
            }
            catch (error) {
                throw new Error(`update failed. ${error}`);
            }
        };
        this.addAddress = async (account, address) => {
            try {
                const customerUpdateActions = [];
                let addressData = AccountMapper.addressToCommercetoolsAddress(address);
                if (addressData.id !== undefined) {
                    addressData = {
                        ...addressData,
                        id: undefined,
                    };
                }
                if (address.isDefaultBillingAddress || address.isDefaultShippingAddress) {
                    addressData = {
                        ...addressData,
                        key: Guid.newGuid(),
                    };
                }
                customerUpdateActions.push({ action: 'addAddress', address: addressData });
                if (address.isDefaultBillingAddress) {
                    customerUpdateActions.push({ action: 'setDefaultBillingAddress', addressKey: addressData.key });
                }
                if (address.isDefaultShippingAddress) {
                    customerUpdateActions.push({ action: 'setDefaultShippingAddress', addressKey: addressData.key });
                }
                return await this.updateAccount(account, customerUpdateActions);
            }
            catch (error) {
                throw new Error(`addAddress failed. ${error}`);
            }
        };
        this.updateAddress = async (account, address) => {
            try {
                const customerUpdateActions = [];
                let addressData = AccountMapper.addressToCommercetoolsAddress(address);
                if (addressData.id !== undefined) {
                    addressData = {
                        ...addressData,
                        id: undefined,
                    };
                }
                if (address.isDefaultBillingAddress || address.isDefaultShippingAddress) {
                    addressData = {
                        ...addressData,
                        key: Guid.newGuid(),
                    };
                }
                customerUpdateActions.push({ action: 'changeAddress', addressId: address.addressId, address: addressData });
                if (address.isDefaultBillingAddress) {
                    customerUpdateActions.push({ action: 'setDefaultBillingAddress', addressKey: addressData.key });
                }
                if (address.isDefaultShippingAddress) {
                    customerUpdateActions.push({ action: 'setDefaultShippingAddress', addressKey: addressData.key });
                }
                return await this.updateAccount(account, customerUpdateActions);
            }
            catch (error) {
                throw new Error(`updateAddress failed. ${error}`);
            }
        };
        this.removeAddress = async (account, address) => {
            try {
                const customerUpdateActions = [];
                const addressData = AccountMapper.addressToCommercetoolsAddress(address);
                if (addressData.id === undefined) {
                    throw new Error(`The address passed doesn't contain an id.`);
                }
                customerUpdateActions.push({ action: 'removeAddress', addressId: address.addressId });
                return await this.updateAccount(account, customerUpdateActions);
            }
            catch (error) {
                throw new Error(`removeAddress failed. ${error}`);
            }
        };
        this.setDefaultBillingAddress = async (account, address) => {
            try {
                const customerUpdateActions = [];
                const addressData = AccountMapper.addressToCommercetoolsAddress(address);
                customerUpdateActions.push({ action: 'setDefaultBillingAddress', addressId: addressData.id });
                return await this.updateAccount(account, customerUpdateActions);
            }
            catch (error) {
                throw new Error(`setDefaultBillingAddress failed. ${error}`);
            }
        };
        this.setDefaultShippingAddress = async (account, address) => {
            try {
                const customerUpdateActions = [];
                const addressData = AccountMapper.addressToCommercetoolsAddress(address);
                customerUpdateActions.push({ action: 'setDefaultShippingAddress', addressId: addressData.id });
                return await this.updateAccount(account, customerUpdateActions);
            }
            catch (error) {
                throw new Error(`setDefaultShippingAddress failed. ${error}`);
            }
        };
    }
    extractAddresses(account) {
        const commercetoolsAddresses = [];
        const billingAddresses = [];
        const shippingAddresses = [];
        let defaultBillingAddress;
        let defaultShippingAddress;
        account.addresses.forEach((address, key) => {
            const addressData = AccountMapper.addressToCommercetoolsAddress(address);
            commercetoolsAddresses.push(addressData);
            if (address.isDefaultBillingAddress) {
                billingAddresses.push(key);
                defaultBillingAddress = key;
            }
            if (address.isDefaultShippingAddress) {
                shippingAddresses.push(key);
                defaultShippingAddress = key;
            }
        });
        return {
            commercetoolsAddresses,
            billingAddresses,
            shippingAddresses,
            defaultBillingAddress,
            defaultShippingAddress,
        };
    }
    async fetchAccountVersion(account) {
        var _a;
        const commercetoolsAccount = await this.getApiForProject()
            .customers()
            .withId({ ID: account.accountId })
            .get()
            .execute();
        return (_a = commercetoolsAccount.body) === null || _a === void 0 ? void 0 : _a.version;
    }
    async updateAccount(account, customerUpdateActions) {
        const locale = await this.getCommercetoolsLocal();
        const accountVersion = await this.fetchAccountVersion(account);
        const customerUpdate = {
            version: accountVersion,
            actions: customerUpdateActions,
        };
        return await this.getApiForProject()
            .customers()
            .withId({ ID: account.accountId })
            .post({
            body: customerUpdate,
        })
            .execute()
            .then((response) => {
            return AccountMapper.commercetoolsCustomerToAccount(response.body, locale);
        })
            .catch((error) => {
            throw error;
        });
    }
}

// CONCATENATED MODULE: ./commerce-commercetools/mappers/CartMapper.ts


class CartMapper {
}
CartMapper.commercetoolsCartToCart = (commercetoolsCart, locale, config) => {
    var _a, _b, _c;
    return {
        cartId: commercetoolsCart.id,
        cartVersion: commercetoolsCart.version.toString(),
        lineItems: CartMapper.commercetoolsLineItemsToLineItems(commercetoolsCart.lineItems, locale),
        email: commercetoolsCart === null || commercetoolsCart === void 0 ? void 0 : commercetoolsCart.customerEmail,
        sum: ProductMapper_ProductMapper.commercetoolsMoneyToMoney(commercetoolsCart.totalPrice),
        shippingAddress: CartMapper.commercetoolsAddressToAddress(commercetoolsCart.shippingAddress),
        billingAddress: CartMapper.commercetoolsAddressToAddress(commercetoolsCart.billingAddress),
        shippingInfo: CartMapper.commercetoolsShippingInfoToShippingInfo(commercetoolsCart.shippingInfo, locale),
        payments: CartMapper.commercetoolsPaymentInfoToPayments(commercetoolsCart.paymentInfo, locale),
        discountCodes: CartMapper.commercetoolsDiscountCodesInfoToDiscountCodes(commercetoolsCart.discountCodes, locale),
        directDiscounts: (_a = commercetoolsCart.directDiscounts) === null || _a === void 0 ? void 0 : _a.length,
        taxed: CartMapper.commercetoolsTaxedPriceToTaxed(commercetoolsCart.taxedPrice, locale),
        itemShippingAddresses: commercetoolsCart.itemShippingAddresses,
        origin: commercetoolsCart.origin,
        isPreBuyCart: !!config ? (_c = (_b = commercetoolsCart.custom) === null || _b === void 0 ? void 0 : _b.fields) === null || _c === void 0 ? void 0 : _c[config.orderCustomField] : false,
    };
};
CartMapper.commercetoolsLineItemsToLineItems = (commercetoolsLineItems, locale) => {
    const lineItems = [];
    commercetoolsLineItems === null || commercetoolsLineItems === void 0 ? void 0 : commercetoolsLineItems.forEach((commercetoolsLineItem) => {
        var _a, _b, _c;
        const item = {
            lineItemId: commercetoolsLineItem.id,
            name: (commercetoolsLineItem === null || commercetoolsLineItem === void 0 ? void 0 : commercetoolsLineItem.name[locale.language]) || '',
            type: 'variant',
            count: commercetoolsLineItem.quantity,
            price: ProductMapper_ProductMapper.commercetoolsMoneyToMoney((_a = commercetoolsLineItem.price) === null || _a === void 0 ? void 0 : _a.value),
            discountedPrice: ProductMapper_ProductMapper.commercetoolsMoneyToMoney((_c = (_b = commercetoolsLineItem.price) === null || _b === void 0 ? void 0 : _b.discounted) === null || _c === void 0 ? void 0 : _c.value),
            discountTexts: CartMapper.commercetoolsDiscountedPricesPerQuantityToDiscountTexts(commercetoolsLineItem.discountedPricePerQuantity, locale),
            discounts: CartMapper.commercetoolsDiscountedPricesPerQuantityToDiscounts(commercetoolsLineItem.discountedPricePerQuantity, locale),
            totalPrice: ProductMapper_ProductMapper.commercetoolsMoneyToMoney(commercetoolsLineItem.totalPrice),
            variant: ProductMapper_ProductMapper.commercetoolsProductVariantToVariant(commercetoolsLineItem.variant, locale, commercetoolsLineItem.price),
            isGift: (commercetoolsLineItem === null || commercetoolsLineItem === void 0 ? void 0 : commercetoolsLineItem.lineItemMode) !== undefined && commercetoolsLineItem.lineItemMode === 'GiftLineItem',
            shippingDetails: commercetoolsLineItem.shippingDetails,
        };
        item._url = ProductRouter_ProductRouter.generateUrlFor(item);
        lineItems.push(item);
    });
    return lineItems;
};
CartMapper.commercetoolsAddressToAddress = (commercetoolsAddress) => {
    return {
        addressId: commercetoolsAddress === null || commercetoolsAddress === void 0 ? void 0 : commercetoolsAddress.id,
        salutation: commercetoolsAddress === null || commercetoolsAddress === void 0 ? void 0 : commercetoolsAddress.salutation,
        firstName: commercetoolsAddress === null || commercetoolsAddress === void 0 ? void 0 : commercetoolsAddress.firstName,
        lastName: commercetoolsAddress === null || commercetoolsAddress === void 0 ? void 0 : commercetoolsAddress.lastName,
        streetName: commercetoolsAddress === null || commercetoolsAddress === void 0 ? void 0 : commercetoolsAddress.streetName,
        streetNumber: commercetoolsAddress === null || commercetoolsAddress === void 0 ? void 0 : commercetoolsAddress.streetNumber,
        additionalStreetInfo: commercetoolsAddress === null || commercetoolsAddress === void 0 ? void 0 : commercetoolsAddress.additionalStreetInfo,
        additionalAddressInfo: commercetoolsAddress === null || commercetoolsAddress === void 0 ? void 0 : commercetoolsAddress.additionalAddressInfo,
        postalCode: commercetoolsAddress === null || commercetoolsAddress === void 0 ? void 0 : commercetoolsAddress.postalCode,
        city: commercetoolsAddress === null || commercetoolsAddress === void 0 ? void 0 : commercetoolsAddress.city,
        country: commercetoolsAddress === null || commercetoolsAddress === void 0 ? void 0 : commercetoolsAddress.country,
        state: commercetoolsAddress === null || commercetoolsAddress === void 0 ? void 0 : commercetoolsAddress.state,
        phone: commercetoolsAddress === null || commercetoolsAddress === void 0 ? void 0 : commercetoolsAddress.phone,
    };
};
CartMapper.addressToCommercetoolsAddress = (address) => {
    return {
        id: address === null || address === void 0 ? void 0 : address.addressId,
        salutation: address === null || address === void 0 ? void 0 : address.salutation,
        firstName: address === null || address === void 0 ? void 0 : address.firstName,
        lastName: address === null || address === void 0 ? void 0 : address.lastName,
        streetName: address === null || address === void 0 ? void 0 : address.streetName,
        streetNumber: address === null || address === void 0 ? void 0 : address.streetNumber,
        additionalStreetInfo: address === null || address === void 0 ? void 0 : address.additionalStreetInfo,
        additionalAddressInfo: address === null || address === void 0 ? void 0 : address.additionalAddressInfo,
        postalCode: address === null || address === void 0 ? void 0 : address.postalCode,
        city: address === null || address === void 0 ? void 0 : address.city,
        country: address === null || address === void 0 ? void 0 : address.country,
        state: address === null || address === void 0 ? void 0 : address.state,
        phone: address === null || address === void 0 ? void 0 : address.phone,
    };
};
CartMapper.commercetoolsOrderToOrder = (commercetoolsOrder, locale, config) => {
    var _a, _b, _c;
    return {
        cartId: commercetoolsOrder.id,
        orderState: commercetoolsOrder.orderState,
        orderId: commercetoolsOrder.orderNumber,
        orderVersion: commercetoolsOrder.version.toString(),
        lineItems: CartMapper.commercetoolsLineItemsToLineItems(commercetoolsOrder.lineItems, locale),
        email: commercetoolsOrder === null || commercetoolsOrder === void 0 ? void 0 : commercetoolsOrder.customerEmail,
        shippingAddress: CartMapper.commercetoolsAddressToAddress(commercetoolsOrder.shippingAddress),
        billingAddress: CartMapper.commercetoolsAddressToAddress(commercetoolsOrder.billingAddress),
        sum: ProductMapper_ProductMapper.commercetoolsMoneyToMoney(commercetoolsOrder.totalPrice),
        businessUnit: (_a = commercetoolsOrder.businessUnit) === null || _a === void 0 ? void 0 : _a.key,
        createdAt: commercetoolsOrder.createdAt,
        shippingInfo: CartMapper.commercetoolsShippingInfoToShippingInfo(commercetoolsOrder.shippingInfo, locale),
        returnInfo: CartMapper.commercetoolsReturnInfoToReturnInfo(commercetoolsOrder.returnInfo),
        isPreBuyCart: !!config ? (_c = (_b = commercetoolsOrder.custom) === null || _b === void 0 ? void 0 : _b.fields) === null || _c === void 0 ? void 0 : _c[config.orderCustomField] : false,
    };
};
CartMapper.commercetoolsShippingInfoToShippingInfo = (commercetoolsShippingInfo, locale) => {
    var _a;
    if (commercetoolsShippingInfo === undefined) {
        return undefined;
    }
    let shippingMethod = {
        shippingMethodId: (_a = commercetoolsShippingInfo === null || commercetoolsShippingInfo === void 0 ? void 0 : commercetoolsShippingInfo.shippingMethod) === null || _a === void 0 ? void 0 : _a.id,
    };
    if (commercetoolsShippingInfo.shippingMethod.obj) {
        shippingMethod = {
            ...CartMapper.commercetoolsShippingMethodToShippingMethod(commercetoolsShippingInfo.shippingMethod.obj, locale),
        };
    }
    return {
        ...shippingMethod,
        price: ProductMapper_ProductMapper.commercetoolsMoneyToMoney(commercetoolsShippingInfo.price),
    };
};
CartMapper.commercetoolsReturnInfoToReturnInfo = (commercetoolsReturnInfo) => {
    return commercetoolsReturnInfo.map((ctReturnInfo) => ({
        returnDate: ctReturnInfo.returnDate,
        returnTrackingId: ctReturnInfo.returnTrackingId,
        items: ctReturnInfo.items.map((item) => ({
            comment: item.comment,
            createdAt: item.createdAt,
            lineItemId: item.lineItemId,
            returnInfoId: item.id,
            quantity: item.quantity,
            shipmentState: item.shipmentState,
        })),
    }));
};
CartMapper.commercetoolsShippingMethodToShippingMethod = (commercetoolsShippingMethod, locale) => {
    var _a, _b;
    return {
        shippingMethodId: (commercetoolsShippingMethod === null || commercetoolsShippingMethod === void 0 ? void 0 : commercetoolsShippingMethod.id) || undefined,
        name: ((_a = commercetoolsShippingMethod === null || commercetoolsShippingMethod === void 0 ? void 0 : commercetoolsShippingMethod.localizedName) === null || _a === void 0 ? void 0 : _a[locale.language]) || (commercetoolsShippingMethod === null || commercetoolsShippingMethod === void 0 ? void 0 : commercetoolsShippingMethod.name) || undefined,
        description: ((_b = commercetoolsShippingMethod === null || commercetoolsShippingMethod === void 0 ? void 0 : commercetoolsShippingMethod.localizedDescription) === null || _b === void 0 ? void 0 : _b[locale.language]) ||
            (commercetoolsShippingMethod === null || commercetoolsShippingMethod === void 0 ? void 0 : commercetoolsShippingMethod.description) ||
            undefined,
        rates: CartMapper.commercetoolsZoneRatesToRates(commercetoolsShippingMethod === null || commercetoolsShippingMethod === void 0 ? void 0 : commercetoolsShippingMethod.zoneRates, locale),
    };
};
CartMapper.commercetoolsZoneRatesToRates = (commercetoolsZoneRates, locale) => {
    if (commercetoolsZoneRates === undefined) {
        return undefined;
    }
    const shippingRates = [];
    commercetoolsZoneRates.forEach((commercetoolsZoneRate) => {
        var _a, _b, _c, _d, _e;
        const shippingRateId = commercetoolsZoneRate.zone.id;
        const name = ((_b = (_a = commercetoolsZoneRate.zone) === null || _a === void 0 ? void 0 : _a.obj) === null || _b === void 0 ? void 0 : _b.name) || undefined;
        const locations = (_e = (_d = (_c = commercetoolsZoneRate.zone) === null || _c === void 0 ? void 0 : _c.obj) === null || _d === void 0 ? void 0 : _d.locations) === null || _e === void 0 ? void 0 : _e.map((location) => {
            return {
                country: location.country,
                state: location.state,
            };
        });
        const matchingShippingRates = commercetoolsZoneRate.shippingRates.filter(function (shippingRate) {
            if (shippingRate.isMatching !== undefined && shippingRate.isMatching !== true) {
                return false;
            }
            return true;
        });
        matchingShippingRates.forEach((matchingShippingRates) => {
            shippingRates.push({
                shippingRateId: shippingRateId,
                name: name,
                locations: locations,
                price: ProductMapper_ProductMapper.commercetoolsMoneyToMoney(matchingShippingRates.price),
            });
        });
    });
    return shippingRates;
};
CartMapper.commercetoolsPaymentInfoToPayments = (commercetoolsPaymentInfo, locale) => {
    var _a;
    const payments = [];
    (_a = commercetoolsPaymentInfo === null || commercetoolsPaymentInfo === void 0 ? void 0 : commercetoolsPaymentInfo.payments) === null || _a === void 0 ? void 0 : _a.forEach((commercetoolsPayment) => {
        if (commercetoolsPayment.obj) {
            payments.push(CartMapper.commercetoolsPaymentToPayment(commercetoolsPayment.obj, locale));
        }
    });
    return payments;
};
CartMapper.commercetoolsPaymentToPayment = (commercetoolsPayment, locale) => {
    var _a, _b, _c, _d, _e, _f;
    return {
        id: (_a = commercetoolsPayment.key) !== null && _a !== void 0 ? _a : null,
        paymentId: (_b = commercetoolsPayment.interfaceId) !== null && _b !== void 0 ? _b : null,
        paymentProvider: (_c = commercetoolsPayment.paymentMethodInfo.paymentInterface) !== null && _c !== void 0 ? _c : null,
        paymentMethod: (_d = commercetoolsPayment.paymentMethodInfo.method) !== null && _d !== void 0 ? _d : null,
        amountPlanned: ProductMapper_ProductMapper.commercetoolsMoneyToMoney(commercetoolsPayment.amountPlanned),
        debug: JSON.stringify(commercetoolsPayment),
        paymentStatus: (_e = commercetoolsPayment.paymentStatus.interfaceCode) !== null && _e !== void 0 ? _e : null,
        version: (_f = commercetoolsPayment.version) !== null && _f !== void 0 ? _f : 0,
    };
};
CartMapper.commercetoolsDiscountCodesInfoToDiscountCodes = (commercetoolsDiscountCodesInfo, locale) => {
    const discounts = [];
    commercetoolsDiscountCodesInfo === null || commercetoolsDiscountCodesInfo === void 0 ? void 0 : commercetoolsDiscountCodesInfo.forEach((commercetoolsDiscountCodeInfo) => {
        discounts.push(CartMapper.commercetoolsDiscountCodeInfoToDiscountCode(commercetoolsDiscountCodeInfo, locale));
    });
    return discounts;
};
CartMapper.commercetoolsDiscountCodeInfoToDiscountCode = (commercetoolsDiscountCodeInfo, locale) => {
    var _a, _b;
    let discount = {
        state: commercetoolsDiscountCodeInfo.state,
    };
    if (commercetoolsDiscountCodeInfo.discountCode.obj) {
        const commercetoolsDiscountCode = commercetoolsDiscountCodeInfo.discountCode.obj;
        discount = {
            ...discount,
            discountId: commercetoolsDiscountCode.id,
            code: commercetoolsDiscountCode.code,
            name: (_a = commercetoolsDiscountCode.name[locale.language]) !== null && _a !== void 0 ? _a : undefined,
            description: (_b = commercetoolsDiscountCode.description[locale.language]) !== null && _b !== void 0 ? _b : undefined,
        };
    }
    return discount;
};
CartMapper.commercetoolsDiscountedPricesPerQuantityToDiscountTexts = (commercetoolsDiscountedLineItemPricesForQuantity, locale) => {
    const discountTexts = [];
    commercetoolsDiscountedLineItemPricesForQuantity === null || commercetoolsDiscountedLineItemPricesForQuantity === void 0 ? void 0 : commercetoolsDiscountedLineItemPricesForQuantity.forEach((commercetoolsDiscountedLineItemPriceForQuantity) => {
        commercetoolsDiscountedLineItemPriceForQuantity.discountedPrice.includedDiscounts.forEach((commercetoolsDiscountedLineItemPortion) => {
            var _a;
            discountTexts.push((_a = commercetoolsDiscountedLineItemPortion.discount.obj) === null || _a === void 0 ? void 0 : _a.name[locale.language]);
        });
    });
    return discountTexts;
};
CartMapper.commercetoolsDiscountedPricesPerQuantityToDiscounts = (commercetoolsDiscountedLineItemPricesForQuantity, locale) => {
    const discounts = [];
    commercetoolsDiscountedLineItemPricesForQuantity === null || commercetoolsDiscountedLineItemPricesForQuantity === void 0 ? void 0 : commercetoolsDiscountedLineItemPricesForQuantity.forEach((commercetoolsDiscountedLineItemPriceForQuantity) => {
        commercetoolsDiscountedLineItemPriceForQuantity.discountedPrice.includedDiscounts.forEach((commercetoolsDiscountedLineItemPortion) => {
            discounts.push(CartMapper.commercetoolsDiscountedLineItemPortionToDiscount(commercetoolsDiscountedLineItemPortion, locale));
        });
    });
    return discounts;
};
CartMapper.commercetoolsDiscountedLineItemPortionToDiscount = (commercetoolsDiscountedLineItemPortion, locale) => {
    var _a, _b;
    let discount = {
        discountedAmount: ProductMapper_ProductMapper.commercetoolsMoneyToMoney(commercetoolsDiscountedLineItemPortion.discountedAmount),
    };
    if (commercetoolsDiscountedLineItemPortion.discount.obj) {
        const commercetoolsCartDiscount = commercetoolsDiscountedLineItemPortion.discount.obj;
        discount = {
            ...discount,
            discountId: commercetoolsCartDiscount.id,
            name: (_a = commercetoolsCartDiscount.name[locale.language]) !== null && _a !== void 0 ? _a : undefined,
            description: (_b = commercetoolsCartDiscount.description[locale.language]) !== null && _b !== void 0 ? _b : undefined,
        };
    }
    return discount;
};
CartMapper.commercetoolsTaxedPriceToTaxed = (commercetoolsTaxedPrice, locale) => {
    if (commercetoolsTaxedPrice === undefined) {
        return undefined;
    }
    return {
        amount: ProductMapper_ProductMapper.commercetoolsMoneyToMoney(commercetoolsTaxedPrice.totalNet),
        taxPortions: commercetoolsTaxedPrice.taxPortions.map((commercetoolsTaxPortion) => {
            const taxPortion = {
                amount: ProductMapper_ProductMapper.commercetoolsMoneyToMoney(commercetoolsTaxPortion.amount),
                name: commercetoolsTaxPortion.name,
                rate: commercetoolsTaxPortion.rate,
            };
            return taxPortion;
        }),
    };
};

// CONCATENATED MODULE: ./commerce-commercetools/utils/Cart.ts
const hasUser = (cart) => {
    return cart.email !== undefined;
};
const hasShippingAddress = (cart) => {
    return (cart.shippingAddress !== undefined &&
        cart.shippingAddress.firstName !== undefined &&
        cart.shippingAddress.lastName !== undefined &&
        cart.shippingAddress.postalCode !== undefined &&
        cart.shippingAddress.city !== undefined &&
        cart.shippingAddress.country !== undefined);
};
const hasBillingAddress = (cart) => {
    return (cart.billingAddress !== undefined &&
        cart.billingAddress.firstName !== undefined &&
        cart.billingAddress.lastName !== undefined &&
        cart.billingAddress.postalCode !== undefined &&
        cart.billingAddress.city !== undefined &&
        cart.billingAddress.country !== undefined);
};
const hasAddresses = (cart) => {
    return hasShippingAddress(cart) && hasBillingAddress(cart);
};
const isReadyForCheckout = (cart) => {
    return hasUser(cart) && hasAddresses(cart);
};

// CONCATENATED MODULE: ./commerce-commercetools/apis/CartApi.ts



class CartApi_CartApi extends BaseApi_BaseApi {
    constructor() {
        super(...arguments);
        this.getForUser = async (account, organization) => {
            try {
                const locale = await this.getCommercetoolsLocal();
                const response = await this.getApiForProject()
                    .carts()
                    .get({
                    queryArgs: {
                        limit: 1,
                        expand: [
                            'lineItems[*].discountedPrice.includedDiscounts[*].discount',
                            'discountCodes[*].discountCode',
                            'paymentInfo.payments[*]',
                        ],
                        where: [
                            `customerId="${account.accountId}"`,
                            `cartState="Active"`,
                            `businessUnit(key="${organization.businessUnit.key}")`,
                            `store(key="${organization.store.key}")`,
                        ],
                        sort: 'createdAt desc',
                    },
                })
                    .execute();
                if (response.body.count >= 1) {
                    return this.buildCartWithAvailableShippingMethods(response.body.results[0], locale);
                }
                return this.createCart(account.accountId, organization);
            }
            catch (error) {
                throw new Error(`getForUser failed. ${error}`);
            }
        };
        this.createCart = async (customerId, organization) => {
            var _a, _b, _c;
            try {
                const locale = await this.getCommercetoolsLocal();
                const config = (_c = (_b = (_a = this.frontasticContext) === null || _a === void 0 ? void 0 : _a.project) === null || _b === void 0 ? void 0 : _b.configuration) === null || _c === void 0 ? void 0 : _c.preBuy;
                const cartDraft = {
                    currency: locale.currency,
                    country: locale.country,
                    locale: locale.language,
                    customerId,
                    businessUnit: {
                        key: organization.businessUnit.key,
                        typeId: 'business-unit',
                    },
                    store: {
                        key: organization.store.key,
                        typeId: 'store',
                    },
                    inventoryMode: 'ReserveOnOrder',
                };
                if (organization.store.isPreBuyStore) {
                    cartDraft.custom = {
                        type: {
                            typeId: 'type',
                            key: config.orderCustomType,
                        },
                        fields: {
                            [config.orderCustomField]: true,
                        },
                    };
                    cartDraft.inventoryMode = 'None';
                }
                const commercetoolsCart = await this.getApiForProject()
                    .carts()
                    .post({
                    queryArgs: {
                        expand: [
                            'lineItems[*].discountedPrice.includedDiscounts[*].discount',
                            'discountCodes[*].discountCode',
                            'paymentInfo.payments[*]',
                        ],
                    },
                    body: cartDraft,
                })
                    .execute();
                return this.buildCartWithAvailableShippingMethods(commercetoolsCart.body, locale);
            }
            catch (error) {
                throw error;
            }
        };
        this.getById = async (cartId) => {
            try {
                const locale = await this.getCommercetoolsLocal();
                const response = await this.getApiForProject()
                    .carts()
                    .withId({
                    ID: cartId,
                })
                    .get({
                    queryArgs: {
                        limit: 1,
                        expand: [
                            'lineItems[*].discountedPrice.includedDiscounts[*].discount',
                            'discountCodes[*].discountCode',
                            'paymentInfo.payments[*]',
                        ],
                    },
                })
                    .execute();
                return this.buildCartWithAvailableShippingMethods(response.body, locale);
            }
            catch (error) {
                throw new Error(`getById failed. ${error}`);
            }
        };
        this.addToCart = async (cart, lineItem, distributionChannel) => {
            try {
                const locale = await this.getCommercetoolsLocal();
                const cartUpdate = {
                    version: +cart.cartVersion,
                    actions: [
                        {
                            action: 'addLineItem',
                            sku: lineItem.variant.sku,
                            quantity: +lineItem.count,
                            distributionChannel: { id: distributionChannel, typeId: 'channel' },
                        },
                    ],
                };
                const commercetoolsCart = await this.updateCart(cart.cartId, cartUpdate, locale);
                return this.buildCartWithAvailableShippingMethods(commercetoolsCart, locale);
            }
            catch (error) {
                throw new Error(`addToCart failed. ${error}`);
            }
        };
        this.addItemsToCart = async (cart, lineItems, distributionChannel) => {
            try {
                const locale = await this.getCommercetoolsLocal();
                const cartUpdate = {
                    version: +cart.cartVersion,
                    actions: lineItems.map((lineItem) => ({
                        action: 'addLineItem',
                        sku: lineItem.variant.sku,
                        quantity: +lineItem.count,
                        distributionChannel: { id: distributionChannel, typeId: 'channel' },
                    })),
                };
                const commercetoolsCart = await this.updateCart(cart.cartId, cartUpdate, locale);
                return this.buildCartWithAvailableShippingMethods(commercetoolsCart, locale);
            }
            catch (error) {
                throw new Error(`addToCart failed. ${error}`);
            }
        };
        this.updateLineItem = async (cart, lineItem) => {
            try {
                const locale = await this.getCommercetoolsLocal();
                const cartUpdate = {
                    version: +cart.cartVersion,
                    actions: [
                        {
                            action: 'changeLineItemQuantity',
                            lineItemId: lineItem.lineItemId,
                            quantity: +lineItem.count,
                        },
                    ],
                };
                const commercetoolsCart = await this.updateCart(cart.cartId, cartUpdate, locale);
                return this.buildCartWithAvailableShippingMethods(commercetoolsCart, locale);
            }
            catch (error) {
                throw new Error(`updateLineItem failed. ${error}`);
            }
        };
        this.removeLineItem = async (cart, lineItem) => {
            try {
                const locale = await this.getCommercetoolsLocal();
                const cartUpdate = {
                    version: +cart.cartVersion,
                    actions: [
                        {
                            action: 'removeLineItem',
                            lineItemId: lineItem.lineItemId,
                        },
                    ],
                };
                const commercetoolsCart = await this.updateCart(cart.cartId, cartUpdate, locale);
                return this.buildCartWithAvailableShippingMethods(commercetoolsCart, locale);
            }
            catch (error) {
                throw new Error(`removeLineItem failed. ${error}`);
            }
        };
        this.setEmail = async (cart, email) => {
            try {
                const locale = await this.getCommercetoolsLocal();
                const cartUpdate = {
                    version: +cart.cartVersion,
                    actions: [
                        {
                            action: 'setCustomerEmail',
                            email: email,
                        },
                    ],
                };
                const commercetoolsCart = await this.updateCart(cart.cartId, cartUpdate, locale);
                return this.buildCartWithAvailableShippingMethods(commercetoolsCart, locale);
            }
            catch (error) {
                throw new Error(`setEmail failed. ${error}`);
            }
        };
        this.setCustomerId = async (cart, customerId) => {
            try {
                const locale = await this.getCommercetoolsLocal();
                const cartUpdate = {
                    version: +cart.cartVersion,
                    actions: [
                        {
                            action: 'setCustomerId',
                            customerId,
                        },
                    ],
                };
                const commercetoolsCart = await this.updateCart(cart.cartId, cartUpdate, locale);
                return this.buildCartWithAvailableShippingMethods(commercetoolsCart, locale);
            }
            catch (error) {
                throw new Error(`setCustomerId failed. ${error}`);
            }
        };
        this.setLocale = async (cart, localeCode) => {
            try {
                const locale = await this.getCommercetoolsLocal();
                const cartUpdate = {
                    version: +cart.cartVersion,
                    actions: [
                        {
                            action: 'setLocale',
                            locale: localeCode,
                        },
                    ],
                };
                const commercetoolsCart = await this.updateCart(cart.cartId, cartUpdate, locale);
                return this.buildCartWithAvailableShippingMethods(commercetoolsCart, locale);
            }
            catch (error) {
                throw new Error(`setLocale failed. ${error}`);
            }
        };
        this.setShippingAddress = async (cart, address) => {
            try {
                const locale = await this.getCommercetoolsLocal();
                const cartUpdate = {
                    version: +cart.cartVersion,
                    actions: [
                        {
                            action: 'setShippingAddress',
                            address: CartMapper.addressToCommercetoolsAddress(address),
                        },
                    ],
                };
                const commercetoolsCart = await this.updateCart(cart.cartId, cartUpdate, locale);
                return this.buildCartWithAvailableShippingMethods(commercetoolsCart, locale);
            }
            catch (error) {
                throw new Error(`setShippingAddress failed. ${error}`);
            }
        };
        this.setBillingAddress = async (cart, address) => {
            try {
                const locale = await this.getCommercetoolsLocal();
                const cartUpdate = {
                    version: +cart.cartVersion,
                    actions: [
                        {
                            action: 'setBillingAddress',
                            address: CartMapper.addressToCommercetoolsAddress(address),
                        },
                    ],
                };
                const commercetoolsCart = await this.updateCart(cart.cartId, cartUpdate, locale);
                return this.buildCartWithAvailableShippingMethods(commercetoolsCart, locale);
            }
            catch (error) {
                throw new Error(`setBillingAddress failed. ${error}`);
            }
        };
        this.setShippingMethod = async (cart, shippingMethod) => {
            try {
                const locale = await this.getCommercetoolsLocal();
                const cartUpdate = {
                    version: +cart.cartVersion,
                    actions: [
                        {
                            action: 'setShippingMethod',
                            shippingMethod: {
                                typeId: 'shipping-method',
                                id: shippingMethod.shippingMethodId,
                            },
                        },
                    ],
                };
                const commercetoolsCart = await this.updateCart(cart.cartId, cartUpdate, locale);
                return this.buildCartWithAvailableShippingMethods(commercetoolsCart, locale);
            }
            catch (error) {
                throw new Error(`setShippingMethod failed. ${error}`);
            }
        };
        this.order = async (cart) => {
            var _a, _b, _c;
            try {
                const locale = await this.getCommercetoolsLocal();
                const date = new Date();
                const orderFromCartDraft = {
                    id: cart.cartId,
                    version: +cart.cartVersion,
                    orderNumber: `${date.getMonth() + 1}-${date.getDate()}-${date.getFullYear()}-${String(Date.now()).slice(-6, -1)}`,
                    orderState: cart.isPreBuyCart ? 'Open' : 'Confirmed',
                };
                if (!isReadyForCheckout(cart)) {
                    throw new Error('Cart not complete yet.');
                }
                const config = (_c = (_b = (_a = this.frontasticContext) === null || _a === void 0 ? void 0 : _a.project) === null || _b === void 0 ? void 0 : _b.configuration) === null || _c === void 0 ? void 0 : _c.preBuy;
                const response = await this.getApiForProject()
                    .orders()
                    .post({
                    queryArgs: {
                        expand: [
                            'lineItems[*].discountedPrice.includedDiscounts[*].discount',
                            'discountCodes[*].discountCode',
                            'paymentInfo.payments[*]',
                        ],
                    },
                    body: orderFromCartDraft,
                })
                    .execute();
                return CartMapper.commercetoolsOrderToOrder(response.body, locale, config);
            }
            catch (error) {
                throw new Error(`order failed. ${error}`);
            }
        };
        this.getOrders = async (account) => {
            var _a, _b, _c;
            try {
                const locale = await this.getCommercetoolsLocal();
                const config = (_c = (_b = (_a = this.frontasticContext) === null || _a === void 0 ? void 0 : _a.project) === null || _b === void 0 ? void 0 : _b.configuration) === null || _c === void 0 ? void 0 : _c.preBuy;
                const response = await this.getApiForProject()
                    .orders()
                    .get({
                    queryArgs: {
                        expand: [
                            'lineItems[*].discountedPrice.includedDiscounts[*].discount',
                            'discountCodes[*].discountCode',
                            'paymentInfo.payments[*]',
                        ],
                        where: `customerId="${account.accountId}"`,
                        sort: 'createdAt desc',
                    },
                })
                    .execute();
                return response.body.results.map((order) => CartMapper.commercetoolsOrderToOrder(order, locale, config));
            }
            catch (error) {
                throw new Error(`get orders failed. ${error}`);
            }
        };
        this.getOrder = async (orderNumber) => {
            var _a, _b, _c;
            try {
                const locale = await this.getCommercetoolsLocal();
                const config = (_c = (_b = (_a = this.frontasticContext) === null || _a === void 0 ? void 0 : _a.project) === null || _b === void 0 ? void 0 : _b.configuration) === null || _c === void 0 ? void 0 : _c.preBuy;
                const response = await this.getApiForProject()
                    .orders()
                    .withOrderNumber({ orderNumber })
                    .get({
                    queryArgs: {
                        expand: [
                            'lineItems[*].discountedPrice.includedDiscounts[*].discount',
                            'discountCodes[*].discountCode',
                            'paymentInfo.payments[*]',
                        ],
                    },
                })
                    .execute();
                return CartMapper.commercetoolsOrderToOrder(response.body, locale, config);
            }
            catch (error) {
                throw new Error(`get orders failed. ${error}`);
            }
        };
        this.returnItems = async (orderNumber, returnLineItems) => {
            var _a, _b, _c;
            try {
                const locale = await this.getCommercetoolsLocal();
                const config = (_c = (_b = (_a = this.frontasticContext) === null || _a === void 0 ? void 0 : _a.project) === null || _b === void 0 ? void 0 : _b.configuration) === null || _c === void 0 ? void 0 : _c.preBuy;
                const response = await this.getOrder(orderNumber).then((order) => {
                    return this.getApiForProject()
                        .orders()
                        .withOrderNumber({ orderNumber })
                        .post({
                        body: {
                            version: +order.orderVersion,
                            actions: [
                                {
                                    action: 'addReturnInfo',
                                    items: returnLineItems,
                                    returnDate: new Date().toISOString(),
                                    returnTrackingId: new Date().getTime().toString(),
                                },
                            ],
                        },
                    })
                        .execute();
                });
                return CartMapper.commercetoolsOrderToOrder(response.body, locale, config);
            }
            catch (error) {
                throw error;
            }
        };
        this.getBusinessUnitOrders = async (keys) => {
            var _a, _b, _c;
            try {
                const locale = await this.getCommercetoolsLocal();
                const config = (_c = (_b = (_a = this.frontasticContext) === null || _a === void 0 ? void 0 : _a.project) === null || _b === void 0 ? void 0 : _b.configuration) === null || _c === void 0 ? void 0 : _c.preBuy;
                const response = await this.getApiForProject()
                    .orders()
                    .get({
                    queryArgs: {
                        expand: [
                            'lineItems[*].discountedPrice.includedDiscounts[*].discount',
                            'discountCodes[*].discountCode',
                            'paymentInfo.payments[*]',
                        ],
                        where: `businessUnit(key in (${keys}))`,
                        sort: 'createdAt desc',
                    },
                })
                    .execute();
                return response.body.results.map((order) => CartMapper.commercetoolsOrderToOrder(order, locale, config));
            }
            catch (error) {
                throw new Error(`get orders failed. ${error}`);
            }
        };
        this.getShippingMethods = async (onlyMatching) => {
            try {
                const locale = await this.getCommercetoolsLocal();
                const methodArgs = {
                    queryArgs: {
                        expand: ['zoneRates[*].zone'],
                        country: undefined,
                    },
                };
                let requestBuilder = this.getApiForProject().shippingMethods().get(methodArgs);
                if (onlyMatching) {
                    methodArgs.queryArgs.country = locale.country;
                    requestBuilder = this.getApiForProject().shippingMethods().matchingLocation().get(methodArgs);
                }
                const response = await requestBuilder.execute();
                return response.body.results.map((shippingMethod) => CartMapper.commercetoolsShippingMethodToShippingMethod(shippingMethod, locale));
            }
            catch (error) {
                throw new Error(`getShippingMethods failed. ${error}`);
            }
        };
        this.getAvailableShippingMethods = async (cart) => {
            try {
                const locale = await this.getCommercetoolsLocal();
                const response = await this.getApiForProject()
                    .shippingMethods()
                    .matchingCart()
                    .get({
                    queryArgs: {
                        expand: ['zoneRates[*].zone'],
                        cartId: cart.cartId,
                    },
                })
                    .execute();
                return response.body.results.map((shippingMethod) => CartMapper.commercetoolsShippingMethodToShippingMethod(shippingMethod, locale));
            }
            catch (error) {
                throw new Error(`getAvailableShippingMethods failed. ${error}`);
            }
        };
        this.addPayment = async (cart, payment) => {
            let paymentDraft;
            try {
                const locale = await this.getCommercetoolsLocal();
                paymentDraft = {
                    key: payment.id,
                    amountPlanned: {
                        centAmount: payment.amountPlanned.centAmount,
                        currencyCode: payment.amountPlanned.currencyCode,
                    },
                    interfaceId: payment.paymentId,
                    paymentMethodInfo: {
                        paymentInterface: payment.paymentProvider,
                        method: payment.paymentMethod,
                    },
                    paymentStatus: {
                        interfaceCode: payment.paymentStatus,
                        interfaceText: payment.debug,
                    },
                };
                const paymentResponse = await this.getApiForProject()
                    .payments()
                    .post({
                    body: paymentDraft,
                })
                    .execute();
                const cartUpdate = {
                    version: +cart.cartVersion,
                    actions: [
                        {
                            action: 'addPayment',
                            payment: {
                                typeId: 'payment',
                                id: paymentResponse.body.id,
                            },
                        },
                    ],
                };
                const commercetoolsCart = await this.updateCart(cart.cartId, cartUpdate, locale);
                return this.buildCartWithAvailableShippingMethods(commercetoolsCart, locale);
            }
            catch (error) {
                throw new Error(`addPayment failed. ${error}, ${JSON.stringify(paymentDraft)}`);
            }
        };
        this.updatePayment = async (cart, payment) => {
            try {
                const locale = await this.getCommercetoolsLocal();
                const originalPayment = cart.payments.find((cartPayment) => cartPayment.id === payment.id);
                if (originalPayment === undefined) {
                    throw new Error(`Payment ${payment.id} not found in cart ${cart.cartId}`);
                }
                const paymentUpdateActions = [];
                if (payment.paymentStatus) {
                    paymentUpdateActions.push({
                        action: 'setStatusInterfaceCode',
                        interfaceCode: payment.paymentStatus,
                    });
                }
                if (payment.debug) {
                    paymentUpdateActions.push({
                        action: 'setStatusInterfaceText',
                        interfaceText: payment.debug,
                    });
                }
                if (payment.paymentId) {
                    paymentUpdateActions.push({
                        action: 'setInterfaceId',
                        interfaceId: payment.paymentId,
                    });
                }
                if (paymentUpdateActions.length === 0) {
                    return payment;
                }
                const response = await this.getApiForProject()
                    .payments()
                    .withKey({
                    key: originalPayment.id,
                })
                    .post({
                    body: {
                        version: originalPayment.version,
                        actions: paymentUpdateActions,
                    },
                })
                    .execute();
                return CartMapper.commercetoolsPaymentToPayment(response.body, locale);
            }
            catch (error) {
                throw new Error(`updatePayment failed. ${error}`);
            }
        };
        this.redeemDiscountCode = async (cart, code) => {
            try {
                const locale = await this.getCommercetoolsLocal();
                const cartUpdate = {
                    version: +cart.cartVersion,
                    actions: [
                        {
                            action: 'addDiscountCode',
                            code: code,
                        },
                    ],
                };
                const commercetoolsCart = await this.updateCart(cart.cartId, cartUpdate, locale);
                const data = await this.buildCartWithAvailableShippingMethods(commercetoolsCart, locale);
                return { statusCode: 200, data };
            }
            catch (error) {
                return {
                    statusCode: error.statusCode,
                    error: error.message,
                };
            }
        };
        this.removeDiscountCode = async (cart, discount) => {
            try {
                const locale = await this.getCommercetoolsLocal();
                const cartUpdate = {
                    version: +cart.cartVersion,
                    actions: [
                        {
                            action: 'removeDiscountCode',
                            discountCode: {
                                typeId: 'discount-code',
                                id: discount.discountId,
                            },
                        },
                    ],
                };
                const commercetoolsCart = await this.updateCart(cart.cartId, cartUpdate, locale);
                return this.buildCartWithAvailableShippingMethods(commercetoolsCart, locale);
            }
            catch (error) {
                throw new Error(`removeDiscountCode failed. ${error}`);
            }
        };
        this.buildCartWithAvailableShippingMethods = async (commercetoolsCart, locale) => {
            const cart = await this.assertCorrectLocale(commercetoolsCart, locale);
            try {
                if (cart.shippingAddress !== undefined && cart.shippingAddress.country !== undefined) {
                    cart.availableShippingMethods = await this.getAvailableShippingMethods(cart);
                }
            }
            catch (error) {
                throw new Error(`buildCartWithAvailableShippingMethods failed. ${error}`);
            }
            return cart;
        };
        this.assertCorrectLocale = async (commercetoolsCart, locale) => {
            var _a, _b, _c;
            if (commercetoolsCart.totalPrice.currencyCode !== locale.currency.toLocaleUpperCase()) {
                return this.recreate(commercetoolsCart, locale);
            }
            const config = (_c = (_b = (_a = this.frontasticContext) === null || _a === void 0 ? void 0 : _a.project) === null || _b === void 0 ? void 0 : _b.configuration) === null || _c === void 0 ? void 0 : _c.preBuy;
            if (this.doesCartNeedLocaleUpdate(commercetoolsCart, locale)) {
                const cartUpdate = {
                    version: commercetoolsCart.version,
                    actions: [
                        {
                            action: 'setCountry',
                            country: locale.country,
                        },
                        {
                            action: 'setLocale',
                            country: locale.language,
                        },
                    ],
                };
                commercetoolsCart = await this.updateCart(commercetoolsCart.id, cartUpdate, locale);
                return CartMapper.commercetoolsCartToCart(commercetoolsCart, locale, config);
            }
            return CartMapper.commercetoolsCartToCart(commercetoolsCart, locale, config);
        };
        this.recreate = async (primaryCommercetoolsCart, locale) => {
            const primaryCartId = primaryCommercetoolsCart.id;
            const cartVersion = primaryCommercetoolsCart.version;
            const lineItems = primaryCommercetoolsCart.lineItems;
            const cartDraft = {
                currency: locale.currency,
                country: locale.country,
                locale: locale.language,
            };
            const propertyList = [
                'customerId',
                'customerEmail',
                'customerGroup',
                'anonymousId',
                'store',
                'inventoryMode',
                'taxMode',
                'taxRoundingMode',
                'taxCalculationMode',
                'shippingAddress',
                'billingAddress',
                'shippingMethod',
                'externalTaxRateForShippingMethod',
                'deleteDaysAfterLastModification',
                'origin',
                'shippingRateInput',
                'itemShippingAddresses',
            ];
            for (const key of propertyList) {
                if (primaryCommercetoolsCart.hasOwnProperty(key)) {
                    cartDraft[key] = primaryCommercetoolsCart[key];
                }
            }
            let replicatedCommercetoolsCart = await this.getApiForProject()
                .carts()
                .post({
                queryArgs: {
                    expand: [
                        'lineItems[*].discountedPrice.includedDiscounts[*].discount',
                        'discountCodes[*].discountCode',
                        'paymentInfo.payments[*]',
                    ],
                },
                body: cartDraft,
            })
                .execute()
                .then((response) => {
                return response.body;
            });
            for (const lineItem of lineItems) {
                try {
                    const cartUpdate = {
                        version: +replicatedCommercetoolsCart.version,
                        actions: [
                            {
                                action: 'addLineItem',
                                sku: lineItem.variant.sku,
                                quantity: +lineItem.quantity,
                            },
                        ],
                    };
                    replicatedCommercetoolsCart = await this.updateCart(replicatedCommercetoolsCart.id, cartUpdate, locale);
                }
                catch (error) {
                }
            }
            await this.deleteCart(primaryCartId, cartVersion);
            return CartMapper.commercetoolsCartToCart(replicatedCommercetoolsCart, locale);
        };
        this.deleteCart = async (primaryCartId, cartVersion) => {
            await this.getApiForProject()
                .carts()
                .withId({
                ID: primaryCartId,
            })
                .delete({
                queryArgs: {
                    version: cartVersion,
                },
            })
                .execute();
        };
        this.replicateCart = async (orderId) => {
            try {
                const locale = await this.getCommercetoolsLocal();
                const response = await this.getApiForProject()
                    .carts()
                    .replicate()
                    .post({
                    body: {
                        reference: {
                            id: orderId,
                            typeId: 'order',
                        },
                    },
                })
                    .execute();
                return this.buildCartWithAvailableShippingMethods(response.body, locale);
            }
            catch (e) {
                throw `cannot replicate ${e}`;
            }
        };
        this.addItemShippingAddress = async (originalCart, address) => {
            return this.getById(originalCart.cartId).then((cart) => {
                return this.getApiForProject()
                    .carts()
                    .withId({
                    ID: cart.cartId,
                })
                    .post({
                    body: {
                        version: +cart.cartVersion,
                        actions: [
                            {
                                action: 'addItemShippingAddress',
                                address: {
                                    ...address,
                                    key: address.id,
                                },
                            },
                        ],
                    },
                })
                    .execute();
            });
        };
        this.updateLineItemShippingDetails = async (cartId, lineItemId, targets) => {
            return this.getById(cartId).then((cart) => {
                return this.getApiForProject()
                    .carts()
                    .withId({
                    ID: cart.cartId,
                })
                    .post({
                    body: {
                        version: +cart.cartVersion,
                        actions: [
                            {
                                action: 'setLineItemShippingDetails',
                                lineItemId,
                                shippingDetails: {
                                    targets,
                                },
                            },
                        ],
                    },
                })
                    .execute();
            });
        };
        this.doesCartNeedLocaleUpdate = (commercetoolsCart, locale) => {
            if (commercetoolsCart.country === undefined) {
                return true;
            }
            if (commercetoolsCart.locale === undefined) {
                return true;
            }
            return commercetoolsCart.country !== locale.country || commercetoolsCart.locale !== locale.language;
        };
    }
    async updateCart(cartId, cartUpdate, locale) {
        return await this.getApiForProject()
            .carts()
            .withId({
            ID: cartId,
        })
            .post({
            queryArgs: {
                expand: [
                    'lineItems[*].discountedPrice.includedDiscounts[*].discount',
                    'discountCodes[*].discountCode',
                    'paymentInfo.payments[*]',
                ],
            },
            body: cartUpdate,
        })
            .execute()
            .then((response) => {
            return response.body;
        });
    }
}

// CONCATENATED MODULE: ./commerce-commercetools/utils/CartFetcher.ts


class CartFetcher_CartFetcher {
    static async fetchCart(request, actionContext) {
        var _a, _b;
        const cartApi = new CartApi_CartApi(actionContext.frontasticContext, getLocale(request));
        if (((_a = request.sessionData) === null || _a === void 0 ? void 0 : _a.account) !== undefined) {
            return await cartApi.getForUser(request.sessionData.account, request.sessionData.organization);
        }
        if (((_b = request.sessionData) === null || _b === void 0 ? void 0 : _b.cartId) !== undefined) {
            try {
                return await cartApi.getById(request.sessionData.cartId);
            }
            catch (error) {
                console.info(`Error fetching the cart ${request.sessionData.cartId}, creating a new one. ${error}`);
            }
        }
        return {};
    }
}

// EXTERNAL MODULE: ./node_modules/nodemailer/lib/nodemailer.js
var nodemailer = __webpack_require__(23);

// CONCATENATED MODULE: ./commerce-commercetools/apis/EmailApi.ts

class EmailApi_EmailApi {
    constructor(credentials) {
        this.client_host = credentials.client_host;
        this.sender = credentials.sender;
        this.transport = nodemailer["createTransport"]({
            host: credentials.host,
            port: +credentials.port,
            secure: credentials.port == 465,
            auth: {
                user: credentials.user,
                pass: credentials.password,
            },
        });
    }
    async initTest() {
        const testAccount = await nodemailer["createTestAccount"]();
        this.transport = nodemailer["createTransport"]({
            host: 'smtp.ethereal.email',
            port: 587,
            secure: false,
            auth: {
                user: testAccount.user,
                pass: testAccount.pass,
            },
        });
    }
    getUrl(token, relPath, host) {
        const path = `${relPath}?token=${token}`;
        const url = `${host}/${path}`;
        return url;
    }
    async sendEmail(data) {
        const from = this.sender;
        const { to, text, html, subject } = data;
        return await this.transport.sendMail({ from, to, subject, text, html });
    }
    async sendVerificationEmail(account, host) {
        if (!account.confirmationToken)
            return;
        const url = this.getUrl(account.confirmationToken, 'verify', host);
        const html = `
                  <h1>Thanks for your registration!</h1>
                  <p style="margin-top: 10px;color:gray;">Please activate your account by clicking the below link</p>
                  <a href="${url}">${url}</a>
                `;
        try {
            await this.sendEmail({
                to: account.email,
                subject: 'Account Verification',
                html,
            });
        }
        catch (error) { }
    }
    async sendPasswordResetEmail(token, email, host) {
        if (!token)
            return;
        const url = this.getUrl(token, 'reset-password', host);
        const html = `
                  <h1>You requested a password reset!</h1>
                  <p style="margin-top: 10px;color:gray;">Please click the link below to proceed.</p>
                  <a href="${url}">${url}</a>
                `;
        await this.sendEmail({
            to: email,
            subject: 'Password Reset',
            html,
        });
    }
    async sendPaymentConfirmationEmail(email) {
        const html = `
                  <h1>Thanks for your order!</h1>
                  <p style="margin-top: 10px;color:gray;">Your payment has been confirmed.</p>
                `;
        try {
            await this.sendEmail({
                to: email,
                subject: 'Payment confirmed',
                html,
            });
        }
        catch (error) { }
    }
}

// CONCATENATED MODULE: ./commerce-commercetools/actionControllers/AccountController.ts





async function loginAccount(request, actionContext, account, reverify = false) {
    const accountApi = new AccountApi_AccountApi(actionContext.frontasticContext, getLocale(request));
    const businessUnitApi = new BusinessUnitApi_BusinessUnitApi(actionContext.frontasticContext, getLocale(request));
    const cart = await CartFetcher_CartFetcher.fetchCart(request, actionContext);
    try {
        const accountRes = await accountApi.login(account, cart, reverify);
        const organization = await businessUnitApi.getOrganization(accountRes.accountId);
        return { account: accountRes, organization };
    }
    catch (e) {
        throw e;
    }
}
function assertIsAuthenticated(request) {
    const account = fetchAccountFromSession(request);
    if (account === undefined) {
        throw new Error('Not logged in.');
    }
}
function fetchAccountFromSession(request) {
    var _a;
    if (((_a = request.sessionData) === null || _a === void 0 ? void 0 : _a.account) !== undefined) {
        return request.sessionData.account;
    }
    return undefined;
}
function parseBirthday(accountRegisterBody) {
    var _a, _b;
    if (accountRegisterBody.birthdayYear) {
        return new Date(+accountRegisterBody.birthdayYear, (_a = +(accountRegisterBody === null || accountRegisterBody === void 0 ? void 0 : accountRegisterBody.birthdayMonth)) !== null && _a !== void 0 ? _a : 1, (_b = +(accountRegisterBody === null || accountRegisterBody === void 0 ? void 0 : accountRegisterBody.birthdayDay)) !== null && _b !== void 0 ? _b : 1);
    }
    return null;
}
function mapRequestToAccount(request) {
    const accountRegisterBody = JSON.parse(request.body);
    const account = {
        email: accountRegisterBody === null || accountRegisterBody === void 0 ? void 0 : accountRegisterBody.email,
        confirmed: accountRegisterBody === null || accountRegisterBody === void 0 ? void 0 : accountRegisterBody.confirmed,
        password: accountRegisterBody === null || accountRegisterBody === void 0 ? void 0 : accountRegisterBody.password,
        salutation: accountRegisterBody === null || accountRegisterBody === void 0 ? void 0 : accountRegisterBody.salutation,
        firstName: accountRegisterBody === null || accountRegisterBody === void 0 ? void 0 : accountRegisterBody.firstName,
        lastName: accountRegisterBody === null || accountRegisterBody === void 0 ? void 0 : accountRegisterBody.lastName,
        company: accountRegisterBody === null || accountRegisterBody === void 0 ? void 0 : accountRegisterBody.company,
        birthday: parseBirthday(accountRegisterBody),
        addresses: [],
    };
    if (accountRegisterBody.billingAddress) {
        accountRegisterBody.billingAddress.isDefaultBillingAddress = true;
        accountRegisterBody.billingAddress.isDefaultShippingAddress = !(accountRegisterBody.shippingAddress !== undefined);
        account.addresses.push(accountRegisterBody.billingAddress);
    }
    if (accountRegisterBody.shippingAddress) {
        accountRegisterBody.shippingAddress.isDefaultShippingAddress = true;
        accountRegisterBody.shippingAddress.isDefaultBillingAddress = !(accountRegisterBody.billingAddress !== undefined);
        account.addresses.push(accountRegisterBody.shippingAddress);
    }
    return account;
}
const getAccount = async (request, actionContext) => {
    const account = fetchAccountFromSession(request);
    if (account === undefined) {
        return {
            statusCode: 200,
            body: JSON.stringify({
                loggedIn: false,
            }),
        };
    }
    const response = {
        statusCode: 200,
        body: JSON.stringify({
            loggedIn: true,
            account,
        }),
        sessionData: {
            ...request.sessionData,
            account: account,
        },
    };
    return response;
};
const register = async (request, actionContext) => {
    const accountApi = new AccountApi_AccountApi(actionContext.frontasticContext, getLocale(request));
    const emailApi = new EmailApi_EmailApi(actionContext.frontasticContext.project.configuration.smtp);
    const accountData = mapRequestToAccount(request);
    const host = JSON.parse(request.body).host;
    const cart = await CartFetcher_CartFetcher.fetchCart(request, actionContext).catch(() => undefined);
    let response;
    try {
        const account = await accountApi.create(accountData, cart);
        if (!account.confirmed)
            await emailApi.sendVerificationEmail(account, host);
        response = {
            statusCode: 200,
            body: JSON.stringify({ accountId: account.accountId }),
            sessionData: {
                ...request.sessionData,
            },
        };
    }
    catch (e) {
        response = {
            statusCode: 400,
            error: e === null || e === void 0 ? void 0 : e.message,
            errorCode: 500,
        };
    }
    return response;
};
const resendVerificationEmail = async (request, actionContext) => {
    const data = JSON.parse(request.body);
    const host = JSON.parse(request.body).host;
    const emailApi = new EmailApi_EmailApi(actionContext.frontasticContext.project.configuration.smtp);
    const reverify = true;
    const { account } = await loginAccount(request, actionContext, data, reverify);
    await emailApi.sendVerificationEmail(account, host);
    const response = {
        statusCode: 200,
    };
    return response;
};
const AccountController_confirm = async (request, actionContext) => {
    const accountApi = new AccountApi_AccountApi(actionContext.frontasticContext, getLocale(request));
    const accountConfirmBody = JSON.parse(request.body);
    const account = await accountApi.confirmEmail(accountConfirmBody.token);
    const response = {
        statusCode: 200,
        body: JSON.stringify(account),
        sessionData: {
            ...request.sessionData,
            account: account,
        },
    };
    return response;
};
const login = async (request, actionContext) => {
    const accountLoginBody = JSON.parse(request.body);
    const loginInfo = {
        email: accountLoginBody.email,
        password: accountLoginBody.password,
    };
    let response;
    try {
        const { account, organization } = await loginAccount(request, actionContext, loginInfo);
        response = {
            statusCode: 200,
            body: JSON.stringify(account),
            sessionData: {
                ...request.sessionData,
                account,
                organization,
            },
        };
    }
    catch (e) {
        response = {
            statusCode: 400,
            error: e === null || e === void 0 ? void 0 : e.message,
            errorCode: 500,
        };
    }
    return response;
};
const logout = async (request, actionContext) => {
    return {
        statusCode: 200,
        body: JSON.stringify({}),
        sessionData: {
            ...request.sessionData,
            organization: undefined,
            account: undefined,
        },
    };
};
const AccountController_password = async (request, actionContext) => {
    assertIsAuthenticated(request);
    let account = fetchAccountFromSession(request);
    const accountApi = new AccountApi_AccountApi(actionContext.frontasticContext, getLocale(request));
    const accountChangePasswordBody = JSON.parse(request.body);
    account = await accountApi.updatePassword(account, accountChangePasswordBody.oldPassword, accountChangePasswordBody.newPassword);
    return {
        statusCode: 200,
        body: JSON.stringify(account),
        sessionData: {
            ...request.sessionData,
            account,
        },
    };
};
const requestReset = async (request, actionContext) => {
    const accountApi = new AccountApi_AccountApi(actionContext.frontasticContext, getLocale(request));
    const emailApi = new EmailApi_EmailApi(actionContext.frontasticContext.project.configuration.smtp);
    const accountRequestResetBody = JSON.parse(request.body);
    const passwordResetToken = await accountApi.generatePasswordResetToken(accountRequestResetBody.email);
    await emailApi.sendPasswordResetEmail(passwordResetToken.confirmationToken, accountRequestResetBody.email, accountRequestResetBody.host);
    return {
        statusCode: 200,
        body: JSON.stringify({}),
        sessionData: {
            ...request.sessionData,
            account: undefined,
        },
    };
};
const AccountController_reset = async (request, actionContext) => {
    const accountResetBody = JSON.parse(request.body);
    const accountApi = new AccountApi_AccountApi(actionContext.frontasticContext, getLocale(request));
    const newAccount = await accountApi.resetPassword(accountResetBody.token, accountResetBody.newPassword);
    newAccount.password = accountResetBody.newPassword;
    const { account, organization } = await loginAccount(request, actionContext, newAccount);
    return {
        statusCode: 200,
        body: JSON.stringify(account),
        sessionData: {
            ...request.sessionData,
            account,
            organization,
        },
    };
};
const update = async (request, actionContext) => {
    assertIsAuthenticated(request);
    let account = fetchAccountFromSession(request);
    const accountApi = new AccountApi_AccountApi(actionContext.frontasticContext, getLocale(request));
    account = {
        ...account,
        ...mapRequestToAccount(request),
    };
    account = await accountApi.update(account);
    return {
        statusCode: 200,
        body: JSON.stringify(account),
        sessionData: {
            ...request.sessionData,
            account,
        },
    };
};
const addAddress = async (request, actionContext) => {
    assertIsAuthenticated(request);
    let account = fetchAccountFromSession(request);
    const address = JSON.parse(request.body);
    const accountApi = new AccountApi_AccountApi(actionContext.frontasticContext, getLocale(request));
    account = await accountApi.addAddress(account, address);
    return {
        statusCode: 200,
        body: JSON.stringify(account),
        sessionData: {
            ...request.sessionData,
            account,
        },
    };
};
const updateAddress = async (request, actionContext) => {
    assertIsAuthenticated(request);
    let account = fetchAccountFromSession(request);
    const address = JSON.parse(request.body);
    const accountApi = new AccountApi_AccountApi(actionContext.frontasticContext, getLocale(request));
    account = await accountApi.updateAddress(account, address);
    return {
        statusCode: 200,
        body: JSON.stringify(account),
        sessionData: {
            ...request.sessionData,
            account,
        },
    };
};
const removeAddress = async (request, actionContext) => {
    assertIsAuthenticated(request);
    let account = fetchAccountFromSession(request);
    const address = JSON.parse(request.body);
    const accountApi = new AccountApi_AccountApi(actionContext.frontasticContext, getLocale(request));
    account = await accountApi.removeAddress(account, address);
    return {
        statusCode: 200,
        body: JSON.stringify(account),
        sessionData: {
            ...request.sessionData,
            account,
        },
    };
};
const setDefaultBillingAddress = async (request, actionContext) => {
    assertIsAuthenticated(request);
    let account = fetchAccountFromSession(request);
    const address = JSON.parse(request.body);
    const accountApi = new AccountApi_AccountApi(actionContext.frontasticContext, getLocale(request));
    account = await accountApi.setDefaultBillingAddress(account, address);
    return {
        statusCode: 200,
        body: JSON.stringify(account),
        sessionData: {
            ...request.sessionData,
            account,
        },
    };
};
const setDefaultShippingAddress = async (request, actionContext) => {
    assertIsAuthenticated(request);
    let account = fetchAccountFromSession(request);
    const address = JSON.parse(request.body);
    const accountApi = new AccountApi_AccountApi(actionContext.frontasticContext, getLocale(request));
    account = await accountApi.setDefaultShippingAddress(account, address);
    return {
        statusCode: 200,
        body: JSON.stringify(account),
        sessionData: {
            ...request.sessionData,
            account,
        },
    };
};

// CONCATENATED MODULE: ./commerce-commercetools/actionControllers/ProductController.ts



const getProduct = async (request, actionContext) => {
    const productApi = new ProductApi_ProductApi(actionContext.frontasticContext, getLocale(request));
    let productQuery = {};
    if ('id' in request.query) {
        productQuery = {
            productIds: [request.query['id']],
        };
    }
    if ('sku' in request.query) {
        productQuery = {
            skus: [request.query['sku']],
        };
    }
    const product = await productApi.getProduct(productQuery);
    const response = {
        statusCode: 200,
        body: JSON.stringify(product),
        sessionData: request.sessionData,
    };
    return response;
};
const query = async (request, actionContext) => {
    const productApi = new ProductApi_ProductApi(actionContext.frontasticContext, getLocale(request));
    const productQuery = ProductQueryFactory_ProductQueryFactory.queryFromParams(request);
    const queryResult = await productApi.query(productQuery);
    const response = {
        statusCode: 200,
        body: JSON.stringify(queryResult),
        sessionData: request.sessionData,
    };
    return response;
};
const getAttributeGroup = async (request, actionContext) => {
    var _a;
    const productApi = new ProductApi_ProductApi(actionContext.frontasticContext, getLocale(request));
    let queryResult = [];
    try {
        queryResult = await productApi.getAttributeGroup((_a = request.query) === null || _a === void 0 ? void 0 : _a['key']);
    }
    catch (e) {
        console.log(e);
    }
    const response = {
        statusCode: 200,
        body: JSON.stringify(queryResult),
        sessionData: request.sessionData,
    };
    return response;
};
const queryCategories = async (request, actionContext) => {
    var _a, _b, _c, _d, _e, _f, _g, _h;
    const productApi = new ProductApi_ProductApi(actionContext.frontasticContext, getLocale(request));
    const categoryQuery = {
        limit: (_b = (_a = request.query) === null || _a === void 0 ? void 0 : _a.limit) !== null && _b !== void 0 ? _b : undefined,
        cursor: (_d = (_c = request.query) === null || _c === void 0 ? void 0 : _c.cursor) !== null && _d !== void 0 ? _d : undefined,
        slug: (_f = (_e = request.query) === null || _e === void 0 ? void 0 : _e.slug) !== null && _f !== void 0 ? _f : undefined,
        parentId: (_h = (_g = request.query) === null || _g === void 0 ? void 0 : _g.parentId) !== null && _h !== void 0 ? _h : undefined,
    };
    const queryResult = await productApi.queryCategories(categoryQuery);
    const response = {
        statusCode: 200,
        body: JSON.stringify(queryResult),
        sessionData: request.sessionData,
    };
    return response;
};
const searchableAttributes = async (request, actionContext) => {
    const productApi = new ProductApi_ProductApi(actionContext.frontasticContext, getLocale(request));
    const result = await productApi.getSearchableAttributes();
    const response = {
        statusCode: 200,
        body: JSON.stringify(result),
        sessionData: request.sessionData,
    };
    return response;
};

// CONCATENATED MODULE: ./types/cart/Payment.ts
var PaymentStatuses;
(function (PaymentStatuses) {
    PaymentStatuses["INIT"] = "init";
    PaymentStatuses["PENDING"] = "pending";
    PaymentStatuses["PAID"] = "paid";
    PaymentStatuses["FAILED"] = "failed";
})(PaymentStatuses || (PaymentStatuses = {}));

// CONCATENATED MODULE: ./commerce-commercetools/actionControllers/CartController.ts





async function updateCartFromRequest(request, actionContext) {
    var _a;
    const cartApi = new CartApi_CartApi(actionContext.frontasticContext, getLocale(request));
    let cart = await CartFetcher_CartFetcher.fetchCart(request, actionContext);
    if ((request === null || request === void 0 ? void 0 : request.body) === undefined || (request === null || request === void 0 ? void 0 : request.body) === '') {
        return cart;
    }
    const body = JSON.parse(request.body);
    if (((_a = body === null || body === void 0 ? void 0 : body.account) === null || _a === void 0 ? void 0 : _a.email) !== undefined) {
        cart = await cartApi.setEmail(cart, body.account.email);
    }
    if ((body === null || body === void 0 ? void 0 : body.shipping) !== undefined || (body === null || body === void 0 ? void 0 : body.billing) !== undefined) {
        const shippingAddress = (body === null || body === void 0 ? void 0 : body.shipping) !== undefined ? body.shipping : body.billing;
        const billingAddress = (body === null || body === void 0 ? void 0 : body.billing) !== undefined ? body.billing : body.shipping;
        cart = await cartApi.setShippingAddress(cart, shippingAddress);
        cart = await cartApi.setBillingAddress(cart, billingAddress);
    }
    return cart;
}
const getCart = async (request, actionContext) => {
    try {
        const cart = await CartFetcher_CartFetcher.fetchCart(request, actionContext);
        const cartId = cart.cartId;
        const response = {
            statusCode: 200,
            body: JSON.stringify(cart),
            sessionData: {
                ...request.sessionData,
                cartId,
            },
        };
        return response;
    }
    catch (e) {
        const response = {
            statusCode: 400,
            sessionData: {
                ...request.sessionData,
                cartId: null,
            },
            error: e === null || e === void 0 ? void 0 : e.message,
            errorCode: 400,
        };
        return response;
    }
};
const addToCart = async (request, actionContext) => {
    var _a, _b, _c, _d;
    const cartApi = new CartApi_CartApi(actionContext.frontasticContext, getLocale(request));
    const body = JSON.parse(request.body);
    const lineItem = {
        variant: {
            sku: ((_a = body.variant) === null || _a === void 0 ? void 0 : _a.sku) || undefined,
            price: undefined,
        },
        count: +((_b = body.variant) === null || _b === void 0 ? void 0 : _b.count) || 1,
    };
    const distributionChannel = (_d = (_c = request.sessionData.organization) === null || _c === void 0 ? void 0 : _c.distributionChannel) === null || _d === void 0 ? void 0 : _d.id;
    let cart = await CartFetcher_CartFetcher.fetchCart(request, actionContext);
    cart = await cartApi.addToCart(cart, lineItem, distributionChannel);
    const cartId = cart.cartId;
    const response = {
        statusCode: 200,
        body: JSON.stringify(cart),
        sessionData: {
            ...request.sessionData,
            cartId,
        },
    };
    return response;
};
const addItemsToCart = async (request, actionContext) => {
    var _a, _b, _c;
    const cartApi = new CartApi_CartApi(actionContext.frontasticContext, getLocale(request));
    const body = JSON.parse(request.body);
    const lineItems = (_a = body.list) === null || _a === void 0 ? void 0 : _a.map((variant) => ({
        variant: {
            sku: variant.sku || undefined,
            price: undefined,
        },
        count: +variant.count || 1,
    }));
    const distributionChannel = (_c = (_b = request.sessionData.organization) === null || _b === void 0 ? void 0 : _b.distributionChannel) === null || _c === void 0 ? void 0 : _c.id;
    let cart = await CartFetcher_CartFetcher.fetchCart(request, actionContext);
    cart = await cartApi.addItemsToCart(cart, lineItems, distributionChannel);
    const cartId = cart.cartId;
    const response = {
        statusCode: 200,
        body: JSON.stringify(cart),
        sessionData: {
            ...request.sessionData,
            cartId,
        },
    };
    return response;
};
const updateLineItem = async (request, actionContext) => {
    var _a, _b;
    const cartApi = new CartApi_CartApi(actionContext.frontasticContext, getLocale(request));
    const body = JSON.parse(request.body);
    const lineItem = {
        lineItemId: (_a = body.lineItem) === null || _a === void 0 ? void 0 : _a.id,
        count: +((_b = body.lineItem) === null || _b === void 0 ? void 0 : _b.count) || 1,
    };
    let cart = await CartFetcher_CartFetcher.fetchCart(request, actionContext);
    cart = await cartApi.updateLineItem(cart, lineItem);
    const cartId = cart.cartId;
    const response = {
        statusCode: 200,
        body: JSON.stringify(cart),
        sessionData: {
            ...request.sessionData,
            cartId,
        },
    };
    return response;
};
const removeLineItem = async (request, actionContext) => {
    var _a;
    const cartApi = new CartApi_CartApi(actionContext.frontasticContext, getLocale(request));
    const body = JSON.parse(request.body);
    const lineItem = {
        lineItemId: (_a = body.lineItem) === null || _a === void 0 ? void 0 : _a.id,
    };
    let cart = await CartFetcher_CartFetcher.fetchCart(request, actionContext);
    cart = await cartApi.removeLineItem(cart, lineItem);
    const cartId = cart.cartId;
    const response = {
        statusCode: 200,
        body: JSON.stringify(cart),
        sessionData: {
            ...request.sessionData,
            cartId,
        },
    };
    return response;
};
const updateCart = async (request, actionContext) => {
    const cart = await updateCartFromRequest(request, actionContext);
    const cartId = cart.cartId;
    const response = {
        statusCode: 200,
        body: JSON.stringify(cart),
        sessionData: {
            ...request.sessionData,
            cartId,
        },
    };
    return response;
};
const checkout = async (request, actionContext) => {
    const cartApi = new CartApi_CartApi(actionContext.frontasticContext, getLocale(request));
    const emailApi = new EmailApi_EmailApi(actionContext.frontasticContext.project.configuration.smtp);
    let cart = await updateCartFromRequest(request, actionContext);
    cart = await cartApi.order(cart);
    const cartId = undefined;
    const response = {
        statusCode: 200,
        body: JSON.stringify(cart),
        sessionData: {
            ...request.sessionData,
            cartId,
        },
    };
    return response;
};
const getOrders = async (request, actionContext) => {
    var _a;
    const cartApi = new CartApi_CartApi(actionContext.frontasticContext, getLocale(request));
    const account = ((_a = request.sessionData) === null || _a === void 0 ? void 0 : _a.account) !== undefined ? request.sessionData.account : undefined;
    if (account === undefined) {
        throw new Error('Not logged in.');
    }
    const orders = await cartApi.getOrders(account);
    const response = {
        statusCode: 200,
        body: JSON.stringify(orders),
        sessionData: {
            ...request.sessionData,
        },
    };
    return response;
};
const getShippingMethods = async (request, actionContext) => {
    try {
        const cartApi = new CartApi_CartApi(actionContext.frontasticContext, getLocale(request));
        const cart = await CartFetcher_CartFetcher.fetchCart(request, actionContext);
        const onlyMatching = request.query.onlyMatching === 'true';
        const shippingMethods = await cartApi.getShippingMethods(onlyMatching);
        const response = {
            statusCode: 200,
            body: JSON.stringify(shippingMethods),
            sessionData: {
                ...request.sessionData,
                cartId: cart.cartId,
            },
        };
        return response;
    }
    catch (e) {
        const response = {
            statusCode: 400,
            sessionData: {
                ...request.sessionData,
                cartId: null,
            },
            error: e.message,
            errorCode: 400,
        };
        return response;
    }
};
const returnItems = async (request, actionContext) => {
    const cartApi = new CartApi_CartApi(actionContext.frontasticContext, getLocale(request));
    let response;
    try {
        const { orderNumber, returnLineItems } = JSON.parse(request.body);
        const res = await cartApi.returnItems(orderNumber, returnLineItems);
        response = {
            statusCode: 200,
            body: JSON.stringify(res),
            sessionData: request.sessionData,
        };
    }
    catch (e) {
        response = {
            statusCode: 400,
            sessionData: request.sessionData,
            error: e === null || e === void 0 ? void 0 : e.message,
            errorCode: 500,
        };
    }
    return response;
};
const getAvailableShippingMethods = async (request, actionContext) => {
    const cartApi = new CartApi_CartApi(actionContext.frontasticContext, getLocale(request));
    const cart = await CartFetcher_CartFetcher.fetchCart(request, actionContext);
    const availableShippingMethods = await cartApi.getAvailableShippingMethods(cart);
    const response = {
        statusCode: 200,
        body: JSON.stringify(availableShippingMethods),
        sessionData: {
            ...request.sessionData,
            cartId: cart.cartId,
        },
    };
    return response;
};
const setShippingMethod = async (request, actionContext) => {
    const cartApi = new CartApi_CartApi(actionContext.frontasticContext, getLocale(request));
    let cart = await CartFetcher_CartFetcher.fetchCart(request, actionContext);
    const shippingMethod = {
        shippingMethodId: request.query.shippingMethodId,
    };
    cart = await cartApi.setShippingMethod(cart, shippingMethod);
    const response = {
        statusCode: 200,
        body: JSON.stringify(cart),
        sessionData: {
            ...request.sessionData,
            cartId: cart.cartId,
        },
    };
    return response;
};
const addPaymentByInvoice = async (request, actionContext) => {
    var _a, _b, _c, _d;
    const cartApi = new CartApi_CartApi(actionContext.frontasticContext, getLocale(request));
    let cart = await CartFetcher_CartFetcher.fetchCart(request, actionContext);
    const body = JSON.parse(request.body);
    const payment = {
        ...body.payment,
        paymentProvider: 'frontastic',
        paymentMethod: 'invoice',
        paymentStatus: PaymentStatuses.PENDING,
    };
    if (payment.amountPlanned === undefined) {
        payment.amountPlanned = {};
    }
    payment.amountPlanned.centAmount = (_b = (_a = payment.amountPlanned.centAmount) !== null && _a !== void 0 ? _a : cart.sum.centAmount) !== null && _b !== void 0 ? _b : undefined;
    payment.amountPlanned.currencyCode = (_d = (_c = payment.amountPlanned.currencyCode) !== null && _c !== void 0 ? _c : cart.sum.currencyCode) !== null && _d !== void 0 ? _d : undefined;
    cart = await cartApi.addPayment(cart, payment);
    const response = {
        statusCode: 200,
        body: JSON.stringify(cart),
        sessionData: {
            ...request.sessionData,
            cartId: cart.cartId,
        },
    };
    return response;
};
const updatePayment = async (request, actionContext) => {
    const cartApi = new CartApi_CartApi(actionContext.frontasticContext, getLocale(request));
    const cart = await CartFetcher_CartFetcher.fetchCart(request, actionContext);
    const body = JSON.parse(request.body);
    const payment = await cartApi.updatePayment(cart, body.payment);
    const response = {
        statusCode: 200,
        body: JSON.stringify(payment),
        sessionData: {
            ...request.sessionData,
            cartId: cart.cartId,
        },
    };
    return response;
};
const redeemDiscount = async (request, actionContext) => {
    const cartApi = new CartApi_CartApi(actionContext.frontasticContext, getLocale(request));
    const cart = await CartFetcher_CartFetcher.fetchCart(request, actionContext);
    const body = JSON.parse(request.body);
    const result = await cartApi.redeemDiscountCode(cart, body.code);
    let response;
    if (result.data) {
        response = {
            statusCode: 200,
            body: JSON.stringify(result.data),
            sessionData: {
                ...request.sessionData,
                cartId: result.data.cartId,
            },
        };
    }
    if (result.error) {
        response = {
            statusCode: result.statusCode,
            errorCode: 101,
            error: result.error,
        };
    }
    return response;
};
const removeDiscount = async (request, actionContext) => {
    const cartApi = new CartApi_CartApi(actionContext.frontasticContext, getLocale(request));
    let cart = await CartFetcher_CartFetcher.fetchCart(request, actionContext);
    const body = JSON.parse(request.body);
    const discount = {
        discountId: body === null || body === void 0 ? void 0 : body.discountId,
    };
    cart = await cartApi.removeDiscountCode(cart, discount);
    const response = {
        statusCode: 200,
        body: JSON.stringify(cart),
        sessionData: {
            ...request.sessionData,
            cartId: cart.cartId,
        },
    };
    return response;
};
const replicateCart = async (request, actionContext) => {
    var _a;
    const cartApi = new CartApi_CartApi(actionContext.frontasticContext, getLocale(request));
    const orderId = (_a = request.query) === null || _a === void 0 ? void 0 : _a['orderId'];
    try {
        if (orderId) {
            const cart = await cartApi.replicateCart(orderId);
            const order = await cartApi.order(cart);
            const response = {
                statusCode: 200,
                body: JSON.stringify(order),
                sessionData: {
                    ...request.sessionData,
                },
            };
            return response;
        }
        throw new Error('Order not found');
    }
    catch (e) {
        const response = {
            statusCode: 400,
            sessionData: request.sessionData,
            error: e === null || e === void 0 ? void 0 : e.message,
            errorCode: 500,
        };
        return response;
    }
};
const splitLineItem = async (request, actionContext) => {
    const cartApi = new CartApi_CartApi(actionContext.frontasticContext, getLocale(request));
    const cart = await CartFetcher_CartFetcher.fetchCart(request, actionContext);
    const body = JSON.parse(request.body);
    const cartItemsShippingAddresses = cart.itemShippingAddresses || [];
    const remainingAddresses = body.data
        .map((item) => item.address)
        .filter((addressSplit) => cartItemsShippingAddresses.findIndex((address) => address.key === addressSplit.id) === -1);
    if (remainingAddresses.length) {
        for await (const address of remainingAddresses) {
            await cartApi.addItemShippingAddress(cart, address);
        }
    }
    const target = body.data.map((item) => ({ addressKey: item.address.id, quantity: item.quantity }));
    const cartData = await cartApi.updateLineItemShippingDetails(cart.cartId, body.lineItemId, target);
    const response = {
        statusCode: 200,
        body: JSON.stringify(cartData),
        sessionData: {
            ...request.sessionData,
            cartId: cart.cartId,
        },
    };
    return response;
};

// CONCATENATED MODULE: ./commerce-commercetools/mappers/WishlistMapper.ts

class WishlistMapper {
}
WishlistMapper.commercetoolsShoppingListToWishlist = (commercetoolsShoppingList, locale) => {
    var _a, _b, _c;
    return {
        wishlistId: commercetoolsShoppingList.id,
        wishlistVersion: commercetoolsShoppingList.version.toString(),
        anonymousId: commercetoolsShoppingList.anonymousId,
        accountId: (_b = (_a = commercetoolsShoppingList.customer) === null || _a === void 0 ? void 0 : _a.id) !== null && _b !== void 0 ? _b : undefined,
        name: commercetoolsShoppingList.name[locale.language],
        description: (_c = commercetoolsShoppingList.description) === null || _c === void 0 ? void 0 : _c[locale.language],
        lineItems: (commercetoolsShoppingList.lineItems || []).map((lineItem) => WishlistMapper.commercetoolsLineItemToLineItem(lineItem, locale)),
        store: WishlistMapper.commercetoolsStoreRefToStore(commercetoolsShoppingList.store),
    };
};
WishlistMapper.commercetoolsStoreRefToStore = (commercetoolsStoreRef) => {
    return {
        id: commercetoolsStoreRef === null || commercetoolsStoreRef === void 0 ? void 0 : commercetoolsStoreRef.id,
        key: commercetoolsStoreRef === null || commercetoolsStoreRef === void 0 ? void 0 : commercetoolsStoreRef.key,
        ...commercetoolsStoreRef === null || commercetoolsStoreRef === void 0 ? void 0 : commercetoolsStoreRef.obj,
    };
};
WishlistMapper.commercetoolsLineItemToLineItem = (commercetoolsLineItem, locale) => {
    var _a, _b;
    const lineItem = {
        lineItemId: commercetoolsLineItem.id,
        name: commercetoolsLineItem.name[locale.language],
        type: 'variant',
        addedAt: new Date(commercetoolsLineItem.addedAt),
        count: commercetoolsLineItem.quantity,
        variant: {
            sku: commercetoolsLineItem.variant.sku,
            images: (_b = (_a = commercetoolsLineItem.variant) === null || _a === void 0 ? void 0 : _a.images) === null || _b === void 0 ? void 0 : _b.map((image) => image.url),
        },
    };
    lineItem._url = ProductRouter_ProductRouter.generateUrlFor(lineItem);
    return lineItem;
};
WishlistMapper.wishlistToCommercetoolsShoppingListDraft = (accountId, storeKey, wishlist, locale) => {
    return {
        customer: !accountId ? undefined : { typeId: 'customer', id: accountId },
        name: { [locale.language]: wishlist.name || '' },
        description: { [locale.language]: wishlist.description || '' },
        store: !storeKey ? undefined : { typeId: 'store', key: storeKey },
    };
};

// CONCATENATED MODULE: ./commerce-commercetools/apis/WishlistApi.ts


const expandVariants = ['lineItems[*].variant', 'store'];
class WishlistApi_WishlistApi extends BaseApi_BaseApi {
    constructor() {
        super(...arguments);
        this.getById = async (wishlistId) => {
            try {
                const locale = await this.getCommercetoolsLocal();
                const response = await this.getApiForProject()
                    .shoppingLists()
                    .withId({ ID: wishlistId })
                    .get({
                    queryArgs: {
                        expand: expandVariants,
                    },
                })
                    .execute();
                return WishlistMapper.commercetoolsShoppingListToWishlist(response.body, locale);
            }
            catch (error) {
                throw new Error(`Get wishlist by ID failed: ${error}`);
            }
        };
        this.getForAccount = async (accountId) => {
            try {
                const locale = await this.getCommercetoolsLocal();
                const response = await this.getApiForProject()
                    .shoppingLists()
                    .get({
                    queryArgs: {
                        where: `customer(id="${accountId}")`,
                        expand: expandVariants,
                    },
                })
                    .execute();
                return response.body.results.map((shoppingList) => WishlistMapper.commercetoolsShoppingListToWishlist(shoppingList, locale));
            }
            catch (error) {
                throw new Error(`Get wishlist for account failed: ${error}`);
            }
        };
        this.getForAccountStore = async (accountId, storeKey) => {
            try {
                const locale = await this.getCommercetoolsLocal();
                const response = await this.getApiForProject()
                    .shoppingLists()
                    .get({
                    queryArgs: {
                        where: [`customer(id="${accountId}")`, `store(key="${storeKey}")`],
                        expand: expandVariants,
                    },
                })
                    .execute();
                return response.body.results.map((shoppingList) => WishlistMapper.commercetoolsShoppingListToWishlist(shoppingList, locale));
            }
            catch (error) {
                throw new Error(`Get wishlist for account failed: ${error}`);
            }
        };
        this.getByIdForAccount = async (wishlistId, accountId) => {
            try {
                const locale = await this.getCommercetoolsLocal();
                const response = await this.getApiForProject()
                    .shoppingLists()
                    .withId({ ID: wishlistId })
                    .get({
                    queryArgs: {
                        where: `customer(id="${accountId}")`,
                        expand: expandVariants,
                    },
                })
                    .execute();
                return WishlistMapper.commercetoolsShoppingListToWishlist(response.body, locale);
            }
            catch (error) {
                throw error;
            }
        };
        this.create = async (accountId, storeKey, wishlist) => {
            try {
                const locale = await this.getCommercetoolsLocal();
                const body = WishlistMapper.wishlistToCommercetoolsShoppingListDraft(accountId, storeKey, wishlist, locale);
                const response = await this.getApiForProject()
                    .shoppingLists()
                    .post({
                    body: body,
                    queryArgs: {
                        expand: expandVariants,
                    },
                })
                    .execute();
                return WishlistMapper.commercetoolsShoppingListToWishlist(response.body, locale);
            }
            catch (error) {
                throw new Error(`Create wishlist failed: ${error}`);
            }
        };
        this.addToWishlist = async (wishlist, request) => {
            try {
                const locale = await this.getCommercetoolsLocal();
                const response = await this.getApiForProject()
                    .shoppingLists()
                    .withId({ ID: wishlist.wishlistId })
                    .post({
                    body: {
                        version: +wishlist.wishlistVersion,
                        actions: [
                            {
                                action: 'addLineItem',
                                sku: request.sku,
                                quantity: request.count,
                            },
                        ],
                    },
                    queryArgs: {
                        expand: expandVariants,
                    },
                })
                    .execute();
                return WishlistMapper.commercetoolsShoppingListToWishlist(response.body, locale);
            }
            catch (error) {
                throw new Error(`Add to wishlist failed: ${error}`);
            }
        };
        this.removeLineItem = async (wishlist, lineItemId) => {
            try {
                const locale = await this.getCommercetoolsLocal();
                const response = await this.getApiForProject()
                    .shoppingLists()
                    .withId({ ID: wishlist.wishlistId })
                    .post({
                    body: {
                        version: +wishlist.wishlistVersion,
                        actions: [
                            {
                                action: 'removeLineItem',
                                lineItemId,
                            },
                        ],
                    },
                    queryArgs: {
                        expand: expandVariants,
                    },
                })
                    .execute();
                return WishlistMapper.commercetoolsShoppingListToWishlist(response.body, locale);
            }
            catch (error) {
                throw new Error(`Add to wishlist failed: ${error}`);
            }
        };
        this.updateLineItemCount = async (wishlist, lineItemId, count) => {
            try {
                const locale = await this.getCommercetoolsLocal();
                const response = await this.getApiForProject()
                    .shoppingLists()
                    .withId({ ID: wishlist.wishlistId })
                    .post({
                    body: {
                        version: +wishlist.wishlistVersion,
                        actions: [
                            {
                                action: 'changeLineItemQuantity',
                                lineItemId,
                                quantity: count,
                            },
                        ],
                    },
                    queryArgs: {
                        expand: expandVariants,
                    },
                })
                    .execute();
                return WishlistMapper.commercetoolsShoppingListToWishlist(response.body, locale);
            }
            catch (error) {
                throw new Error(`Update line item count: ${error}`);
            }
        };
    }
}

// CONCATENATED MODULE: ./commerce-commercetools/actionControllers/WishlistController.ts


function getWishlistApi(request, actionContext) {
    return new WishlistApi_WishlistApi(actionContext.frontasticContext, getLocale(request));
}
function fetchStoreFromSession(request) {
    var _a, _b, _c;
    const store = (_c = (_b = (_a = request.sessionData) === null || _a === void 0 ? void 0 : _a.organization) === null || _b === void 0 ? void 0 : _b.store) === null || _c === void 0 ? void 0 : _c.key;
    if (!store) {
        throw 'No organization in session';
    }
    return store;
}
function WishlistController_fetchAccountFromSession(request) {
    var _a;
    return (_a = request.sessionData) === null || _a === void 0 ? void 0 : _a.account;
}
function fetchAccountFromSessionEnsureLoggedIn(request) {
    const account = WishlistController_fetchAccountFromSession(request);
    if (!account) {
        throw new Error('Not logged in.');
    }
    return account;
}
async function fetchWishlist(request, wishlistApi) {
    const account = fetchAccountFromSessionEnsureLoggedIn(request);
    const wishlistId = request.query.id;
    if (wishlistId !== undefined) {
        return await wishlistApi.getByIdForAccount(wishlistId, account.accountId);
    }
    return null;
}
const getStoreWishlists = async (request, actionContext) => {
    try {
        const account = fetchAccountFromSessionEnsureLoggedIn(request);
        const wishlistApi = getWishlistApi(request, actionContext);
        const storeKey = fetchStoreFromSession(request);
        const wishlists = await wishlistApi.getForAccountStore(account.accountId, storeKey);
        return {
            statusCode: 200,
            body: JSON.stringify(wishlists),
            sessionData: request.sessionData,
        };
    }
    catch (e) {
        const response = {
            statusCode: 400,
            error: e,
            errorCode: 400,
        };
        return response;
    }
};
const getAllWishlists = async (request, actionContext) => {
    const account = fetchAccountFromSessionEnsureLoggedIn(request);
    const wishlistApi = getWishlistApi(request, actionContext);
    const wishlists = await wishlistApi.getForAccount(account.accountId);
    return {
        statusCode: 200,
        body: JSON.stringify(wishlists),
        sessionData: request.sessionData,
    };
};
const getWishlist = async (request, actionContext) => {
    var _a;
    const wishlistApi = getWishlistApi(request, actionContext);
    try {
        const wishlist = await fetchWishlist(request, wishlistApi);
        return {
            statusCode: 200,
            body: JSON.stringify(wishlist),
            sessionData: request.sessionData,
        };
    }
    catch (e) {
        return {
            statusCode: 400,
            sessionData: request.sessionData,
            error: (_a = e === null || e === void 0 ? void 0 : e.body) === null || _a === void 0 ? void 0 : _a.message,
            errorCode: 500,
        };
    }
};
const createWishlist = async (request, actionContext) => {
    const wishlistApi = getWishlistApi(request, actionContext);
    const { wishlist } = JSON.parse(request.body);
    const account = fetchAccountFromSessionEnsureLoggedIn(request);
    const store = fetchStoreFromSession(request);
    const wishlistRes = await wishlistApi.create(account.accountId, store, wishlist);
    return {
        statusCode: 200,
        body: JSON.stringify(wishlistRes),
        sessionData: request.sessionData,
    };
};
const addToWishlist = async (request, actionContext) => {
    var _a;
    const wishlistApi = getWishlistApi(request, actionContext);
    const wishlist = await fetchWishlist(request, wishlistApi);
    const body = JSON.parse(request.body);
    const updatedWishlist = await wishlistApi.addToWishlist(wishlist, {
        sku: ((_a = body === null || body === void 0 ? void 0 : body.variant) === null || _a === void 0 ? void 0 : _a.sku) || undefined,
        count: body.count || 1,
    });
    return {
        statusCode: 200,
        body: JSON.stringify(updatedWishlist),
        sessionData: request.sessionData,
    };
};
const WishlistController_removeLineItem = async (request, actionContext) => {
    var _a, _b;
    const wishlistApi = getWishlistApi(request, actionContext);
    const wishlist = await fetchWishlist(request, wishlistApi);
    const body = JSON.parse(request.body);
    const updatedWishlist = await wishlistApi.removeLineItem(wishlist, (_b = (_a = body.lineItem) === null || _a === void 0 ? void 0 : _a.id) !== null && _b !== void 0 ? _b : undefined);
    return {
        statusCode: 200,
        body: JSON.stringify(updatedWishlist),
        sessionData: request.sessionData,
    };
};
const updateLineItemCount = async (request, actionContext) => {
    var _a, _b;
    const wishlistApi = getWishlistApi(request, actionContext);
    const wishlist = await fetchWishlist(request, wishlistApi);
    const body = JSON.parse(request.body);
    const updatedWishlist = await wishlistApi.updateLineItemCount(wishlist, (_b = (_a = body.lineItem) === null || _a === void 0 ? void 0 : _a.id) !== null && _b !== void 0 ? _b : undefined, body.count || 1);
    return {
        statusCode: 200,
        body: JSON.stringify(updatedWishlist),
        sessionData: request.sessionData,
    };
};

// CONCATENATED MODULE: ./commerce-commercetools/apis/ProjectApi.ts

class ProjectApi_ProjectApi extends BaseApi_BaseApi {
    constructor() {
        super(...arguments);
        this.getProjectSettings = async () => {
            const project = await this.getProject();
            return Promise.resolve({
                name: project.name,
                countries: project.countries,
                currencies: project.currencies,
                languages: project.languages,
            });
        };
    }
}

// CONCATENATED MODULE: ./commerce-commercetools/actionControllers/ProjectController.ts


const getProjectSettings = async (request, actionContext) => {
    const projectApi = new ProjectApi_ProjectApi(actionContext.frontasticContext, getLocale(request));
    const project = await projectApi.getProjectSettings();
    const response = {
        statusCode: 200,
        body: JSON.stringify(project),
        sessionData: request.sessionData,
    };
    return response;
};

// CONCATENATED MODULE: ./commerce-commercetools/actionControllers/StoreController.ts




const DEFAULT_CHANNEL_KEY = 'default-channel';
const create = async (request, actionContext) => {
    const storeApi = new StoreApi_StoreApi(actionContext.frontasticContext, getLocale(request));
    const data = await mapRequestToStore(request, actionContext, storeApi);
    const store = await storeApi.create(data);
    const response = {
        statusCode: 200,
        body: JSON.stringify(store),
        sessionData: request.sessionData,
    };
    return response;
};
const StoreController_query = async (request, actionContext) => {
    const storeApi = new StoreApi_StoreApi(actionContext.frontasticContext, getLocale(request));
    const where = request.query['where'];
    const stores = await storeApi.query(where);
    const response = {
        statusCode: 200,
        body: JSON.stringify(stores),
        sessionData: request.sessionData,
    };
    return response;
};
const setMe = async (request, actionContext) => {
    var _a, _b, _c, _d, _e;
    const storeApi = new StoreApi_StoreApi(actionContext.frontasticContext, getLocale(request));
    const cartApi = new CartApi_CartApi(actionContext.frontasticContext, getLocale(request));
    const data = JSON.parse(request.body);
    const store = await storeApi.get(data.key);
    let distributionChannel = (_b = (_a = request.sessionData) === null || _a === void 0 ? void 0 : _a.organization) === null || _b === void 0 ? void 0 : _b.distributionChannel;
    if ((_c = store === null || store === void 0 ? void 0 : store.distributionChannels) === null || _c === void 0 ? void 0 : _c.length) {
        distributionChannel = store.distributionChannels[0];
    }
    const organization = {
        ...(_d = request.sessionData) === null || _d === void 0 ? void 0 : _d.organization,
        store: {
            typeId: 'store',
            ...store,
        },
        distributionChannel,
    };
    const cart = await cartApi.getForUser((_e = request.sessionData) === null || _e === void 0 ? void 0 : _e.account, organization);
    const cartId = cart.cartId;
    const response = {
        statusCode: 200,
        body: JSON.stringify(distributionChannel),
        sessionData: {
            ...request.sessionData,
            cartId,
            organization,
        },
    };
    return response;
};
async function getParentDistChannels(parentStores) {
    return parentStores.reduce((prev, item) => {
        var _a;
        if (item.distributionChannels.length) {
            return [...prev, ...(_a = item.distributionChannels) === null || _a === void 0 ? void 0 : _a.map((channel) => ({ id: channel.id, typeId: 'channel' }))];
        }
        return prev;
    }, []);
}
async function getParentSupplyChannels(parentStores) {
    return parentStores.reduce((prev, item) => {
        var _a;
        if (item.supplyChannels.length) {
            return [...prev, ...(_a = item.supplyChannels) === null || _a === void 0 ? void 0 : _a.map((channel) => ({ id: channel.id, typeId: 'channel' }))];
        }
        return prev;
    }, []);
}
async function mapRequestToStore(request, actionContext, storeApi) {
    const storeBody = JSON.parse(request.body);
    const key = storeBody.account.company.toLowerCase().replace(/ /g, '_');
    const parentBusinessUnit = storeBody.parentBusinessUnit;
    let supplyChannels = [];
    let distributionChannels = [];
    if (parentBusinessUnit) {
        const businessUnitApi = new BusinessUnitApi_BusinessUnitApi(actionContext.frontasticContext, getLocale(request));
        const businessUnit = await businessUnitApi.get(parentBusinessUnit);
        if (businessUnit === null || businessUnit === void 0 ? void 0 : businessUnit.stores) {
            const storeKeys = businessUnit === null || businessUnit === void 0 ? void 0 : businessUnit.stores.map((store) => `"${store.key}"`).join(' ,');
            const results = await storeApi.query(`key in (${storeKeys})`);
            if (results.length) {
                distributionChannels = await getParentDistChannels(results);
                supplyChannels = await getParentSupplyChannels(results);
            }
        }
    }
    else {
        supplyChannels.push({
            key: DEFAULT_CHANNEL_KEY,
            typeId: 'channel',
        });
        distributionChannels.push({
            key: DEFAULT_CHANNEL_KEY,
            typeId: 'channel',
        });
    }
    const account = {
        key: `store_${parentBusinessUnit ? `${parentBusinessUnit}_` : ''}${key}`,
        name: storeBody.account.company,
        distributionChannels,
        supplyChannels,
    };
    return account;
}

// CONCATENATED MODULE: ./commerce-commercetools/apis/CustomerApi.ts

class CustomerApi_CustomerApi extends BaseApi_BaseApi {
    constructor() {
        super(...arguments);
        this.get = async (email) => {
            const { body: { results }, } = await this.getApiForProject()
                .customers()
                .get({
                queryArgs: {
                    where: `email="${email}"`,
                    limit: 1,
                },
            })
                .execute();
            return results.length ? results[0] : null;
        };
        this.getCustomerById = async (id) => {
            const { body } = await this.getApiForProject().customers().withId({ ID: id }).get().execute();
            return body;
        };
    }
}

// CONCATENATED MODULE: ./commerce-commercetools/actionControllers/BusinessUnitController.ts






const getMe = async (request, actionContext) => {
    var _a, _b, _c, _d, _e;
    let organization = (_a = request.sessionData) === null || _a === void 0 ? void 0 : _a.organization;
    let businessUnit = organization === null || organization === void 0 ? void 0 : organization.businessUnit;
    if (((_c = (_b = request.sessionData) === null || _b === void 0 ? void 0 : _b.account) === null || _c === void 0 ? void 0 : _c.accountId) && !businessUnit) {
        const businessUnitApi = new BusinessUnitApi_BusinessUnitApi(actionContext.frontasticContext, getLocale(request));
        businessUnit = await businessUnitApi.getMe((_e = (_d = request.sessionData) === null || _d === void 0 ? void 0 : _d.account) === null || _e === void 0 ? void 0 : _e.accountId);
        if (businessUnit) {
            organization = await businessUnitApi.getOrganizationByBusinessUnit(businessUnit);
        }
    }
    return {
        statusCode: 200,
        body: JSON.stringify(businessUnit),
    };
};
const BusinessUnitController_setMe = async (request, actionContext) => {
    var _a, _b;
    const businessUnitApi = new BusinessUnitApi_BusinessUnitApi(actionContext.frontasticContext, getLocale(request));
    const data = JSON.parse(request.body);
    const businessUnit = await businessUnitApi.get(data.key, (_b = (_a = request.sessionData) === null || _a === void 0 ? void 0 : _a.account) === null || _b === void 0 ? void 0 : _b.accountId);
    const organization = await businessUnitApi.getOrganizationByBusinessUnit(businessUnit);
    const response = {
        statusCode: 200,
        body: JSON.stringify(businessUnit),
        sessionData: {
            ...request.sessionData,
            organization,
        },
    };
    return response;
};
const getMyOrganization = async (request, actionContext) => {
    var _a, _b;
    const businessUnitApi = new BusinessUnitApi_BusinessUnitApi(actionContext.frontasticContext, getLocale(request));
    const allOrganization = await businessUnitApi.getTree((_b = (_a = request.sessionData) === null || _a === void 0 ? void 0 : _a.account) === null || _b === void 0 ? void 0 : _b.accountId);
    const response = {
        statusCode: 200,
        body: JSON.stringify(allOrganization),
        sessionData: request.sessionData,
    };
    return response;
};
const getBusinessUnitOrders = async (request, actionContext) => {
    var _a;
    const cartApi = new CartApi_CartApi(actionContext.frontasticContext, getLocale(request));
    const keys = (_a = request === null || request === void 0 ? void 0 : request.query) === null || _a === void 0 ? void 0 : _a['keys'];
    if (!keys) {
        throw new Error('No keys');
    }
    const orders = await cartApi.getBusinessUnitOrders(keys);
    const response = {
        statusCode: 200,
        body: JSON.stringify(orders),
        sessionData: request.sessionData,
    };
    return response;
};
const BusinessUnitController_create = async (request, actionContext) => {
    const businessUnitApi = new BusinessUnitApi_BusinessUnitApi(actionContext.frontasticContext, getLocale(request));
    const data = mapRequestToBusinessUnit(request);
    const store = await businessUnitApi.create(data);
    const response = {
        statusCode: 200,
        body: JSON.stringify(store),
        sessionData: request.sessionData,
    };
    return response;
};
const addAssociate = async (request, actionContext) => {
    const businessUnitApi = new BusinessUnitApi_BusinessUnitApi(actionContext.frontasticContext, getLocale(request));
    const customerApi = new CustomerApi_CustomerApi(actionContext.frontasticContext, getLocale(request));
    const addUserBody = JSON.parse(request.body);
    const account = await customerApi.get(addUserBody.email);
    if (!account) {
        return {
            statusCode: 400,
            body: JSON.stringify({ error: 'User not found' }),
            sessionData: request.sessionData,
        };
    }
    const businessUnit = await businessUnitApi.update(request.query['key'], [
        {
            action: 'addAssociate',
            associate: {
                customer: {
                    typeId: 'customer',
                    id: account.id,
                },
                roles: addUserBody.roles,
            },
        },
    ]);
    const response = {
        statusCode: 200,
        body: JSON.stringify(businessUnit),
        sessionData: request.sessionData,
    };
    return response;
};
const removeAssociate = async (request, actionContext) => {
    const businessUnitApi = new BusinessUnitApi_BusinessUnitApi(actionContext.frontasticContext, getLocale(request));
    const { id } = JSON.parse(request.body);
    const businessUnit = await businessUnitApi.update(request.query['key'], [
        {
            action: 'removeAssociate',
            customer: {
                typeId: 'customer',
                id,
            },
        },
    ]);
    const response = {
        statusCode: 200,
        body: JSON.stringify(businessUnit),
        sessionData: request.sessionData,
    };
    return response;
};
const updateAssociate = async (request, actionContext) => {
    const businessUnitApi = new BusinessUnitApi_BusinessUnitApi(actionContext.frontasticContext, getLocale(request));
    const { id, roles } = JSON.parse(request.body);
    const businessUnit = await businessUnitApi.update(request.query['key'], [
        {
            action: 'changeAssociate',
            associate: {
                customer: {
                    typeId: 'customer',
                    id,
                },
                roles: roles,
            },
        },
    ]);
    const response = {
        statusCode: 200,
        body: JSON.stringify(businessUnit),
        sessionData: request.sessionData,
    };
    return response;
};
const BusinessUnitController_update = async (request, actionContext) => {
    var _a;
    const businessUnitApi = new BusinessUnitApi_BusinessUnitApi(actionContext.frontasticContext, getLocale(request));
    const { key, actions } = JSON.parse(request.body);
    const businessUnit = await businessUnitApi.update(key, actions);
    const response = {
        statusCode: 200,
        body: JSON.stringify(businessUnit),
        sessionData: {
            ...request.sessionData,
            organization: {
                ...(_a = request.sessionData) === null || _a === void 0 ? void 0 : _a.organization,
                businessUnit,
            },
        },
    };
    return response;
};
const getByKey = async (request, actionContext) => {
    var _a;
    const businessUnitApi = new BusinessUnitApi_BusinessUnitApi(actionContext.frontasticContext, getLocale(request));
    try {
        const businessUnit = await businessUnitApi.getByKey((_a = request.query) === null || _a === void 0 ? void 0 : _a['key']);
        const response = {
            statusCode: 200,
            body: JSON.stringify(businessUnit),
            sessionData: request.sessionData,
        };
        return response;
    }
    catch {
        const response = {
            statusCode: 400,
            error: new Error('Business unit not found'),
            errorCode: 400,
        };
        return response;
    }
};
const remove = async (request, actionContext) => {
    var _a, _b;
    const businessUnitApi = new BusinessUnitApi_BusinessUnitApi(actionContext.frontasticContext, getLocale(request));
    const key = (_a = request.query) === null || _a === void 0 ? void 0 : _a['key'];
    let response;
    try {
        const businessUnit = await businessUnitApi.delete(key);
        response = {
            statusCode: 200,
            body: JSON.stringify(businessUnit),
            sessionData: request.sessionData,
        };
    }
    catch (e) {
        response = {
            statusCode: 400,
            sessionData: request.sessionData,
            error: (_b = e === null || e === void 0 ? void 0 : e.body) === null || _b === void 0 ? void 0 : _b.message,
            errorCode: 500,
        };
    }
    return response;
};
const BusinessUnitController_query = async (request, actionContext) => {
    const businessUnitApi = new BusinessUnitApi_BusinessUnitApi(actionContext.frontasticContext, getLocale(request));
    let where = '';
    if ('where' in request.query) {
        where += [request.query['where']];
    }
    const store = await businessUnitApi.query(where);
    const response = {
        statusCode: 200,
        body: JSON.stringify(store),
        sessionData: request.sessionData,
    };
    return response;
};
function mapRequestToBusinessUnit(request) {
    const businessUnitBody = JSON.parse(request.body);
    const normalizedName = businessUnitBody.account.company.toLowerCase().replace(/ /g, '_');
    const key = businessUnitBody.parentBusinessUnit
        ? `${businessUnitBody.parentBusinessUnit}_div_${normalizedName}`
        : `business_unit_${normalizedName}`;
    let storeMode = StoreMode.Explicit;
    let unitType = BusinessUnitType.Company;
    const stores = [];
    if (businessUnitBody.parentBusinessUnit && !businessUnitBody.store) {
        storeMode = StoreMode.FromParent;
    }
    if (businessUnitBody.parentBusinessUnit) {
        unitType = BusinessUnitType.Division;
    }
    if (businessUnitBody.store) {
        stores.push({
            typeId: 'store',
            id: businessUnitBody.store.id,
        });
    }
    const businessUnit = {
        key,
        name: businessUnitBody.account.company,
        status: BusinessUnitStatus.Active,
        stores,
        storeMode,
        unitType,
        contactEmail: businessUnitBody.account.email,
        associates: [
            {
                roles: [AssociateRole.Admin, AssociateRole.Buyer],
                customer: {
                    id: businessUnitBody.customer.accountId,
                    typeId: 'customer',
                },
            },
        ],
    };
    if (businessUnitBody.parentBusinessUnit) {
        businessUnit.parentUnit = {
            key: businessUnitBody.parentBusinessUnit,
            typeId: 'business-unit',
        };
    }
    return businessUnit;
}

// CONCATENATED MODULE: ./commerce-commercetools/actionControllers/CustomerController.ts


const getById = async (request, actionContext) => {
    const customerApi = new CustomerApi_CustomerApi(actionContext.frontasticContext, getLocale(request));
    const customer = await customerApi.getCustomerById(request.query['id']);
    const response = {
        statusCode: 200,
        body: JSON.stringify(customer),
        sessionData: request.sessionData,
    };
    return response;
};

// CONCATENATED MODULE: ./commerce-commercetools/mappers/QuoteMappers.ts

const mapCommercetoolsQuoteRequest = (results, locale) => {
    return results === null || results === void 0 ? void 0 : results.map((quote) => ({
        ...quote,
        customer: mapCustomerReferences(quote.customer),
        lineItems: mapCommercetoolsLineitems(quote.lineItems, locale),
    }));
};
const mapCommercetoolsQuote = (results, locale) => {
    return results === null || results === void 0 ? void 0 : results.map((quote) => ({
        ...quote,
        customer: mapCustomerReferences(quote.customer),
        lineItems: mapCommercetoolsLineitems(quote.lineItems, locale),
    }));
};
const mapCommercetoolsStagedQuote = (results, locale) => {
    return results.map((stagedQuote) => ({
        ...stagedQuote,
        quotationCart: mapQuotationCartReference(stagedQuote.quotationCart, locale),
    }));
};
const mapCustomerReferences = (customer) => {
    return {
        id: customer.id,
        typeId: 'customer',
        ...customer.obj,
    };
};
const mapQuotationCartReference = (cartReference, locale) => {
    return cartReference.obj ? CartMapper.commercetoolsCartToCart(cartReference.obj, locale) : cartReference;
};
const mapCommercetoolsLineitems = (lineitems, locale) => {
    return CartMapper.commercetoolsLineItemsToLineItems(lineitems, locale);
};

// CONCATENATED MODULE: ./commerce-commercetools/apis/QuoteApi.ts


class QuoteApi_QuoteApi extends BaseApi_BaseApi {
    constructor() {
        super(...arguments);
        this.createQuoteRequest = async (quoteRequest) => {
            try {
                return this.getApiForProject()
                    .quoteRequests()
                    .post({
                    body: {
                        ...quoteRequest,
                    },
                })
                    .execute()
                    .then((response) => {
                    return response.body;
                })
                    .catch((error) => {
                    throw error;
                });
            }
            catch {
                throw '';
            }
        };
        this.getStagedQuote = async (ID) => {
            try {
                return this.getApiForProject()
                    .stagedQuotes()
                    .withId({ ID })
                    .get({
                    queryArgs: {
                        expand: 'customer',
                        sort: 'createdAt desc',
                    },
                })
                    .execute()
                    .then((response) => {
                    return response.body;
                })
                    .catch((error) => {
                    throw error;
                });
            }
            catch {
                throw '';
            }
        };
        this.getQuote = async (ID) => {
            try {
                return this.getApiForProject()
                    .quotes()
                    .withId({ ID })
                    .get()
                    .execute()
                    .then((response) => {
                    return response.body;
                })
                    .catch((error) => {
                    throw error;
                });
            }
            catch {
                throw '';
            }
        };
        this.getQuoteRequestsByCustomer = async (customerId) => {
            try {
                const locale = await this.getCommercetoolsLocal();
                return this.getApiForProject()
                    .quoteRequests()
                    .get({
                    queryArgs: {
                        where: `customer(id="${customerId}")`,
                        expand: 'customer',
                        sort: 'createdAt desc',
                        limit: 50,
                    },
                })
                    .execute()
                    .then((response) => {
                    return mapCommercetoolsQuoteRequest(response.body.results, locale);
                })
                    .catch((error) => {
                    throw error;
                });
            }
            catch {
                throw '';
            }
        };
        this.getStagedQuotesByCustomer = async (customerId) => {
            const locale = await this.getCommercetoolsLocal();
            try {
                return this.getApiForProject()
                    .stagedQuotes()
                    .get({
                    queryArgs: {
                        where: `customer(id="${customerId}")`,
                        expand: ['customer', 'quotationCart'],
                        sort: 'createdAt desc',
                        limit: 50,
                    },
                })
                    .execute()
                    .then((response) => {
                    return mapCommercetoolsStagedQuote(response.body.results, locale);
                })
                    .catch((error) => {
                    throw error;
                });
            }
            catch {
                throw '';
            }
        };
        this.getQuotesByCustomer = async (customerId) => {
            const locale = await this.getCommercetoolsLocal();
            try {
                return this.getApiForProject()
                    .quotes()
                    .get({
                    queryArgs: {
                        where: `customer(id="${customerId}")`,
                        expand: 'customer',
                        sort: 'createdAt desc',
                        limit: 50,
                    },
                })
                    .execute()
                    .then((response) => {
                    return mapCommercetoolsQuote(response.body.results, locale);
                })
                    .catch((error) => {
                    throw error;
                });
            }
            catch {
                throw '';
            }
        };
        this.getQuoteRequestsByBusinessUnit = async (businessUnitKeys) => {
            const locale = await this.getCommercetoolsLocal();
            try {
                return this.getApiForProject()
                    .quoteRequests()
                    .get({
                    queryArgs: {
                        where: `businessUnit(key in (${businessUnitKeys}))`,
                        expand: 'customer',
                        sort: 'createdAt desc',
                        limit: 50,
                    },
                })
                    .execute()
                    .then((response) => {
                    return mapCommercetoolsQuoteRequest(response.body.results, locale);
                })
                    .catch((error) => {
                    throw error;
                });
            }
            catch {
                throw '';
            }
        };
        this.getStagedQuotesByBusinessUnit = async (businessUnitKeys) => {
            const locale = await this.getCommercetoolsLocal();
            try {
                return this.getApiForProject()
                    .stagedQuotes()
                    .get({
                    queryArgs: {
                        where: `businessUnit(key in (${businessUnitKeys}))`,
                        expand: ['customer', 'quotationCart'],
                        sort: 'createdAt desc',
                        limit: 50,
                    },
                })
                    .execute()
                    .then((response) => {
                    return mapCommercetoolsStagedQuote(response.body.results, locale);
                })
                    .catch((error) => {
                    throw error;
                });
            }
            catch {
                throw '';
            }
        };
        this.getQuotesByBusinessUnit = async (businessUnitKeys) => {
            const locale = await this.getCommercetoolsLocal();
            try {
                return this.getApiForProject()
                    .quotes()
                    .get({
                    queryArgs: {
                        where: `businessUnit(key in (${businessUnitKeys}))`,
                        expand: 'customer',
                        sort: 'createdAt desc',
                        limit: 50,
                    },
                })
                    .execute()
                    .then((response) => {
                    return mapCommercetoolsQuote(response.body.results, locale);
                })
                    .catch((error) => {
                    throw error;
                });
            }
            catch {
                throw '';
            }
        };
        this.updateQuoteState = async (ID, quoteState) => {
            try {
                return this.getQuote(ID).then((quote) => {
                    return this.getApiForProject()
                        .quotes()
                        .withId({ ID })
                        .post({
                        body: {
                            actions: [
                                {
                                    action: 'changeQuoteState',
                                    quoteState: quoteState,
                                },
                            ],
                            version: quote.version,
                        },
                    })
                        .execute()
                        .then((response) => {
                        return response.body;
                    })
                        .catch((error) => {
                        throw error;
                    });
                });
            }
            catch {
                throw '';
            }
        };
    }
}

// CONCATENATED MODULE: ./commerce-commercetools/actionControllers/QuoteController.ts



const mergeQuotesOverview = (quoteRequests, stagedQuotes, quotes) => {
    return quoteRequests === null || quoteRequests === void 0 ? void 0 : quoteRequests.map((quoteRequest) => {
        const stagedQuote = stagedQuotes === null || stagedQuotes === void 0 ? void 0 : stagedQuotes.find((stagedQuote) => stagedQuote.quoteRequest.id === quoteRequest.id);
        if (stagedQuote) {
            quoteRequest.staged = stagedQuote;
            quoteRequest.quoteRequestState = stagedQuote.stagedQuoteState;
        }
        const quote = quotes === null || quotes === void 0 ? void 0 : quotes.find((quote) => quote.quoteRequest.id === quoteRequest.id);
        if (quote) {
            quoteRequest.quoted = quote;
            quoteRequest.quoteRequestState = quote.quoteState;
        }
        return quoteRequest;
    });
};
const createQuoteRequest = async (request, actionContext) => {
    var _a;
    const quoteApi = new QuoteApi_QuoteApi(actionContext.frontasticContext, getLocale(request));
    const cartApi = new CartApi_CartApi(actionContext.frontasticContext, getLocale(request));
    const quoteBody = JSON.parse(request.body);
    const cartId = (_a = request.sessionData) === null || _a === void 0 ? void 0 : _a.cartId;
    if (!cartId) {
        throw new Error('No active cart');
    }
    const cart = await cartApi.getById(cartId);
    const cartVersion = parseInt(cart.cartVersion, 10);
    const quoteRequest = await quoteApi.createQuoteRequest({
        cart: {
            typeId: 'cart',
            id: cartId,
        },
        cartVersion,
        comment: quoteBody.comment,
    });
    await cartApi.deleteCart(cartId, cartVersion);
    const response = {
        statusCode: 200,
        body: JSON.stringify(quoteRequest),
        sessionData: {
            ...request.sessionData,
            cartId: undefined,
        },
    };
    return response;
};
const getMyQuoteRequests = async (request, actionContext) => {
    var _a, _b;
    const quoteApi = new QuoteApi_QuoteApi(actionContext.frontasticContext, getLocale(request));
    const accountId = (_b = (_a = request.sessionData) === null || _a === void 0 ? void 0 : _a.account) === null || _b === void 0 ? void 0 : _b.accountId;
    if (!accountId) {
        throw new Error('No active user');
    }
    const quoteRequests = await quoteApi.getQuoteRequestsByCustomer(accountId);
    const response = {
        statusCode: 200,
        body: JSON.stringify(quoteRequests),
        sessionData: request.sessionData,
    };
    return response;
};
const getMyQuotesOverview = async (request, actionContext) => {
    var _a, _b;
    const quoteApi = new QuoteApi_QuoteApi(actionContext.frontasticContext, getLocale(request));
    const accountId = (_b = (_a = request.sessionData) === null || _a === void 0 ? void 0 : _a.account) === null || _b === void 0 ? void 0 : _b.accountId;
    if (!accountId) {
        throw new Error('No active user');
    }
    const quoteRequests = await quoteApi.getQuoteRequestsByCustomer(accountId);
    const stagedQuotes = await quoteApi.getStagedQuotesByCustomer(accountId);
    const quotes = await quoteApi.getQuotesByCustomer(accountId);
    const res = mergeQuotesOverview(quoteRequests, stagedQuotes, quotes);
    const response = {
        statusCode: 200,
        body: JSON.stringify(res),
        sessionData: request.sessionData,
    };
    return response;
};
const getBusinessUnitQuotesOverview = async (request, actionContext) => {
    const quoteApi = new QuoteApi_QuoteApi(actionContext.frontasticContext, getLocale(request));
    const keys = request.query['keys'];
    if (!keys) {
        throw new Error('No business unit');
    }
    const quoteRequests = await quoteApi.getQuoteRequestsByBusinessUnit(keys);
    const stagedQuotes = await quoteApi.getStagedQuotesByBusinessUnit(keys);
    const quotes = await quoteApi.getQuotesByBusinessUnit(keys);
    const res = mergeQuotesOverview(quoteRequests, stagedQuotes, quotes);
    const response = {
        statusCode: 200,
        body: JSON.stringify(res),
        sessionData: request.sessionData,
    };
    return response;
};
const updateQuoteState = async (request, actionContext) => {
    var _a;
    const quoteApi = new QuoteApi_QuoteApi(actionContext.frontasticContext, getLocale(request));
    const ID = (_a = request.query) === null || _a === void 0 ? void 0 : _a['id'];
    const { state } = JSON.parse(request.body);
    const quote = await quoteApi.updateQuoteState(ID, state);
    const sessionData = { ...request.sessionData };
    if (state === 'Accepted') {
        const cartApi = new CartApi_CartApi(actionContext.frontasticContext, getLocale(request));
        const stagedQuote = await quoteApi.getStagedQuote(quote.stagedQuote.id);
        let cart = await cartApi.getById(stagedQuote.quotationCart.id);
        cart = await cartApi.setEmail(cart, stagedQuote.customer.obj.email);
        cart = await cartApi.setLocale(cart, 'en-US');
        const commercetoolsCart = await cartApi.setCustomerId(cart, stagedQuote.customer.obj.id);
        sessionData.cartId = commercetoolsCart.cartId;
    }
    const response = {
        statusCode: 200,
        body: JSON.stringify(quote),
        sessionData,
    };
    return response;
};

// CONCATENATED MODULE: ./commerce-commercetools/apis/DashboardApi.ts

class DashboardApi_DashboardApi extends BaseApi_BaseApi {
    constructor() {
        super(...arguments);
        this.create = async (dashboard) => {
            try {
                return this.getApiForProject()
                    .customObjects()
                    .post({
                    body: dashboard,
                })
                    .execute()
                    .then((response) => {
                    return response.body;
                })
                    .catch((error) => {
                    throw error;
                });
            }
            catch {
                throw '';
            }
        };
        this.get = async (key, container) => {
            try {
                return this.getApiForProject()
                    .customObjects()
                    .withContainerAndKey({ container, key })
                    .get()
                    .execute()
                    .then((response) => {
                    return response.body;
                })
                    .catch((error) => {
                    throw error;
                });
            }
            catch {
                throw '';
            }
        };
    }
}

// CONCATENATED MODULE: ./commerce-commercetools/actionControllers/DashboardController.ts


const DASHBOARD_CONTAINER = 'dashboard-container';
const DASHBOARD_KEY_POSTFIX = 'dashboard';
const getDashboardKey = (accountId) => {
    return `${accountId}__${DASHBOARD_KEY_POSTFIX}`;
};
const getMyDashboard = async (request, actionContext) => {
    var _a, _b;
    const dashboardApi = new DashboardApi_DashboardApi(actionContext.frontasticContext, getLocale(request));
    const accountId = (_b = (_a = request.sessionData) === null || _a === void 0 ? void 0 : _a.account) === null || _b === void 0 ? void 0 : _b.accountId;
    if (!accountId) {
        throw new Error('Not logged in');
    }
    let dashboard = null;
    try {
        dashboard = await dashboardApi.get(getDashboardKey(accountId), DASHBOARD_CONTAINER);
    }
    catch (e) {
        dashboard = await dashboardApi.create({
            container: DASHBOARD_CONTAINER,
            key: getDashboardKey(accountId),
            value: {
                customer: {
                    id: accountId,
                    typeId: 'customer',
                },
                widgets: [
                    {
                        id: 'OrderList',
                        layout: {
                            i: 'OrderList',
                            x: 0,
                            y: 2,
                            w: 12,
                            h: 3,
                            isDraggable: undefined,
                        },
                    },
                    {
                        id: 'OrderStatus',
                        layout: {
                            i: 'OrderStatus',
                            x: 0,
                            y: 0,
                            w: 5,
                            h: 2,
                            isDraggable: undefined,
                        },
                    },
                    {
                        id: 'RecentPurchase',
                        layout: {
                            i: 'RecentPurchase',
                            x: 6,
                            y: 0,
                            w: 6,
                            h: 2,
                            isDraggable: undefined,
                        },
                    },
                ],
            },
        });
    }
    const response = {
        statusCode: 200,
        body: JSON.stringify(dashboard),
        sessionData: request.sessionData,
    };
    return response;
};
const updateDashboard = async (request, actionContext) => {
    var _a, _b;
    const dashboardApi = new DashboardApi_DashboardApi(actionContext.frontasticContext, getLocale(request));
    const { widgets } = JSON.parse(request === null || request === void 0 ? void 0 : request.body);
    const accountId = (_b = (_a = request.sessionData) === null || _a === void 0 ? void 0 : _a.account) === null || _b === void 0 ? void 0 : _b.accountId;
    if (!accountId) {
        throw new Error('Not logged in');
    }
    let dashboard = await dashboardApi.get(getDashboardKey(accountId), DASHBOARD_CONTAINER);
    if (dashboard) {
        dashboard = await dashboardApi.create({
            version: dashboard.version,
            container: DASHBOARD_CONTAINER,
            key: getDashboardKey(accountId),
            value: {
                customer: {
                    id: accountId,
                    typeId: 'customer',
                },
                widgets,
            },
        });
    }
    else {
        throw new Error('dashboard does not exist');
    }
    const response = {
        statusCode: 200,
        sessionData: request.sessionData,
    };
    return response;
};

// CONCATENATED MODULE: ./commerce-commercetools/actionControllers/index.ts










const actionControllers_actions = {
    account: AccountController_namespaceObject,
    cart: CartController_namespaceObject,
    customer: CustomerController_namespaceObject,
    product: ProductController_namespaceObject,
    wishlist: WishlistController_namespaceObject,
    project: ProjectController_namespaceObject,
    store: StoreController_namespaceObject,
    quote: QuoteController_namespaceObject,
    'business-unit': BusinessUnitController_namespaceObject,
    dashboard: DashboardController_namespaceObject,
};

// CONCATENATED MODULE: ./commerce-commercetools/index.ts







/* harmony default export */ var commerce_commercetools = ({
    'dynamic-page-handler': async (request, context) => {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        const staticPageMatch = (_a = getPath(request)) === null || _a === void 0 ? void 0 : _a.match(/^\/(cart|checkout|wishlist|account|login|register|reset-password|thank-you)/);
        if (staticPageMatch) {
            return {
                dynamicPageType: `frontastic${staticPageMatch[0]}`,
                dataSourcePayload: {},
                pageMatchingPayload: {},
            };
        }
        const b2bPageMatch = (_b = getPath(request)) === null || _b === void 0 ? void 0 : _b.match(/^\/(business-unit|dashboard)/);
        if (b2bPageMatch) {
            let organization = (_c = request.sessionData) === null || _c === void 0 ? void 0 : _c.organization;
            if (!organization.businessUnit && ((_e = (_d = request.sessionData) === null || _d === void 0 ? void 0 : _d.account) === null || _e === void 0 ? void 0 : _e.accountId)) {
                const businessUnitApi = new BusinessUnitApi_BusinessUnitApi(context.frontasticContext, getLocale(request));
                organization = await businessUnitApi.getOrganization(request.sessionData.account.accountId);
            }
            return {
                dynamicPageType: `b2b${b2bPageMatch[0]}`,
                dataSourcePayload: {
                    organization: (_f = request.sessionData) === null || _f === void 0 ? void 0 : _f.organization,
                },
                pageMatchingPayload: {
                    organization: (_g = request.sessionData) === null || _g === void 0 ? void 0 : _g.organization,
                },
            };
        }
        const quotePageMatch = (_h = getPath(request)) === null || _h === void 0 ? void 0 : _h.match(/^\/(quote-thank-you)/);
        if (quotePageMatch) {
            return {
                dynamicPageType: `b2b${quotePageMatch[0]}`,
                dataSourcePayload: {},
                pageMatchingPayload: {},
            };
        }
        if (ProductRouter_ProductRouter.identifyPreviewFrom(request)) {
            return ProductRouter_ProductRouter.loadPreviewFor(request, context.frontasticContext).then((product) => {
                if (product) {
                    return {
                        dynamicPageType: 'frontastic/product-detail-page',
                        dataSourcePayload: {
                            product: product,
                            isPreview: true,
                        },
                        pageMatchingPayload: {
                            product: product,
                            isPreview: true,
                        },
                    };
                }
                return null;
            });
        }
        if (ProductRouter_ProductRouter.identifyFrom(request)) {
            return ProductRouter_ProductRouter.loadFor(request, context.frontasticContext).then((product) => {
                if (product) {
                    return {
                        dynamicPageType: 'frontastic/product-detail-page',
                        dataSourcePayload: {
                            product: product,
                        },
                        pageMatchingPayload: {
                            product: product,
                        },
                    };
                }
                return null;
            });
        }
        if (SearchRouter_SearchRouter.identifyFrom(request)) {
            return SearchRouter_SearchRouter.loadFor(request, context.frontasticContext).then((result) => {
                if (result) {
                    return {
                        dynamicPageType: 'frontastic/search',
                        dataSourcePayload: {
                            totalItems: result.total,
                            ...result,
                        },
                        pageMatchingPayload: {
                            query: result.query,
                        },
                    };
                }
                return null;
            });
        }
        if (CategoryRouter_CategoryRouter.identifyPreviewFrom(request)) {
            return CategoryRouter_CategoryRouter.loadPreviewFor(request, context.frontasticContext).then((result) => {
                if (result) {
                    return {
                        dynamicPageType: 'frontastic/category',
                        dataSourcePayload: {
                            totalItems: result.total,
                            items: result.items,
                            facets: result.facets,
                            previousCursor: result.previousCursor,
                            nextCursor: result.nextCursor,
                            category: getPath(request),
                            isPreview: true,
                        },
                        pageMatchingPayload: {
                            totalItems: result.total,
                            items: result.items,
                            facets: result.facets,
                            previousCursor: result.previousCursor,
                            nextCursor: result.nextCursor,
                            category: getPath(request),
                            isPreview: true,
                        },
                    };
                }
                return null;
            });
        }
        if (CategoryRouter_CategoryRouter.identifyFrom(request)) {
            return CategoryRouter_CategoryRouter.loadFor(request, context.frontasticContext).then((result) => {
                if (result) {
                    return {
                        dynamicPageType: 'frontastic/category',
                        dataSourcePayload: {
                            totalItems: result.total,
                            items: result.items,
                            facets: result.facets,
                            previousCursor: result.previousCursor,
                            nextCursor: result.nextCursor,
                            category: getPath(request),
                        },
                        pageMatchingPayload: {
                            totalItems: result.total,
                            items: result.items,
                            facets: result.facets,
                            previousCursor: result.previousCursor,
                            nextCursor: result.nextCursor,
                            category: getPath(request),
                        },
                    };
                }
                return null;
            });
        }
        return null;
    },
    'data-sources': dataSources,
    actions: actionControllers_actions,
});

// EXTERNAL MODULE: ./node_modules/axios/index.js
var axios = __webpack_require__(34);
var axios_default = /*#__PURE__*/__webpack_require__.n(axios);

// CONCATENATED MODULE: ./payment-adyen/mappers/AdyenMapper.ts
class AdyenMapper {
    static adyenSessionResponseToSessionResponse(sessionResponse) {
        return sessionResponse;
    }
    static adyenPaymentDetailsToDetails(paymentDetails) {
        return paymentDetails;
    }
}

// CONCATENATED MODULE: ./payment-adyen/BaseApi.ts


class payment_adyen_BaseApi_BaseApi {
    constructor(config) {
        this.instance = axios_default.a.create({
            baseURL: config.baseUrl,
            headers: {
                'x-API-key': config.apiKey,
                'content-type': 'application/json',
            },
        });
        this.instance.interceptors.request.use((req) => {
            req.data = { ...(req.data || {}), merchantAccount: config.merchantAccount };
            return req;
        });
    }
    async createSession(payload) {
        const response = await this.instance.post('/sessions', payload);
        return AdyenMapper.adyenSessionResponseToSessionResponse(response.data);
    }
    async paymentDetails(payload) {
        const response = await this.instance.post('/payments/details', payload);
        return AdyenMapper.adyenPaymentDetailsToDetails(response.data);
    }
}
/* harmony default export */ var payment_adyen_BaseApi = (payment_adyen_BaseApi_BaseApi);

// CONCATENATED MODULE: ./payment-adyen/utils/Guid.ts

class Guid_Guid {
}
Guid_Guid.newGuid = (noHyphens) => {
    let d = new Date().getTime();
    if (typeof performance_now_default.a === 'function') {
        d += performance_now_default()();
    }
    const shellGuid = noHyphens ? 'xxxxxxxxxxxx4xxxyxxxxxxxxxxxxxxx' : 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx';
    return shellGuid.replace(/[xy]/g, function (c) {
        const r = (d + Math.random() * 16) % 16 | 0;
        d = Math.floor(d / 16);
        return (c === 'x' ? r : r & (0x3 | 0x8)).toString(16);
    });
};
Guid_Guid.empty = '00000000-0000-0000-0000-000000000000';

// CONCATENATED MODULE: ./payment-adyen/utils/Request.ts
const Request_getPath = (request) => {
    var _a;
    return (_a = Request_getHeader(request, 'frontastic-path')) !== null && _a !== void 0 ? _a : request.query.path;
};
const Request_getLocale = (request) => {
    var _a, _b;
    const locale = (_a = Request_getHeader(request, 'frontastic-locale')) !== null && _a !== void 0 ? _a : request.query.locale;
    if (locale !== undefined) {
        return (_b = Request_getHeader(request, 'frontastic-locale')) !== null && _b !== void 0 ? _b : request.query.locale;
    }
    throw new Error(`Locale is missing from request ${request}`);
};
const Request_getHeader = (request, header) => {
    if (header in request.headers) {
        const foundHeader = request.headers[header];
        if (Array.isArray(foundHeader)) {
            return foundHeader[0];
        }
        return foundHeader;
    }
    return null;
};

// EXTERNAL MODULE: external "url"
var external_url_ = __webpack_require__(5);

// CONCATENATED MODULE: ./payment-adyen/actionControllers/AdyenController.ts








const createSession = async (request, actionContext) => {
    var _a, _b;
    const adyenApi = new payment_adyen_BaseApi(actionContext.frontasticContext.project.configuration.payment.adyen);
    const account = ((_b = (_a = request.sessionData) === null || _a === void 0 ? void 0 : _a.account) !== null && _b !== void 0 ? _b : {});
    const sessionDTO = JSON.parse(request.body);
    const sessionPayload = {
        reference: request.sessionData.cartId,
        shopperEmail: account.email,
        shopperLocale: Request_getLocale(request),
        shopperReference: account.accountId,
        ...sessionDTO,
    };
    const data = await adyenApi.createSession(sessionPayload);
    const response = {
        statusCode: 200,
        body: JSON.stringify(data),
        sessionData: request.sessionData,
    };
    return response;
};
const createPayment = async (request, actionContext, data) => {
    const cartApi = new CartApi_CartApi(actionContext.frontasticContext, Request_getLocale(request));
    const emailApi = new EmailApi_EmailApi(actionContext.frontasticContext.project.configuration.smtp);
    let cart = await cartApi.getById(data.merchantReference);
    if (isReadyForCheckout(cart)) {
        const payment = {
            id: Guid_Guid.newGuid(),
            paymentId: data.merchantReference,
            paymentMethod: 'method',
            paymentStatus: PaymentStatuses.PENDING,
            paymentProvider: data.pspReference,
            amountPlanned: {
                centAmount: cart.sum.centAmount,
                currencyCode: cart.sum.currencyCode,
            },
        };
        cart = await cartApi.addPayment(cart, payment);
        cart = await cartApi.order(cart);
        await emailApi.sendPaymentConfirmationEmail(cart.email);
    }
};
const AdyenController_checkout = async (request, actionContext) => {
    const adyenApi = new payment_adyen_BaseApi(actionContext.frontasticContext.project.configuration.payment.adyen);
    const payload = {
        details: {
            redirectResult: JSON.parse(request.body).redirectResult,
        },
    };
    const data = await adyenApi.paymentDetails(payload);
    const response = {
        statusCode: 200,
        body: JSON.stringify(data),
        sessionData: request.sessionData,
    };
    return response;
};
const notifications = async (request, actionContext) => {
    console.log('NOTIFICATIONS INCOMMING');
    const params = new external_url_["URLSearchParams"](request.body);
    console.log('eventCode: ', params.get('eventCode'));
    console.log('pspReference: ', params.get('pspReference'));
    console.log('merchantReference: ', params.get('merchantReference'));
    if (params.get('eventCode') === 'AUTHORISATION') {
    }
    const response = {
        statusCode: 200,
        body: '[accepted]',
        sessionData: request.sessionData,
    };
    return response;
};

// CONCATENATED MODULE: ./payment-adyen/index.ts

/* harmony default export */ var payment_adyen = ({
    actions: {
        adyen: AdyenController_namespaceObject,
    },
});

// EXTERNAL MODULE: ./node_modules/contentful/dist/es-modules/contentful.js
var contentful = __webpack_require__(66);

// CONCATENATED MODULE: ./content-contentful/mappers/ContentfulMapper.ts
class ContentfulMapper {
    static contentfulEntriesToFrontasticEntries(entries) {
        return entries;
    }
    static contentfulEntryToFrontasticEntry(entry) {
        return entry;
    }
}

// CONCATENATED MODULE: ./content-contentful/apis/BaseApi.ts


class apis_BaseApi_BaseApi {
    constructor(params, locale) {
        this.client = Object(contentful["createClient"])(params);
        this.locale = this.mapLocale(locale);
    }
    mapLocale(locale) {
        var _a;
        return (_a = { en: 'en-US' }[locale !== null && locale !== void 0 ? locale : '']) !== null && _a !== void 0 ? _a : 'en-US';
    }
    async getEntries() {
        const data = await this.client.getEntries({ locale: this.locale });
        return ContentfulMapper.contentfulEntriesToFrontasticEntries(data);
    }
    async getEntry(id) {
        const data = await this.client.getEntry(id, { locale: this.locale });
        return ContentfulMapper.contentfulEntryToFrontasticEntry(data);
    }
}

// CONCATENATED MODULE: ./content-contentful/utils/Request.ts
const utils_Request_getPath = (request) => {
    var _a;
    return (_a = utils_Request_getHeader(request, 'frontastic-path')) !== null && _a !== void 0 ? _a : request.query.path;
};
const utils_Request_getLocale = (request) => {
    var _a, _b;
    if (!request)
        return '';
    const locale = (_a = utils_Request_getHeader(request, 'frontastic-locale')) !== null && _a !== void 0 ? _a : request.query.locale;
    if (locale !== undefined) {
        return (_b = utils_Request_getHeader(request, 'frontastic-locale')) !== null && _b !== void 0 ? _b : request.query.locale;
    }
    throw new Error(`Locale is missing from request ${request}`);
};
const utils_Request_getHeader = (request, header) => {
    if (request.headers && header in request.headers) {
        const foundHeader = request.headers[header];
        if (Array.isArray(foundHeader)) {
            return foundHeader[0];
        }
        return foundHeader;
    }
    return null;
};

// CONCATENATED MODULE: ./content-contentful/actionControllers/ContenfulController.ts


const getEntries = async (request, actionContext) => {
    var _a;
    const config = (_a = actionContext.frontasticContext) === null || _a === void 0 ? void 0 : _a.project.configuration.contentful;
    const api = new apis_BaseApi_BaseApi({ space: config.spaceId, accessToken: config.accessToken }, utils_Request_getLocale(request));
    const data = await api.getEntries();
    const response = {
        statusCode: 200,
        body: JSON.stringify(data),
        sessionData: request.sessionData,
    };
    return response;
};
const getEntry = async (request, actionContext) => {
    var _a;
    const config = (_a = actionContext.frontasticContext) === null || _a === void 0 ? void 0 : _a.project.configuration.contentful;
    const api = new apis_BaseApi_BaseApi({ space: config.spaceId, accessToken: config.accessToken }, utils_Request_getLocale(request));
    const data = await api.getEntry(request.query.id);
    const response = {
        statusCode: 200,
        body: JSON.stringify(data),
        sessionData: request.sessionData,
    };
    return response;
};

// CONCATENATED MODULE: ./content-contentful/index.ts



/* harmony default export */ var content_contentful = ({
    'data-sources': {
        'contentful/entries': async (config, context) => {
            var _a;
            const clientConfig = (_a = context.frontasticContext) === null || _a === void 0 ? void 0 : _a.project.configuration.contentful;
            const contentfulApi = new apis_BaseApi_BaseApi({ space: clientConfig.spaceId, accessToken: clientConfig.accessToken }, utils_Request_getLocale(context.request));
            return {
                dataSourcePayload: await contentfulApi.getEntries(),
            };
        },
        'contentful/entry': async (config, context) => {
            var _a;
            const clientConfig = (_a = context.frontasticContext) === null || _a === void 0 ? void 0 : _a.project.configuration.contentful;
            const contentfulApi = new apis_BaseApi_BaseApi({ space: clientConfig.spaceId, accessToken: clientConfig.accessToken }, utils_Request_getLocale(context.request));
            return {
                dataSourcePayload: await contentfulApi.getEntry(config.configuration.entryId),
            };
        },
    },
    actions: {
        contentful: ContenfulController_namespaceObject,
    },
});

// CONCATENATED MODULE: ./index.ts



const extensionsToMerge = [commerce_commercetools, payment_adyen, content_contentful];
const mergeActions = (extensions) => {
    const actionNamespaces = {};
    for (const extension of extensions) {
        for (const actionNamespace in extension['actions'] || {}) {
            if (!actionNamespaces[actionNamespace]) {
                actionNamespaces[actionNamespace] = {};
            }
            actionNamespaces[actionNamespace] = Object.assign({}, actionNamespaces[actionNamespace], extension['actions'][actionNamespace]);
        }
    }
    return actionNamespaces;
};
const mergeDynamicPageHandlers = (extensions) => {
    return async (request, dynamicPageContext) => {
        for (const extension of extensions) {
            if (extension['dynamic-page-handler']) {
                const result = await extension['dynamic-page-handler'](request, dynamicPageContext);
                if (result !== null) {
                    return result;
                }
            }
        }
        return null;
    };
};
/* harmony default export */ var index = __webpack_exports__["default"] = ({
    'dynamic-page-handler': mergeDynamicPageHandlers(extensionsToMerge),
    'data-sources': extensionsToMerge.map((extension) => extension['data-sources'] || {}).reduce(Object.assign, {}),
    actions: mergeActions(extensionsToMerge),
});


/***/ })
/******/ ]);
});
//# sourceMappingURL=bundle.min.js.map